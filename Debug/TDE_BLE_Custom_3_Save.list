
TDE_BLE_Custom_3_Save.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f228  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fec  0800f368  0800f368  0001f368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011354  08011354  00021354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801135c  0801135c  0002135c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011360  08011360  00021360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000004  08011364  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000a4  08011404  000300a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000054  20000140  0801149d  00030140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000194  080114f1  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  200001a8  08011502  000301a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000530  20000230  0801158a  00030230  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  20000760  0801158a  00030760  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000371b2  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000071a5  00000000  00000000  00067412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003138  00000000  00000000  0006e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002e18  00000000  00000000  000716f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00030c61  00000000  00000000  00074508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00038686  00000000  00000000  000a5169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00106e53  00000000  00000000  000dd7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001e4642  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d760  00000000  00000000  001e4694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000230 	.word	0x20000230
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f350 	.word	0x0800f350

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000234 	.word	0x20000234
 800017c:	0800f350 	.word	0x0800f350

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f00a fbe3 	bl	800ad1c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f009 fe7e 	bl	800a25a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	0800f368 	.word	0x0800f368

0800056c <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	460b      	mov	r3, r1
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800057a:	897a      	ldrh	r2, [r7, #10]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	68f9      	ldr	r1, [r7, #12]
 8000580:	2000      	movs	r0, #0
 8000582:	f001 fb1b 	bl	8001bbc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000586:	bf00      	nop
}
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <LL_EXTI_EnableIT_32_63+0x24>)
 800059a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800059e:	4905      	ldr	r1, [pc, #20]	; (80005b4 <LL_EXTI_EnableIT_32_63+0x24>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	58000800 	.word	0x58000800

080005b8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005c6:	f023 0207 	bic.w	r2, r3, #7
 80005ca:	4905      	ldr	r1, [pc, #20]	; (80005e0 <LL_C2_PWR_SetPowerMode+0x28>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	58000400 	.word	0x58000400

080005e4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	021b      	lsls	r3, r3, #8
 8000606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800060a:	4313      	orrs	r3, r2
 800060c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	cafecafe 	.word	0xcafecafe

08000620 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	608b      	str	r3, [r1, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800067a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800067e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800069c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006a0:	d101      	bne.n	80006a6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80006b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006c6:	d101      	bne.n	80006cc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fc:	68fb      	ldr	r3, [r7, #12]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <LL_DBGMCU_GetRevisionID+0x18>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	0c1b      	lsrs	r3, r3, #16
 8000716:	b29b      	uxth	r3, r3
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e0042000 	.word	0xe0042000

08000728 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	041b      	lsls	r3, r3, #16
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	605a      	str	r2, [r3, #4]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	605a      	str	r2, [r3, #4]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	041b      	lsls	r3, r3, #16
 8000780:	431a      	orrs	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	615a      	str	r2, [r3, #20]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	609a      	str	r2, [r3, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	619a      	str	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	22ff      	movs	r2, #255	; 0xff
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	22ca      	movs	r2, #202	; 0xca
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2253      	movs	r2, #83	; 0x53
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f023 0207 	bic.w	r2, r3, #7
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	431a      	orrs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	609a      	str	r2, [r3, #8]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <MX_APPE_Config+0x18>)
 8000852:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000856:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000858:	f000 f824 	bl	80008a4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800085c:	f000 f864 	bl	8000928 <Config_HSE>

  return;
 8000860:	bf00      	nop
}
 8000862:	bd80      	pop	{r7, pc}
 8000864:	58004000 	.word	0x58004000

08000868 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 800086c:	f000 f870 	bl	8000950 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000870:	f000 f888 	bl	8000984 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000874:	4903      	ldr	r1, [pc, #12]	; (8000884 <MX_APPE_Init+0x1c>)
 8000876:	2000      	movs	r0, #0
 8000878:	f000 ff1e 	bl	80016b8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800087c:	f000 f890 	bl	80009a0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000880:	bf00      	nop
}
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000520 	.word	0x20000520

08000888 <Init_Smps>:

void Init_Smps( void )
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 800088c:	bf00      	nop
}
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <Init_Exti>:

void Init_Exti( void )
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fe78 	bl	8000590 <LL_EXTI_EnableIT_32_63>

  return;
 80008a0:	bf00      	nop
}
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80008a8:	f000 f804 	bl	80008b4 <Reset_BackupDomain>

  Reset_IPCC();
 80008ac:	f000 f81a 	bl	80008e4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80008b0:	bf00      	nop
}
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008b8:	f7ff fee8 	bl	800068c <LL_RCC_IsActiveFlag_PINRST>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00d      	beq.n	80008de <Reset_BackupDomain+0x2a>
 80008c2:	f7ff fef6 	bl	80006b2 <LL_RCC_IsActiveFlag_SFTRST>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d108      	bne.n	80008de <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008cc:	f004 f8e0 	bl	8004a90 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008d0:	f004 f8de 	bl	8004a90 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008d4:	f7ff feb8 	bl	8000648 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008d8:	f7ff fec7 	bl	800066a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
}
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ec:	f7ff fef4 	bl	80006d8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80008f0:	213f      	movs	r1, #63	; 0x3f
 80008f2:	480c      	ldr	r0, [pc, #48]	; (8000924 <Reset_IPCC+0x40>)
 80008f4:	f7ff ff5e 	bl	80007b4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80008f8:	213f      	movs	r1, #63	; 0x3f
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <Reset_IPCC+0x40>)
 80008fc:	f7ff ff68 	bl	80007d0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000900:	213f      	movs	r1, #63	; 0x3f
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <Reset_IPCC+0x40>)
 8000904:	f7ff ff10 	bl	8000728 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000908:	213f      	movs	r1, #63	; 0x3f
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <Reset_IPCC+0x40>)
 800090c:	f7ff ff2f 	bl	800076e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000910:	213f      	movs	r1, #63	; 0x3f
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <Reset_IPCC+0x40>)
 8000914:	f7ff ff1a 	bl	800074c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000918:	213f      	movs	r1, #63	; 0x3f
 800091a:	4802      	ldr	r0, [pc, #8]	; (8000924 <Reset_IPCC+0x40>)
 800091c:	f7ff ff39 	bl	8000792 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000920:	bf00      	nop
}
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58000c00 	.word	0x58000c00

08000928 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800092e:	2000      	movs	r0, #0
 8000930:	f00a fb48 	bl	800afc4 <OTP_Read>
 8000934:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d005      	beq.n	8000948 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	799b      	ldrb	r3, [r3, #6]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fe4f 	bl	80005e4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000946:	bf00      	nop
 8000948:	bf00      	nop
}
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <System_Init>:

static void System_Init( void )
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000954:	f7ff ff98 	bl	8000888 <Init_Smps>

  Init_Exti( );
 8000958:	f7ff ff9d 	bl	8000896 <Init_Exti>

  Init_Rtc( );
 800095c:	f000 f802 	bl	8000964 <Init_Rtc>

  return;
 8000960:	bf00      	nop
}
 8000962:	bd80      	pop	{r7, pc}

08000964 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <Init_Rtc+0x1c>)
 800096a:	f7ff ff4c 	bl	8000806 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800096e:	2100      	movs	r1, #0
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <Init_Rtc+0x1c>)
 8000972:	f7ff ff58 	bl	8000826 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000976:	4802      	ldr	r0, [pc, #8]	; (8000980 <Init_Rtc+0x1c>)
 8000978:	f7ff ff38 	bl	80007ec <LL_RTC_EnableWriteProtection>

  return;
 800097c:	bf00      	nop
}
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40002800 	.word	0x40002800

08000984 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000988:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800098c:	f7ff fe48 	bl	8000620 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000990:	f00d f82c 	bl	800d9ec <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000994:	2004      	movs	r0, #4
 8000996:	f7ff fe0f 	bl	80005b8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800099a:	bf00      	nop
}
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009a6:	f00a f803 	bl	800a9b0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <appe_Tl_Init+0x50>)
 80009ac:	2100      	movs	r1, #0
 80009ae:	2008      	movs	r0, #8
 80009b0:	f00d f948 	bl	800dc44 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <appe_Tl_Init+0x54>)
 80009b6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <appe_Tl_Init+0x58>)
 80009ba:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	480e      	ldr	r0, [pc, #56]	; (80009fc <appe_Tl_Init+0x5c>)
 80009c2:	f009 febb 	bl	800a73c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <appe_Tl_Init+0x60>)
 80009c8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <appe_Tl_Init+0x64>)
 80009cc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <appe_Tl_Init+0x68>)
 80009d0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009d2:	f240 533c 	movw	r3, #1340	; 0x53c
 80009d6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f00a f929 	bl	800ac34 <TL_MM_Init>

  TL_Enable();
 80009e2:	f009 ffdf 	bl	800a9a4 <TL_Enable>

  return;
 80009e6:	bf00      	nop
}
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	0800a775 	.word	0x0800a775
 80009f4:	20030724 	.word	0x20030724
 80009f8:	08000a0d 	.word	0x08000a0d
 80009fc:	08000a25 	.word	0x08000a25
 8000a00:	2003093c 	.word	0x2003093c
 8000a04:	20030830 	.word	0x20030830
 8000a08:	200301e8 	.word	0x200301e8

08000a0c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a16:	bf00      	nop
}
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	330b      	adds	r3, #11
 8000a32:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f009 fc3b 	bl	800a2b4 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000a3e:	485e      	ldr	r0, [pc, #376]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000a40:	f00a f9f8 	bl	800ae34 <DbgTraceGetFileName>
 8000a44:	4601      	mov	r1, r0
 8000a46:	f240 1365 	movw	r3, #357	; 0x165
 8000a4a:	4a5c      	ldr	r2, [pc, #368]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000a4c:	485c      	ldr	r0, [pc, #368]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000a4e:	f00d fb6d 	bl	800e12c <iprintf>
 8000a52:	7b3b      	ldrb	r3, [r7, #12]
 8000a54:	4619      	mov	r1, r3
 8000a56:	7b7b      	ldrb	r3, [r7, #13]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	4859      	ldr	r0, [pc, #356]	; (8000bc4 <APPE_SysUserEvtRx+0x1a0>)
 8000a5e:	f00d fb65 	bl	800e12c <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000a62:	4855      	ldr	r0, [pc, #340]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000a64:	f00a f9e6 	bl	800ae34 <DbgTraceGetFileName>
 8000a68:	4601      	mov	r1, r0
 8000a6a:	f44f 73b3 	mov.w	r3, #358	; 0x166
 8000a6e:	4a53      	ldr	r2, [pc, #332]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000a70:	4853      	ldr	r0, [pc, #332]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000a72:	f00d fb5b 	bl	800e12c <iprintf>
 8000a76:	7c3b      	ldrb	r3, [r7, #16]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4853      	ldr	r0, [pc, #332]	; (8000bc8 <APPE_SysUserEvtRx+0x1a4>)
 8000a7c:	f00d fb56 	bl	800e12c <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000a80:	484d      	ldr	r0, [pc, #308]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000a82:	f00a f9d7 	bl	800ae34 <DbgTraceGetFileName>
 8000a86:	4601      	mov	r1, r0
 8000a88:	f240 1367 	movw	r3, #359	; 0x167
 8000a8c:	4a4b      	ldr	r2, [pc, #300]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000a8e:	484c      	ldr	r0, [pc, #304]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000a90:	f00d fb4c 	bl	800e12c <iprintf>
 8000a94:	7dbb      	ldrb	r3, [r7, #22]
 8000a96:	4619      	mov	r1, r3
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	7e3b      	ldrb	r3, [r7, #24]
 8000a9e:	484b      	ldr	r0, [pc, #300]	; (8000bcc <APPE_SysUserEvtRx+0x1a8>)
 8000aa0:	f00d fb44 	bl	800e12c <iprintf>

  switch(p_sys_event->subevtcode)
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d87c      	bhi.n	8000bac <APPE_SysUserEvtRx+0x188>
 8000ab2:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <APPE_SysUserEvtRx+0x94>)
 8000ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab8:	08000ad9 	.word	0x08000ad9
 8000abc:	08000ae1 	.word	0x08000ae1
 8000ac0:	08000ae9 	.word	0x08000ae9
 8000ac4:	08000bad 	.word	0x08000bad
 8000ac8:	08000b2d 	.word	0x08000b2d
 8000acc:	08000b51 	.word	0x08000b51
 8000ad0:	08000b6d 	.word	0x08000b6d
 8000ad4:	08000b91 	.word	0x08000b91
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f8cf 	bl	8000c7c <APPE_SysEvtReadyProcessing>
    break;
 8000ade:	e066      	b.n	8000bae <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f881 	bl	8000be8 <APPE_SysEvtError>
    break;
 8000ae6:	e062      	b.n	8000bae <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000ae8:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000aea:	f00a f9a3 	bl	800ae34 <DbgTraceGetFileName>
 8000aee:	4601      	mov	r1, r0
 8000af0:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8000af4:	4a31      	ldr	r2, [pc, #196]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000af6:	4832      	ldr	r0, [pc, #200]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000af8:	f00d fb18 	bl	800e12c <iprintf>
 8000afc:	4834      	ldr	r0, [pc, #208]	; (8000bd0 <APPE_SysUserEvtRx+0x1ac>)
 8000afe:	f00d fb9b 	bl	800e238 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000b02:	482d      	ldr	r0, [pc, #180]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000b04:	f00a f996 	bl	800ae34 <DbgTraceGetFileName>
 8000b08:	4601      	mov	r1, r0
 8000b0a:	f240 1375 	movw	r3, #373	; 0x175
 8000b0e:	4a2b      	ldr	r2, [pc, #172]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000b10:	482b      	ldr	r0, [pc, #172]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000b12:	f00d fb0b 	bl	800e12c <iprintf>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3302      	adds	r3, #2
 8000b1a:	6819      	ldr	r1, [r3, #0]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	461a      	mov	r2, r3
 8000b24:	482b      	ldr	r0, [pc, #172]	; (8000bd4 <APPE_SysUserEvtRx+0x1b0>)
 8000b26:	f00d fb01 	bl	800e12c <iprintf>
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8000b2a:	e040      	b.n	8000bae <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000b2c:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000b2e:	f00a f981 	bl	800ae34 <DbgTraceGetFileName>
 8000b32:	4601      	mov	r1, r0
 8000b34:	f240 137b 	movw	r3, #379	; 0x17b
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000b3a:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000b3c:	f00d faf6 	bl	800e12c <iprintf>
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	3302      	adds	r3, #2
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4823      	ldr	r0, [pc, #140]	; (8000bd8 <APPE_SysUserEvtRx+0x1b4>)
 8000b4a:	f00d faef 	bl	800e12c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8000b4e:	e02e      	b.n	8000bae <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000b50:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000b52:	f00a f96f 	bl	800ae34 <DbgTraceGetFileName>
 8000b56:	4601      	mov	r1, r0
 8000b58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000b60:	f00d fae4 	bl	800e12c <iprintf>
 8000b64:	481d      	ldr	r0, [pc, #116]	; (8000bdc <APPE_SysUserEvtRx+0x1b8>)
 8000b66:	f00d fb67 	bl	800e238 <puts>
    break;
 8000b6a:	e020      	b.n	8000bae <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000b6e:	f00a f961 	bl	800ae34 <DbgTraceGetFileName>
 8000b72:	4601      	mov	r1, r0
 8000b74:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000b7a:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000b7c:	f00d fad6 	bl	800e12c <iprintf>
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3302      	adds	r3, #2
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <APPE_SysUserEvtRx+0x1bc>)
 8000b8a:	f00d facf 	bl	800e12c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8000b8e:	e00e      	b.n	8000bae <APPE_SysUserEvtRx+0x18a>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <APPE_SysUserEvtRx+0x194>)
 8000b92:	f00a f94f 	bl	800ae34 <DbgTraceGetFileName>
 8000b96:	4601      	mov	r1, r0
 8000b98:	f240 1389 	movw	r3, #393	; 0x189
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <APPE_SysUserEvtRx+0x198>)
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <APPE_SysUserEvtRx+0x19c>)
 8000ba0:	f00d fac4 	bl	800e12c <iprintf>
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <APPE_SysUserEvtRx+0x1c0>)
 8000ba6:	f00d fb47 	bl	800e238 <puts>
    break;
 8000baa:	e000      	b.n	8000bae <APPE_SysUserEvtRx+0x18a>

  default:
    break;
 8000bac:	bf00      	nop
  }

  return;
 8000bae:	bf00      	nop
}
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	0800f384 	.word	0x0800f384
 8000bbc:	0801104c 	.word	0x0801104c
 8000bc0:	0800f39c 	.word	0x0800f39c
 8000bc4:	0800f3b0 	.word	0x0800f3b0
 8000bc8:	0800f3d4 	.word	0x0800f3d4
 8000bcc:	0800f3f0 	.word	0x0800f3f0
 8000bd0:	0800f408 	.word	0x0800f408
 8000bd4:	0800f434 	.word	0x0800f434
 8000bd8:	0800f478 	.word	0x0800f478
 8000bdc:	0800f4ac 	.word	0x0800f4ac
 8000be0:	0800f4c8 	.word	0x0800f4c8
 8000be4:	0800f500 	.word	0x0800f500

08000be8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	330b      	adds	r3, #11
 8000bf6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000bfe:	4819      	ldr	r0, [pc, #100]	; (8000c64 <APPE_SysEvtError+0x7c>)
 8000c00:	f00a f918 	bl	800ae34 <DbgTraceGetFileName>
 8000c04:	4601      	mov	r1, r0
 8000c06:	f240 13a1 	movw	r3, #417	; 0x1a1
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <APPE_SysEvtError+0x80>)
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <APPE_SysEvtError+0x84>)
 8000c0e:	f00d fa8d 	bl	800e12c <iprintf>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4815      	ldr	r0, [pc, #84]	; (8000c70 <APPE_SysEvtError+0x88>)
 8000c1a:	f00d fa87 	bl	800e12c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10d      	bne.n	8000c42 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <APPE_SysEvtError+0x7c>)
 8000c28:	f00a f904 	bl	800ae34 <DbgTraceGetFileName>
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <APPE_SysEvtError+0x80>)
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <APPE_SysEvtError+0x84>)
 8000c36:	f00d fa79 	bl	800e12c <iprintf>
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <APPE_SysEvtError+0x8c>)
 8000c3c:	f00d fafc 	bl	800e238 <puts>
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000c40:	e00d      	b.n	8000c5e <APPE_SysEvtError+0x76>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000c42:	4808      	ldr	r0, [pc, #32]	; (8000c64 <APPE_SysEvtError+0x7c>)
 8000c44:	f00a f8f6 	bl	800ae34 <DbgTraceGetFileName>
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8000c4e:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <APPE_SysEvtError+0x80>)
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <APPE_SysEvtError+0x84>)
 8000c52:	f00d fa6b 	bl	800e12c <iprintf>
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <APPE_SysEvtError+0x90>)
 8000c58:	f00d faee 	bl	800e238 <puts>
  return;
 8000c5c:	bf00      	nop
}
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	0800f384 	.word	0x0800f384
 8000c68:	08011060 	.word	0x08011060
 8000c6c:	0800f39c 	.word	0x0800f39c
 8000c70:	0800f51c 	.word	0x0800f51c
 8000c74:	0800f548 	.word	0x0800f548
 8000c78:	0800f580 	.word	0x0800f580

08000c7c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	330b      	adds	r3, #11
 8000c9c:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d132      	bne.n	8000d12 <APPE_SysEvtReadyProcessing+0x96>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000cac:	482c      	ldr	r0, [pc, #176]	; (8000d60 <APPE_SysEvtReadyProcessing+0xe4>)
 8000cae:	f00a f8c1 	bl	800ae34 <DbgTraceGetFileName>
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	f240 13bf 	movw	r3, #447	; 0x1bf
 8000cb8:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <APPE_SysEvtReadyProcessing+0xe8>)
 8000cba:	482b      	ldr	r0, [pc, #172]	; (8000d68 <APPE_SysEvtReadyProcessing+0xec>)
 8000cbc:	f00d fa36 	bl	800e12c <iprintf>
 8000cc0:	482a      	ldr	r0, [pc, #168]	; (8000d6c <APPE_SysEvtReadyProcessing+0xf0>)
 8000cc2:	f00d fab9 	bl	800e238 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000cc6:	f7ff fc35 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000cca:	230d      	movs	r3, #13
 8000ccc:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000cce:	237f      	movs	r3, #127	; 0x7f
 8000cd0:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000cd2:	f7ff fd1b 	bl	800070c <LL_DBGMCU_GetRevisionID>
 8000cd6:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <APPE_SysEvtReadyProcessing+0xe4>)
 8000cda:	f00a f8ab 	bl	800ae34 <DbgTraceGetFileName>
 8000cde:	4601      	mov	r1, r0
 8000ce0:	f240 13d7 	movw	r3, #471	; 0x1d7
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <APPE_SysEvtReadyProcessing+0xe8>)
 8000ce6:	4820      	ldr	r0, [pc, #128]	; (8000d68 <APPE_SysEvtReadyProcessing+0xec>)
 8000ce8:	f00d fa20 	bl	800e12c <iprintf>
 8000cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000cee:	4820      	ldr	r0, [pc, #128]	; (8000d70 <APPE_SysEvtReadyProcessing+0xf4>)
 8000cf0:	f00d fa1c 	bl	800e12c <iprintf>

    config_param.RevisionID = RevisionID;
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f009 fac2 	bl	800a288 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000d04:	f00a fe38 	bl	800b978 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f00c fe80 	bl	800da10 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000d10:	e022      	b.n	8000d58 <APPE_SysEvtReadyProcessing+0xdc>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d110      	bne.n	8000d3c <APPE_SysEvtReadyProcessing+0xc0>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <APPE_SysEvtReadyProcessing+0xe4>)
 8000d1c:	f00a f88a 	bl	800ae34 <DbgTraceGetFileName>
 8000d20:	4601      	mov	r1, r0
 8000d22:	f240 13e5 	movw	r3, #485	; 0x1e5
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <APPE_SysEvtReadyProcessing+0xe8>)
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <APPE_SysEvtReadyProcessing+0xec>)
 8000d2a:	f00d f9ff 	bl	800e12c <iprintf>
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <APPE_SysEvtReadyProcessing+0xf8>)
 8000d30:	f00d fa82 	bl	800e238 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
  return;
 8000d3a:	e00d      	b.n	8000d58 <APPE_SysEvtReadyProcessing+0xdc>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <APPE_SysEvtReadyProcessing+0xe4>)
 8000d3e:	f00a f879 	bl	800ae34 <DbgTraceGetFileName>
 8000d42:	4601      	mov	r1, r0
 8000d44:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <APPE_SysEvtReadyProcessing+0xe8>)
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <APPE_SysEvtReadyProcessing+0xec>)
 8000d4c:	f00d f9ee 	bl	800e12c <iprintf>
 8000d50:	4809      	ldr	r0, [pc, #36]	; (8000d78 <APPE_SysEvtReadyProcessing+0xfc>)
 8000d52:	f00d fa71 	bl	800e238 <puts>
  return;
 8000d56:	bf00      	nop
}
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	0800f384 	.word	0x0800f384
 8000d64:	08011074 	.word	0x08011074
 8000d68:	0800f39c 	.word	0x0800f39c
 8000d6c:	0800f5b4 	.word	0x0800f5b4
 8000d70:	0800f5e4 	.word	0x0800f5e4
 8000d74:	0800f604 	.word	0x0800f604
 8000d78:	0800f630 	.word	0x0800f630

08000d7c <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f00c fe74 	bl	800da70 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000d90:	bf00      	nop
}
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f00c fe62 	bl	800da70 <UTIL_SEQ_Run>

  return;
 8000dac:	bf00      	nop
}
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2008      	movs	r0, #8
 8000dc0:	f00c ff62 	bl	800dc88 <UTIL_SEQ_SetTask>
  return;
 8000dc4:	bf00      	nop
}
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f00c ffc3 	bl	800dd60 <UTIL_SEQ_SetEvt>
  return;
 8000dda:	bf00      	nop
}
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000dea:	2002      	movs	r0, #2
 8000dec:	f00c ffd8 	bl	800dda0 <UTIL_SEQ_WaitEvt>
  return;
 8000df0:	bf00      	nop
}
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <compteurBpm>:
int prevNbBat=0;

int compteurBpm(int nbBat){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	int nbBpm = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]

	//if the heart rate increases by 20 beats in 10 minutes then
	//there has been a problem with the ECG recording.
	if ((prevNbBat != 0) && (nbBat*6 > prevNbBat*6 + 20)) {
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <compteurBpm+0x60>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d012      	beq.n	8000e32 <compteurBpm+0x3a>
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4619      	mov	r1, r3
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <compteurBpm+0x60>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	3314      	adds	r3, #20
 8000e26:	4299      	cmp	r1, r3
 8000e28:	dd03      	ble.n	8000e32 <compteurBpm+0x3a>
		printf("Problem during the recording\n");
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <compteurBpm+0x64>)
 8000e2c:	f00d fa04 	bl	800e238 <puts>
	if ((prevNbBat != 0) && (nbBat*6 > prevNbBat*6 + 20)) {
 8000e30:	e002      	b.n	8000e38 <compteurBpm+0x40>
		//We keep the old value
	}
	else {
		prevNbBat = nbBat;
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <compteurBpm+0x60>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6013      	str	r3, [r2, #0]
	}
	nbBpm = prevNbBat*6;//extrapolation of beats/10sec to beats/min
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <compteurBpm+0x60>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
	printf("bpm : %d\n",nbBpm);
 8000e46:	68f9      	ldr	r1, [r7, #12]
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <compteurBpm+0x68>)
 8000e4a:	f00d f96f 	bl	800e12c <iprintf>

	return nbBpm;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000024c 	.word	0x2000024c
 8000e5c:	0800f65c 	.word	0x0800f65c
 8000e60:	0800f67c 	.word	0x0800f67c

08000e64 <LL_EXTI_EnableIT_0_31>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e72:	4905      	ldr	r1, [pc, #20]	; (8000e88 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	58000800 	.word	0x58000800

08000e8c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4904      	ldr	r1, [pc, #16]	; (8000eac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]

}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	58000800 	.word	0x58000800

08000eb0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <ReadRtcSsrValue+0x3c>)
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <ReadRtcSsrValue+0x3c>)
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000ec6:	e005      	b.n	8000ed4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <ReadRtcSsrValue+0x3c>)
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d1f5      	bne.n	8000ec8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000edc:	683b      	ldr	r3, [r7, #0]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40002800 	.word	0x40002800

08000ef0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	491d      	ldr	r1, [pc, #116]	; (8000f78 <LinkTimerAfter+0x88>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3315      	adds	r3, #21
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d009      	beq.n	8000f2e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	4916      	ldr	r1, [pc, #88]	; (8000f78 <LinkTimerAfter+0x88>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	3314      	adds	r3, #20
 8000f2a:	79fa      	ldrb	r2, [r7, #7]
 8000f2c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	4911      	ldr	r1, [pc, #68]	; (8000f78 <LinkTimerAfter+0x88>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3315      	adds	r3, #21
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <LinkTimerAfter+0x88>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3314      	adds	r3, #20
 8000f52:	79ba      	ldrb	r2, [r7, #6]
 8000f54:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f56:	79ba      	ldrb	r2, [r7, #6]
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <LinkTimerAfter+0x88>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	3315      	adds	r3, #21
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	701a      	strb	r2, [r3, #0]

  return;
 8000f6a:	bf00      	nop
}
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200000a4 	.word	0x200000a4

08000f7c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <LinkTimerBefore+0xb8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d032      	beq.n	8000ffe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	4927      	ldr	r1, [pc, #156]	; (8001038 <LinkTimerBefore+0xbc>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	4922      	ldr	r1, [pc, #136]	; (8001038 <LinkTimerBefore+0xbc>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3315      	adds	r3, #21
 8000fbc:	79fa      	ldrb	r2, [r7, #7]
 8000fbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fc0:	79fa      	ldrb	r2, [r7, #7]
 8000fc2:	491d      	ldr	r1, [pc, #116]	; (8001038 <LinkTimerBefore+0xbc>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	3315      	adds	r3, #21
 8000fd0:	79ba      	ldrb	r2, [r7, #6]
 8000fd2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	4918      	ldr	r1, [pc, #96]	; (8001038 <LinkTimerBefore+0xbc>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3314      	adds	r3, #20
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fe8:	79ba      	ldrb	r2, [r7, #6]
 8000fea:	4913      	ldr	r1, [pc, #76]	; (8001038 <LinkTimerBefore+0xbc>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3314      	adds	r3, #20
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ffc:	e014      	b.n	8001028 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	490d      	ldr	r1, [pc, #52]	; (8001038 <LinkTimerBefore+0xbc>)
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3315      	adds	r3, #21
 800100e:	79ba      	ldrb	r2, [r7, #6]
 8001010:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001012:	79ba      	ldrb	r2, [r7, #6]
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <LinkTimerBefore+0xbc>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3314      	adds	r3, #20
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	701a      	strb	r2, [r3, #0]
  return;
 8001026:	bf00      	nop
}
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000134 	.word	0x20000134
 8001038:	200000a4 	.word	0x200000a4

0800103c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001046:	4b4e      	ldr	r3, [pc, #312]	; (8001180 <linkTimer+0x144>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b06      	cmp	r3, #6
 800104e:	d118      	bne.n	8001082 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001050:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <linkTimer+0x144>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <linkTimer+0x148>)
 8001058:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800105a:	4a49      	ldr	r2, [pc, #292]	; (8001180 <linkTimer+0x144>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	4949      	ldr	r1, [pc, #292]	; (8001188 <linkTimer+0x14c>)
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3315      	adds	r3, #21
 8001070:	2206      	movs	r2, #6
 8001072:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <linkTimer+0x150>)
 8001076:	f04f 32ff 	mov.w	r2, #4294967295
 800107a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	81fb      	strh	r3, [r7, #14]
 8001080:	e078      	b.n	8001174 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001082:	f000 f909 	bl	8001298 <ReturnTimeElapsed>
 8001086:	4603      	mov	r3, r0
 8001088:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	493e      	ldr	r1, [pc, #248]	; (8001188 <linkTimer+0x14c>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3308      	adds	r3, #8
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	4419      	add	r1, r3
 80010a2:	4839      	ldr	r0, [pc, #228]	; (8001188 <linkTimer+0x14c>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4403      	add	r3, r0
 80010ae:	3308      	adds	r3, #8
 80010b0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	4934      	ldr	r1, [pc, #208]	; (8001188 <linkTimer+0x14c>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	3308      	adds	r3, #8
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <linkTimer+0x144>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <linkTimer+0x14c>)
 80010d0:	460b      	mov	r3, r1
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	440b      	add	r3, r1
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	3308      	adds	r3, #8
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d337      	bcc.n	8001154 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <linkTimer+0x144>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80010ea:	7b7a      	ldrb	r2, [r7, #13]
 80010ec:	4926      	ldr	r1, [pc, #152]	; (8001188 <linkTimer+0x14c>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	3315      	adds	r3, #21
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010fe:	e013      	b.n	8001128 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001100:	7b7a      	ldrb	r2, [r7, #13]
 8001102:	4921      	ldr	r1, [pc, #132]	; (8001188 <linkTimer+0x14c>)
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	3315      	adds	r3, #21
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001114:	7b7a      	ldrb	r2, [r7, #13]
 8001116:	491c      	ldr	r1, [pc, #112]	; (8001188 <linkTimer+0x14c>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	3315      	adds	r3, #21
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	2b06      	cmp	r3, #6
 800112c:	d00b      	beq.n	8001146 <linkTimer+0x10a>
 800112e:	7b3a      	ldrb	r2, [r7, #12]
 8001130:	4915      	ldr	r1, [pc, #84]	; (8001188 <linkTimer+0x14c>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3308      	adds	r3, #8
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d2dc      	bcs.n	8001100 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001146:	7b7a      	ldrb	r2, [r7, #13]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fecf 	bl	8000ef0 <LinkTimerAfter>
 8001152:	e00f      	b.n	8001174 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <linkTimer+0x144>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff0c 	bl	8000f7c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <linkTimer+0x144>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <linkTimer+0x148>)
 800116c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <linkTimer+0x144>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001174:	89fb      	ldrh	r3, [r7, #14]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000134 	.word	0x20000134
 8001184:	20000135 	.word	0x20000135
 8001188:	200000a4 	.word	0x200000a4
 800118c:	20000138 	.word	0x20000138

08001190 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <UnlinkTimer+0xf8>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d111      	bne.n	80011d0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <UnlinkTimer+0xf8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <UnlinkTimer+0xfc>)
 80011b4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <UnlinkTimer+0x100>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	3315      	adds	r3, #21
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <UnlinkTimer+0xf8>)
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e03e      	b.n	800124e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	492f      	ldr	r1, [pc, #188]	; (8001290 <UnlinkTimer+0x100>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3314      	adds	r3, #20
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	492a      	ldr	r1, [pc, #168]	; (8001290 <UnlinkTimer+0x100>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3315      	adds	r3, #21
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80011f8:	79f9      	ldrb	r1, [r7, #7]
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	4824      	ldr	r0, [pc, #144]	; (8001290 <UnlinkTimer+0x100>)
 80011fe:	460b      	mov	r3, r1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	440b      	add	r3, r1
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4403      	add	r3, r0
 8001208:	3315      	adds	r3, #21
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2d8      	uxtb	r0, r3
 800120e:	4920      	ldr	r1, [pc, #128]	; (8001290 <UnlinkTimer+0x100>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3315      	adds	r3, #21
 800121c:	4602      	mov	r2, r0
 800121e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	2b06      	cmp	r3, #6
 8001224:	d013      	beq.n	800124e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001226:	79f9      	ldrb	r1, [r7, #7]
 8001228:	7bba      	ldrb	r2, [r7, #14]
 800122a:	4819      	ldr	r0, [pc, #100]	; (8001290 <UnlinkTimer+0x100>)
 800122c:	460b      	mov	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	440b      	add	r3, r1
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4403      	add	r3, r0
 8001236:	3314      	adds	r3, #20
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b2d8      	uxtb	r0, r3
 800123c:	4914      	ldr	r1, [pc, #80]	; (8001290 <UnlinkTimer+0x100>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3314      	adds	r3, #20
 800124a:	4602      	mov	r2, r0
 800124c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	490f      	ldr	r1, [pc, #60]	; (8001290 <UnlinkTimer+0x100>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	330c      	adds	r3, #12
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <UnlinkTimer+0xf8>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b06      	cmp	r3, #6
 800126a:	d107      	bne.n	800127c <UnlinkTimer+0xec>
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d104      	bne.n	800127c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <UnlinkTimer+0x104>)
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	601a      	str	r2, [r3, #0]
  }

  return;
 800127a:	bf00      	nop
 800127c:	bf00      	nop
}
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20000134 	.word	0x20000134
 800128c:	20000135 	.word	0x20000135
 8001290:	200000a4 	.word	0x200000a4
 8001294:	20000138 	.word	0x20000138

08001298 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <ReturnTimeElapsed+0x70>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a6:	d026      	beq.n	80012f6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80012a8:	f7ff fe02 	bl	8000eb0 <ReadRtcSsrValue>
 80012ac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <ReturnTimeElapsed+0x70>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d805      	bhi.n	80012c4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <ReturnTimeElapsed+0x70>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	e00a      	b.n	80012da <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <ReturnTimeElapsed+0x74>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <ReturnTimeElapsed+0x70>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <ReturnTimeElapsed+0x78>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <ReturnTimeElapsed+0x7c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	40d3      	lsrs	r3, r2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	e001      	b.n	80012fa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000138 	.word	0x20000138
 800130c:	20000256 	.word	0x20000256
 8001310:	20000255 	.word	0x20000255
 8001314:	20000254 	.word	0x20000254

08001318 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d108      	bne.n	800133a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001328:	f7ff fdc2 	bl	8000eb0 <ReadRtcSsrValue>
 800132c:	4603      	mov	r3, r0
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <RestartWakeupCounter+0xa8>)
 8001330:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001332:	2003      	movs	r0, #3
 8001334:	f002 fdad 	bl	8003e92 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001338:	e03e      	b.n	80013b8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d803      	bhi.n	8001348 <RestartWakeupCounter+0x30>
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <RestartWakeupCounter+0xac>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d002      	beq.n	800134e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	3b01      	subs	r3, #1
 800134c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800134e:	bf00      	nop
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <RestartWakeupCounter+0xb0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f7      	beq.n	8001350 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <RestartWakeupCounter+0xb0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <RestartWakeupCounter+0xb0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001374:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <RestartWakeupCounter+0xb4>)
 8001378:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800137c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800137e:	2003      	movs	r0, #3
 8001380:	f002 fd95 	bl	8003eae <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <RestartWakeupCounter+0xb8>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	4910      	ldr	r1, [pc, #64]	; (80013d0 <RestartWakeupCounter+0xb8>)
 8001390:	4313      	orrs	r3, r2
 8001392:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001394:	f7ff fd8c 	bl	8000eb0 <ReadRtcSsrValue>
 8001398:	4603      	mov	r3, r0
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <RestartWakeupCounter+0xa8>)
 800139c:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <RestartWakeupCounter+0xb0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <RestartWakeupCounter+0xb0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013b0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80013b2:	f3af 8000 	nop.w
  return ;
 80013b6:	bf00      	nop
}
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000138 	.word	0x20000138
 80013c4:	20000254 	.word	0x20000254
 80013c8:	20000250 	.word	0x20000250
 80013cc:	58000800 	.word	0x58000800
 80013d0:	40002800 	.word	0x40002800

080013d4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <RescheduleTimerList+0x124>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e6:	d108      	bne.n	80013fa <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80013e8:	bf00      	nop
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <RescheduleTimerList+0x128>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f7      	bne.n	80013ea <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80013fa:	4b40      	ldr	r3, [pc, #256]	; (80014fc <RescheduleTimerList+0x128>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <RescheduleTimerList+0x128>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800140c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <RescheduleTimerList+0x12c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	493b      	ldr	r1, [pc, #236]	; (8001504 <RescheduleTimerList+0x130>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001428:	f7ff ff36 	bl	8001298 <ReturnTimeElapsed>
 800142c:	4603      	mov	r3, r0
 800142e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	429a      	cmp	r2, r3
 8001436:	d205      	bcs.n	8001444 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <RescheduleTimerList+0x134>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e04d      	b.n	80014e0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <RescheduleTimerList+0x138>)
 8001448:	8812      	ldrh	r2, [r2, #0]
 800144a:	b292      	uxth	r2, r2
 800144c:	4413      	add	r3, r2
 800144e:	461a      	mov	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4293      	cmp	r3, r2
 8001454:	d906      	bls.n	8001464 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <RescheduleTimerList+0x138>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <RescheduleTimerList+0x134>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e03d      	b.n	80014e0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	b29a      	uxth	r2, r3
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <RescheduleTimerList+0x134>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001474:	e034      	b.n	80014e0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	4922      	ldr	r1, [pc, #136]	; (8001504 <RescheduleTimerList+0x130>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	3308      	adds	r3, #8
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	429a      	cmp	r2, r3
 800148c:	d20a      	bcs.n	80014a4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	491c      	ldr	r1, [pc, #112]	; (8001504 <RescheduleTimerList+0x130>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	3308      	adds	r3, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e013      	b.n	80014cc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	4917      	ldr	r1, [pc, #92]	; (8001504 <RescheduleTimerList+0x130>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	3308      	adds	r3, #8
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	1ac9      	subs	r1, r1, r3
 80014bc:	4811      	ldr	r0, [pc, #68]	; (8001504 <RescheduleTimerList+0x130>)
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4403      	add	r3, r0
 80014c8:	3308      	adds	r3, #8
 80014ca:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <RescheduleTimerList+0x130>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	3315      	adds	r3, #21
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d1c7      	bne.n	8001476 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80014e6:	89bb      	ldrh	r3, [r7, #12]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff15 	bl	8001318 <RestartWakeupCounter>

  return ;
 80014ee:	bf00      	nop
}
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40002800 	.word	0x40002800
 80014fc:	20000250 	.word	0x20000250
 8001500:	20000134 	.word	0x20000134
 8001504:	200000a4 	.word	0x200000a4
 8001508:	2000013c 	.word	0x2000013c
 800150c:	20000258 	.word	0x20000258

08001510 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001516:	f3ef 8310 	mrs	r3, PRIMASK
 800151a:	617b      	str	r3, [r7, #20]
  return(result);
 800151c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001524:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	22ca      	movs	r2, #202	; 0xca
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2253      	movs	r2, #83	; 0x53
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001538:	4b5a      	ldr	r3, [pc, #360]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800154c:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001554:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001558:	4954      	ldr	r1, [pc, #336]	; (80016ac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	330c      	adds	r3, #12
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d172      	bne.n	8001654 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800156e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001572:	494e      	ldr	r1, [pc, #312]	; (80016ac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001582:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001586:	4949      	ldr	r1, [pc, #292]	; (80016ac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3310      	adds	r3, #16
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001598:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d050      	beq.n	8001644 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80015a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015a6:	4941      	ldr	r1, [pc, #260]	; (80016ac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	330d      	adds	r3, #13
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d126      	bne.n	800160a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80015bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c0:	2101      	movs	r1, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fde4 	bl	8001190 <UnlinkTimer>
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f383 8810 	msr	PRIMASK, r3
}
 80015d2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80015d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015d8:	4934      	ldr	r1, [pc, #208]	; (80016ac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	3304      	adds	r3, #4
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fa4e 	bl	8001a90 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	22ca      	movs	r2, #202	; 0xca
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2253      	movs	r2, #83	; 0x53
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
 8001608:	e014      	b.n	8001634 <HW_TS_RTC_Wakeup_Handler+0x124>
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f383 8810 	msr	PRIMASK, r3
}
 8001614:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f9ac 	bl	8001978 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	22ca      	movs	r2, #202	; 0xca
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2253      	movs	r2, #83	; 0x53
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	4619      	mov	r1, r3
 800163c:	69b8      	ldr	r0, [r7, #24]
 800163e:	f000 faaf 	bl	8001ba0 <HW_TS_RTC_Int_AppNot>
 8001642:	e025      	b.n	8001690 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001644:	f7ff fec6 	bl	80013d4 <RescheduleTimerList>
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f383 8810 	msr	PRIMASK, r3
}
 8001652:	e01d      	b.n	8001690 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001654:	bf00      	nop
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f7      	beq.n	8001656 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800167a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 800167e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f383 8810 	msr	PRIMASK, r3
}
 800168e:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800169a:	bf00      	nop
}
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000250 	.word	0x20000250
 80016a8:	20000134 	.word	0x20000134
 80016ac:	200000a4 	.word	0x200000a4
 80016b0:	2000013c 	.word	0x2000013c
 80016b4:	58000800 	.word	0x58000800

080016b8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80016c4:	4a64      	ldr	r2, [pc, #400]	; (8001858 <HW_TS_Init+0x1a0>)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016ca:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HW_TS_Init+0x1a0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	22ca      	movs	r2, #202	; 0xca
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
 80016d4:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HW_TS_Init+0x1a0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2253      	movs	r2, #83	; 0x53
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80016de:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HW_TS_Init+0x1a4>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HW_TS_Init+0x1a4>)
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80016ea:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HW_TS_Init+0x1a4>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f1c3 0304 	rsb	r3, r3, #4
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HW_TS_Init+0x1a8>)
 80016fe:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001700:	4b56      	ldr	r3, [pc, #344]	; (800185c <HW_TS_Init+0x1a4>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001708:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800170c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	fa92 f2a2 	rbit	r2, r2
 8001714:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	2a00      	cmp	r2, #0
 800171e:	d101      	bne.n	8001724 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001720:	2220      	movs	r2, #32
 8001722:	e003      	b.n	800172c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	fab2 f282 	clz	r2, r2
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	40d3      	lsrs	r3, r2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HW_TS_Init+0x1ac>)
 8001736:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001738:	4b48      	ldr	r3, [pc, #288]	; (800185c <HW_TS_Init+0x1a4>)
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	b29b      	uxth	r3, r3
 800173e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001742:	b29b      	uxth	r3, r3
 8001744:	3301      	adds	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HW_TS_Init+0x1b0>)
 800174a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800174c:	4b46      	ldr	r3, [pc, #280]	; (8001868 <HW_TS_Init+0x1b0>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	3b01      	subs	r3, #1
 8001752:	4a44      	ldr	r2, [pc, #272]	; (8001864 <HW_TS_Init+0x1ac>)
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800175e:	4a40      	ldr	r2, [pc, #256]	; (8001860 <HW_TS_Init+0x1a8>)
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	40d3      	lsrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800176c:	4293      	cmp	r3, r2
 800176e:	d904      	bls.n	800177a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001770:	4b3e      	ldr	r3, [pc, #248]	; (800186c <HW_TS_Init+0x1b4>)
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	e003      	b.n	8001782 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HW_TS_Init+0x1b4>)
 8001780:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001782:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001786:	f7ff fb81 	bl	8000e8c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800178a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800178e:	f7ff fb69 	bl	8000e64 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d143      	bne.n	8001820 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HW_TS_Init+0x1b8>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <HW_TS_Init+0x1bc>)
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	77fb      	strb	r3, [r7, #31]
 80017aa:	e00c      	b.n	80017c6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80017ac:	7ffa      	ldrb	r2, [r7, #31]
 80017ae:	4932      	ldr	r1, [pc, #200]	; (8001878 <HW_TS_Init+0x1c0>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	330c      	adds	r3, #12
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017c0:	7ffb      	ldrb	r3, [r7, #31]
 80017c2:	3301      	adds	r3, #1
 80017c4:	77fb      	strb	r3, [r7, #31]
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d9ef      	bls.n	80017ac <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HW_TS_Init+0x1c4>)
 80017ce:	2206      	movs	r2, #6
 80017d0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HW_TS_Init+0x1a0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HW_TS_Init+0x1a0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HW_TS_Init+0x1a0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HW_TS_Init+0x1a0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017fa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HW_TS_Init+0x1c8>)
 80017fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001802:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001804:	2003      	movs	r0, #3
 8001806:	f002 fb52 	bl	8003eae <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HW_TS_Init+0x1a0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HW_TS_Init+0x1a0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	e00a      	b.n	8001836 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HW_TS_Init+0x1a0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001830:	2003      	movs	r0, #3
 8001832:	f002 fb2e 	bl	8003e92 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HW_TS_Init+0x1a0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	22ff      	movs	r2, #255	; 0xff
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001840:	2200      	movs	r2, #0
 8001842:	2103      	movs	r1, #3
 8001844:	2003      	movs	r0, #3
 8001846:	f002 fae2 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800184a:	2003      	movs	r0, #3
 800184c:	f002 faf9 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  return;
 8001850:	bf00      	nop
}
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000250 	.word	0x20000250
 800185c:	40002800 	.word	0x40002800
 8001860:	20000254 	.word	0x20000254
 8001864:	20000255 	.word	0x20000255
 8001868:	20000256 	.word	0x20000256
 800186c:	20000258 	.word	0x20000258
 8001870:	2000013c 	.word	0x2000013c
 8001874:	20000138 	.word	0x20000138
 8001878:	200000a4 	.word	0x200000a4
 800187c:	20000134 	.word	0x20000134
 8001880:	58000800 	.word	0x58000800

08001884 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001884:	b480      	push	{r7}
 8001886:	b08b      	sub	sp, #44	; 0x2c
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800189a:	f3ef 8310 	mrs	r3, PRIMASK
 800189e:	61fb      	str	r3, [r7, #28]
  return(result);
 80018a0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80018a8:	e004      	b.n	80018b4 <HW_TS_Create+0x30>
  {
    loop++;
 80018aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ae:	3301      	adds	r3, #1
 80018b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80018b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d80c      	bhi.n	80018d6 <HW_TS_Create+0x52>
 80018bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018c0:	492c      	ldr	r1, [pc, #176]	; (8001974 <HW_TS_Create+0xf0>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	330c      	adds	r3, #12
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e9      	bne.n	80018aa <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d038      	beq.n	8001950 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80018de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018e2:	4924      	ldr	r1, [pc, #144]	; (8001974 <HW_TS_Create+0xf0>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	330c      	adds	r3, #12
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f383 8810 	msr	PRIMASK, r3
}
 80018fe:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001900:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001904:	491b      	ldr	r1, [pc, #108]	; (8001974 <HW_TS_Create+0xf0>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3310      	adds	r3, #16
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001916:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800191a:	4916      	ldr	r1, [pc, #88]	; (8001974 <HW_TS_Create+0xf0>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	330d      	adds	r3, #13
 8001928:	79fa      	ldrb	r2, [r7, #7]
 800192a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800192c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001930:	4910      	ldr	r1, [pc, #64]	; (8001974 <HW_TS_Create+0xf0>)
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001946:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800194e:	e008      	b.n	8001962 <HW_TS_Create+0xde>
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f383 8810 	msr	PRIMASK, r3
}
 800195a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001966:	4618      	mov	r0, r3
 8001968:	372c      	adds	r7, #44	; 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200000a4 	.word	0x200000a4

08001978 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001982:	f3ef 8310 	mrs	r3, PRIMASK
 8001986:	60fb      	str	r3, [r7, #12]
  return(result);
 8001988:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800198a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001990:	2003      	movs	r0, #3
 8001992:	f002 fa64 	bl	8003e5e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HW_TS_Stop+0x100>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	22ca      	movs	r2, #202	; 0xca
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HW_TS_Stop+0x100>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2253      	movs	r2, #83	; 0x53
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80019aa:	79fa      	ldrb	r2, [r7, #7]
 80019ac:	4933      	ldr	r1, [pc, #204]	; (8001a7c <HW_TS_Stop+0x104>)
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	330c      	adds	r3, #12
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d148      	bne.n	8001a54 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fbe2 	bl	8001190 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80019cc:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <HW_TS_Stop+0x108>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019d2:	7cfb      	ldrb	r3, [r7, #19]
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	d135      	bne.n	8001a44 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HW_TS_Stop+0x10c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d108      	bne.n	80019f8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80019e6:	bf00      	nop
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HW_TS_Stop+0x100>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f7      	bne.n	80019e8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HW_TS_Stop+0x100>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HW_TS_Stop+0x100>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a0c:	bf00      	nop
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HW_TS_Stop+0x100>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f7      	beq.n	8001a0e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HW_TS_Stop+0x100>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HW_TS_Stop+0x100>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a32:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HW_TS_Stop+0x110>)
 8001a36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a3a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f002 fa36 	bl	8003eae <HAL_NVIC_ClearPendingIRQ>
 8001a42:	e007      	b.n	8001a54 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HW_TS_Stop+0x114>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	7cfa      	ldrb	r2, [r7, #19]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001a50:	f7ff fcc0 	bl	80013d4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HW_TS_Stop+0x100>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	22ff      	movs	r2, #255	; 0xff
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f002 f9ef 	bl	8003e42 <HAL_NVIC_EnableIRQ>
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f383 8810 	msr	PRIMASK, r3
}
 8001a6e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001a70:	bf00      	nop
}
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000250 	.word	0x20000250
 8001a7c:	200000a4 	.word	0x200000a4
 8001a80:	20000134 	.word	0x20000134
 8001a84:	40002800 	.word	0x40002800
 8001a88:	58000800 	.word	0x58000800
 8001a8c:	20000135 	.word	0x20000135

08001a90 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a9c:	79fa      	ldrb	r2, [r7, #7]
 8001a9e:	493c      	ldr	r1, [pc, #240]	; (8001b90 <HW_TS_Start+0x100>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	330c      	adds	r3, #12
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d103      	bne.n	8001abc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff5e 	bl	8001978 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001abc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ac4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac6:	b672      	cpsid	i
}
 8001ac8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001aca:	2003      	movs	r0, #3
 8001acc:	f002 f9c7 	bl	8003e5e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HW_TS_Start+0x104>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	22ca      	movs	r2, #202	; 0xca
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HW_TS_Start+0x104>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2253      	movs	r2, #83	; 0x53
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	492a      	ldr	r1, [pc, #168]	; (8001b90 <HW_TS_Start+0x100>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	330c      	adds	r3, #12
 8001af4:	2202      	movs	r2, #2
 8001af6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	4925      	ldr	r1, [pc, #148]	; (8001b90 <HW_TS_Start+0x100>)
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	3308      	adds	r3, #8
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001b0c:	79fa      	ldrb	r2, [r7, #7]
 8001b0e:	4920      	ldr	r1, [pc, #128]	; (8001b90 <HW_TS_Start+0x100>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fa8a 	bl	800103c <linkTimer>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HW_TS_Start+0x108>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HW_TS_Start+0x10c>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	7c7a      	ldrb	r2, [r7, #17]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d002      	beq.n	8001b44 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001b3e:	f7ff fc49 	bl	80013d4 <RescheduleTimerList>
 8001b42:	e013      	b.n	8001b6c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001b44:	79fa      	ldrb	r2, [r7, #7]
 8001b46:	4912      	ldr	r1, [pc, #72]	; (8001b90 <HW_TS_Start+0x100>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	3308      	adds	r3, #8
 8001b54:	6819      	ldr	r1, [r3, #0]
 8001b56:	8a7b      	ldrh	r3, [r7, #18]
 8001b58:	79fa      	ldrb	r2, [r7, #7]
 8001b5a:	1ac9      	subs	r1, r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <HW_TS_Start+0x100>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4403      	add	r3, r0
 8001b68:	3308      	adds	r3, #8
 8001b6a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HW_TS_Start+0x104>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	22ff      	movs	r2, #255	; 0xff
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b76:	2003      	movs	r0, #3
 8001b78:	f002 f963 	bl	8003e42 <HAL_NVIC_EnableIRQ>
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f383 8810 	msr	PRIMASK, r3
}
 8001b86:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b88:	bf00      	nop
}
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200000a4 	.word	0x200000a4
 8001b94:	20000250 	.word	0x20000250
 8001b98:	20000134 	.word	0x20000134
 8001b9c:	20000135 	.word	0x20000135

08001ba0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4798      	blx	r3

  return;
 8001bb2:	bf00      	nop
}
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HW_UART_Transmit_DMA+0x26>
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d00f      	beq.n	8001c00 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001be0:	e01d      	b.n	8001c1e <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8001be2:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HW_UART_Transmit_DMA+0xa4>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HW_UART_Transmit_DMA+0xa8>)
 8001bea:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HW_UART_Transmit_DMA+0xac>)
 8001bec:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001bee:	89bb      	ldrh	r3, [r7, #12]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	481b      	ldr	r0, [pc, #108]	; (8001c64 <HW_UART_Transmit_DMA+0xa8>)
 8001bf6:	f005 fcd7 	bl	80075a8 <HAL_UART_Transmit_DMA>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	75fb      	strb	r3, [r7, #23]
            break;
 8001bfe:	e00e      	b.n	8001c1e <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8001c00:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <HW_UART_Transmit_DMA+0xb0>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HW_UART_Transmit_DMA+0xb4>)
 8001c08:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <HW_UART_Transmit_DMA+0xb8>)
 8001c0a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	4817      	ldr	r0, [pc, #92]	; (8001c70 <HW_UART_Transmit_DMA+0xb4>)
 8001c14:	f005 fcc8 	bl	80075a8 <HAL_UART_Transmit_DMA>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	75fb      	strb	r3, [r7, #23]
            break;
 8001c1c:	bf00      	nop
    }

    switch (hal_status)
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d817      	bhi.n	8001c54 <HW_UART_Transmit_DMA+0x98>
 8001c24:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HW_UART_Transmit_DMA+0x70>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c43 	.word	0x08001c43
 8001c34:	08001c49 	.word	0x08001c49
 8001c38:	08001c4f 	.word	0x08001c4f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75bb      	strb	r3, [r7, #22]
            break;
 8001c40:	e009      	b.n	8001c56 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75bb      	strb	r3, [r7, #22]
            break;
 8001c46:	e006      	b.n	8001c56 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	75bb      	strb	r3, [r7, #22]
            break;
 8001c4c:	e003      	b.n	8001c56 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	75bb      	strb	r3, [r7, #22]
            break;
 8001c52:	e000      	b.n	8001c56 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8001c54:	bf00      	nop
    }

    return hw_status;
 8001c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000025c 	.word	0x2000025c
 8001c64:	2000035c 	.word	0x2000035c
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	20000260 	.word	0x20000260
 8001c70:	200002cc 	.word	0x200002cc
 8001c74:	40008000 	.word	0x40008000

08001c78 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_UART_TxCpltCallback+0x4c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00a      	beq.n	8001ca0 <HAL_UART_TxCpltCallback+0x28>
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <HAL_UART_TxCpltCallback+0x50>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d10f      	bne.n	8001cb0 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_UART_TxCpltCallback+0x54>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_UART_TxCpltCallback+0x54>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4798      	blx	r3
            }
            break;
 8001c9e:	e009      	b.n	8001cb4 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_UART_TxCpltCallback+0x58>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_UART_TxCpltCallback+0x58>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4798      	blx	r3
            }
            break;
 8001cae:	e003      	b.n	8001cb8 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8001cb0:	bf00      	nop
 8001cb2:	e002      	b.n	8001cba <HAL_UART_TxCpltCallback+0x42>
            break;
 8001cb4:	bf00      	nop
 8001cb6:	e000      	b.n	8001cba <HAL_UART_TxCpltCallback+0x42>
            break;
 8001cb8:	bf00      	nop
    }

    return;
 8001cba:	bf00      	nop
}
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40008000 	.word	0x40008000
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	2000025c 	.word	0x2000025c
 8001cd0:	20000260 	.word	0x20000260

08001cd4 <LL_RCC_LSE_SetDriveCapability>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f023 0218 	bic.w	r2, r3, #24
 8001ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_AHB1_GRP1_EnableClock>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_AHB2_GRP1_EnableClock>:
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef UART_error;
	HAL_StatusTypeDef LPUART_error;
	HAL_UART_StateTypeDef UART_State;
	nbBat=0;
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <main+0xb8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
	bpm=0;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <main+0xbc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d76:	f001 fc5d 	bl	8003634 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001d7a:	f7fe fd67 	bl	800084c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7e:	f000 f863 	bl	8001e48 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d82:	f000 f8bf 	bl	8001f04 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001d86:	f000 f90b 	bl	8001fa0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8a:	f000 fa6b 	bl	8002264 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d8e:	f000 fa43 	bl	8002218 <MX_DMA_Init>
  MX_RF_Init();
 8001d92:	f000 f967 	bl	8002064 <MX_RF_Init>
  MX_RTC_Init();
 8001d96:	f000 f983 	bl	80020a0 <MX_RTC_Init>
  MX_RNG_Init();
 8001d9a:	f000 f96b 	bl	8002074 <MX_RNG_Init>
  MX_TIM17_Init();
 8001d9e:	f000 fa13 	bl	80021c8 <MX_TIM17_Init>
  MX_COMP2_Init();
 8001da2:	f000 f8cf 	bl	8001f44 <MX_COMP2_Init>
  MX_TIM2_Init();
 8001da6:	f000 f9af 	bl	8002108 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MX_USART1_UART_Init();
 8001daa:	f000 f90d 	bl	8001fc8 <MX_USART1_UART_Init>
//  printf("Hello World!\n");
  Set_LED('A');
 8001dae:	2041      	movs	r0, #65	; 0x41
 8001db0:	f000 fb9e 	bl	80024f0 <Set_LED>
  //HAL_Delay(200);

  char *msg = "Hello Nucleo Fun!\n\r";
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <main+0xc0>)
 8001db6:	607b      	str	r3, [r7, #4]
  char *msg2 = "Hello Nucleo !\n\r";
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <main+0xc4>)
 8001dba:	603b      	str	r3, [r7, #0]
//  HAL_UART_Transmit(&huart1, (uint8_t*)msg2, strlen(msg2), 0x1000);

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001dbc:	f7fe fd54 	bl	8000868 <MX_APPE_Init>
//  {
//	  UART_State=HAL_UART_GetState(&huart1);
//  }


 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x1000);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7fe f9dd 	bl	8000180 <strlen>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4816      	ldr	r0, [pc, #88]	; (8001e2c <main+0xc8>)
 8001dd2:	f005 fb53 	bl	800747c <HAL_UART_Transmit>
  //UART_error=HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x10);
  Clear_LED('A');
 8001dd6:	2041      	movs	r0, #65	; 0x41
 8001dd8:	f000 fb30 	bl	800243c <Clear_LED>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001ddc:	f7fe ffce 	bl	8000d7c <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    printf( "Timer 2 initialized\n");
 8001de0:	4813      	ldr	r0, [pc, #76]	; (8001e30 <main+0xcc>)
 8001de2:	f00c fa29 	bl	800e238 <puts>
    	TIM2->CR1 = TIM2->CR1 | ( 1 << 0);
 8001de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6013      	str	r3, [r2, #0]
  	    //HAL_TIM_Base_Start_IT(&htim2);
    printf( "Timer 2 enabled\n");
 8001df6:	480f      	ldr	r0, [pc, #60]	; (8001e34 <main+0xd0>)
 8001df8:	f00c fa1e 	bl	800e238 <puts>

    printf( "Timer 17 initialized\n");
 8001dfc:	480e      	ldr	r0, [pc, #56]	; (8001e38 <main+0xd4>)
 8001dfe:	f00c fa1b 	bl	800e238 <puts>
    	TIM17->CR1 = TIM17->CR1 | ( 1 << 0);
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <main+0xd8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <main+0xd8>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6013      	str	r3, [r2, #0]
  	   //HAL_TIM_Base_Start_IT(&htim17);
    printf( "Timer 17 enabled\n");
 8001e0e:	480c      	ldr	r0, [pc, #48]	; (8001e40 <main+0xdc>)
 8001e10:	f00c fa12 	bl	800e238 <puts>

    	   HAL_COMP_Start (&hcomp2);
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <main+0xe0>)
 8001e16:	f001 fe3d 	bl	8003a94 <HAL_COMP_Start>
    MX_APPE_Process();
 8001e1a:	e7df      	b.n	8001ddc <main+0x78>
 8001e1c:	200005dc 	.word	0x200005dc
 8001e20:	200005e0 	.word	0x200005e0
 8001e24:	0800f688 	.word	0x0800f688
 8001e28:	0800f69c 	.word	0x0800f69c
 8001e2c:	2000035c 	.word	0x2000035c
 8001e30:	0800f6b0 	.word	0x0800f6b0
 8001e34:	0800f6c4 	.word	0x0800f6c4
 8001e38:	0800f6d4 	.word	0x0800f6d4
 8001e3c:	40014800 	.word	0x40014800
 8001e40:	0800f6ec 	.word	0x0800f6ec
 8001e44:	20000264 	.word	0x20000264

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b09a      	sub	sp, #104	; 0x68
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2248      	movs	r2, #72	; 0x48
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00c f880 	bl	800df5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e6e:	f002 fe0f 	bl	8004a90 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff ff2e 	bl	8001cd4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <SystemClock_Config+0xb8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <SystemClock_Config+0xb8>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <SystemClock_Config+0xb8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001e94:	2347      	movs	r3, #71	; 0x47
 8001e96:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eac:	2340      	movs	r3, #64	; 0x40
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb4:	f107 0320 	add.w	r3, r7, #32
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f97d 	bl	80051b8 <HAL_RCC_OscConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001ec4:	f000 ff28 	bl	8002d18 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ec8:	236f      	movs	r3, #111	; 0x6f
 8001eca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fcf3 	bl	80058d4 <HAL_RCC_ClockConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ef4:	f000 ff10 	bl	8002d18 <Error_Handler>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3768      	adds	r7, #104	; 0x68
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	58000400 	.word	0x58000400

08001f04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b094      	sub	sp, #80	; 0x50
 8001f08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2250      	movs	r2, #80	; 0x50
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00c f823 	bl	800df5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001f16:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f1a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001f1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001f22:	2302      	movs	r3, #2
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001f26:	2310      	movs	r3, #16
 8001f28:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 f90e 	bl	800614e <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001f38:	f000 feee 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001f3c:	bf00      	nop
 8001f3e:	3750      	adds	r7, #80	; 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <MX_COMP2_Init+0x54>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_IO4;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <MX_COMP2_Init+0x58>)
 8001f52:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f66:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f70:	220c      	movs	r2, #12
 8001f72:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f7c:	2211      	movs	r2, #17
 8001f7e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <MX_COMP2_Init+0x50>)
 8001f82:	f001 fca3 	bl	80038cc <HAL_COMP_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8001f8c:	f000 fec4 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000264 	.word	0x20000264
 8001f98:	40010204 	.word	0x40010204
 8001f9c:	04000070 	.word	0x04000070

08001fa0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_IPCC_Init+0x20>)
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <MX_IPCC_Init+0x24>)
 8001fa8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_IPCC_Init+0x20>)
 8001fac:	f002 fcea 	bl	8004984 <HAL_IPCC_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001fb6:	f000 feaf 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000290 	.word	0x20000290
 8001fc4:	58000c00 	.word	0x58000c00

08001fc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <MX_USART1_UART_Init+0x98>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_USART1_UART_Init+0x94>)
 8001ffa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ffe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_USART1_UART_Init+0x94>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <MX_USART1_UART_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_USART1_UART_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002012:	4812      	ldr	r0, [pc, #72]	; (800205c <MX_USART1_UART_Init+0x94>)
 8002014:	f005 f9e2 	bl	80073dc <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800201e:	f000 fe7b 	bl	8002d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002022:	2100      	movs	r1, #0
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <MX_USART1_UART_Init+0x94>)
 8002026:	f006 fc40 	bl	80088aa <HAL_UARTEx_SetTxFifoThreshold>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002030:	f000 fe72 	bl	8002d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002034:	2100      	movs	r1, #0
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <MX_USART1_UART_Init+0x94>)
 8002038:	f006 fc75 	bl	8008926 <HAL_UARTEx_SetRxFifoThreshold>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002042:	f000 fe69 	bl	8002d18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_USART1_UART_Init+0x94>)
 8002048:	f006 fbf6 	bl	8008838 <HAL_UARTEx_DisableFifoMode>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002052:	f000 fe61 	bl	8002d18 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
//  HAL_HalfDuplex_EnableTransmitter(&huart1);
//  HAL_HalfDuplex_EnableReceiver(&huart1);
  /* USER CODE END USART1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000035c 	.word	0x2000035c
 8002060:	40013800 	.word	0x40013800

08002064 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <MX_RNG_Init+0x24>)
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <MX_RNG_Init+0x28>)
 800207c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_RNG_Init+0x24>)
 8002080:	2200      	movs	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_RNG_Init+0x24>)
 8002086:	f004 fae9 	bl	800665c <HAL_RNG_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002090:	f000 fe42 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000050c 	.word	0x2000050c
 800209c:	58001000 	.word	0x58001000

080020a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_RTC_Init+0x60>)
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <MX_RTC_Init+0x64>)
 80020a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_RTC_Init+0x60>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <MX_RTC_Init+0x60>)
 80020b2:	220f      	movs	r2, #15
 80020b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_RTC_Init+0x60>)
 80020b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80020bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <MX_RTC_Init+0x60>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <MX_RTC_Init+0x60>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <MX_RTC_Init+0x60>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <MX_RTC_Init+0x60>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020d6:	480a      	ldr	r0, [pc, #40]	; (8002100 <MX_RTC_Init+0x60>)
 80020d8:	f004 faf5 	bl	80066c6 <HAL_RTC_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80020e2:	f000 fe19 	bl	8002d18 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <MX_RTC_Init+0x60>)
 80020ec:	f004 fbda 	bl	80068a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80020f6:	f000 fe0f 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000520 	.word	0x20000520
 8002104:	40002800 	.word	0x40002800

08002108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211e:	463b      	mov	r3, r7
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <MX_TIM2_Init+0xbc>)
 800212a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <MX_TIM2_Init+0xbc>)
 8002132:	2200      	movs	r2, #0
 8002134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <MX_TIM2_Init+0xbc>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <MX_TIM2_Init+0xbc>)
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <MX_TIM2_Init+0xbc>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <MX_TIM2_Init+0xbc>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002150:	481c      	ldr	r0, [pc, #112]	; (80021c4 <MX_TIM2_Init+0xbc>)
 8002152:	f004 fc63 	bl	8006a1c <HAL_TIM_Base_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800215c:	f000 fddc 	bl	8002d18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002160:	2307      	movs	r3, #7
 8002162:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8002164:	2370      	movs	r3, #112	; 0x70
 8002166:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4619      	mov	r1, r3
 800217a:	4812      	ldr	r0, [pc, #72]	; (80021c4 <MX_TIM2_Init+0xbc>)
 800217c:	f004 fe42 	bl	8006e04 <HAL_TIM_SlaveConfigSynchro>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002186:	f000 fdc7 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002192:	463b      	mov	r3, r7
 8002194:	4619      	mov	r1, r3
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <MX_TIM2_Init+0xbc>)
 8002198:	f005 f820 	bl	80071dc <HAL_TIMEx_MasterConfigSynchronization>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021a2:	f000 fdb9 	bl	8002d18 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM_TIM2_ETR_COMP2) != HAL_OK)
 80021a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <MX_TIM2_Init+0xbc>)
 80021ac:	f005 f876 	bl	800729c <HAL_TIMEx_RemapConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80021b6:	f000 fdaf 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000544 	.word	0x20000544

080021c8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_TIM17_Init+0x48>)
 80021ce:	4a11      	ldr	r2, [pc, #68]	; (8002214 <MX_TIM17_Init+0x4c>)
 80021d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_TIM17_Init+0x48>)
 80021d4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80021d8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <MX_TIM17_Init+0x48>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10000;
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MX_TIM17_Init+0x48>)
 80021e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80021e6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_TIM17_Init+0x48>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <MX_TIM17_Init+0x48>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_TIM17_Init+0x48>)
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_TIM17_Init+0x48>)
 80021fc:	f004 fc0e 	bl	8006a1c <HAL_TIM_Base_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8002206:	f000 fd87 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000590 	.word	0x20000590
 8002214:	40014800 	.word	0x40014800

08002218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800221c:	2004      	movs	r0, #4
 800221e:	f7ff fd6f 	bl	8001d00 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff fd6c 	bl	8001d00 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002228:	2002      	movs	r0, #2
 800222a:	f7ff fd69 	bl	8001d00 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	200b      	movs	r0, #11
 8002234:	f001 fdeb 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002238:	200b      	movs	r0, #11
 800223a:	f001 fe02 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	210f      	movs	r1, #15
 8002242:	200e      	movs	r0, #14
 8002244:	f001 fde3 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002248:	200e      	movs	r0, #14
 800224a:	f001 fdfa 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	210f      	movs	r1, #15
 8002252:	203a      	movs	r0, #58	; 0x3a
 8002254:	f001 fddb 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002258:	203a      	movs	r0, #58	; 0x3a
 800225a:	f001 fdf2 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002278:	2004      	movs	r0, #4
 800227a:	f7ff fd5a 	bl	8001d32 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff fd57 	bl	8001d32 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	2002      	movs	r0, #2
 8002286:	f7ff fd54 	bl	8001d32 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228a:	2008      	movs	r0, #8
 800228c:	f7ff fd51 	bl	8001d32 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	2123      	movs	r1, #35	; 0x23
 8002294:	4827      	ldr	r0, [pc, #156]	; (8002334 <MX_GPIO_Init+0xd0>)
 8002296:	f002 fafb 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LOm_Pin LOp_Pin */
  GPIO_InitStruct.Pin = LOm_Pin|LOp_Pin;
 800229a:	2360      	movs	r3, #96	; 0x60
 800229c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ae:	f002 f97f 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80022b2:	2310      	movs	r3, #16
 80022b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022bc:	2301      	movs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	481c      	ldr	r0, [pc, #112]	; (8002338 <MX_GPIO_Init+0xd4>)
 80022c6:	f002 f973 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 80022ca:	2323      	movs	r3, #35	; 0x23
 80022cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4815      	ldr	r0, [pc, #84]	; (8002334 <MX_GPIO_Init+0xd0>)
 80022e0:	f002 f966 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 80022e4:	2303      	movs	r3, #3
 80022e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4811      	ldr	r0, [pc, #68]	; (800233c <MX_GPIO_Init+0xd8>)
 80022f8:	f002 f95a 	bl	80045b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2006      	movs	r0, #6
 8002302:	f001 fd84 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002306:	2006      	movs	r0, #6
 8002308:	f001 fd9b 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	2007      	movs	r0, #7
 8002312:	f001 fd7c 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002316:	2007      	movs	r0, #7
 8002318:	f001 fd93 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	200a      	movs	r0, #10
 8002322:	f001 fd74 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002326:	200a      	movs	r0, #10
 8002328:	f001 fd8b 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	48000400 	.word	0x48000400
 8002338:	48000800 	.word	0x48000800
 800233c:	48000c00 	.word	0x48000c00

08002340 <BeginNotification>:

/* USER CODE BEGIN 4 */
void BeginNotification (void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim17);
 8002344:	4805      	ldr	r0, [pc, #20]	; (800235c <BeginNotification+0x1c>)
 8002346:	f004 fbc1 	bl	8006acc <HAL_TIM_Base_Start_IT>
	//char *msg = "C3: start notification !\n\r";
	//HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x100);
	htim17.Instance->DIER=1; //UIE 1
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <BeginNotification+0x1c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	60da      	str	r2, [r3, #12]
	//HAL_TIM_Base_Start(&htim17);
	Set_LED('B');
 8002352:	2042      	movs	r0, #66	; 0x42
 8002354:	f000 f8cc 	bl	80024f0 <Set_LED>

	//htim17->Instance->SR=1; //UIF 1
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000590 	.word	0x20000590

08002360 <FinishNotification>:

void FinishNotification(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	//char *msg = "C3: stop notification !\n\r";
	//HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x100);
	//HAL_TIM_Base_Stop(&htim17);
	HAL_TIM_Base_Stop_IT(&htim17);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <FinishNotification+0x14>)
 8002366:	f004 fbff 	bl	8006b68 <HAL_TIM_Base_Stop_IT>
	Clear_LED('B');
 800236a:	2042      	movs	r0, #66	; 0x42
 800236c:	f000 f866 	bl	800243c <Clear_LED>
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000590 	.word	0x20000590

08002378 <TimerIRQ>:

void TimerIRQ(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0

	char *msg = "Timer 17 IRQ!\n\r";
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <TimerIRQ+0x3c>)
 8002380:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x100);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fd fefc 	bl	8000180 <strlen>
 8002388:	4603      	mov	r3, r0
 800238a:	b29a      	uxth	r2, r3
 800238c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4809      	ldr	r0, [pc, #36]	; (80023b8 <TimerIRQ+0x40>)
 8002394:	f005 f872 	bl	800747c <HAL_UART_Transmit>
	C3_NOTIFICATION(&bpm,1);
 8002398:	2101      	movs	r1, #1
 800239a:	4808      	ldr	r0, [pc, #32]	; (80023bc <TimerIRQ+0x44>)
 800239c:	f00a fa98 	bl	800c8d0 <C3_NOTIFICATION>

	// UTIL_SEQ_SetTask(1<<CFG_TASK_MY_ACTION,CFG_SCH_PRIO_0);//HW semaphore
	bpm = TimerBPM();
 80023a0:	f000 f80e 	bl	80023c0 <TimerBPM>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <TimerIRQ+0x44>)
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	0800f700 	.word	0x0800f700
 80023b8:	2000035c 	.word	0x2000035c
 80023bc:	200005e0 	.word	0x200005e0

080023c0 <TimerBPM>:

int TimerBPM(void) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	nbBat = htim2.Instance->CNT ;
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <TimerBPM+0x68>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <TimerBPM+0x6c>)
 80023d0:	601a      	str	r2, [r3, #0]

	char * str = (char*) malloc(sizeof(char));
 80023d2:	2001      	movs	r0, #1
 80023d4:	f00b fda4 	bl	800df20 <malloc>
 80023d8:	4603      	mov	r3, r0
 80023da:	607b      	str	r3, [r7, #4]
	sprintf(str, "bpm per minute : %d\n",nbBat);
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <TimerBPM+0x6c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4913      	ldr	r1, [pc, #76]	; (8002430 <TimerBPM+0x70>)
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f00b ff3f 	bl	800e268 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 0x100);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fd fec8 	bl	8000180 <strlen>
 80023f0:	4603      	mov	r3, r0
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <TimerBPM+0x74>)
 80023fc:	f005 f83e 	bl	800747c <HAL_UART_Transmit>

	int bpmM = compteurBpm(nbBat); //We convert the number of beat/10sec to number of beat/min
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <TimerBPM+0x6c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fcf7 	bl	8000df8 <compteurBpm>
 800240a:	6038      	str	r0, [r7, #0]
	htim2.Instance->CNT = 0;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <TimerBPM+0x68>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2200      	movs	r2, #0
 8002412:	625a      	str	r2, [r3, #36]	; 0x24

	free(str);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f00b fd8b 	bl	800df30 <free>
	char * str = (char*) malloc(sizeof(char));
	sprintf(str, "bpm per minute : %d\n",test);
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 0x100);
	free(str);*/

	return test;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <TimerBPM+0x78>)
 800241c:	681b      	ldr	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000544 	.word	0x20000544
 800242c:	200005dc 	.word	0x200005dc
 8002430:	0800f710 	.word	0x0800f710
 8002434:	2000035c 	.word	0x2000035c
 8002438:	200005e4 	.word	0x200005e4

0800243c <Clear_LED>:
// HAL_UART_Transmit(&huart1, &*c, 1, 10);
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x10);
 return ch;
}
void Clear_LED(char data)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
	switch(data){
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	3b41      	subs	r3, #65	; 0x41
 800244a:	2b11      	cmp	r3, #17
 800244c:	d848      	bhi.n	80024e0 <Clear_LED+0xa4>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <Clear_LED+0x18>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	080024c1 	.word	0x080024c1
 8002458:	080024a9 	.word	0x080024a9
 800245c:	080024e1 	.word	0x080024e1
 8002460:	080024e1 	.word	0x080024e1
 8002464:	080024e1 	.word	0x080024e1
 8002468:	080024e1 	.word	0x080024e1
 800246c:	080024b5 	.word	0x080024b5
 8002470:	080024e1 	.word	0x080024e1
 8002474:	080024e1 	.word	0x080024e1
 8002478:	080024e1 	.word	0x080024e1
 800247c:	080024e1 	.word	0x080024e1
 8002480:	080024e1 	.word	0x080024e1
 8002484:	080024e1 	.word	0x080024e1
 8002488:	080024e1 	.word	0x080024e1
 800248c:	080024e1 	.word	0x080024e1
 8002490:	080024e1 	.word	0x080024e1
 8002494:	080024e1 	.word	0x080024e1
 8002498:	0800249d 	.word	0x0800249d

	case 'R' :
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2102      	movs	r1, #2
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <Clear_LED+0xb0>)
 80024a2:	f002 f9f5 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 80024a6:	e01c      	b.n	80024e2 <Clear_LED+0xa6>

	case 'B' :
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2120      	movs	r1, #32
 80024ac:	480f      	ldr	r0, [pc, #60]	; (80024ec <Clear_LED+0xb0>)
 80024ae:	f002 f9ef 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 80024b2:	e016      	b.n	80024e2 <Clear_LED+0xa6>

	case 'G' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2101      	movs	r1, #1
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <Clear_LED+0xb0>)
 80024ba:	f002 f9e9 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 80024be:	e010      	b.n	80024e2 <Clear_LED+0xa6>

	case 'A' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2101      	movs	r1, #1
 80024c4:	4809      	ldr	r0, [pc, #36]	; (80024ec <Clear_LED+0xb0>)
 80024c6:	f002 f9e3 	bl	8004890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2120      	movs	r1, #32
 80024ce:	4807      	ldr	r0, [pc, #28]	; (80024ec <Clear_LED+0xb0>)
 80024d0:	f002 f9de 	bl	8004890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2102      	movs	r1, #2
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <Clear_LED+0xb0>)
 80024da:	f002 f9d9 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 80024de:	e000      	b.n	80024e2 <Clear_LED+0xa6>

	default :
		break;
 80024e0:	bf00      	nop

				}
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	48000400 	.word	0x48000400

080024f0 <Set_LED>:

void Set_LED(char data)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	switch(data){
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	3b41      	subs	r3, #65	; 0x41
 80024fe:	2b11      	cmp	r3, #17
 8002500:	d848      	bhi.n	8002594 <Set_LED+0xa4>
 8002502:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <Set_LED+0x18>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	08002575 	.word	0x08002575
 800250c:	0800255d 	.word	0x0800255d
 8002510:	08002595 	.word	0x08002595
 8002514:	08002595 	.word	0x08002595
 8002518:	08002595 	.word	0x08002595
 800251c:	08002595 	.word	0x08002595
 8002520:	08002569 	.word	0x08002569
 8002524:	08002595 	.word	0x08002595
 8002528:	08002595 	.word	0x08002595
 800252c:	08002595 	.word	0x08002595
 8002530:	08002595 	.word	0x08002595
 8002534:	08002595 	.word	0x08002595
 8002538:	08002595 	.word	0x08002595
 800253c:	08002595 	.word	0x08002595
 8002540:	08002595 	.word	0x08002595
 8002544:	08002595 	.word	0x08002595
 8002548:	08002595 	.word	0x08002595
 800254c:	08002551 	.word	0x08002551

	case 'R' :
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8002550:	2201      	movs	r2, #1
 8002552:	2102      	movs	r1, #2
 8002554:	4812      	ldr	r0, [pc, #72]	; (80025a0 <Set_LED+0xb0>)
 8002556:	f002 f99b 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 800255a:	e01c      	b.n	8002596 <Set_LED+0xa6>

	case 'B' :
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 800255c:	2201      	movs	r2, #1
 800255e:	2120      	movs	r1, #32
 8002560:	480f      	ldr	r0, [pc, #60]	; (80025a0 <Set_LED+0xb0>)
 8002562:	f002 f995 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 8002566:	e016      	b.n	8002596 <Set_LED+0xa6>

	case 'G' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8002568:	2201      	movs	r2, #1
 800256a:	2101      	movs	r1, #1
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <Set_LED+0xb0>)
 800256e:	f002 f98f 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 8002572:	e010      	b.n	8002596 <Set_LED+0xa6>

	case 'A' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8002574:	2201      	movs	r2, #1
 8002576:	2101      	movs	r1, #1
 8002578:	4809      	ldr	r0, [pc, #36]	; (80025a0 <Set_LED+0xb0>)
 800257a:	f002 f989 	bl	8004890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 800257e:	2201      	movs	r2, #1
 8002580:	2120      	movs	r1, #32
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <Set_LED+0xb0>)
 8002584:	f002 f984 	bl	8004890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	2102      	movs	r1, #2
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <Set_LED+0xb0>)
 800258e:	f002 f97f 	bl	8004890 <HAL_GPIO_WritePin>
		break;
 8002592:	e000      	b.n	8002596 <Set_LED+0xa6>

	default :
		break;
 8002594:	bf00      	nop

				}
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	48000400 	.word	0x48000400

080025a4 <Toggle_LED>:

void Toggle_LED(char data)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
	switch(data){
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	3b41      	subs	r3, #65	; 0x41
 80025b2:	2b11      	cmp	r3, #17
 80025b4:	d842      	bhi.n	800263c <Toggle_LED+0x98>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <Toggle_LED+0x18>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	08002623 	.word	0x08002623
 80025c0:	0800260f 	.word	0x0800260f
 80025c4:	0800263d 	.word	0x0800263d
 80025c8:	0800263d 	.word	0x0800263d
 80025cc:	0800263d 	.word	0x0800263d
 80025d0:	0800263d 	.word	0x0800263d
 80025d4:	08002619 	.word	0x08002619
 80025d8:	0800263d 	.word	0x0800263d
 80025dc:	0800263d 	.word	0x0800263d
 80025e0:	0800263d 	.word	0x0800263d
 80025e4:	0800263d 	.word	0x0800263d
 80025e8:	0800263d 	.word	0x0800263d
 80025ec:	0800263d 	.word	0x0800263d
 80025f0:	0800263d 	.word	0x0800263d
 80025f4:	0800263d 	.word	0x0800263d
 80025f8:	0800263d 	.word	0x0800263d
 80025fc:	0800263d 	.word	0x0800263d
 8002600:	08002605 	.word	0x08002605

	case 'R' :
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8002604:	2102      	movs	r1, #2
 8002606:	4810      	ldr	r0, [pc, #64]	; (8002648 <Toggle_LED+0xa4>)
 8002608:	f002 f95a 	bl	80048c0 <HAL_GPIO_TogglePin>
		break;
 800260c:	e017      	b.n	800263e <Toggle_LED+0x9a>

	case 'B' :
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 800260e:	2120      	movs	r1, #32
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <Toggle_LED+0xa4>)
 8002612:	f002 f955 	bl	80048c0 <HAL_GPIO_TogglePin>
		break;
 8002616:	e012      	b.n	800263e <Toggle_LED+0x9a>

	case 'G' :
		HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8002618:	2101      	movs	r1, #1
 800261a:	480b      	ldr	r0, [pc, #44]	; (8002648 <Toggle_LED+0xa4>)
 800261c:	f002 f950 	bl	80048c0 <HAL_GPIO_TogglePin>
		break;
 8002620:	e00d      	b.n	800263e <Toggle_LED+0x9a>

	case 'A' :
		HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8002622:	2101      	movs	r1, #1
 8002624:	4808      	ldr	r0, [pc, #32]	; (8002648 <Toggle_LED+0xa4>)
 8002626:	f002 f94b 	bl	80048c0 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 800262a:	2120      	movs	r1, #32
 800262c:	4806      	ldr	r0, [pc, #24]	; (8002648 <Toggle_LED+0xa4>)
 800262e:	f002 f947 	bl	80048c0 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8002632:	2102      	movs	r1, #2
 8002634:	4804      	ldr	r0, [pc, #16]	; (8002648 <Toggle_LED+0xa4>)
 8002636:	f002 f943 	bl	80048c0 <HAL_GPIO_TogglePin>
		break;
 800263a:	e000      	b.n	800263e <Toggle_LED+0x9a>

	default :
		break;
 800263c:	bf00      	nop

				}
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	48000400 	.word	0x48000400

0800264c <gestionConsoSTM>:


void gestionConsoSTM(void) {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8002650:	2101      	movs	r1, #1
 8002652:	4804      	ldr	r0, [pc, #16]	; (8002664 <gestionConsoSTM+0x18>)
 8002654:	f002 f934 	bl	80048c0 <HAL_GPIO_TogglePin>
	Clear_LED('B');
 8002658:	2042      	movs	r0, #66	; 0x42
 800265a:	f7ff feef 	bl	800243c <Clear_LED>
	/*if (etatSTM == 0) {
		MX_APPE_Init();
	    MX_APPE_Process();
		etatSTM=1;
	}*/
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	48000400 	.word	0x48000400

08002668 <SEND_MES_BLESTATUS>:



void SEND_MES_BLESTATUS(tBleStatus Status)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]

	APP_DBG_MSG("\r\n\r */*/*/*/ ");
 8002672:	48e0      	ldr	r0, [pc, #896]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 8002674:	f008 fbde 	bl	800ae34 <DbgTraceGetFileName>
 8002678:	4601      	mov	r1, r0
 800267a:	f240 3365 	movw	r3, #869	; 0x365
 800267e:	4ade      	ldr	r2, [pc, #888]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 8002680:	48de      	ldr	r0, [pc, #888]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 8002682:	f00b fd53 	bl	800e12c <iprintf>
 8002686:	48de      	ldr	r0, [pc, #888]	; (8002a00 <SEND_MES_BLESTATUS+0x398>)
 8002688:	f00b fd50 	bl	800e12c <iprintf>

	switch(Status){
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b98      	cmp	r3, #152	; 0x98
 8002690:	f300 813c 	bgt.w	800290c <SEND_MES_BLESTATUS+0x2a4>
 8002694:	2b00      	cmp	r3, #0
 8002696:	f2c0 82eb 	blt.w	8002c70 <SEND_MES_BLESTATUS+0x608>
 800269a:	2b98      	cmp	r3, #152	; 0x98
 800269c:	f200 82e8 	bhi.w	8002c70 <SEND_MES_BLESTATUS+0x608>
 80026a0:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <SEND_MES_BLESTATUS+0x40>)
 80026a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a6:	bf00      	nop
 80026a8:	08002915 	.word	0x08002915
 80026ac:	08002c71 	.word	0x08002c71
 80026b0:	08002931 	.word	0x08002931
 80026b4:	08002c71 	.word	0x08002c71
 80026b8:	08002c71 	.word	0x08002c71
 80026bc:	08002c71 	.word	0x08002c71
 80026c0:	08002c71 	.word	0x08002c71
 80026c4:	08002c71 	.word	0x08002c71
 80026c8:	08002c71 	.word	0x08002c71
 80026cc:	08002c71 	.word	0x08002c71
 80026d0:	08002c71 	.word	0x08002c71
 80026d4:	08002c71 	.word	0x08002c71
 80026d8:	080029bd 	.word	0x080029bd
 80026dc:	08002c71 	.word	0x08002c71
 80026e0:	08002c71 	.word	0x08002c71
 80026e4:	08002c71 	.word	0x08002c71
 80026e8:	08002c71 	.word	0x08002c71
 80026ec:	08002c71 	.word	0x08002c71
 80026f0:	08002c71 	.word	0x08002c71
 80026f4:	08002c71 	.word	0x08002c71
 80026f8:	08002c71 	.word	0x08002c71
 80026fc:	08002c71 	.word	0x08002c71
 8002700:	08002c71 	.word	0x08002c71
 8002704:	08002c71 	.word	0x08002c71
 8002708:	08002c71 	.word	0x08002c71
 800270c:	08002c71 	.word	0x08002c71
 8002710:	08002c71 	.word	0x08002c71
 8002714:	08002c71 	.word	0x08002c71
 8002718:	08002c71 	.word	0x08002c71
 800271c:	08002c71 	.word	0x08002c71
 8002720:	08002c71 	.word	0x08002c71
 8002724:	08002c71 	.word	0x08002c71
 8002728:	08002c71 	.word	0x08002c71
 800272c:	08002c71 	.word	0x08002c71
 8002730:	08002c71 	.word	0x08002c71
 8002734:	08002c71 	.word	0x08002c71
 8002738:	08002c71 	.word	0x08002c71
 800273c:	08002c71 	.word	0x08002c71
 8002740:	08002c71 	.word	0x08002c71
 8002744:	08002c71 	.word	0x08002c71
 8002748:	08002c71 	.word	0x08002c71
 800274c:	08002c71 	.word	0x08002c71
 8002750:	08002c71 	.word	0x08002c71
 8002754:	08002c71 	.word	0x08002c71
 8002758:	08002c71 	.word	0x08002c71
 800275c:	08002c71 	.word	0x08002c71
 8002760:	08002c71 	.word	0x08002c71
 8002764:	08002c71 	.word	0x08002c71
 8002768:	08002c71 	.word	0x08002c71
 800276c:	08002c71 	.word	0x08002c71
 8002770:	08002c71 	.word	0x08002c71
 8002774:	08002c71 	.word	0x08002c71
 8002778:	08002c71 	.word	0x08002c71
 800277c:	08002c71 	.word	0x08002c71
 8002780:	08002c71 	.word	0x08002c71
 8002784:	08002c71 	.word	0x08002c71
 8002788:	08002c71 	.word	0x08002c71
 800278c:	08002c71 	.word	0x08002c71
 8002790:	08002c71 	.word	0x08002c71
 8002794:	08002c71 	.word	0x08002c71
 8002798:	08002c71 	.word	0x08002c71
 800279c:	08002c71 	.word	0x08002c71
 80027a0:	08002c71 	.word	0x08002c71
 80027a4:	08002c71 	.word	0x08002c71
 80027a8:	08002c71 	.word	0x08002c71
 80027ac:	08002c71 	.word	0x08002c71
 80027b0:	08002c71 	.word	0x08002c71
 80027b4:	08002c71 	.word	0x08002c71
 80027b8:	08002c71 	.word	0x08002c71
 80027bc:	08002c71 	.word	0x08002c71
 80027c0:	08002c71 	.word	0x08002c71
 80027c4:	08002c71 	.word	0x08002c71
 80027c8:	08002c71 	.word	0x08002c71
 80027cc:	08002c71 	.word	0x08002c71
 80027d0:	08002c71 	.word	0x08002c71
 80027d4:	08002c71 	.word	0x08002c71
 80027d8:	08002c71 	.word	0x08002c71
 80027dc:	08002c71 	.word	0x08002c71
 80027e0:	08002c71 	.word	0x08002c71
 80027e4:	08002c71 	.word	0x08002c71
 80027e8:	08002a41 	.word	0x08002a41
 80027ec:	08002c71 	.word	0x08002c71
 80027f0:	08002c71 	.word	0x08002c71
 80027f4:	08002c71 	.word	0x08002c71
 80027f8:	08002c71 	.word	0x08002c71
 80027fc:	08002c71 	.word	0x08002c71
 8002800:	08002c71 	.word	0x08002c71
 8002804:	08002c71 	.word	0x08002c71
 8002808:	08002c71 	.word	0x08002c71
 800280c:	08002a5d 	.word	0x08002a5d
 8002810:	08002a95 	.word	0x08002a95
 8002814:	08002ab1 	.word	0x08002ab1
 8002818:	08002c71 	.word	0x08002c71
 800281c:	08002ae9 	.word	0x08002ae9
 8002820:	08002a79 	.word	0x08002a79
 8002824:	08002acd 	.word	0x08002acd
 8002828:	08002b05 	.word	0x08002b05
 800282c:	08002b21 	.word	0x08002b21
 8002830:	08002b3d 	.word	0x08002b3d
 8002834:	08002b59 	.word	0x08002b59
 8002838:	08002b75 	.word	0x08002b75
 800283c:	08002b91 	.word	0x08002b91
 8002840:	08002c71 	.word	0x08002c71
 8002844:	08002c71 	.word	0x08002c71
 8002848:	08002c71 	.word	0x08002c71
 800284c:	08002c71 	.word	0x08002c71
 8002850:	08002c71 	.word	0x08002c71
 8002854:	08002c71 	.word	0x08002c71
 8002858:	08002c71 	.word	0x08002c71
 800285c:	08002c71 	.word	0x08002c71
 8002860:	08002c71 	.word	0x08002c71
 8002864:	08002c71 	.word	0x08002c71
 8002868:	08002bad 	.word	0x08002bad
 800286c:	08002c71 	.word	0x08002c71
 8002870:	08002c71 	.word	0x08002c71
 8002874:	08002c71 	.word	0x08002c71
 8002878:	08002c71 	.word	0x08002c71
 800287c:	08002c71 	.word	0x08002c71
 8002880:	08002c71 	.word	0x08002c71
 8002884:	08002c71 	.word	0x08002c71
 8002888:	08002c71 	.word	0x08002c71
 800288c:	08002c71 	.word	0x08002c71
 8002890:	08002c71 	.word	0x08002c71
 8002894:	08002c71 	.word	0x08002c71
 8002898:	08002c71 	.word	0x08002c71
 800289c:	08002c71 	.word	0x08002c71
 80028a0:	08002c71 	.word	0x08002c71
 80028a4:	08002c71 	.word	0x08002c71
 80028a8:	08002c71 	.word	0x08002c71
 80028ac:	08002c71 	.word	0x08002c71
 80028b0:	08002bc9 	.word	0x08002bc9
 80028b4:	08002be5 	.word	0x08002be5
 80028b8:	08002c01 	.word	0x08002c01
 80028bc:	08002c55 	.word	0x08002c55
 80028c0:	08002c39 	.word	0x08002c39
 80028c4:	08002c71 	.word	0x08002c71
 80028c8:	08002c71 	.word	0x08002c71
 80028cc:	08002c71 	.word	0x08002c71
 80028d0:	08002c71 	.word	0x08002c71
 80028d4:	08002c71 	.word	0x08002c71
 80028d8:	08002c71 	.word	0x08002c71
 80028dc:	08002c71 	.word	0x08002c71
 80028e0:	08002c71 	.word	0x08002c71
 80028e4:	08002c71 	.word	0x08002c71
 80028e8:	08002c71 	.word	0x08002c71
 80028ec:	0800294d 	.word	0x0800294d
 80028f0:	08002969 	.word	0x08002969
 80028f4:	08002985 	.word	0x08002985
 80028f8:	08002c71 	.word	0x08002c71
 80028fc:	080029a1 	.word	0x080029a1
 8002900:	08002c71 	.word	0x08002c71
 8002904:	080029d9 	.word	0x080029d9
 8002908:	08002a25 	.word	0x08002a25
 800290c:	2bff      	cmp	r3, #255	; 0xff
 800290e:	f000 8185 	beq.w	8002c1c <SEND_MES_BLESTATUS+0x5b4>
 8002912:	e1ad      	b.n	8002c70 <SEND_MES_BLESTATUS+0x608>

	case BLE_STATUS_SUCCESS :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SUCCESS ");
 8002914:	4837      	ldr	r0, [pc, #220]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 8002916:	f008 fa8d 	bl	800ae34 <DbgTraceGetFileName>
 800291a:	4601      	mov	r1, r0
 800291c:	f240 336a 	movw	r3, #874	; 0x36a
 8002920:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 8002922:	4836      	ldr	r0, [pc, #216]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 8002924:	f00b fc02 	bl	800e12c <iprintf>
 8002928:	4836      	ldr	r0, [pc, #216]	; (8002a04 <SEND_MES_BLESTATUS+0x39c>)
 800292a:	f00b fbff 	bl	800e12c <iprintf>
	break;
 800292e:	e1ad      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_UNKNOWN_CONNECTION_ID :
			APP_DBG_MSG("\r\n\r BLE_STATUS_UNKNOWN_CONNECTION_ID ");
 8002930:	4830      	ldr	r0, [pc, #192]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 8002932:	f008 fa7f 	bl	800ae34 <DbgTraceGetFileName>
 8002936:	4601      	mov	r1, r0
 8002938:	f240 336e 	movw	r3, #878	; 0x36e
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 800293e:	482f      	ldr	r0, [pc, #188]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 8002940:	f00b fbf4 	bl	800e12c <iprintf>
 8002944:	4830      	ldr	r0, [pc, #192]	; (8002a08 <SEND_MES_BLESTATUS+0x3a0>)
 8002946:	f00b fbf1 	bl	800e12c <iprintf>
	break;
 800294a:	e19f      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_FAILED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_FAILED ");
 800294c:	4829      	ldr	r0, [pc, #164]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 800294e:	f008 fa71 	bl	800ae34 <DbgTraceGetFileName>
 8002952:	4601      	mov	r1, r0
 8002954:	f240 3372 	movw	r3, #882	; 0x372
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 800295a:	4828      	ldr	r0, [pc, #160]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 800295c:	f00b fbe6 	bl	800e12c <iprintf>
 8002960:	482a      	ldr	r0, [pc, #168]	; (8002a0c <SEND_MES_BLESTATUS+0x3a4>)
 8002962:	f00b fbe3 	bl	800e12c <iprintf>
	break;
 8002966:	e191      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_INVALID_PARAMS :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_PARAMS ");
 8002968:	4822      	ldr	r0, [pc, #136]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 800296a:	f008 fa63 	bl	800ae34 <DbgTraceGetFileName>
 800296e:	4601      	mov	r1, r0
 8002970:	f240 3376 	movw	r3, #886	; 0x376
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 8002976:	4821      	ldr	r0, [pc, #132]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 8002978:	f00b fbd8 	bl	800e12c <iprintf>
 800297c:	4824      	ldr	r0, [pc, #144]	; (8002a10 <SEND_MES_BLESTATUS+0x3a8>)
 800297e:	f00b fbd5 	bl	800e12c <iprintf>
	break;
 8002982:	e183      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_BUSY :
			APP_DBG_MSG("\r\n\r BLE_STATUS_BUSY ");
 8002984:	481b      	ldr	r0, [pc, #108]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 8002986:	f008 fa55 	bl	800ae34 <DbgTraceGetFileName>
 800298a:	4601      	mov	r1, r0
 800298c:	f240 337a 	movw	r3, #890	; 0x37a
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 8002992:	481a      	ldr	r0, [pc, #104]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 8002994:	f00b fbca 	bl	800e12c <iprintf>
 8002998:	481e      	ldr	r0, [pc, #120]	; (8002a14 <SEND_MES_BLESTATUS+0x3ac>)
 800299a:	f00b fbc7 	bl	800e12c <iprintf>
	break;
 800299e:	e175      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_PENDING :
			APP_DBG_MSG("\r\n\r BLE_STATUS_PENDING ");
 80029a0:	4814      	ldr	r0, [pc, #80]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 80029a2:	f008 fa47 	bl	800ae34 <DbgTraceGetFileName>
 80029a6:	4601      	mov	r1, r0
 80029a8:	f240 337e 	movw	r3, #894	; 0x37e
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 80029ae:	4813      	ldr	r0, [pc, #76]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 80029b0:	f00b fbbc 	bl	800e12c <iprintf>
 80029b4:	4818      	ldr	r0, [pc, #96]	; (8002a18 <SEND_MES_BLESTATUS+0x3b0>)
 80029b6:	f00b fbb9 	bl	800e12c <iprintf>
	break;
 80029ba:	e167      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_NOT_ALLOWED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_NOT_ALLOWED ");
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 80029be:	f008 fa39 	bl	800ae34 <DbgTraceGetFileName>
 80029c2:	4601      	mov	r1, r0
 80029c4:	f240 3382 	movw	r3, #898	; 0x382
 80029c8:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 80029ca:	480c      	ldr	r0, [pc, #48]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 80029cc:	f00b fbae 	bl	800e12c <iprintf>
 80029d0:	4812      	ldr	r0, [pc, #72]	; (8002a1c <SEND_MES_BLESTATUS+0x3b4>)
 80029d2:	f00b fbab 	bl	800e12c <iprintf>
	break;
 80029d6:	e159      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_ERROR :
			APP_DBG_MSG("\r\n\r BLE_STATUS_ERROR ");
 80029d8:	4806      	ldr	r0, [pc, #24]	; (80029f4 <SEND_MES_BLESTATUS+0x38c>)
 80029da:	f008 fa2b 	bl	800ae34 <DbgTraceGetFileName>
 80029de:	4601      	mov	r1, r0
 80029e0:	f240 3386 	movw	r3, #902	; 0x386
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <SEND_MES_BLESTATUS+0x390>)
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <SEND_MES_BLESTATUS+0x394>)
 80029e8:	f00b fba0 	bl	800e12c <iprintf>
 80029ec:	480c      	ldr	r0, [pc, #48]	; (8002a20 <SEND_MES_BLESTATUS+0x3b8>)
 80029ee:	f00b fb9d 	bl	800e12c <iprintf>
	break;
 80029f2:	e14b      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>
 80029f4:	0800f728 	.word	0x0800f728
 80029f8:	08011090 	.word	0x08011090
 80029fc:	0800f73c 	.word	0x0800f73c
 8002a00:	0800f750 	.word	0x0800f750
 8002a04:	0800f760 	.word	0x0800f760
 8002a08:	0800f778 	.word	0x0800f778
 8002a0c:	0800f7a0 	.word	0x0800f7a0
 8002a10:	0800f7b8 	.word	0x0800f7b8
 8002a14:	0800f7d8 	.word	0x0800f7d8
 8002a18:	0800f7f0 	.word	0x0800f7f0
 8002a1c:	0800f808 	.word	0x0800f808
 8002a20:	0800f824 	.word	0x0800f824

	case BLE_STATUS_OUT_OF_MEMORY :
			APP_DBG_MSG("\r\n\r BLE_STATUS_OUT_OF_MEMORY ");
 8002a24:	48a2      	ldr	r0, [pc, #648]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002a26:	f008 fa05 	bl	800ae34 <DbgTraceGetFileName>
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	f240 338a 	movw	r3, #906	; 0x38a
 8002a30:	4aa0      	ldr	r2, [pc, #640]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002a32:	48a1      	ldr	r0, [pc, #644]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002a34:	f00b fb7a 	bl	800e12c <iprintf>
 8002a38:	48a0      	ldr	r0, [pc, #640]	; (8002cbc <SEND_MES_BLESTATUS+0x654>)
 8002a3a:	f00b fb77 	bl	800e12c <iprintf>
	break;
 8002a3e:	e125      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_INVALID_CID :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_CID ");
 8002a40:	489b      	ldr	r0, [pc, #620]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002a42:	f008 f9f7 	bl	800ae34 <DbgTraceGetFileName>
 8002a46:	4601      	mov	r1, r0
 8002a48:	f240 338e 	movw	r3, #910	; 0x38e
 8002a4c:	4a99      	ldr	r2, [pc, #612]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002a4e:	489a      	ldr	r0, [pc, #616]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002a50:	f00b fb6c 	bl	800e12c <iprintf>
 8002a54:	489a      	ldr	r0, [pc, #616]	; (8002cc0 <SEND_MES_BLESTATUS+0x658>)
 8002a56:	f00b fb69 	bl	800e12c <iprintf>
	break;
 8002a5a:	e117      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_DEV_IN_BLACKLIST :
			APP_DBG_MSG("\r\n\r BLE_STATUS_DEV_IN_BLACKLIST ");
 8002a5c:	4894      	ldr	r0, [pc, #592]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002a5e:	f008 f9e9 	bl	800ae34 <DbgTraceGetFileName>
 8002a62:	4601      	mov	r1, r0
 8002a64:	f240 3392 	movw	r3, #914	; 0x392
 8002a68:	4a92      	ldr	r2, [pc, #584]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002a6a:	4893      	ldr	r0, [pc, #588]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002a6c:	f00b fb5e 	bl	800e12c <iprintf>
 8002a70:	4894      	ldr	r0, [pc, #592]	; (8002cc4 <SEND_MES_BLESTATUS+0x65c>)
 8002a72:	f00b fb5b 	bl	800e12c <iprintf>
	break;
 8002a76:	e109      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_DEV_NOT_BONDED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_DEV_NOT_BONDED ");
 8002a78:	488d      	ldr	r0, [pc, #564]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002a7a:	f008 f9db 	bl	800ae34 <DbgTraceGetFileName>
 8002a7e:	4601      	mov	r1, r0
 8002a80:	f240 3396 	movw	r3, #918	; 0x396
 8002a84:	4a8b      	ldr	r2, [pc, #556]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002a86:	488c      	ldr	r0, [pc, #560]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002a88:	f00b fb50 	bl	800e12c <iprintf>
 8002a8c:	488e      	ldr	r0, [pc, #568]	; (8002cc8 <SEND_MES_BLESTATUS+0x660>)
 8002a8e:	f00b fb4d 	bl	800e12c <iprintf>
	break;
 8002a92:	e0fb      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_CSRK_NOT_FOUND :
			APP_DBG_MSG("\r\n\r BLE_STATUS_CSRK_NOT_FOUND ");
 8002a94:	4886      	ldr	r0, [pc, #536]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002a96:	f008 f9cd 	bl	800ae34 <DbgTraceGetFileName>
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	f240 339a 	movw	r3, #922	; 0x39a
 8002aa0:	4a84      	ldr	r2, [pc, #528]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002aa2:	4885      	ldr	r0, [pc, #532]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002aa4:	f00b fb42 	bl	800e12c <iprintf>
 8002aa8:	4888      	ldr	r0, [pc, #544]	; (8002ccc <SEND_MES_BLESTATUS+0x664>)
 8002aaa:	f00b fb3f 	bl	800e12c <iprintf>
	break;
 8002aae:	e0ed      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_IRK_NOT_FOUND :
			APP_DBG_MSG("\r\n\r BLE_STATUS_IRK_NOT_FOUND ");
 8002ab0:	487f      	ldr	r0, [pc, #508]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002ab2:	f008 f9bf 	bl	800ae34 <DbgTraceGetFileName>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	f240 339e 	movw	r3, #926	; 0x39e
 8002abc:	4a7d      	ldr	r2, [pc, #500]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002abe:	487e      	ldr	r0, [pc, #504]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002ac0:	f00b fb34 	bl	800e12c <iprintf>
 8002ac4:	4882      	ldr	r0, [pc, #520]	; (8002cd0 <SEND_MES_BLESTATUS+0x668>)
 8002ac6:	f00b fb31 	bl	800e12c <iprintf>
	break;
 8002aca:	e0df      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_INSUFFICIENT_ENC_KEYSIZE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INSUFFICIENT_ENC_KEYSIZE ");
 8002acc:	4878      	ldr	r0, [pc, #480]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002ace:	f008 f9b1 	bl	800ae34 <DbgTraceGetFileName>
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	f240 33a2 	movw	r3, #930	; 0x3a2
 8002ad8:	4a76      	ldr	r2, [pc, #472]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002ada:	4877      	ldr	r0, [pc, #476]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002adc:	f00b fb26 	bl	800e12c <iprintf>
 8002ae0:	487c      	ldr	r0, [pc, #496]	; (8002cd4 <SEND_MES_BLESTATUS+0x66c>)
 8002ae2:	f00b fb23 	bl	800e12c <iprintf>
	break;
 8002ae6:	e0d1      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_SEC_DB_FULL :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SEC_DB_FULL ");
 8002ae8:	4871      	ldr	r0, [pc, #452]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002aea:	f008 f9a3 	bl	800ae34 <DbgTraceGetFileName>
 8002aee:	4601      	mov	r1, r0
 8002af0:	f240 33a6 	movw	r3, #934	; 0x3a6
 8002af4:	4a6f      	ldr	r2, [pc, #444]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002af6:	4870      	ldr	r0, [pc, #448]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002af8:	f00b fb18 	bl	800e12c <iprintf>
 8002afc:	4876      	ldr	r0, [pc, #472]	; (8002cd8 <SEND_MES_BLESTATUS+0x670>)
 8002afe:	f00b fb15 	bl	800e12c <iprintf>
	break;
 8002b02:	e0c3      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_INVALID_HANDLE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_HANDLE ");
 8002b04:	486a      	ldr	r0, [pc, #424]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002b06:	f008 f995 	bl	800ae34 <DbgTraceGetFileName>
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	f240 33aa 	movw	r3, #938	; 0x3aa
 8002b10:	4a68      	ldr	r2, [pc, #416]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002b12:	4869      	ldr	r0, [pc, #420]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002b14:	f00b fb0a 	bl	800e12c <iprintf>
 8002b18:	4870      	ldr	r0, [pc, #448]	; (8002cdc <SEND_MES_BLESTATUS+0x674>)
 8002b1a:	f00b fb07 	bl	800e12c <iprintf>
	break;
 8002b1e:	e0b5      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_OUT_OF_HANDLE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_OUT_OF_HANDLE ");
 8002b20:	4863      	ldr	r0, [pc, #396]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002b22:	f008 f987 	bl	800ae34 <DbgTraceGetFileName>
 8002b26:	4601      	mov	r1, r0
 8002b28:	f240 33ae 	movw	r3, #942	; 0x3ae
 8002b2c:	4a61      	ldr	r2, [pc, #388]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002b2e:	4862      	ldr	r0, [pc, #392]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002b30:	f00b fafc 	bl	800e12c <iprintf>
 8002b34:	486a      	ldr	r0, [pc, #424]	; (8002ce0 <SEND_MES_BLESTATUS+0x678>)
 8002b36:	f00b faf9 	bl	800e12c <iprintf>
	break;
 8002b3a:	e0a7      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_INVALID_OPERATION :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_OPERATION ");
 8002b3c:	485c      	ldr	r0, [pc, #368]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002b3e:	f008 f979 	bl	800ae34 <DbgTraceGetFileName>
 8002b42:	4601      	mov	r1, r0
 8002b44:	f240 33b2 	movw	r3, #946	; 0x3b2
 8002b48:	4a5a      	ldr	r2, [pc, #360]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002b4a:	485b      	ldr	r0, [pc, #364]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002b4c:	f00b faee 	bl	800e12c <iprintf>
 8002b50:	4864      	ldr	r0, [pc, #400]	; (8002ce4 <SEND_MES_BLESTATUS+0x67c>)
 8002b52:	f00b faeb 	bl	800e12c <iprintf>
	break;
 8002b56:	e099      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_CHARAC_ALREADY_EXISTS :
			APP_DBG_MSG("\r\n\r BLE_STATUS_CHARAC_ALREADY_EXISTS ");
 8002b58:	4855      	ldr	r0, [pc, #340]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002b5a:	f008 f96b 	bl	800ae34 <DbgTraceGetFileName>
 8002b5e:	4601      	mov	r1, r0
 8002b60:	f240 33b6 	movw	r3, #950	; 0x3b6
 8002b64:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002b66:	4854      	ldr	r0, [pc, #336]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002b68:	f00b fae0 	bl	800e12c <iprintf>
 8002b6c:	485e      	ldr	r0, [pc, #376]	; (8002ce8 <SEND_MES_BLESTATUS+0x680>)
 8002b6e:	f00b fadd 	bl	800e12c <iprintf>
	break;
 8002b72:	e08b      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_INSUFFICIENT_RESOURCES :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INSUFFICIENT_RESOURCES ");
 8002b74:	484e      	ldr	r0, [pc, #312]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002b76:	f008 f95d 	bl	800ae34 <DbgTraceGetFileName>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	f240 33ba 	movw	r3, #954	; 0x3ba
 8002b80:	4a4c      	ldr	r2, [pc, #304]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002b82:	484d      	ldr	r0, [pc, #308]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002b84:	f00b fad2 	bl	800e12c <iprintf>
 8002b88:	4858      	ldr	r0, [pc, #352]	; (8002cec <SEND_MES_BLESTATUS+0x684>)
 8002b8a:	f00b facf 	bl	800e12c <iprintf>
	break;
 8002b8e:	e07d      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_SEC_PERMISSION_ERROR :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SEC_PERMISSION_ERROR ");
 8002b90:	4847      	ldr	r0, [pc, #284]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002b92:	f008 f94f 	bl	800ae34 <DbgTraceGetFileName>
 8002b96:	4601      	mov	r1, r0
 8002b98:	f240 33be 	movw	r3, #958	; 0x3be
 8002b9c:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002b9e:	4846      	ldr	r0, [pc, #280]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002ba0:	f00b fac4 	bl	800e12c <iprintf>
 8002ba4:	4852      	ldr	r0, [pc, #328]	; (8002cf0 <SEND_MES_BLESTATUS+0x688>)
 8002ba6:	f00b fac1 	bl	800e12c <iprintf>
	break;
 8002baa:	e06f      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_ADDRESS_NOT_RESOLVED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_ADDRESS_NOT_RESOLVED ");
 8002bac:	4840      	ldr	r0, [pc, #256]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002bae:	f008 f941 	bl	800ae34 <DbgTraceGetFileName>
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	f240 33c2 	movw	r3, #962	; 0x3c2
 8002bb8:	4a3e      	ldr	r2, [pc, #248]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002bba:	483f      	ldr	r0, [pc, #252]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002bbc:	f00b fab6 	bl	800e12c <iprintf>
 8002bc0:	484c      	ldr	r0, [pc, #304]	; (8002cf4 <SEND_MES_BLESTATUS+0x68c>)
 8002bc2:	f00b fab3 	bl	800e12c <iprintf>
	break;
 8002bc6:	e061      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_NO_VALID_SLOT :
			APP_DBG_MSG("\r\n\r BLE_STATUS_NO_VALID_SLOT ");
 8002bc8:	4839      	ldr	r0, [pc, #228]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002bca:	f008 f933 	bl	800ae34 <DbgTraceGetFileName>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	f240 33c6 	movw	r3, #966	; 0x3c6
 8002bd4:	4a37      	ldr	r2, [pc, #220]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002bd6:	4838      	ldr	r0, [pc, #224]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002bd8:	f00b faa8 	bl	800e12c <iprintf>
 8002bdc:	4846      	ldr	r0, [pc, #280]	; (8002cf8 <SEND_MES_BLESTATUS+0x690>)
 8002bde:	f00b faa5 	bl	800e12c <iprintf>
	break;
 8002be2:	e053      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_SCAN_WINDOW_SHORT :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SCAN_WINDOW_SHORT ");
 8002be4:	4832      	ldr	r0, [pc, #200]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002be6:	f008 f925 	bl	800ae34 <DbgTraceGetFileName>
 8002bea:	4601      	mov	r1, r0
 8002bec:	f240 33ca 	movw	r3, #970	; 0x3ca
 8002bf0:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002bf2:	4831      	ldr	r0, [pc, #196]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002bf4:	f00b fa9a 	bl	800e12c <iprintf>
 8002bf8:	4840      	ldr	r0, [pc, #256]	; (8002cfc <SEND_MES_BLESTATUS+0x694>)
 8002bfa:	f00b fa97 	bl	800e12c <iprintf>
	break;
 8002bfe:	e045      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_NEW_INTERVAL_FAILED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_NEW_INTERVAL_FAILED ");
 8002c00:	482b      	ldr	r0, [pc, #172]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002c02:	f008 f917 	bl	800ae34 <DbgTraceGetFileName>
 8002c06:	4601      	mov	r1, r0
 8002c08:	f240 33ce 	movw	r3, #974	; 0x3ce
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002c0e:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002c10:	f00b fa8c 	bl	800e12c <iprintf>
 8002c14:	483a      	ldr	r0, [pc, #232]	; (8002d00 <SEND_MES_BLESTATUS+0x698>)
 8002c16:	f00b fa89 	bl	800e12c <iprintf>
	break;
 8002c1a:	e037      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_TIMEOUT :
			APP_DBG_MSG("\r\n\r BLE_STATUS_TIMEOUT ");
 8002c1c:	4824      	ldr	r0, [pc, #144]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002c1e:	f008 f909 	bl	800ae34 <DbgTraceGetFileName>
 8002c22:	4601      	mov	r1, r0
 8002c24:	f240 33d2 	movw	r3, #978	; 0x3d2
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002c2a:	4823      	ldr	r0, [pc, #140]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002c2c:	f00b fa7e 	bl	800e12c <iprintf>
 8002c30:	4834      	ldr	r0, [pc, #208]	; (8002d04 <SEND_MES_BLESTATUS+0x69c>)
 8002c32:	f00b fa7b 	bl	800e12c <iprintf>
	break;
 8002c36:	e029      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_LENGTH_FAILED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_LENGTH_FAILED ");
 8002c38:	481d      	ldr	r0, [pc, #116]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002c3a:	f008 f8fb 	bl	800ae34 <DbgTraceGetFileName>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	f240 33d6 	movw	r3, #982	; 0x3d6
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002c46:	481c      	ldr	r0, [pc, #112]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002c48:	f00b fa70 	bl	800e12c <iprintf>
 8002c4c:	482e      	ldr	r0, [pc, #184]	; (8002d08 <SEND_MES_BLESTATUS+0x6a0>)
 8002c4e:	f00b fa6d 	bl	800e12c <iprintf>
	break;
 8002c52:	e01b      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	case BLE_STATUS_INTERVAL_TOO_LARGE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INTERVAL_TOO_LARGE ");
 8002c54:	4816      	ldr	r0, [pc, #88]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002c56:	f008 f8ed 	bl	800ae34 <DbgTraceGetFileName>
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	f240 33da 	movw	r3, #986	; 0x3da
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002c62:	4815      	ldr	r0, [pc, #84]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002c64:	f00b fa62 	bl	800e12c <iprintf>
 8002c68:	4828      	ldr	r0, [pc, #160]	; (8002d0c <SEND_MES_BLESTATUS+0x6a4>)
 8002c6a:	f00b fa5f 	bl	800e12c <iprintf>
	break;
 8002c6e:	e00d      	b.n	8002c8c <SEND_MES_BLESTATUS+0x624>

	default :
		APP_DBG_MSG("\r\n\r Unknow error ");
 8002c70:	480f      	ldr	r0, [pc, #60]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002c72:	f008 f8df 	bl	800ae34 <DbgTraceGetFileName>
 8002c76:	4601      	mov	r1, r0
 8002c78:	f240 33de 	movw	r3, #990	; 0x3de
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002c7e:	480e      	ldr	r0, [pc, #56]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002c80:	f00b fa54 	bl	800e12c <iprintf>
 8002c84:	4822      	ldr	r0, [pc, #136]	; (8002d10 <SEND_MES_BLESTATUS+0x6a8>)
 8002c86:	f00b fa51 	bl	800e12c <iprintf>
	break;
 8002c8a:	bf00      	nop
	}

	APP_DBG_MSG("\r\n\r */*/*/*/ ");
 8002c8c:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <SEND_MES_BLESTATUS+0x648>)
 8002c8e:	f008 f8d1 	bl	800ae34 <DbgTraceGetFileName>
 8002c92:	4601      	mov	r1, r0
 8002c94:	f240 33e2 	movw	r3, #994	; 0x3e2
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <SEND_MES_BLESTATUS+0x64c>)
 8002c9a:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <SEND_MES_BLESTATUS+0x650>)
 8002c9c:	f00b fa46 	bl	800e12c <iprintf>
 8002ca0:	481c      	ldr	r0, [pc, #112]	; (8002d14 <SEND_MES_BLESTATUS+0x6ac>)
 8002ca2:	f00b fa43 	bl	800e12c <iprintf>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	0800f728 	.word	0x0800f728
 8002cb4:	08011090 	.word	0x08011090
 8002cb8:	0800f73c 	.word	0x0800f73c
 8002cbc:	0800f83c 	.word	0x0800f83c
 8002cc0:	0800f85c 	.word	0x0800f85c
 8002cc4:	0800f878 	.word	0x0800f878
 8002cc8:	0800f89c 	.word	0x0800f89c
 8002ccc:	0800f8bc 	.word	0x0800f8bc
 8002cd0:	0800f8dc 	.word	0x0800f8dc
 8002cd4:	0800f8fc 	.word	0x0800f8fc
 8002cd8:	0800f928 	.word	0x0800f928
 8002cdc:	0800f944 	.word	0x0800f944
 8002ce0:	0800f964 	.word	0x0800f964
 8002ce4:	0800f984 	.word	0x0800f984
 8002ce8:	0800f9a8 	.word	0x0800f9a8
 8002cec:	0800f9d0 	.word	0x0800f9d0
 8002cf0:	0800f9f8 	.word	0x0800f9f8
 8002cf4:	0800fa20 	.word	0x0800fa20
 8002cf8:	0800fa48 	.word	0x0800fa48
 8002cfc:	0800fa68 	.word	0x0800fa68
 8002d00:	0800fa8c 	.word	0x0800fa8c
 8002d04:	0800fab0 	.word	0x0800fab0
 8002d08:	0800fac8 	.word	0x0800fac8
 8002d0c:	0800fae8 	.word	0x0800fae8
 8002d10:	0800fb0c 	.word	0x0800fb0c
 8002d14:	0800f750 	.word	0x0800f750

08002d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1c:	b672      	cpsid	i
}
 8002d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <Error_Handler+0x8>

08002d22 <LL_RCC_EnableRTC>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_AHB2_GRP1_EnableClock>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_AHB3_GRP1_EnableClock>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002e42:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e46:	f7ff ff96 	bl	8002d76 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	202e      	movs	r0, #46	; 0x2e
 8002e50:	f000 ffdd 	bl	8003e0e <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e54:	202e      	movs	r0, #46	; 0x2e
 8002e56:	f000 fff4 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <HAL_COMP_MspInit+0x9c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d137      	bne.n	8002ef2 <HAL_COMP_MspInit+0x92>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	2001      	movs	r0, #1
 8002e84:	f7ff ff5e 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f7ff ff5b 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    /**COMP2 GPIO Configuration
    PA4     ------> COMP2_INM
    PA7     ------> COMP2_OUT
    PB4     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e8e:	2310      	movs	r3, #16
 8002e90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e92:	2303      	movs	r3, #3
 8002e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea4:	f001 fb84 	bl	80045b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_COMP2;
 8002eb8:	230c      	movs	r3, #12
 8002eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec6:	f001 fb73 	bl	80045b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	4619      	mov	r1, r3
 8002edc:	4808      	ldr	r0, [pc, #32]	; (8002f00 <HAL_COMP_MspInit+0xa0>)
 8002ede:	f001 fb67 	bl	80045b0 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2016      	movs	r0, #22
 8002ee8:	f000 ff91 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8002eec:	2016      	movs	r0, #22
 8002eee:	f000 ffa8 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40010204 	.word	0x40010204
 8002f00:	48000400 	.word	0x48000400

08002f04 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_IPCC_MspInit+0x44>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d113      	bne.n	8002f3e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002f16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f1a:	f7ff ff2c 	bl	8002d76 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	202c      	movs	r0, #44	; 0x2c
 8002f24:	f000 ff73 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002f28:	202c      	movs	r0, #44	; 0x2c
 8002f2a:	f000 ff8a 	bl	8003e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	202d      	movs	r0, #45	; 0x2d
 8002f34:	f000 ff6b 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002f38:	202d      	movs	r0, #45	; 0x2d
 8002f3a:	f000 ff82 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	58000c00 	.word	0x58000c00

08002f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0a0      	sub	sp, #128	; 0x80
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f64:	f107 030c 	add.w	r3, r7, #12
 8002f68:	2250      	movs	r2, #80	; 0x50
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00a fff5 	bl	800df5c <memset>
  if(huart->Instance==LPUART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7d      	ldr	r2, [pc, #500]	; (800316c <HAL_UART_MspInit+0x220>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d16e      	bne.n	800305a <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f84:	f107 030c 	add.w	r3, r7, #12
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 f8e0 	bl	800614e <HAL_RCCEx_PeriphCLKConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f94:	f7ff fec0 	bl	8002d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7ff ff1e 	bl	8002dda <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f7ff fed0 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fa4:	230c      	movs	r3, #12
 8002fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc2:	f001 faf5 	bl	80045b0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002fc6:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_UART_MspInit+0x228>)
 8002fca:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002fce:	2211      	movs	r2, #17
 8002fd0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd2:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd8:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fde:	4b64      	ldr	r3, [pc, #400]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe4:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fea:	4b61      	ldr	r3, [pc, #388]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002ff0:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff6:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002ffc:	485c      	ldr	r0, [pc, #368]	; (8003170 <HAL_UART_MspInit+0x224>)
 8002ffe:	f000 ff65 	bl	8003ecc <HAL_DMA_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003008:	f7ff fe86 	bl	8002d18 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 800300c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003010:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003012:	2300      	movs	r3, #0
 8003014:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8003026:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800302a:	4619      	mov	r1, r3
 800302c:	4850      	ldr	r0, [pc, #320]	; (8003170 <HAL_UART_MspInit+0x224>)
 800302e:	f001 fa7f 	bl	8004530 <HAL_DMAEx_ConfigMuxSync>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003038:	f7ff fe6e 	bl	8002d18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4c      	ldr	r2, [pc, #304]	; (8003170 <HAL_UART_MspInit+0x224>)
 8003040:	679a      	str	r2, [r3, #120]	; 0x78
 8003042:	4a4b      	ldr	r2, [pc, #300]	; (8003170 <HAL_UART_MspInit+0x224>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	2025      	movs	r0, #37	; 0x25
 800304e:	f000 fede 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003052:	2025      	movs	r0, #37	; 0x25
 8003054:	f000 fef5 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003058:	e083      	b.n	8003162 <HAL_UART_MspInit+0x216>
  else if(huart->Instance==USART1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a46      	ldr	r2, [pc, #280]	; (8003178 <HAL_UART_MspInit+0x22c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d17e      	bne.n	8003162 <HAL_UART_MspInit+0x216>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003064:	2301      	movs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	4618      	mov	r0, r3
 8003072:	f003 f86c 	bl	800614e <HAL_RCCEx_PeriphCLKConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800307c:	f7ff fe4c 	bl	8002d18 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003080:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003084:	f7ff fec2 	bl	8002e0c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003088:	2002      	movs	r0, #2
 800308a:	f7ff fe5b 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003096:	2301      	movs	r3, #1
 8003098:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800309e:	2307      	movs	r3, #7
 80030a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030a6:	4619      	mov	r1, r3
 80030a8:	4834      	ldr	r0, [pc, #208]	; (800317c <HAL_UART_MspInit+0x230>)
 80030aa:	f001 fa81 	bl	80045b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030b0:	4a34      	ldr	r2, [pc, #208]	; (8003184 <HAL_UART_MspInit+0x238>)
 80030b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030b6:	220f      	movs	r2, #15
 80030b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030bc:	2210      	movs	r2, #16
 80030be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030cc:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030da:	2220      	movs	r2, #32
 80030dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030e4:	4826      	ldr	r0, [pc, #152]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030e6:	f000 fef1 	bl	8003ecc <HAL_DMA_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80030f0:	f7ff fe12 	bl	8002d18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030f8:	679a      	str	r2, [r3, #120]	; 0x78
 80030fa:	4a21      	ldr	r2, [pc, #132]	; (8003180 <HAL_UART_MspInit+0x234>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_UART_MspInit+0x23c>)
 8003102:	4a22      	ldr	r2, [pc, #136]	; (800318c <HAL_UART_MspInit+0x240>)
 8003104:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_UART_MspInit+0x23c>)
 8003108:	220e      	movs	r2, #14
 800310a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_UART_MspInit+0x23c>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_UART_MspInit+0x23c>)
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_UART_MspInit+0x23c>)
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <HAL_UART_MspInit+0x23c>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_UART_MspInit+0x23c>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_UART_MspInit+0x23c>)
 800312c:	2220      	movs	r2, #32
 800312e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_UART_MspInit+0x23c>)
 8003132:	2200      	movs	r2, #0
 8003134:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003136:	4814      	ldr	r0, [pc, #80]	; (8003188 <HAL_UART_MspInit+0x23c>)
 8003138:	f000 fec8 	bl	8003ecc <HAL_DMA_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8003142:	f7ff fde9 	bl	8002d18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <HAL_UART_MspInit+0x23c>)
 800314a:	67da      	str	r2, [r3, #124]	; 0x7c
 800314c:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <HAL_UART_MspInit+0x23c>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	2024      	movs	r0, #36	; 0x24
 8003158:	f000 fe59 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800315c:	2024      	movs	r0, #36	; 0x24
 800315e:	f000 fe70 	bl	8003e42 <HAL_NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3780      	adds	r7, #128	; 0x80
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40008000 	.word	0x40008000
 8003170:	200003ec 	.word	0x200003ec
 8003174:	40020044 	.word	0x40020044
 8003178:	40013800 	.word	0x40013800
 800317c:	48000400 	.word	0x48000400
 8003180:	2000044c 	.word	0x2000044c
 8003184:	40020444 	.word	0x40020444
 8003188:	200004ac 	.word	0x200004ac
 800318c:	40020008 	.word	0x40020008

08003190 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b096      	sub	sp, #88	; 0x58
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	2250      	movs	r2, #80	; 0x50
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00a fedb 	bl	800df5c <memset>
  if(hrng->Instance==RNG)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_RNG_MspInit+0x50>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d113      	bne.n	80031d8 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80031b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80031b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031bc:	f107 0308 	add.w	r3, r7, #8
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 ffc4 	bl	800614e <HAL_RCCEx_PeriphCLKConfig>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80031cc:	f7ff fda4 	bl	8002d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80031d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80031d4:	f7ff fdcf 	bl	8002d76 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80031d8:	bf00      	nop
 80031da:	3758      	adds	r7, #88	; 0x58
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58001000 	.word	0x58001000

080031e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b096      	sub	sp, #88	; 0x58
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031ec:	f107 0308 	add.w	r3, r7, #8
 80031f0:	2250      	movs	r2, #80	; 0x50
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f00a feb1 	bl	800df5c <memset>
  if(hrtc->Instance==RTC)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_RTC_MspInit+0x64>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d11d      	bne.n	8003240 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003208:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800320a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003210:	f107 0308 	add.w	r3, r7, #8
 8003214:	4618      	mov	r0, r3
 8003216:	f002 ff9a 	bl	800614e <HAL_RCCEx_PeriphCLKConfig>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003220:	f7ff fd7a 	bl	8002d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003224:	f7ff fd7d 	bl	8002d22 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003228:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800322c:	f7ff fdbc 	bl	8002da8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2100      	movs	r1, #0
 8003234:	2003      	movs	r0, #3
 8003236:	f000 fdea 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800323a:	2003      	movs	r0, #3
 800323c:	f000 fe01 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003240:	bf00      	nop
 8003242:	3758      	adds	r7, #88	; 0x58
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40002800 	.word	0x40002800

0800324c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d10b      	bne.n	8003276 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800325e:	2001      	movs	r0, #1
 8003260:	f7ff fda2 	bl	8002da8 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2100      	movs	r1, #0
 8003268:	201c      	movs	r0, #28
 800326a:	f000 fdd0 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800326e:	201c      	movs	r0, #28
 8003270:	f000 fde7 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003274:	e010      	b.n	8003298 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM17)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_TIM_Base_MspInit+0x54>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10b      	bne.n	8003298 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003280:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003284:	f7ff fdc2 	bl	8002e0c <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	201a      	movs	r0, #26
 800328e:	f000 fdbe 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003292:	201a      	movs	r0, #26
 8003294:	f000 fdd5 	bl	8003e42 <HAL_NVIC_EnableIRQ>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40014800 	.word	0x40014800

080032a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <NMI_Handler+0x4>

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ae:	e7fe      	b.n	80032ae <HardFault_Handler+0x4>

080032b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <MemManage_Handler+0x4>

080032b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ba:	e7fe      	b.n	80032ba <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f0:	f000 f9fa 	bl	80036e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80032fc:	f7fe f908 	bl	8001510 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}

08003304 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8003308:	2001      	movs	r0, #1
 800330a:	f001 faf3 	bl	80048f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}

08003312 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8003316:	2002      	movs	r0, #2
 8003318:	f001 faec 	bl	80048f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}

08003320 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(SW1_Pin)) {
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <EXTI4_IRQHandler+0x24>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <EXTI4_IRQHandler+0x1a>
		gestionConsoSTM();
 8003330:	f7ff f98c 	bl	800264c <gestionConsoSTM>
		__HAL_GPIO_EXTI_CLEAR_IT(SW1_Pin);
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <EXTI4_IRQHandler+0x24>)
 8003336:	2210      	movs	r2, #16
 8003338:	60da      	str	r2, [r3, #12]
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800333a:	2010      	movs	r0, #16
 800333c:	f001 fada 	bl	80048f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	bd80      	pop	{r7, pc}
 8003344:	58000800 	.word	0x58000800

08003348 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <DMA1_Channel1_IRQHandler+0x10>)
 800334e:	f000 ff9e 	bl	800428e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200004ac 	.word	0x200004ac

0800335c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <DMA1_Channel4_IRQHandler+0x10>)
 8003362:	f000 ff94 	bl	800428e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200003ec 	.word	0x200003ec

08003370 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <COMP_IRQHandler+0x10>)
 8003376:	f000 fbd7 	bl	8003b28 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000264 	.word	0x20000264

08003384 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	TimerIRQ();
 8003388:	f7fe fff6 	bl	8002378 <TimerIRQ>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800338e:	f003 fc1a 	bl	8006bc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000590 	.word	0x20000590

0800339c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <TIM2_IRQHandler+0x10>)
 80033a2:	f003 fc10 	bl	8006bc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000544 	.word	0x20000544

080033b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <USART1_IRQHandler+0x10>)
 80033b6:	f004 f989 	bl	80076cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000035c 	.word	0x2000035c

080033c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <LPUART1_IRQHandler+0x10>)
 80033ca:	f004 f97f 	bl	80076cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200002cc 	.word	0x200002cc

080033d8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80033dc:	f00a f9c2 	bl	800d764 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80033e8:	f00a f9f4 	bl	800d7d4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80033f4:	f001 faa2 	bl	800493c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}

080033fc <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <DMA2_Channel4_IRQHandler+0x10>)
 8003402:	f000 ff44 	bl	800428e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	2000044c 	.word	0x2000044c

08003410 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e00a      	b.n	8003438 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003422:	f3af 8000 	nop.w
 8003426:	4601      	mov	r1, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	60ba      	str	r2, [r7, #8]
 800342e:	b2ca      	uxtb	r2, r1
 8003430:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3301      	adds	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	dbf0      	blt.n	8003422 <_read+0x12>
	}

return len;
 8003440:	687b      	ldr	r3, [r7, #4]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_close>:
	}
	return len;
}

int _close(int file)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
	return -1;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003472:	605a      	str	r2, [r3, #4]
	return 0;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_isatty>:

int _isatty(int file)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
	return 1;
 800348a:	2301      	movs	r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
	return 0;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <_sbrk+0x5c>)
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <_sbrk+0x60>)
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <_sbrk+0x64>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <_sbrk+0x64>)
 80034d2:	4a12      	ldr	r2, [pc, #72]	; (800351c <_sbrk+0x68>)
 80034d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <_sbrk+0x64>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d207      	bcs.n	80034f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e4:	f00a fcf2 	bl	800decc <__errno>
 80034e8:	4603      	mov	r3, r0
 80034ea:	220c      	movs	r2, #12
 80034ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	e009      	b.n	8003508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <_sbrk+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <_sbrk+0x64>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	4a05      	ldr	r2, [pc, #20]	; (8003518 <_sbrk+0x64>)
 8003504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003506:	68fb      	ldr	r3, [r7, #12]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20030000 	.word	0x20030000
 8003514:	00001000 	.word	0x00001000
 8003518:	200005e8 	.word	0x200005e8
 800351c:	20000760 	.word	0x20000760

08003520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <SystemInit+0x98>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <SystemInit+0x98>)
 800352c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800354c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800354e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <SystemInit+0x9c>)
 800355a:	4013      	ands	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800355e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356a:	f023 0305 	bic.w	r3, r3, #5
 800356e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800357a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <SystemInit+0xa0>)
 800358c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <SystemInit+0xa0>)
 8003594:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035aa:	2200      	movs	r2, #0
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00
 80035bc:	faf6fefb 	.word	0xfaf6fefb
 80035c0:	22041000 	.word	0x22041000

080035c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80035c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035c8:	3304      	adds	r3, #4

080035ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80035ce:	d3f9      	bcc.n	80035c4 <CopyDataInit>
  bx lr
 80035d0:	4770      	bx	lr

080035d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80035d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80035d4:	3004      	adds	r0, #4

080035d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80035d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80035d8:	d3fb      	bcc.n	80035d2 <FillZerobss>
  bx lr
 80035da:	4770      	bx	lr

080035dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80035de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035e0:	f7ff ff9e 	bl	8003520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80035e4:	480b      	ldr	r0, [pc, #44]	; (8003614 <LoopForever+0x8>)
 80035e6:	490c      	ldr	r1, [pc, #48]	; (8003618 <LoopForever+0xc>)
 80035e8:	4a0c      	ldr	r2, [pc, #48]	; (800361c <LoopForever+0x10>)
 80035ea:	2300      	movs	r3, #0
 80035ec:	f7ff ffed 	bl	80035ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80035f0:	480b      	ldr	r0, [pc, #44]	; (8003620 <LoopForever+0x14>)
 80035f2:	490c      	ldr	r1, [pc, #48]	; (8003624 <LoopForever+0x18>)
 80035f4:	2300      	movs	r3, #0
 80035f6:	f7ff ffee 	bl	80035d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80035fa:	480b      	ldr	r0, [pc, #44]	; (8003628 <LoopForever+0x1c>)
 80035fc:	490b      	ldr	r1, [pc, #44]	; (800362c <LoopForever+0x20>)
 80035fe:	2300      	movs	r3, #0
 8003600:	f7ff ffe9 	bl	80035d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003604:	f00a fc68 	bl	800ded8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003608:	f7fe fbac 	bl	8001d64 <main>

0800360c <LoopForever>:

LoopForever:
  b LoopForever
 800360c:	e7fe      	b.n	800360c <LoopForever>
 800360e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003610:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003614:	20000004 	.word	0x20000004
 8003618:	200000a4 	.word	0x200000a4
 800361c:	08011364 	.word	0x08011364
  INIT_BSS _sbss, _ebss
 8003620:	20000230 	.word	0x20000230
 8003624:	20000760 	.word	0x20000760
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003628:	200301e0 	.word	0x200301e0
 800362c:	20030a57 	.word	0x20030a57

08003630 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003630:	e7fe      	b.n	8003630 <ADC1_IRQHandler>
	...

08003634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_Init+0x3c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_Init+0x3c>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003648:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800364a:	2003      	movs	r0, #3
 800364c:	f000 fbd4 	bl	8003df8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003650:	2000      	movs	r0, #0
 8003652:	f000 f80f 	bl	8003674 <HAL_InitTick>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	71fb      	strb	r3, [r7, #7]
 8003660:	e001      	b.n	8003666 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003662:	f7ff fbec 	bl	8002e3e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003666:	79fb      	ldrb	r3, [r7, #7]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	58004000 	.word	0x58004000

08003674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <HAL_InitTick+0x6c>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d024      	beq.n	80036d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003688:	f002 fad0 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_InitTick+0x6c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003698:	fbb3 f3f1 	udiv	r3, r3, r1
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fbea 	bl	8003e7a <HAL_SYSTICK_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10f      	bne.n	80036cc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	d809      	bhi.n	80036c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b2:	2200      	movs	r2, #0
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ba:	f000 fba8 	bl	8003e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <HAL_InitTick+0x70>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	e007      	b.n	80036d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	e004      	b.n	80036d6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	e001      	b.n	80036d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	2000000c 	.word	0x2000000c
 80036e4:	20000008 	.word	0x20000008

080036e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_IncTick+0x20>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <HAL_IncTick+0x24>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	4a04      	ldr	r2, [pc, #16]	; (800370c <HAL_IncTick+0x24>)
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	2000000c 	.word	0x2000000c
 800370c:	200005ec 	.word	0x200005ec

08003710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return uwTick;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <HAL_GetTick+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200005ec 	.word	0x200005ec

08003728 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_GetTickPrio+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000008 	.word	0x20000008

08003740 <LL_EXTI_EnableIT_0_31>:
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <LL_EXTI_EnableIT_0_31+0x24>)
 800374a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800374e:	4905      	ldr	r1, [pc, #20]	; (8003764 <LL_EXTI_EnableIT_0_31+0x24>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	58000800 	.word	0x58000800

08003768 <LL_EXTI_DisableIT_0_31>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <LL_EXTI_DisableIT_0_31+0x28>)
 8003772:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	43db      	mvns	r3, r3
 800377a:	4905      	ldr	r1, [pc, #20]	; (8003790 <LL_EXTI_DisableIT_0_31+0x28>)
 800377c:	4013      	ands	r3, r2
 800377e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	58000800 	.word	0x58000800

08003794 <LL_EXTI_EnableEvent_0_31>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <LL_EXTI_EnableEvent_0_31+0x24>)
 800379e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037a2:	4905      	ldr	r1, [pc, #20]	; (80037b8 <LL_EXTI_EnableEvent_0_31+0x24>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	58000800 	.word	0x58000800

080037bc <LL_EXTI_DisableEvent_0_31>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <LL_EXTI_DisableEvent_0_31+0x28>)
 80037c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	4905      	ldr	r1, [pc, #20]	; (80037e4 <LL_EXTI_DisableEvent_0_31+0x28>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	58000800 	.word	0x58000800

080037e8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4904      	ldr	r1, [pc, #16]	; (8003808 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	58000800 	.word	0x58000800

0800380c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	43db      	mvns	r3, r3
 800381c:	4904      	ldr	r1, [pc, #16]	; (8003830 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800381e:	4013      	ands	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	58000800 	.word	0x58000800

08003834 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4904      	ldr	r1, [pc, #16]	; (8003854 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	58000800 	.word	0x58000800

08003858 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	43db      	mvns	r3, r3
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800386a:	4013      	ands	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	58000800 	.word	0x58000800

08003880 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4013      	ands	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d101      	bne.n	800389a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	58000800 	.word	0x58000800

080038ac <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60d3      	str	r3, [r2, #12]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	58000800 	.word	0x58000800

080038cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e0c5      	b.n	8003a74 <HAL_COMP_Init+0x1a8>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038f6:	d102      	bne.n	80038fe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e0ba      	b.n	8003a74 <HAL_COMP_Init+0x1a8>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff faa1 	bl	8002e60 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003928:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
#if defined (COMP_CSR_WINMODE)
    MODIFY_REG(hcomp->Instance->CSR,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <HAL_COMP_Init+0x1b4>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	6979      	ldr	r1, [r7, #20]
 800395e:	430b      	orrs	r3, r1
 8003960:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396a:	d106      	bne.n	800397a <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800396c:	4b45      	ldr	r3, [pc, #276]	; (8003a84 <HAL_COMP_Init+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a44      	ldr	r2, [pc, #272]	; (8003a84 <HAL_COMP_Init+0x1b8>)
 8003972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e005      	b.n	8003986 <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <HAL_COMP_Init+0x1b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a41      	ldr	r2, [pc, #260]	; (8003a84 <HAL_COMP_Init+0x1b8>)
 8003980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003984:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d016      	beq.n	80039c2 <HAL_COMP_Init+0xf6>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d113      	bne.n	80039c2 <HAL_COMP_Init+0xf6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_COMP_Init+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	4a3a      	ldr	r2, [pc, #232]	; (8003a8c <HAL_COMP_Init+0x1c0>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80039b4:	e002      	b.n	80039bc <HAL_COMP_Init+0xf0>
      {
        wait_loop_index--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f9      	bne.n	80039b6 <HAL_COMP_Init+0xea>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a32      	ldr	r2, [pc, #200]	; (8003a90 <HAL_COMP_Init+0x1c4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d102      	bne.n	80039d2 <HAL_COMP_Init+0x106>
 80039cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039d0:	e001      	b.n	80039d6 <HAL_COMP_Init+0x10a>
 80039d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039d6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d037      	beq.n	8003a54 <HAL_COMP_Init+0x188>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_COMP_Init+0x12c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80039f0:	6938      	ldr	r0, [r7, #16]
 80039f2:	f7ff fef9 	bl	80037e8 <LL_EXTI_EnableRisingTrig_0_31>
 80039f6:	e002      	b.n	80039fe <HAL_COMP_Init+0x132>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80039f8:	6938      	ldr	r0, [r7, #16]
 80039fa:	f7ff ff07 	bl	800380c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_COMP_Init+0x146>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003a0a:	6938      	ldr	r0, [r7, #16]
 8003a0c:	f7ff ff12 	bl	8003834 <LL_EXTI_EnableFallingTrig_0_31>
 8003a10:	e002      	b.n	8003a18 <HAL_COMP_Init+0x14c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003a12:	6938      	ldr	r0, [r7, #16]
 8003a14:	f7ff ff20 	bl	8003858 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003a18:	6938      	ldr	r0, [r7, #16]
 8003a1a:	f7ff ff47 	bl	80038ac <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_COMP_Init+0x166>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003a2a:	6938      	ldr	r0, [r7, #16]
 8003a2c:	f7ff feb2 	bl	8003794 <LL_EXTI_EnableEvent_0_31>
 8003a30:	e002      	b.n	8003a38 <HAL_COMP_Init+0x16c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f7ff fec2 	bl	80037bc <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_COMP_Init+0x180>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003a44:	6938      	ldr	r0, [r7, #16]
 8003a46:	f7ff fe7b 	bl	8003740 <LL_EXTI_EnableIT_0_31>
 8003a4a:	e009      	b.n	8003a60 <HAL_COMP_Init+0x194>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003a4c:	6938      	ldr	r0, [r7, #16]
 8003a4e:	f7ff fe8b 	bl	8003768 <LL_EXTI_DisableIT_0_31>
 8003a52:	e005      	b.n	8003a60 <HAL_COMP_Init+0x194>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003a54:	6938      	ldr	r0, [r7, #16]
 8003a56:	f7ff feb1 	bl	80037bc <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8003a5a:	6938      	ldr	r0, [r7, #16]
 8003a5c:	f7ff fe84 	bl	8003768 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <HAL_COMP_Init+0x1a8>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	f9207c03 	.word	0xf9207c03
 8003a84:	40010204 	.word	0x40010204
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	053e2d63 	.word	0x053e2d63
 8003a90:	40010200 	.word	0x40010200

08003a94 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e030      	b.n	8003b12 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003abe:	d102      	bne.n	8003ac6 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e025      	b.n	8003b12 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d11d      	bne.n	8003b0e <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_COMP_Start+0x8c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <HAL_COMP_Start+0x90>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	3301      	adds	r3, #1
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003afe:	e002      	b.n	8003b06 <HAL_COMP_Start+0x72>
      {
        wait_loop_index--;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f9      	bne.n	8003b00 <HAL_COMP_Start+0x6c>
 8003b0c:	e001      	b.n	8003b12 <HAL_COMP_Start+0x7e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20000004 	.word	0x20000004
 8003b24:	053e2d63 	.word	0x053e2d63

08003b28 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <HAL_COMP_IRQHandler+0x54>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d102      	bne.n	8003b40 <HAL_COMP_IRQHandler+0x18>
 8003b3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b3e:	e001      	b.n	8003b44 <HAL_COMP_IRQHandler+0x1c>
 8003b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff fe9a 	bl	8003880 <LL_EXTI_IsActiveFlag_0_31>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d010      	beq.n	8003b74 <HAL_COMP_IRQHandler+0x4c>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_COMP_IRQHandler+0x58>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8003b5e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003b62:	f7ff fea3 	bl	80038ac <LL_EXTI_ClearFlag_0_31>
 8003b66:	e002      	b.n	8003b6e <HAL_COMP_IRQHandler+0x46>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f7ff fe9f 	bl	80038ac <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f808 	bl	8003b84 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40010200 	.word	0x40010200
 8003b80:	40010204 	.word	0x40010204

08003b84 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	60d3      	str	r3, [r2, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0307 	and.w	r3, r3, #7
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db0b      	blt.n	8003c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4907      	ldr	r1, [pc, #28]	; (8003c34 <__NVIC_EnableIRQ+0x38>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	db12      	blt.n	8003c70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 021f 	and.w	r2, r3, #31
 8003c50:	490a      	ldr	r1, [pc, #40]	; (8003c7c <__NVIC_DisableIRQ+0x44>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2001      	movs	r0, #1
 8003c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5e:	3320      	adds	r3, #32
 8003c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c64:	f3bf 8f4f 	dsb	sy
}
 8003c68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c6a:	f3bf 8f6f 	isb	sy
}
 8003c6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e100 	.word	0xe000e100

08003c80 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db0c      	blt.n	8003cac <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <__NVIC_SetPendingIRQ+0x38>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca6:	3340      	adds	r3, #64	; 0x40
 8003ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	db0c      	blt.n	8003ce8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	f003 021f 	and.w	r2, r3, #31
 8003cd4:	4907      	ldr	r1, [pc, #28]	; (8003cf4 <__NVIC_ClearPendingIRQ+0x38>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2001      	movs	r0, #1
 8003cde:	fa00 f202 	lsl.w	r2, r0, r2
 8003ce2:	3360      	adds	r3, #96	; 0x60
 8003ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000e100 	.word	0xe000e100

08003cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	db0a      	blt.n	8003d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	490c      	ldr	r1, [pc, #48]	; (8003d44 <__NVIC_SetPriority+0x4c>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	0112      	lsls	r2, r2, #4
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d20:	e00a      	b.n	8003d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4908      	ldr	r1, [pc, #32]	; (8003d48 <__NVIC_SetPriority+0x50>)
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	3b04      	subs	r3, #4
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	440b      	add	r3, r1
 8003d36:	761a      	strb	r2, [r3, #24]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000e100 	.word	0xe000e100
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f1c3 0307 	rsb	r3, r3, #7
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	bf28      	it	cs
 8003d6a:	2304      	movcs	r3, #4
 8003d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d902      	bls.n	8003d7c <NVIC_EncodePriority+0x30>
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3b03      	subs	r3, #3
 8003d7a:	e000      	b.n	8003d7e <NVIC_EncodePriority+0x32>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	f04f 32ff 	mov.w	r2, #4294967295
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	401a      	ands	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d94:	f04f 31ff 	mov.w	r1, #4294967295
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	43d9      	mvns	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da4:	4313      	orrs	r3, r2
         );
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3724      	adds	r7, #36	; 0x24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc4:	d301      	bcc.n	8003dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e00f      	b.n	8003dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <SysTick_Config+0x40>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dd2:	210f      	movs	r1, #15
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	f7ff ff8e 	bl	8003cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <SysTick_Config+0x40>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de2:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <SysTick_Config+0x40>)
 8003de4:	2207      	movs	r2, #7
 8003de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	e000e010 	.word	0xe000e010

08003df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff fec9 	bl	8003b98 <__NVIC_SetPriorityGrouping>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	4603      	mov	r3, r0
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1c:	f7ff fee0 	bl	8003be0 <__NVIC_GetPriorityGrouping>
 8003e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	6978      	ldr	r0, [r7, #20]
 8003e28:	f7ff ff90 	bl	8003d4c <NVIC_EncodePriority>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff5f 	bl	8003cf8 <__NVIC_SetPriority>
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fed3 	bl	8003bfc <__NVIC_EnableIRQ>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fee3 	bl	8003c38 <__NVIC_DisableIRQ>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff96 	bl	8003db4 <SysTick_Config>
 8003e88:	4603      	mov	r3, r0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff feed 	bl	8003c80 <__NVIC_SetPendingIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fefd 	bl	8003cbc <__NVIC_ClearPendingIRQ>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e08e      	b.n	8003ffc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_DMA_Init+0x138>)
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d80f      	bhi.n	8003f0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b45      	ldr	r3, [pc, #276]	; (8004008 <HAL_DMA_Init+0x13c>)
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4a45      	ldr	r2, [pc, #276]	; (800400c <HAL_DMA_Init+0x140>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a42      	ldr	r2, [pc, #264]	; (8004010 <HAL_DMA_Init+0x144>)
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
 8003f08:	e00e      	b.n	8003f28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b40      	ldr	r3, [pc, #256]	; (8004014 <HAL_DMA_Init+0x148>)
 8003f12:	4413      	add	r3, r2
 8003f14:	4a3d      	ldr	r2, [pc, #244]	; (800400c <HAL_DMA_Init+0x140>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <HAL_DMA_Init+0x14c>)
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa74 	bl	8004468 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f88:	d102      	bne.n	8003f90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fa6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_DMA_Init+0x106>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d80c      	bhi.n	8003fd2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa93 	bl	80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	e008      	b.n	8003fe4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40020407 	.word	0x40020407
 8004008:	bffdfff8 	.word	0xbffdfff8
 800400c:	cccccccd 	.word	0xcccccccd
 8004010:	40020000 	.word	0x40020000
 8004014:	bffdfbf8 	.word	0xbffdfbf8
 8004018:	40020400 	.word	0x40020400

0800401c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_DMA_Start_IT+0x20>
 8004038:	2302      	movs	r3, #2
 800403a:	e066      	b.n	800410a <HAL_DMA_Start_IT+0xee>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d155      	bne.n	80040fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f9b9 	bl	80043ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 020e 	orr.w	r2, r2, #14
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00f      	b.n	80040b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 020a 	orr.w	r2, r2, #10
 80040b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e005      	b.n	8004108 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004104:	2302      	movs	r3, #2
 8004106:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004108:	7dfb      	ldrb	r3, [r7, #23]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04f      	b.n	80041c4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d008      	beq.n	8004142 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2204      	movs	r2, #4
 8004134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e040      	b.n	80041c4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 020e 	bic.w	r2, r2, #14
 8004150:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f003 021c 	and.w	r2, r3, #28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800418e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d005      	beq.n	80041f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2204      	movs	r2, #4
 80041ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	e047      	b.n	8004284 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 020e 	bic.w	r2, r2, #14
 8004202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f003 021c 	and.w	r2, r3, #28
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f202 	lsl.w	r2, r1, r2
 8004236:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004240:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00c      	beq.n	8004264 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004258:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004262:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
    }
  }
  return status;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f003 031c 	and.w	r3, r3, #28
 80042ae:	2204      	movs	r2, #4
 80042b0:	409a      	lsls	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d026      	beq.n	8004308 <HAL_DMA_IRQHandler+0x7a>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d021      	beq.n	8004308 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0204 	bic.w	r2, r2, #4
 80042e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f003 021c 	and.w	r2, r3, #28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2104      	movs	r1, #4
 80042f0:	fa01 f202 	lsl.w	r2, r1, r2
 80042f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d071      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004306:	e06c      	b.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	f003 031c 	and.w	r3, r3, #28
 8004310:	2202      	movs	r2, #2
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02e      	beq.n	800437a <HAL_DMA_IRQHandler+0xec>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d029      	beq.n	800437a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020a 	bic.w	r2, r2, #10
 8004342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	f003 021c 	and.w	r2, r3, #28
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2102      	movs	r1, #2
 800435a:	fa01 f202 	lsl.w	r2, r1, r2
 800435e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d038      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004378:	e033      	b.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f003 031c 	and.w	r3, r3, #28
 8004382:	2208      	movs	r2, #8
 8004384:	409a      	lsls	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02a      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x156>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d025      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 020e 	bic.w	r2, r2, #14
 80043a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f003 021c 	and.w	r2, r3, #28
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
}
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004402:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f003 021c 	and.w	r2, r3, #28
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f202 	lsl.w	r2, r1, r2
 8004428:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b10      	cmp	r3, #16
 8004438:	d108      	bne.n	800444c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800444a:	e007      	b.n	800445c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d80a      	bhi.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004488:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6493      	str	r3, [r2, #72]	; 0x48
 8004490:	e007      	b.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	009a      	lsls	r2, r3, #2
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800449c:	4413      	add	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	3b08      	subs	r3, #8
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40020407 	.word	0x40020407
 80044d8:	4002081c 	.word	0x4002081c
 80044dc:	cccccccd 	.word	0xcccccccd
 80044e0:	40020880 	.word	0x40020880

080044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004508:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3b01      	subs	r3, #1
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2201      	movs	r2, #1
 8004514:	409a      	lsls	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	1000823f 	.word	0x1000823f
 800452c:	40020940 	.word	0x40020940

08004530 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b01      	cmp	r3, #1
 8004544:	d12b      	bne.n	800459e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004550:	2302      	movs	r3, #2
 8004552:	e025      	b.n	80045a0 <HAL_DMAEx_ConfigMuxSync+0x70>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004564:	4013      	ands	r3, r2
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	6811      	ldr	r1, [r2, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	68d2      	ldr	r2, [r2, #12]
 800456e:	3a01      	subs	r2, #1
 8004570:	04d2      	lsls	r2, r2, #19
 8004572:	4311      	orrs	r1, r2
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	6852      	ldr	r2, [r2, #4]
 8004578:	4311      	orrs	r1, r2
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	7a12      	ldrb	r2, [r2, #8]
 800457e:	0412      	lsls	r2, r2, #16
 8004580:	4311      	orrs	r1, r2
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	7a52      	ldrb	r2, [r2, #9]
 8004586:	0252      	lsls	r2, r2, #9
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800458e:	430b      	orrs	r3, r1
 8004590:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000fdff 	.word	0xe000fdff

080045b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045be:	e14c      	b.n	800485a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 813e 	beq.w	8004854 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d005      	beq.n	80045f0 <HAL_GPIO_Init+0x40>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d130      	bne.n	8004652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2203      	movs	r2, #3
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004626:	2201      	movs	r2, #1
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 0201 	and.w	r2, r3, #1
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b03      	cmp	r3, #3
 800465c:	d017      	beq.n	800468e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2203      	movs	r2, #3
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d123      	bne.n	80046e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	08da      	lsrs	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3208      	adds	r2, #8
 80046a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	08da      	lsrs	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3208      	adds	r2, #8
 80046dc:	6939      	ldr	r1, [r7, #16]
 80046de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0203 	and.w	r2, r3, #3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8098 	beq.w	8004854 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004724:	4a54      	ldr	r2, [pc, #336]	; (8004878 <HAL_GPIO_Init+0x2c8>)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	3302      	adds	r3, #2
 800472c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	220f      	movs	r2, #15
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800474e:	d019      	beq.n	8004784 <HAL_GPIO_Init+0x1d4>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a4a      	ldr	r2, [pc, #296]	; (800487c <HAL_GPIO_Init+0x2cc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_GPIO_Init+0x1d0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a49      	ldr	r2, [pc, #292]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00d      	beq.n	800477c <HAL_GPIO_Init+0x1cc>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a48      	ldr	r2, [pc, #288]	; (8004884 <HAL_GPIO_Init+0x2d4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <HAL_GPIO_Init+0x1c8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a47      	ldr	r2, [pc, #284]	; (8004888 <HAL_GPIO_Init+0x2d8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_GPIO_Init+0x1c4>
 8004770:	2304      	movs	r3, #4
 8004772:	e008      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004774:	2307      	movs	r3, #7
 8004776:	e006      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004778:	2303      	movs	r3, #3
 800477a:	e004      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 800477c:	2302      	movs	r3, #2
 800477e:	e002      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004784:	2300      	movs	r3, #0
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	f002 0203 	and.w	r2, r2, #3
 800478c:	0092      	lsls	r2, r2, #2
 800478e:	4093      	lsls	r3, r2
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004796:	4938      	ldr	r1, [pc, #224]	; (8004878 <HAL_GPIO_Init+0x2c8>)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	3302      	adds	r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a4:	4b39      	ldr	r3, [pc, #228]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047c8:	4a30      	ldr	r2, [pc, #192]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047ce:	4b2f      	ldr	r3, [pc, #188]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047f2:	4a26      	ldr	r2, [pc, #152]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047f8:	4b24      	ldr	r3, [pc, #144]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43db      	mvns	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800481e:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_GPIO_Init+0x2dc>)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_GPIO_Init+0x2dc>)
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43db      	mvns	r3, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800484c:	4a0f      	ldr	r2, [pc, #60]	; (800488c <HAL_GPIO_Init+0x2dc>)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3301      	adds	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	f47f aeab 	bne.w	80045c0 <HAL_GPIO_Init+0x10>
  }
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40010000 	.word	0x40010000
 800487c:	48000400 	.word	0x48000400
 8004880:	48000800 	.word	0x48000800
 8004884:	48000c00 	.word	0x48000c00
 8004888:	48001000 	.word	0x48001000
 800488c:	58000800 	.word	0x58000800

08004890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048ac:	e002      	b.n	80048b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ae:	887a      	ldrh	r2, [r7, #2]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4013      	ands	r3, r2
 80048d8:	041a      	lsls	r2, r3, #16
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	43d9      	mvns	r1, r3
 80048de:	887b      	ldrh	r3, [r7, #2]
 80048e0:	400b      	ands	r3, r1
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	619a      	str	r2, [r3, #24]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d006      	beq.n	8004918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800490a:	4a05      	ldr	r2, [pc, #20]	; (8004920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f806 	bl	8004924 <HAL_GPIO_EXTI_Callback>
  }
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	58000800 	.word	0x58000800

08004924 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004942:	4b0a      	ldr	r3, [pc, #40]	; (800496c <HAL_HSEM_IRQHandler+0x30>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004948:	4b08      	ldr	r3, [pc, #32]	; (800496c <HAL_HSEM_IRQHandler+0x30>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	43db      	mvns	r3, r3
 8004950:	4906      	ldr	r1, [pc, #24]	; (800496c <HAL_HSEM_IRQHandler+0x30>)
 8004952:	4013      	ands	r3, r2
 8004954:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <HAL_HSEM_IRQHandler+0x30>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f807 	bl	8004970 <HAL_HSEM_FreeCallback>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	58001500 	.word	0x58001500

08004970 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01e      	beq.n	80049d4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_IPCC_Init+0x60>)
 8004998:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fe faac 	bl	8002f04 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f000 f85b 	bl	8004a68 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f82c 	bl	8004a1c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80049d2:	e001      	b.n	80049d8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	58000c00 	.word	0x58000c00

080049e8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e00f      	b.n	8004a4a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <IPCC_SetDefaultCallbacks+0x44>)
 8004a34:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3306      	adds	r3, #6
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <IPCC_SetDefaultCallbacks+0x48>)
 8004a42:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	d9ec      	bls.n	8004a2a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	080049e9 	.word	0x080049e9
 8004a64:	08004a03 	.word	0x08004a03

08004a68 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223f      	movs	r2, #63	; 0x3f
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a04      	ldr	r2, [pc, #16]	; (8004aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	58000400 	.word	0x58000400

08004ab0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	58000400 	.word	0x58000400

08004acc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ade:	d101      	bne.n	8004ae4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_RCC_HSE_Enable>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_RCC_HSE_Disable>:
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
}
 8004b22:	bf00      	nop
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <LL_RCC_HSE_IsReady>:
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b3e:	d101      	bne.n	8004b44 <LL_RCC_HSE_IsReady+0x18>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <LL_RCC_HSE_IsReady+0x1a>
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_HSI_Enable>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <LL_RCC_HSI_Disable>:
{
 8004b6e:	b480      	push	{r7}
 8004b70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b80:	6013      	str	r3, [r2, #0]
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_HSI_IsReady>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d101      	bne.n	8004ba4 <LL_RCC_HSI_IsReady+0x18>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <LL_RCC_HSI_IsReady+0x1a>
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_RCC_HSI48_Enable>:
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <LL_RCC_HSI48_Disable>:
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_HSI48_IsReady>:
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d101      	bne.n	8004c36 <LL_RCC_HSI48_IsReady+0x18>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <LL_RCC_HSI48_IsReady+0x1a>
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <LL_RCC_LSE_Enable>:
{
 8004c42:	b480      	push	{r7}
 8004c44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_RCC_LSE_Disable>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_LSE_EnableBypass>:
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c96:	f043 0304 	orr.w	r3, r3, #4
 8004c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_RCC_LSE_DisableBypass>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb8:	f023 0304 	bic.w	r3, r3, #4
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_RCC_LSE_IsReady>:
{
 8004cca:	b480      	push	{r7}
 8004ccc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d101      	bne.n	8004ce2 <LL_RCC_LSE_IsReady+0x18>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <LL_RCC_LSE_IsReady+0x1a>
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_RCC_LSI1_Enable>:
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_RCC_LSI1_Disable>:
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_RCC_LSI1_IsReady>:
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d101      	bne.n	8004d4a <LL_RCC_LSI1_IsReady+0x18>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <LL_RCC_LSI1_IsReady+0x1a>
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_LSI2_Enable>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d66:	f043 0304 	orr.w	r3, r3, #4
 8004d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_LSI2_Disable>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <LL_RCC_LSI2_IsReady>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d101      	bne.n	8004db2 <LL_RCC_LSI2_IsReady+0x18>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <LL_RCC_LSI2_IsReady+0x1a>
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <LL_RCC_LSI2_SetTrimming>:
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_RCC_MSI_Enable>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_RCC_MSI_Disable>:
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	6013      	str	r3, [r2, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <LL_RCC_MSI_IsReady>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d101      	bne.n	8004e3e <LL_RCC_MSI_IsReady+0x16>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <LL_RCC_MSI_IsReady+0x18>
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_MSI_SetRange>:
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_MSI_GetRange>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e82:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2bb0      	cmp	r3, #176	; 0xb0
 8004e88:	d901      	bls.n	8004e8e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004e8a:	23b0      	movs	r3, #176	; 0xb0
 8004e8c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004e8e:	687b      	ldr	r3, [r7, #4]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_MSI_SetCalibTrimming>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	604b      	str	r3, [r1, #4]
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <LL_RCC_SetSysClkSource>:
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 0203 	bic.w	r2, r3, #3
 8004ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <LL_RCC_GetSysClkSource>:
{
 8004eee:	b480      	push	{r7}
 8004ef0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <LL_RCC_SetAHBPrescaler>:
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <LL_C2_RCC_SetAHBPrescaler>:
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <LL_RCC_SetAHB4Prescaler>:
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f6a:	f023 020f 	bic.w	r2, r3, #15
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_RCC_SetAPB1Prescaler>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_RCC_SetAPB2Prescaler>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <LL_RCC_GetAHBPrescaler>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_RCC_GetAHB4Prescaler>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005002:	4618      	mov	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <LL_RCC_GetAPB1Prescaler>:
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800501a:	4618      	mov	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_RCC_GetAPB2Prescaler>:
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005032:	4618      	mov	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_RCC_PLL_Enable>:
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504e:	6013      	str	r3, [r2, #0]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_PLL_Disable>:
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506c:	6013      	str	r3, [r2, #0]
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <LL_RCC_PLL_IsReady>:
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508a:	d101      	bne.n	8005090 <LL_RCC_PLL_IsReady+0x18>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <LL_RCC_PLL_IsReady+0x1a>
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_RCC_PLL_GetN>:
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <LL_RCC_PLL_GetR>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80050ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <LL_RCC_PLL_GetDivider>:
{
 80050ce:	b480      	push	{r7}
 80050d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80050d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <LL_RCC_PLL_GetMainSource>:
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0303 	and.w	r3, r3, #3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <LL_RCC_IsActiveFlag_HPRE>:
{
 80050fe:	b480      	push	{r7}
 8005100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005110:	d101      	bne.n	8005116 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005136:	d101      	bne.n	800513c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800514c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005150:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515c:	d101      	bne.n	8005162 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005180:	d101      	bne.n	8005186 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005192:	b480      	push	{r7}
 8005194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051a4:	d101      	bne.n	80051aa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b08d      	sub	sp, #52	; 0x34
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e37f      	b.n	80058ca <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8092 	beq.w	80052fc <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d8:	f7ff fe89 	bl	8004eee <LL_RCC_GetSysClkSource>
 80051dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051de:	f7ff ff82 	bl	80050e6 <LL_RCC_PLL_GetMainSource>
 80051e2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_RCC_OscConfig+0x3e>
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d14c      	bne.n	800528a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d149      	bne.n	800528a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051f6:	f7ff fe17 	bl	8004e28 <LL_RCC_MSI_IsReady>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_OscConfig+0x54>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e35e      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005210:	f7ff fe2f 	bl	8004e72 <LL_RCC_MSI_GetRange>
 8005214:	4603      	mov	r3, r0
 8005216:	429c      	cmp	r4, r3
 8005218:	d914      	bls.n	8005244 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fd44 	bl	8005cac <RCC_SetFlashLatencyFromMSIRange>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e34d      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fe09 	bl	8004e4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fe2d 	bl	8004e9c <LL_RCC_MSI_SetCalibTrimming>
 8005242:	e013      	b.n	800526c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fdfe 	bl	8004e4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fe22 	bl	8004e9c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fd25 	bl	8005cac <RCC_SetFlashLatencyFromMSIRange>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e32e      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800526c:	f000 fcde 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 8005270:	4603      	mov	r3, r0
 8005272:	4aa5      	ldr	r2, [pc, #660]	; (8005508 <HAL_RCC_OscConfig+0x350>)
 8005274:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005276:	4ba5      	ldr	r3, [pc, #660]	; (800550c <HAL_RCC_OscConfig+0x354>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe f9fa 	bl	8003674 <HAL_InitTick>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d039      	beq.n	80052fa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e31f      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01e      	beq.n	80052d0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005292:	f7ff fdab 	bl	8004dec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005296:	f7fe fa3b 	bl	8003710 <HAL_GetTick>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800529e:	f7fe fa37 	bl	8003710 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e30c      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 80052b0:	f7ff fdba 	bl	8004e28 <LL_RCC_MSI_IsReady>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f1      	beq.n	800529e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fdc3 	bl	8004e4a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fde7 	bl	8004e9c <LL_RCC_MSI_SetCalibTrimming>
 80052ce:	e015      	b.n	80052fc <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052d0:	f7ff fd9b 	bl	8004e0a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052d4:	f7fe fa1c 	bl	8003710 <HAL_GetTick>
 80052d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052dc:	f7fe fa18 	bl	8003710 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e2ed      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80052ee:	f7ff fd9b 	bl	8004e28 <LL_RCC_MSI_IsReady>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f1      	bne.n	80052dc <HAL_RCC_OscConfig+0x124>
 80052f8:	e000      	b.n	80052fc <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052fa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d04e      	beq.n	80053a6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005308:	f7ff fdf1 	bl	8004eee <LL_RCC_GetSysClkSource>
 800530c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800530e:	f7ff feea 	bl	80050e6 <LL_RCC_PLL_GetMainSource>
 8005312:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	2b08      	cmp	r3, #8
 8005318:	d005      	beq.n	8005326 <HAL_RCC_OscConfig+0x16e>
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2b0c      	cmp	r3, #12
 800531e:	d10d      	bne.n	800533c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d10a      	bne.n	800533c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005326:	f7ff fc01 	bl	8004b2c <LL_RCC_HSE_IsReady>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d039      	beq.n	80053a4 <HAL_RCC_OscConfig+0x1ec>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d135      	bne.n	80053a4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e2c6      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005344:	d102      	bne.n	800534c <HAL_RCC_OscConfig+0x194>
 8005346:	f7ff fbd3 	bl	8004af0 <LL_RCC_HSE_Enable>
 800534a:	e001      	b.n	8005350 <HAL_RCC_OscConfig+0x198>
 800534c:	f7ff fbdf 	bl	8004b0e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d012      	beq.n	800537e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fe f9da 	bl	8003710 <HAL_GetTick>
 800535c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005360:	f7fe f9d6 	bl	8003710 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e2ab      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005372:	f7ff fbdb 	bl	8004b2c <LL_RCC_HSE_IsReady>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f1      	beq.n	8005360 <HAL_RCC_OscConfig+0x1a8>
 800537c:	e013      	b.n	80053a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fe f9c7 	bl	8003710 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005386:	f7fe f9c3 	bl	8003710 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b64      	cmp	r3, #100	; 0x64
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e298      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005398:	f7ff fbc8 	bl	8004b2c <LL_RCC_HSE_IsReady>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f1      	bne.n	8005386 <HAL_RCC_OscConfig+0x1ce>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d051      	beq.n	8005456 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b2:	f7ff fd9c 	bl	8004eee <LL_RCC_GetSysClkSource>
 80053b6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b8:	f7ff fe95 	bl	80050e6 <LL_RCC_PLL_GetMainSource>
 80053bc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x218>
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d113      	bne.n	80053f2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d110      	bne.n	80053f2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d0:	f7ff fbdc 	bl	8004b8c <LL_RCC_HSI_IsReady>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_RCC_OscConfig+0x22e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e271      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fbe0 	bl	8004bb0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f0:	e031      	b.n	8005456 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d019      	beq.n	800542e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053fa:	f7ff fba9 	bl	8004b50 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fe f987 	bl	8003710 <HAL_GetTick>
 8005402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005406:	f7fe f983 	bl	8003710 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e258      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005418:	f7ff fbb8 	bl	8004b8c <LL_RCC_HSI_IsReady>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f1      	beq.n	8005406 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fbc2 	bl	8004bb0 <LL_RCC_HSI_SetCalibTrimming>
 800542c:	e013      	b.n	8005456 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542e:	f7ff fb9e 	bl	8004b6e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fe f96d 	bl	8003710 <HAL_GetTick>
 8005436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800543a:	f7fe f969 	bl	8003710 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e23e      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 800544c:	f7ff fb9e 	bl	8004b8c <LL_RCC_HSI_IsReady>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f1      	bne.n	800543a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80a4 	beq.w	80055b8 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d077      	beq.n	8005568 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d04b      	beq.n	800551c <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005484:	f7ff fc55 	bl	8004d32 <LL_RCC_LSI1_IsReady>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d113      	bne.n	80054b6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800548e:	f7ff fc2e 	bl	8004cee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005492:	f7fe f93d 	bl	8003710 <HAL_GetTick>
 8005496:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800549a:	f7fe f939 	bl	8003710 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e20e      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80054ac:	f7ff fc41 	bl	8004d32 <LL_RCC_LSI1_IsReady>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f1      	beq.n	800549a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80054b6:	f7ff fc4e 	bl	8004d56 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ba:	f7fe f929 	bl	8003710 <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80054c2:	f7fe f925 	bl	8003710 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e1fa      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054d4:	f7ff fc61 	bl	8004d9a <LL_RCC_LSI2_IsReady>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f1      	beq.n	80054c2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fc6b 	bl	8004dbe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80054e8:	f7ff fc12 	bl	8004d10 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fe f910 	bl	8003710 <HAL_GetTick>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80054f2:	e00d      	b.n	8005510 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054f4:	f7fe f90c 	bl	8003710 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d906      	bls.n	8005510 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e1e1      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
 8005506:	bf00      	nop
 8005508:	20000004 	.word	0x20000004
 800550c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005510:	f7ff fc0f 	bl	8004d32 <LL_RCC_LSI1_IsReady>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1ec      	bne.n	80054f4 <HAL_RCC_OscConfig+0x33c>
 800551a:	e04d      	b.n	80055b8 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800551c:	f7ff fbe7 	bl	8004cee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fe f8f6 	bl	8003710 <HAL_GetTick>
 8005524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005528:	f7fe f8f2 	bl	8003710 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e1c7      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800553a:	f7ff fbfa 	bl	8004d32 <LL_RCC_LSI1_IsReady>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f1      	beq.n	8005528 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005544:	f7ff fc18 	bl	8004d78 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800554a:	f7fe f8e1 	bl	8003710 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b03      	cmp	r3, #3
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1b6      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800555c:	f7ff fc1d 	bl	8004d9a <LL_RCC_LSI2_IsReady>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f1      	bne.n	800554a <HAL_RCC_OscConfig+0x392>
 8005566:	e027      	b.n	80055b8 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005568:	f7ff fc06 	bl	8004d78 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fe f8d0 	bl	8003710 <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005574:	f7fe f8cc 	bl	8003710 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1a1      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005586:	f7ff fc08 	bl	8004d9a <LL_RCC_LSI2_IsReady>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f1      	bne.n	8005574 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005590:	f7ff fbbe 	bl	8004d10 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fe f8bc 	bl	8003710 <HAL_GetTick>
 8005598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800559c:	f7fe f8b8 	bl	8003710 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e18d      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80055ae:	f7ff fbc0 	bl	8004d32 <LL_RCC_LSI1_IsReady>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f1      	bne.n	800559c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05b      	beq.n	800567c <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c4:	4ba7      	ldr	r3, [pc, #668]	; (8005864 <HAL_RCC_OscConfig+0x6ac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d114      	bne.n	80055fa <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80055d0:	f7ff fa5e 	bl	8004a90 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d4:	f7fe f89c 	bl	8003710 <HAL_GetTick>
 80055d8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055dc:	f7fe f898 	bl	8003710 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e16d      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ee:	4b9d      	ldr	r3, [pc, #628]	; (8005864 <HAL_RCC_OscConfig+0x6ac>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d102      	bne.n	8005608 <HAL_RCC_OscConfig+0x450>
 8005602:	f7ff fb1e 	bl	8004c42 <LL_RCC_LSE_Enable>
 8005606:	e00c      	b.n	8005622 <HAL_RCC_OscConfig+0x46a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b05      	cmp	r3, #5
 800560e:	d104      	bne.n	800561a <HAL_RCC_OscConfig+0x462>
 8005610:	f7ff fb39 	bl	8004c86 <LL_RCC_LSE_EnableBypass>
 8005614:	f7ff fb15 	bl	8004c42 <LL_RCC_LSE_Enable>
 8005618:	e003      	b.n	8005622 <HAL_RCC_OscConfig+0x46a>
 800561a:	f7ff fb23 	bl	8004c64 <LL_RCC_LSE_Disable>
 800561e:	f7ff fb43 	bl	8004ca8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d014      	beq.n	8005654 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562a:	f7fe f871 	bl	8003710 <HAL_GetTick>
 800562e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005630:	e00a      	b.n	8005648 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7fe f86d 	bl	8003710 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e140      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005648:	f7ff fb3f 	bl	8004cca <LL_RCC_LSE_IsReady>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ef      	beq.n	8005632 <HAL_RCC_OscConfig+0x47a>
 8005652:	e013      	b.n	800567c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fe f85c 	bl	8003710 <HAL_GetTick>
 8005658:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800565a:	e00a      	b.n	8005672 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565c:	f7fe f858 	bl	8003710 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	; 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e12b      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005672:	f7ff fb2a 	bl	8004cca <LL_RCC_LSE_IsReady>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1ef      	bne.n	800565c <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02c      	beq.n	80056e2 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	2b00      	cmp	r3, #0
 800568e:	d014      	beq.n	80056ba <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005690:	f7ff faa3 	bl	8004bda <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005694:	f7fe f83c 	bl	8003710 <HAL_GetTick>
 8005698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800569c:	f7fe f838 	bl	8003710 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e10d      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80056ae:	f7ff fab6 	bl	8004c1e <LL_RCC_HSI48_IsReady>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f1      	beq.n	800569c <HAL_RCC_OscConfig+0x4e4>
 80056b8:	e013      	b.n	80056e2 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ba:	f7ff fa9f 	bl	8004bfc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fe f827 	bl	8003710 <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056c6:	f7fe f823 	bl	8003710 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e0f8      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056d8:	f7ff faa1 	bl	8004c1e <LL_RCC_HSI48_IsReady>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f1      	bne.n	80056c6 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80ee 	beq.w	80058c8 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ec:	f7ff fbff 	bl	8004eee <LL_RCC_GetSysClkSource>
 80056f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	2b02      	cmp	r3, #2
 8005700:	f040 80b4 	bne.w	800586c <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0203 	and.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	429a      	cmp	r2, r3
 8005710:	d123      	bne.n	800575a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d11c      	bne.n	800575a <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d114      	bne.n	800575a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d10d      	bne.n	800575a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d106      	bne.n	800575a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d05d      	beq.n	8005816 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d058      	beq.n	8005812 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0ab      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005772:	f7ff fc72 	bl	800505a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005776:	f7fd ffcb 	bl	8003710 <HAL_GetTick>
 800577a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577e:	f7fd ffc7 	bl	8003710 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e09c      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ef      	bne.n	800577e <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	4b30      	ldr	r3, [pc, #192]	; (8005868 <HAL_RCC_OscConfig+0x6b0>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057b0:	4311      	orrs	r1, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057b6:	0212      	lsls	r2, r2, #8
 80057b8:	4311      	orrs	r1, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057be:	4311      	orrs	r1, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057c4:	4311      	orrs	r1, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057ca:	430a      	orrs	r2, r1
 80057cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057d4:	f7ff fc32 	bl	800503c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e6:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057e8:	f7fd ff92 	bl	8003710 <HAL_GetTick>
 80057ec:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fd ff8e 	bl	8003710 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e063      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ef      	beq.n	80057f0 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005810:	e05a      	b.n	80058c8 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e059      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d151      	bne.n	80058c8 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005824:	f7ff fc0a 	bl	800503c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005838:	f7fd ff6a 	bl	8003710 <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fd ff66 	bl	8003710 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e03b      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ef      	beq.n	8005840 <HAL_RCC_OscConfig+0x688>
 8005860:	e032      	b.n	80058c8 <HAL_RCC_OscConfig+0x710>
 8005862:	bf00      	nop
 8005864:	58000400 	.word	0x58000400
 8005868:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b0c      	cmp	r3, #12
 8005870:	d028      	beq.n	80058c4 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005872:	f7ff fbf2 	bl	800505a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005890:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005898:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fd ff39 	bl	8003710 <HAL_GetTick>
 800589e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fd ff35 	bl	8003710 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e00a      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ef      	bne.n	80058a2 <HAL_RCC_OscConfig+0x6ea>
 80058c2:	e001      	b.n	80058c8 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3734      	adds	r7, #52	; 0x34
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd90      	pop	{r4, r7, pc}
 80058d2:	bf00      	nop

080058d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e12d      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058e8:	4b98      	ldr	r3, [pc, #608]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d91b      	bls.n	800592e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b95      	ldr	r3, [pc, #596]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 0207 	bic.w	r2, r3, #7
 80058fe:	4993      	ldr	r1, [pc, #588]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005906:	f7fd ff03 	bl	8003710 <HAL_GetTick>
 800590a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800590c:	e008      	b.n	8005920 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800590e:	f7fd feff 	bl	8003710 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e111      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005920:	4b8a      	ldr	r3, [pc, #552]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d1ef      	bne.n	800590e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d016      	beq.n	8005968 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fae1 	bl	8004f06 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005944:	f7fd fee4 	bl	8003710 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800594c:	f7fd fee0 	bl	8003710 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e0f2      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800595e:	f7ff fbce 	bl	80050fe <LL_RCC_IsActiveFlag_HPRE>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f1      	beq.n	800594c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d016      	beq.n	80059a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fad8 	bl	8004f2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800597e:	f7fd fec7 	bl	8003710 <HAL_GetTick>
 8005982:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005986:	f7fd fec3 	bl	8003710 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e0d5      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005998:	f7ff fbc3 	bl	8005122 <LL_RCC_IsActiveFlag_C2HPRE>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f1      	beq.n	8005986 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fad1 	bl	8004f5a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059b8:	f7fd feaa 	bl	8003710 <HAL_GetTick>
 80059bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059c0:	f7fd fea6 	bl	8003710 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e0b8      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059d2:	f7ff fbb9 	bl	8005148 <LL_RCC_IsActiveFlag_SHDHPRE>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f1      	beq.n	80059c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d016      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff facb 	bl	8004f88 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059f2:	f7fd fe8d 	bl	8003710 <HAL_GetTick>
 80059f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059fa:	f7fd fe89 	bl	8003710 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e09b      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a0c:	f7ff fbaf 	bl	800516e <LL_RCC_IsActiveFlag_PPRE1>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f1      	beq.n	80059fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d017      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fac1 	bl	8004fb0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a2e:	f7fd fe6f 	bl	8003710 <HAL_GetTick>
 8005a32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a36:	f7fd fe6b 	bl	8003710 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e07d      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a48:	f7ff fba3 	bl	8005192 <LL_RCC_IsActiveFlag_PPRE2>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f1      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d043      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d106      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005a66:	f7ff f861 	bl	8004b2c <LL_RCC_HSE_IsReady>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11e      	bne.n	8005aae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e067      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a7c:	f7ff fafc 	bl	8005078 <LL_RCC_PLL_IsReady>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d113      	bne.n	8005aae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e05c      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005a92:	f7ff f9c9 	bl	8004e28 <LL_RCC_MSI_IsReady>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d108      	bne.n	8005aae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e051      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005aa0:	f7ff f874 	bl	8004b8c <LL_RCC_HSI_IsReady>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e04a      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff fa07 	bl	8004ec6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab8:	f7fd fe2a 	bl	8003710 <HAL_GetTick>
 8005abc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac0:	f7fd fe26 	bl	8003710 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e036      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	f7ff fa0a 	bl	8004eee <LL_RCC_GetSysClkSource>
 8005ada:	4602      	mov	r2, r0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d1ec      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae6:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d21b      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 0207 	bic.w	r2, r3, #7
 8005afc:	4913      	ldr	r1, [pc, #76]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b04:	f7fd fe04 	bl	8003710 <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b0c:	f7fd fe00 	bl	8003710 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e012      	b.n	8005b44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCC_ClockConfig+0x278>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d1ef      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b2c:	f000 f87e 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 8005b30:	4603      	mov	r3, r0
 8005b32:	4a07      	ldr	r2, [pc, #28]	; (8005b50 <HAL_RCC_ClockConfig+0x27c>)
 8005b34:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005b36:	f7fd fdf7 	bl	8003728 <HAL_GetTickPrio>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fd fd99 	bl	8003674 <HAL_InitTick>
 8005b42:	4603      	mov	r3, r0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	58004000 	.word	0x58004000
 8005b50:	20000004 	.word	0x20000004

08005b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b5a:	f7ff f9c8 	bl	8004eee <LL_RCC_GetSysClkSource>
 8005b5e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b66:	f7ff f984 	bl	8004e72 <LL_RCC_MSI_GetRange>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	4a2b      	ldr	r2, [pc, #172]	; (8005c20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e04b      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d102      	bne.n	8005b88 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b82:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e045      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b8e:	f7fe ff9d 	bl	8004acc <LL_RCC_HSE_IsEnabledDiv2>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d102      	bne.n	8005b9e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005b98:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e03a      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	e037      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005ba4:	f7ff fa9f 	bl	80050e6 <LL_RCC_PLL_GetMainSource>
 8005ba8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d003      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x64>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCC_GetSysClockFreq+0x6a>
 8005bb6:	e00d      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bba:	60bb      	str	r3, [r7, #8]
        break;
 8005bbc:	e015      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005bbe:	f7fe ff85 	bl	8004acc <LL_RCC_HSE_IsEnabledDiv2>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d102      	bne.n	8005bce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005bc8:	4b16      	ldr	r3, [pc, #88]	; (8005c24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005bcc:	e00d      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005bd0:	60bb      	str	r3, [r7, #8]
        break;
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005bd4:	f7ff f94d 	bl	8004e72 <LL_RCC_MSI_GetRange>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be6:	60bb      	str	r3, [r7, #8]
        break;
 8005be8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005bea:	f7ff fa57 	bl	800509c <LL_RCC_PLL_GetN>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	fb03 f402 	mul.w	r4, r3, r2
 8005bf6:	f7ff fa6a 	bl	80050ce <LL_RCC_PLL_GetDivider>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	3301      	adds	r3, #1
 8005c00:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c04:	f7ff fa57 	bl	80050b6 <LL_RCC_PLL_GetR>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	0f5b      	lsrs	r3, r3, #29
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c12:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	08011104 	.word	0x08011104
 8005c24:	00f42400 	.word	0x00f42400
 8005c28:	01e84800 	.word	0x01e84800

08005c2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c2c:	b598      	push	{r3, r4, r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c30:	f7ff ff90 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 8005c34:	4604      	mov	r4, r0
 8005c36:	f7ff f9cf 	bl	8004fd8 <LL_RCC_GetAHBPrescaler>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	4a03      	ldr	r2, [pc, #12]	; (8005c50 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd98      	pop	{r3, r4, r7, pc}
 8005c50:	080110a4 	.word	0x080110a4

08005c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c54:	b598      	push	{r3, r4, r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c58:	f7ff ffe8 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	f7ff f9d5 	bl	800500c <LL_RCC_GetAPB1Prescaler>
 8005c62:	4603      	mov	r3, r0
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd98      	pop	{r3, r4, r7, pc}
 8005c7c:	080110e4 	.word	0x080110e4

08005c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c80:	b598      	push	{r3, r4, r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005c84:	f7ff ffd2 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	f7ff f9cb 	bl	8005024 <LL_RCC_GetAPB2Prescaler>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	0adb      	lsrs	r3, r3, #11
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd98      	pop	{r3, r4, r7, pc}
 8005ca8:	080110e4 	.word	0x080110e4

08005cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2bb0      	cmp	r3, #176	; 0xb0
 8005cb8:	d903      	bls.n	8005cc2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005cba:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e007      	b.n	8005cd2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005cd2:	f7ff f98d 	bl	8004ff0 <LL_RCC_GetAHB4Prescaler>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	4a0d      	ldr	r2, [pc, #52]	; (8005d14 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	0c9c      	lsrs	r4, r3, #18
 8005cf6:	f7fe fedb 	bl	8004ab0 <HAL_PWREx_GetVoltageRange>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f80c 	bl	8005d1c <RCC_SetFlashLatency>
 8005d04:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	08011104 	.word	0x08011104
 8005d14:	080110a4 	.word	0x080110a4
 8005d18:	431bde83 	.word	0x431bde83

08005d1c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b093      	sub	sp, #76	; 0x4c
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <RCC_SetFlashLatency+0xe8>)
 8005d28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005d2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005d32:	4a35      	ldr	r2, [pc, #212]	; (8005e08 <RCC_SetFlashLatency+0xec>)
 8005d34:	f107 031c 	add.w	r3, r7, #28
 8005d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005d3e:	4b33      	ldr	r3, [pc, #204]	; (8005e0c <RCC_SetFlashLatency+0xf0>)
 8005d40:	f107 040c 	add.w	r4, r7, #12
 8005d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d54:	d11a      	bne.n	8005d8c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	643b      	str	r3, [r7, #64]	; 0x40
 8005d5a:	e013      	b.n	8005d84 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	3348      	adds	r3, #72	; 0x48
 8005d62:	443b      	add	r3, r7
 8005d64:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d807      	bhi.n	8005d7e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	3348      	adds	r3, #72	; 0x48
 8005d74:	443b      	add	r3, r7
 8005d76:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005d7a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005d7c:	e020      	b.n	8005dc0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d80:	3301      	adds	r3, #1
 8005d82:	643b      	str	r3, [r7, #64]	; 0x40
 8005d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d9e8      	bls.n	8005d5c <RCC_SetFlashLatency+0x40>
 8005d8a:	e019      	b.n	8005dc0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d90:	e013      	b.n	8005dba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	3348      	adds	r3, #72	; 0x48
 8005d98:	443b      	add	r3, r7
 8005d9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d807      	bhi.n	8005db4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	3348      	adds	r3, #72	; 0x48
 8005daa:	443b      	add	r3, r7
 8005dac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005db0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005db2:	e005      	b.n	8005dc0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	3301      	adds	r3, #1
 8005db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d9e8      	bls.n	8005d92 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <RCC_SetFlashLatency+0xf4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f023 0207 	bic.w	r2, r3, #7
 8005dc8:	4911      	ldr	r1, [pc, #68]	; (8005e10 <RCC_SetFlashLatency+0xf4>)
 8005dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dd0:	f7fd fc9e 	bl	8003710 <HAL_GetTick>
 8005dd4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005dd6:	e008      	b.n	8005dea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dd8:	f7fd fc9a 	bl	8003710 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e007      	b.n	8005dfa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <RCC_SetFlashLatency+0xf4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d1ef      	bne.n	8005dd8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	374c      	adds	r7, #76	; 0x4c
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	0800fb20 	.word	0x0800fb20
 8005e08:	0800fb30 	.word	0x0800fb30
 8005e0c:	0800fb3c 	.word	0x0800fb3c
 8005e10:	58004000 	.word	0x58004000

08005e14 <LL_RCC_LSE_IsEnabled>:
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <LL_RCC_LSE_IsEnabled+0x18>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <LL_RCC_LSE_IsEnabled+0x1a>
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_RCC_LSE_IsReady>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d101      	bne.n	8005e50 <LL_RCC_LSE_IsReady+0x18>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <LL_RCC_LSE_IsReady+0x1a>
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <LL_RCC_SetRFWKPClockSource>:
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_RCC_SetSMPSClockSource>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f023 0203 	bic.w	r2, r3, #3
 8005e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <LL_RCC_SetSMPSPrescaler>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <LL_RCC_SetUSARTClockSource>:
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f023 0203 	bic.w	r2, r3, #3
 8005eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_RCC_SetLPUARTClockSource>:
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <LL_RCC_SetI2CClockSource>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <LL_RCC_SetLPTIMClockSource>:
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	43db      	mvns	r3, r3
 8005f82:	401a      	ands	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	041b      	lsls	r3, r3, #16
 8005f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <LL_RCC_SetSAIClockSource>:
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <LL_RCC_SetRNGClockSource>:
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <LL_RCC_SetCLK48ClockSource>:
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800600a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_RCC_SetUSBClockSource>:
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ffe3 	bl	8005ff6 <LL_RCC_SetCLK48ClockSource>
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <LL_RCC_SetADCClockSource>:
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006048:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800604c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_RCC_SetRTCClockSource>:
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <LL_RCC_GetRTCClockSource>:
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <LL_RCC_ForceBackupDomainReset>:
{
 80060aa:	b480      	push	{r7}
 80060ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060c2:	bf00      	nop
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_ReleaseBackupDomainReset>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <LL_RCC_PLLSAI1_Enable>:
{
 80060ee:	b480      	push	{r7}
 80060f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006100:	6013      	str	r3, [r2, #0]
}
 8006102:	bf00      	nop
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <LL_RCC_PLLSAI1_Disable>:
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800611a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <LL_RCC_PLLSAI1_IsReady>:
{
 800612a:	b480      	push	{r7}
 800612c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800613c:	d101      	bne.n	8006142 <LL_RCC_PLLSAI1_IsReady+0x18>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b088      	sub	sp, #32
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006156:	2300      	movs	r3, #0
 8006158:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800615a:	2300      	movs	r3, #0
 800615c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d034      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006172:	d021      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006174:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006178:	d81b      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800617a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800617e:	d01d      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006184:	d815      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800618a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800618e:	d110      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80061a0:	e00d      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f947 	bl	800643a <RCCEx_PLLSAI1_ConfigNP>
 80061ac:	4603      	mov	r3, r0
 80061ae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061b0:	e005      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	77fb      	strb	r3, [r7, #31]
        break;
 80061b6:	e002      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80061b8:	bf00      	nop
 80061ba:	e000      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80061bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061be:	7ffb      	ldrb	r3, [r7, #31]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fee8 	bl	8005f9e <LL_RCC_SetSAIClockSource>
 80061ce:	e001      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d0:	7ffb      	ldrb	r3, [r7, #31]
 80061d2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d046      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80061e0:	f7ff ff56 	bl	8006090 <LL_RCC_GetRTCClockSource>
 80061e4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d03c      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80061f0:	f7fe fc4e 	bl	8004a90 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff ff30 	bl	8006064 <LL_RCC_SetRTCClockSource>
 8006204:	e02e      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006210:	f7ff ff4b 	bl	80060aa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006214:	f7ff ff5a 	bl	80060cc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006230:	f7ff fdf0 	bl	8005e14 <LL_RCC_LSE_IsEnabled>
 8006234:	4603      	mov	r3, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	d114      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800623a:	f7fd fa69 	bl	8003710 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006240:	e00b      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006242:	f7fd fa65 	bl	8003710 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006250:	4293      	cmp	r3, r2
 8006252:	d902      	bls.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	77fb      	strb	r3, [r7, #31]
              break;
 8006258:	e004      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800625a:	f7ff fded 	bl	8005e38 <LL_RCC_LSE_IsReady>
 800625e:	4603      	mov	r3, r0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d1ee      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006264:	7ffb      	ldrb	r3, [r7, #31]
 8006266:	77bb      	strb	r3, [r7, #30]
 8006268:	e001      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	7ffb      	ldrb	r3, [r7, #31]
 800626c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fe2a 	bl	8005ed8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fe35 	bl	8005f04 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fe5d 	bl	8005f6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fe52 	bl	8005f6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fe2a 	bl	8005f30 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fe1f 	bl	8005f30 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d022      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fe8d 	bl	8006022 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006310:	d107      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800631c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006320:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800632a:	d10b      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f000 f8dd 	bl	80064f0 <RCCEx_PLLSAI1_ConfigNQ>
 8006336:	4603      	mov	r3, r0
 8006338:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800633a:	7ffb      	ldrb	r3, [r7, #31]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8006340:	7ffb      	ldrb	r3, [r7, #31]
 8006342:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02b      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006358:	d008      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006362:	d003      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fe2a 	bl	8005fca <LL_RCC_SetRNGClockSource>
 8006376:	e00a      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	2000      	movs	r0, #0
 8006384:	f7ff fe21 	bl	8005fca <LL_RCC_SetRNGClockSource>
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff fe34 	bl	8005ff6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006396:	d107      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d022      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fe3d 	bl	8006038 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c6:	d107      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063e0:	d10b      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f8dd 	bl	80065a6 <RCCEx_PLLSAI1_ConfigNR>
 80063ec:	4603      	mov	r3, r0
 80063ee:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80063f0:	7ffb      	ldrb	r3, [r7, #31]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
 80063f8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fd26 	bl	8005e5c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fd45 	bl	8005eb0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fd2c 	bl	8005e88 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8006430:	7fbb      	ldrb	r3, [r7, #30]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006446:	f7ff fe61 	bl	800610c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800644a:	f7fd f961 	bl	8003710 <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006450:	e009      	b.n	8006466 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006452:	f7fd f95d 	bl	8003710 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d902      	bls.n	8006466 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	e004      	b.n	8006470 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006466:	f7ff fe60 	bl	800612a <LL_RCC_PLLSAI1_IsReady>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d137      	bne.n	80064e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800648a:	4313      	orrs	r3, r2
 800648c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800648e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a0:	4313      	orrs	r3, r2
 80064a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064a4:	f7ff fe23 	bl	80060ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a8:	f7fd f932 	bl	8003710 <HAL_GetTick>
 80064ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064ae:	e009      	b.n	80064c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064b0:	f7fd f92e 	bl	8003710 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d902      	bls.n	80064c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	73fb      	strb	r3, [r7, #15]
        break;
 80064c2:	e004      	b.n	80064ce <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064c4:	f7ff fe31 	bl	800612a <LL_RCC_PLLSAI1_IsReady>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d1f0      	bne.n	80064b0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d108      	bne.n	80064e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80064d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064e2:	4313      	orrs	r3, r2
 80064e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80064fc:	f7ff fe06 	bl	800610c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006500:	f7fd f906 	bl	8003710 <HAL_GetTick>
 8006504:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006506:	e009      	b.n	800651c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006508:	f7fd f902 	bl	8003710 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d902      	bls.n	800651c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	73fb      	strb	r3, [r7, #15]
      break;
 800651a:	e004      	b.n	8006526 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800651c:	f7ff fe05 	bl	800612a <LL_RCC_PLLSAI1_IsReady>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d137      	bne.n	800659c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006540:	4313      	orrs	r3, r2
 8006542:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006556:	4313      	orrs	r3, r2
 8006558:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800655a:	f7ff fdc8 	bl	80060ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655e:	f7fd f8d7 	bl	8003710 <HAL_GetTick>
 8006562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006564:	e009      	b.n	800657a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006566:	f7fd f8d3 	bl	8003710 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d902      	bls.n	800657a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	73fb      	strb	r3, [r7, #15]
        break;
 8006578:	e004      	b.n	8006584 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800657a:	f7ff fdd6 	bl	800612a <LL_RCC_PLLSAI1_IsReady>
 800657e:	4603      	mov	r3, r0
 8006580:	2b01      	cmp	r3, #1
 8006582:	d1f0      	bne.n	8006566 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d108      	bne.n	800659c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800658a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065b2:	f7ff fdab 	bl	800610c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065b6:	f7fd f8ab 	bl	8003710 <HAL_GetTick>
 80065ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065bc:	e009      	b.n	80065d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065be:	f7fd f8a7 	bl	8003710 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d902      	bls.n	80065d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	73fb      	strb	r3, [r7, #15]
      break;
 80065d0:	e004      	b.n	80065dc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065d2:	f7ff fdaa 	bl	800612a <LL_RCC_PLLSAI1_IsReady>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1f0      	bne.n	80065be <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d137      	bne.n	8006652 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f6:	4313      	orrs	r3, r2
 80065f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80065fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800660c:	4313      	orrs	r3, r2
 800660e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006610:	f7ff fd6d 	bl	80060ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006614:	f7fd f87c 	bl	8003710 <HAL_GetTick>
 8006618:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800661a:	e009      	b.n	8006630 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800661c:	f7fd f878 	bl	8003710 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d902      	bls.n	8006630 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	73fb      	strb	r3, [r7, #15]
        break;
 800662e:	e004      	b.n	800663a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006630:	f7ff fd7b 	bl	800612a <LL_RCC_PLLSAI1_IsReady>
 8006634:	4603      	mov	r3, r0
 8006636:	2b01      	cmp	r3, #1
 8006638:	d1f0      	bne.n	800661c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d108      	bne.n	8006652 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e027      	b.n	80066be <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7a5b      	ldrb	r3, [r3, #9]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fc fd86 	bl	8003190 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f023 0120 	bic.w	r1, r3, #32
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0204 	orr.w	r2, r2, #4
 80066ae:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e090      	b.n	80067fa <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fc fd79 	bl	80031e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	22ca      	movs	r2, #202	; 0xca
 8006700:	625a      	str	r2, [r3, #36]	; 0x24
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2253      	movs	r2, #83	; 0x53
 8006708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f89f 	bl	800684e <RTC_EnterInitMode>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	22ff      	movs	r2, #255	; 0xff
 800671c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2204      	movs	r2, #4
 8006722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e067      	b.n	80067fa <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6899      	ldr	r1, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68d2      	ldr	r2, [r2, #12]
 8006764:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6919      	ldr	r1, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	041a      	lsls	r2, r3, #16
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006788:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0203 	bic.w	r2, r2, #3
 8006798:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69da      	ldr	r2, [r3, #28]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d113      	bne.n	80067e8 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f81e 	bl	8006802 <HAL_RTC_WaitForSynchro>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00d      	beq.n	80067e8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	22ff      	movs	r2, #255	; 0xff
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2204      	movs	r2, #4
 80067d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e008      	b.n	80067fa <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	22ff      	movs	r2, #255	; 0xff
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
  }
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006818:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800681a:	f7fc ff79 	bl	8003710 <HAL_GetTick>
 800681e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006820:	e009      	b.n	8006836 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006822:	f7fc ff75 	bl	8003710 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006830:	d901      	bls.n	8006836 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e007      	b.n	8006846 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0ee      	beq.n	8006822 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d119      	bne.n	8006898 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f04f 32ff 	mov.w	r2, #4294967295
 800686c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800686e:	f7fc ff4f 	bl	8003710 <HAL_GetTick>
 8006872:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006874:	e009      	b.n	800688a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006876:	f7fc ff4b 	bl	8003710 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006884:	d901      	bls.n	800688a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e007      	b.n	800689a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0ee      	beq.n	8006876 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e0a8      	b.n	8006a10 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	22ca      	movs	r2, #202	; 0xca
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2253      	movs	r2, #83	; 0x53
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d020      	beq.n	800692e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80068ec:	f7fc ff10 	bl	8003710 <HAL_GetTick>
 80068f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80068f2:	e015      	b.n	8006920 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068f4:	f7fc ff0c 	bl	8003710 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006902:	d90d      	bls.n	8006920 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	22ff      	movs	r2, #255	; 0xff
 800690a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2203      	movs	r2, #3
 8006910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e077      	b.n	8006a10 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e2      	bne.n	80068f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800694e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006950:	f7fc fede 	bl	8003710 <HAL_GetTick>
 8006954:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006956:	e015      	b.n	8006984 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006958:	f7fc feda 	bl	8003710 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006966:	d90d      	bls.n	8006984 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	22ff      	movs	r2, #255	; 0xff
 800696e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2203      	movs	r2, #3
 8006974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e045      	b.n	8006a10 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0e2      	beq.n	8006958 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0207 	bic.w	r2, r2, #7
 80069a8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6899      	ldr	r1, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80069ba:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80069bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c0:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80069c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80069ca:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a12      	ldr	r2, [pc, #72]	; (8006a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80069d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069e4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069f4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	22ff      	movs	r2, #255	; 0xff
 80069fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	58000800 	.word	0x58000800

08006a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e049      	b.n	8006ac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fc fc02 	bl	800324c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fa46 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d001      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e036      	b.n	8006b52 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <HAL_TIM_Base_Start_IT+0x94>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x44>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d115      	bne.n	8006b3c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <HAL_TIM_Base_Start_IT+0x98>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b06      	cmp	r3, #6
 8006b20:	d015      	beq.n	8006b4e <HAL_TIM_Base_Start_IT+0x82>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b28:	d011      	beq.n	8006b4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 0201 	orr.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3a:	e008      	b.n	8006b4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e000      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	00010007 	.word	0x00010007

08006b68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0201 	bic.w	r2, r2, #1
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	f240 4344 	movw	r3, #1092	; 0x444
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d107      	bne.n	8006bb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0201 	bic.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d122      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d11b      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f06f 0202 	mvn.w	r2, #2
 8006bf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f951 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006c0e:	e005      	b.n	8006c1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f943 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f954 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d122      	bne.n	8006c76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d11b      	bne.n	8006c76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f06f 0204 	mvn.w	r2, #4
 8006c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f927 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006c62:	e005      	b.n	8006c70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f919 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f92a 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d122      	bne.n	8006cca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d11b      	bne.n	8006cca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f06f 0208 	mvn.w	r2, #8
 8006c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8fd 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006cb6:	e005      	b.n	8006cc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8ef 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f900 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f003 0310 	and.w	r3, r3, #16
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d122      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d11b      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f06f 0210 	mvn.w	r2, #16
 8006cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f8d3 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006d0a:	e005      	b.n	8006d18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8c5 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f8d6 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d10e      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d107      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f06f 0201 	mvn.w	r2, #1
 8006d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f89f 	bl	8006e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d54:	2b80      	cmp	r3, #128	; 0x80
 8006d56:	d10e      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b80      	cmp	r3, #128	; 0x80
 8006d64:	d107      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 faff 	bl	8007374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d84:	d10e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 faf2 	bl	8007388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d10e      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b40      	cmp	r3, #64	; 0x40
 8006dbe:	d107      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f884 	bl	8006ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0220 	mvn.w	r2, #32
 8006df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fab2 	bl	8007360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e031      	b.n	8006e80 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f8c0 	bl	8006fb4 <TIM_SlaveTimer_SetConfig>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e018      	b.n	8006e80 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e6c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <TIM_Base_SetConfig+0xbc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_Base_SetConfig+0x20>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d108      	bne.n	8006f1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a21      	ldr	r2, [pc, #132]	; (8006fa8 <TIM_Base_SetConfig+0xbc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00b      	beq.n	8006f3e <TIM_Base_SetConfig+0x52>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2c:	d007      	beq.n	8006f3e <TIM_Base_SetConfig+0x52>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a1e      	ldr	r2, [pc, #120]	; (8006fac <TIM_Base_SetConfig+0xc0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d003      	beq.n	8006f3e <TIM_Base_SetConfig+0x52>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <TIM_Base_SetConfig+0xc4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d108      	bne.n	8006f50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <TIM_Base_SetConfig+0xbc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <TIM_Base_SetConfig+0xa0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <TIM_Base_SetConfig+0xc0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_Base_SetConfig+0xa0>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <TIM_Base_SetConfig+0xc4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d103      	bne.n	8006f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	615a      	str	r2, [r3, #20]
}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40012c00 	.word	0x40012c00
 8006fac:	40014400 	.word	0x40014400
 8006fb0:	40014800 	.word	0x40014800

08006fb4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b70      	cmp	r3, #112	; 0x70
 8007004:	d01a      	beq.n	800703c <TIM_SlaveTimer_SetConfig+0x88>
 8007006:	2b70      	cmp	r3, #112	; 0x70
 8007008:	d860      	bhi.n	80070cc <TIM_SlaveTimer_SetConfig+0x118>
 800700a:	2b60      	cmp	r3, #96	; 0x60
 800700c:	d054      	beq.n	80070b8 <TIM_SlaveTimer_SetConfig+0x104>
 800700e:	2b60      	cmp	r3, #96	; 0x60
 8007010:	d85c      	bhi.n	80070cc <TIM_SlaveTimer_SetConfig+0x118>
 8007012:	2b50      	cmp	r3, #80	; 0x50
 8007014:	d046      	beq.n	80070a4 <TIM_SlaveTimer_SetConfig+0xf0>
 8007016:	2b50      	cmp	r3, #80	; 0x50
 8007018:	d858      	bhi.n	80070cc <TIM_SlaveTimer_SetConfig+0x118>
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d019      	beq.n	8007052 <TIM_SlaveTimer_SetConfig+0x9e>
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d854      	bhi.n	80070cc <TIM_SlaveTimer_SetConfig+0x118>
 8007022:	2b30      	cmp	r3, #48	; 0x30
 8007024:	d055      	beq.n	80070d2 <TIM_SlaveTimer_SetConfig+0x11e>
 8007026:	2b30      	cmp	r3, #48	; 0x30
 8007028:	d850      	bhi.n	80070cc <TIM_SlaveTimer_SetConfig+0x118>
 800702a:	2b20      	cmp	r3, #32
 800702c:	d051      	beq.n	80070d2 <TIM_SlaveTimer_SetConfig+0x11e>
 800702e:	2b20      	cmp	r3, #32
 8007030:	d84c      	bhi.n	80070cc <TIM_SlaveTimer_SetConfig+0x118>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d04d      	beq.n	80070d2 <TIM_SlaveTimer_SetConfig+0x11e>
 8007036:	2b10      	cmp	r3, #16
 8007038:	d04b      	beq.n	80070d2 <TIM_SlaveTimer_SetConfig+0x11e>
 800703a:	e047      	b.n	80070cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68d9      	ldr	r1, [r3, #12]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f000 f8a6 	bl	800719c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007050:	e040      	b.n	80070d4 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b05      	cmp	r3, #5
 8007058:	d101      	bne.n	800705e <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e03b      	b.n	80070d6 <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6a1a      	ldr	r2, [r3, #32]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0201 	bic.w	r2, r2, #1
 8007074:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007084:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	4313      	orrs	r3, r2
 8007090:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	621a      	str	r2, [r3, #32]
      break;
 80070a2:	e017      	b.n	80070d4 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	6899      	ldr	r1, [r3, #8]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	461a      	mov	r2, r3
 80070b2:	f000 f814 	bl	80070de <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80070b6:	e00d      	b.n	80070d4 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	6899      	ldr	r1, [r3, #8]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	461a      	mov	r2, r3
 80070c6:	f000 f839 	bl	800713c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80070ca:	e003      	b.n	80070d4 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
      break;
 80070d0:	e000      	b.n	80070d4 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 80070d2:	bf00      	nop
  }

  return status;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070de:	b480      	push	{r7}
 80070e0:	b087      	sub	sp, #28
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	f023 0201 	bic.w	r2, r3, #1
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 030a 	bic.w	r3, r3, #10
 800711a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	621a      	str	r2, [r3, #32]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f023 0210 	bic.w	r2, r3, #16
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	031b      	lsls	r3, r3, #12
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	621a      	str	r2, [r3, #32]
}
 8007190:	bf00      	nop
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	021a      	lsls	r2, r3, #8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	431a      	orrs	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	609a      	str	r2, [r3, #8]
}
 80071d0:	bf00      	nop
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e04a      	b.n	800728a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007224:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a12      	ldr	r2, [pc, #72]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d004      	beq.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d10c      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4313      	orrs	r3, r2
 800726e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40012c00 	.word	0x40012c00

0800729c <HAL_TIMEx_RemapConfig>:
  *         (*)  Value not defined in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpaf1;

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIMEx_RemapConfig+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e04d      	b.n	8007350 <HAL_TIMEx_RemapConfig+0xb4>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Read TIMx_OR */
  tmpor = READ_REG(htim->Instance->OR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	60bb      	str	r3, [r7, #8]

  /* Read TIMx_AF1 */
  tmpaf1 = READ_REG(htim->Instance->AF1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a22      	ldr	r2, [pc, #136]	; (800735c <HAL_TIMEx_RemapConfig+0xc0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d004      	beq.n	80072e0 <HAL_TIMEx_RemapConfig+0x44>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072de:	d115      	bne.n	800730c <HAL_TIMEx_RemapConfig+0x70>
  {
    if ((Remap & TIM1_AF1_ETRSEL) != (uint32_t)RESET)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HAL_TIMEx_RemapConfig+0x60>
    {
      /* COMP1 output or COMP2 output connected to ETR input */
      MODIFY_REG(tmpaf1, TIM1_AF1_ETRSEL, (Remap & TIM1_AF1_ETRSEL));
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 32e0 	bic.w	r2, r3, #114688	; 0x1c000
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	e003      	b.n	8007304 <HAL_TIMEx_RemapConfig+0x68>
    }
    else
    {
      /* ETR legacy mode */
      MODIFY_REG(tmpaf1, TIM1_AF1_ETRSEL, 0U);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8007302:	60fb      	str	r3, [r7, #12]
    }

    /* Set TIMx_AF1 */
    WRITE_REG(htim->Instance->AF1, tmpaf1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set other remapping capabilities */
  MODIFY_REG(tmpor, TIM_GET_OR_MASK(htim->Instance), (Remap & (~TIM1_AF1_ETRSEL)));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a12      	ldr	r2, [pc, #72]	; (800735c <HAL_TIMEx_RemapConfig+0xc0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00a      	beq.n	800732c <HAL_TIMEx_RemapConfig+0x90>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731e:	d102      	bne.n	8007326 <HAL_TIMEx_RemapConfig+0x8a>
 8007320:	f06f 030f 	mvn.w	r3, #15
 8007324:	e004      	b.n	8007330 <HAL_TIMEx_RemapConfig+0x94>
 8007326:	f06f 0303 	mvn.w	r3, #3
 800732a:	e001      	b.n	8007330 <HAL_TIMEx_RemapConfig+0x94>
 800732c:	f06f 0313 	mvn.w	r3, #19
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	401a      	ands	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800733a:	4313      	orrs	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]

  /* Set TIMx_OR */
  WRITE_REG(htim->Instance->OR, tmpor);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40012c00 	.word	0x40012c00

08007360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <LL_RCC_GetUSARTClockSource>:
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80073a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4013      	ands	r3, r2
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <LL_RCC_GetLPUARTClockSource>:
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80073c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4013      	ands	r3, r2
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e042      	b.n	8007474 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7fb fda3 	bl	8002f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2224      	movs	r2, #36	; 0x24
 800740a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fc8c 	bl	8007d3c <UART_SetConfig>
 8007424:	4603      	mov	r3, r0
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e022      	b.n	8007474 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fea8 	bl	800818c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800744a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800745a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 ff2f 	bl	80082d0 <UART_CheckIdleState>
 8007472:	4603      	mov	r3, r0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	4613      	mov	r3, r2
 800748a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007492:	2b20      	cmp	r3, #32
 8007494:	f040 8083 	bne.w	800759e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_UART_Transmit+0x28>
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e07b      	b.n	80075a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_UART_Transmit+0x3a>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e074      	b.n	80075a0 <HAL_UART_Transmit+0x124>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2221      	movs	r2, #33	; 0x21
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ce:	f7fc f91f 	bl	8003710 <HAL_GetTick>
 80074d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	88fa      	ldrh	r2, [r7, #6]
 80074e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ec:	d108      	bne.n	8007500 <HAL_UART_Transmit+0x84>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d104      	bne.n	8007500 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	e003      	b.n	8007508 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007504:	2300      	movs	r3, #0
 8007506:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007510:	e02c      	b.n	800756c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2200      	movs	r2, #0
 800751a:	2180      	movs	r1, #128	; 0x80
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 ff22 	bl	8008366 <UART_WaitOnFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e039      	b.n	80075a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007540:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	3302      	adds	r3, #2
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	e007      	b.n	800755a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	781a      	ldrb	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	3301      	adds	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1cc      	bne.n	8007512 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2200      	movs	r2, #0
 8007580:	2140      	movs	r1, #64	; 0x40
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 feef 	bl	8008366 <UART_WaitOnFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e006      	b.n	80075a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2220      	movs	r2, #32
 8007596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e000      	b.n	80075a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d17a      	bne.n	80076b6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <HAL_UART_Transmit_DMA+0x24>
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e073      	b.n	80076b8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_UART_Transmit_DMA+0x36>
 80075da:	2302      	movs	r3, #2
 80075dc:	e06c      	b.n	80076b8 <HAL_UART_Transmit_DMA+0x110>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	88fa      	ldrh	r2, [r7, #6]
 80075f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	88fa      	ldrh	r2, [r7, #6]
 80075f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2221      	movs	r2, #33	; 0x21
 8007608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007610:	2b00      	cmp	r3, #0
 8007612:	d02c      	beq.n	800766e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007618:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <HAL_UART_Transmit_DMA+0x118>)
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007620:	4a28      	ldr	r2, [pc, #160]	; (80076c4 <HAL_UART_Transmit_DMA+0x11c>)
 8007622:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007628:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <HAL_UART_Transmit_DMA+0x120>)
 800762a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007630:	2200      	movs	r2, #0
 8007632:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763c:	4619      	mov	r1, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3328      	adds	r3, #40	; 0x28
 8007644:	461a      	mov	r2, r3
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	f7fc fce8 	bl	800401c <HAL_DMA_Start_IT>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2210      	movs	r2, #16
 8007656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e024      	b.n	80076b8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2240      	movs	r2, #64	; 0x40
 8007674:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	613b      	str	r3, [r7, #16]
   return(result);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769e:	623a      	str	r2, [r7, #32]
 80076a0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	69f9      	ldr	r1, [r7, #28]
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e000      	b.n	80076b8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
  }
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3728      	adds	r7, #40	; 0x28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	08008645 	.word	0x08008645
 80076c4:	080086df 	.word	0x080086df
 80076c8:	080086fb 	.word	0x080086fb

080076cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b0ba      	sub	sp, #232	; 0xe8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80076fa:	4013      	ands	r3, r2
 80076fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11b      	bne.n	8007740 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d015      	beq.n	8007740 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 82d6 	beq.w	8007ce2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
      }
      return;
 800773e:	e2d0      	b.n	8007ce2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 811f 	beq.w	8007988 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800774a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800774e:	4b8b      	ldr	r3, [pc, #556]	; (800797c <HAL_UART_IRQHandler+0x2b0>)
 8007750:	4013      	ands	r3, r2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007756:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800775a:	4b89      	ldr	r3, [pc, #548]	; (8007980 <HAL_UART_IRQHandler+0x2b4>)
 800775c:	4013      	ands	r3, r2
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8112 	beq.w	8007988 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d011      	beq.n	8007794 <HAL_UART_IRQHandler+0xc8>
 8007770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2201      	movs	r2, #1
 8007782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800778a:	f043 0201 	orr.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d011      	beq.n	80077c4 <HAL_UART_IRQHandler+0xf8>
 80077a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2202      	movs	r2, #2
 80077b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ba:	f043 0204 	orr.w	r2, r3, #4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d011      	beq.n	80077f4 <HAL_UART_IRQHandler+0x128>
 80077d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2204      	movs	r2, #4
 80077e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ea:	f043 0202 	orr.w	r2, r3, #2
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d017      	beq.n	8007830 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800780c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007810:	4b5a      	ldr	r3, [pc, #360]	; (800797c <HAL_UART_IRQHandler+0x2b0>)
 8007812:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2208      	movs	r2, #8
 800781e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007826:	f043 0208 	orr.w	r2, r3, #8
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007838:	2b00      	cmp	r3, #0
 800783a:	d012      	beq.n	8007862 <HAL_UART_IRQHandler+0x196>
 800783c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007858:	f043 0220 	orr.w	r2, r3, #32
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 823c 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800787a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800788a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d005      	beq.n	80078c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d04f      	beq.n	8007966 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fe56 	bl	8008578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d6:	2b40      	cmp	r3, #64	; 0x40
 80078d8:	d141      	bne.n	800795e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3308      	adds	r3, #8
 8007902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800790a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800791e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1d9      	bne.n	80078da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d013      	beq.n	8007956 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007932:	4a14      	ldr	r2, [pc, #80]	; (8007984 <HAL_UART_IRQHandler+0x2b8>)
 8007934:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800793a:	4618      	mov	r0, r3
 800793c:	f7fc fc48 	bl	80041d0 <HAL_DMA_Abort_IT>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d017      	beq.n	8007976 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	e00f      	b.n	8007976 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f9da 	bl	8007d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795c:	e00b      	b.n	8007976 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9d6 	bl	8007d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007964:	e007      	b.n	8007976 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f9d2 	bl	8007d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007974:	e1b7      	b.n	8007ce6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007976:	bf00      	nop
    return;
 8007978:	e1b5      	b.n	8007ce6 <HAL_UART_IRQHandler+0x61a>
 800797a:	bf00      	nop
 800797c:	10000001 	.word	0x10000001
 8007980:	04000120 	.word	0x04000120
 8007984:	0800877b 	.word	0x0800877b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798c:	2b01      	cmp	r3, #1
 800798e:	f040 814a 	bne.w	8007c26 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007996:	f003 0310 	and.w	r3, r3, #16
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8143 	beq.w	8007c26 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80079a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 813c 	beq.w	8007c26 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2210      	movs	r2, #16
 80079b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	f040 80b5 	bne.w	8007b30 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80079d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8187 	beq.w	8007cea <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079e6:	429a      	cmp	r2, r3
 80079e8:	f080 817f 	bcs.w	8007cea <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 8086 	bne.w	8007b14 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1da      	bne.n	8007a08 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a64:	f023 0301 	bic.w	r3, r3, #1
 8007a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3308      	adds	r3, #8
 8007a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e1      	bne.n	8007a52 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ab2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ab4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e3      	bne.n	8007a8e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae4:	f023 0310 	bic.w	r3, r3, #16
 8007ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007af8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e4      	bne.n	8007ad4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fc faff 	bl	8004112 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f8fb 	bl	8007d24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b2e:	e0dc      	b.n	8007cea <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80ce 	beq.w	8007cee <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80c9 	beq.w	8007cee <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e4      	bne.n	8007b5c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba8:	f023 0301 	bic.w	r3, r3, #1
 8007bac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bba:	633a      	str	r2, [r7, #48]	; 0x30
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e1      	bne.n	8007b92 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0310 	bic.w	r3, r3, #16
 8007bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	69b9      	ldr	r1, [r7, #24]
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	617b      	str	r3, [r7, #20]
   return(result);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e4      	bne.n	8007be2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f880 	bl	8007d24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c24:	e063      	b.n	8007cee <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <HAL_UART_IRQHandler+0x584>
 8007c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fdd7 	bl	80087fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c4e:	e051      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d014      	beq.n	8007c86 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d105      	bne.n	8007c74 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d03a      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
    }
    return;
 8007c84:	e035      	b.n	8007cf2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x5da>
 8007c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fd81 	bl	80087a6 <UART_EndTransmit_IT>
    return;
 8007ca4:	e026      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x5fa>
 8007cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fdb0 	bl	8008824 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cc4:	e016      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d010      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x628>
 8007cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da0c      	bge.n	8007cf4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fd98 	bl	8008810 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ce0:	e008      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
      return;
 8007ce2:	bf00      	nop
 8007ce4:	e006      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
    return;
 8007ce6:	bf00      	nop
 8007ce8:	e004      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
      return;
 8007cea:	bf00      	nop
 8007cec:	e002      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
      return;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <HAL_UART_IRQHandler+0x628>
    return;
 8007cf2:	bf00      	nop
  }
}
 8007cf4:	37e8      	adds	r7, #232	; 0xe8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop

08007cfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d40:	b08c      	sub	sp, #48	; 0x30
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	431a      	orrs	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4baf      	ldr	r3, [pc, #700]	; (8008028 <UART_SetConfig+0x2ec>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	6812      	ldr	r2, [r2, #0]
 8007d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d74:	430b      	orrs	r3, r1
 8007d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4aa4      	ldr	r2, [pc, #656]	; (800802c <UART_SetConfig+0x2f0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da4:	4313      	orrs	r3, r2
 8007da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007db2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	f023 010f 	bic.w	r1, r3, #15
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a95      	ldr	r2, [pc, #596]	; (8008030 <UART_SetConfig+0x2f4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d125      	bne.n	8007e2c <UART_SetConfig+0xf0>
 8007de0:	2003      	movs	r0, #3
 8007de2:	f7ff fadb 	bl	800739c <LL_RCC_GetUSARTClockSource>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d81b      	bhi.n	8007e24 <UART_SetConfig+0xe8>
 8007dec:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <UART_SetConfig+0xb8>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e15 	.word	0x08007e15
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e0a:	e042      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e12:	e03e      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e1a:	e03a      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e22:	e036      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e2a:	e032      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a7e      	ldr	r2, [pc, #504]	; (800802c <UART_SetConfig+0x2f0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d12a      	bne.n	8007e8c <UART_SetConfig+0x150>
 8007e36:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007e3a:	f7ff fabf 	bl	80073bc <LL_RCC_GetLPUARTClockSource>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e44:	d01a      	beq.n	8007e7c <UART_SetConfig+0x140>
 8007e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e4a:	d81b      	bhi.n	8007e84 <UART_SetConfig+0x148>
 8007e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e50:	d00c      	beq.n	8007e6c <UART_SetConfig+0x130>
 8007e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e56:	d815      	bhi.n	8007e84 <UART_SetConfig+0x148>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <UART_SetConfig+0x128>
 8007e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e60:	d008      	beq.n	8007e74 <UART_SetConfig+0x138>
 8007e62:	e00f      	b.n	8007e84 <UART_SetConfig+0x148>
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e6a:	e012      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e72:	e00e      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e7a:	e00a      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e82:	e006      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e8a:	e002      	b.n	8007e92 <UART_SetConfig+0x156>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a65      	ldr	r2, [pc, #404]	; (800802c <UART_SetConfig+0x2f0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	f040 8097 	bne.w	8007fcc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d823      	bhi.n	8007eee <UART_SetConfig+0x1b2>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0x170>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007eef 	.word	0x08007eef
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007eef 	.word	0x08007eef
 8007ebc:	08007edf 	.word	0x08007edf
 8007ec0:	08007eef 	.word	0x08007eef
 8007ec4:	08007eef 	.word	0x08007eef
 8007ec8:	08007eef 	.word	0x08007eef
 8007ecc:	08007ee7 	.word	0x08007ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed0:	f7fd fec0 	bl	8005c54 <HAL_RCC_GetPCLK1Freq>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ed6:	e010      	b.n	8007efa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed8:	4b56      	ldr	r3, [pc, #344]	; (8008034 <UART_SetConfig+0x2f8>)
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007edc:	e00d      	b.n	8007efa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ede:	f7fd fe39 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 8007ee2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ee4:	e009      	b.n	8007efa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eec:	e005      	b.n	8007efa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 812b 	beq.w	8008158 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	4a4c      	ldr	r2, [pc, #304]	; (8008038 <UART_SetConfig+0x2fc>)
 8007f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	4413      	add	r3, r2
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d305      	bcc.n	8007f32 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d903      	bls.n	8007f3a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f38:	e10e      	b.n	8008158 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	60fa      	str	r2, [r7, #12]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	4a3c      	ldr	r2, [pc, #240]	; (8008038 <UART_SetConfig+0x2fc>)
 8007f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2200      	movs	r2, #0
 8007f50:	603b      	str	r3, [r7, #0]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f5c:	f7f8 f968 	bl	8000230 <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	f04f 0300 	mov.w	r3, #0
 8007f70:	020b      	lsls	r3, r1, #8
 8007f72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f76:	0202      	lsls	r2, r0, #8
 8007f78:	6979      	ldr	r1, [r7, #20]
 8007f7a:	6849      	ldr	r1, [r1, #4]
 8007f7c:	0849      	lsrs	r1, r1, #1
 8007f7e:	2000      	movs	r0, #0
 8007f80:	460c      	mov	r4, r1
 8007f82:	4605      	mov	r5, r0
 8007f84:	eb12 0804 	adds.w	r8, r2, r4
 8007f88:	eb43 0905 	adc.w	r9, r3, r5
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	469a      	mov	sl, r3
 8007f94:	4693      	mov	fp, r2
 8007f96:	4652      	mov	r2, sl
 8007f98:	465b      	mov	r3, fp
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 f947 	bl	8000230 <__aeabi_uldivmod>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fb0:	d308      	bcc.n	8007fc4 <UART_SetConfig+0x288>
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb8:	d204      	bcs.n	8007fc4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6a3a      	ldr	r2, [r7, #32]
 8007fc0:	60da      	str	r2, [r3, #12]
 8007fc2:	e0c9      	b.n	8008158 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007fca:	e0c5      	b.n	8008158 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd4:	d16e      	bne.n	80080b4 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	2b07      	cmp	r3, #7
 8007fde:	d82d      	bhi.n	800803c <UART_SetConfig+0x300>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0x2ac>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	08008009 	.word	0x08008009
 8007fec:	08008011 	.word	0x08008011
 8007ff0:	0800803d 	.word	0x0800803d
 8007ff4:	08008017 	.word	0x08008017
 8007ff8:	0800803d 	.word	0x0800803d
 8007ffc:	0800803d 	.word	0x0800803d
 8008000:	0800803d 	.word	0x0800803d
 8008004:	0800801f 	.word	0x0800801f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008008:	f7fd fe3a 	bl	8005c80 <HAL_RCC_GetPCLK2Freq>
 800800c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800800e:	e01b      	b.n	8008048 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008010:	4b08      	ldr	r3, [pc, #32]	; (8008034 <UART_SetConfig+0x2f8>)
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008014:	e018      	b.n	8008048 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008016:	f7fd fd9d 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 800801a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800801c:	e014      	b.n	8008048 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800801e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008024:	e010      	b.n	8008048 <UART_SetConfig+0x30c>
 8008026:	bf00      	nop
 8008028:	cfff69f3 	.word	0xcfff69f3
 800802c:	40008000 	.word	0x40008000
 8008030:	40013800 	.word	0x40013800
 8008034:	00f42400 	.word	0x00f42400
 8008038:	08011144 	.word	0x08011144
      default:
        pclk = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8084 	beq.w	8008158 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	4a4b      	ldr	r2, [pc, #300]	; (8008184 <UART_SetConfig+0x448>)
 8008056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800805a:	461a      	mov	r2, r3
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008062:	005a      	lsls	r2, r3, #1
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	441a      	add	r2, r3
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	fbb2 f3f3 	udiv	r3, r2, r3
 8008074:	b29b      	uxth	r3, r3
 8008076:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	2b0f      	cmp	r3, #15
 800807c:	d916      	bls.n	80080ac <UART_SetConfig+0x370>
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008084:	d212      	bcs.n	80080ac <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f023 030f 	bic.w	r3, r3, #15
 800808e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	b29b      	uxth	r3, r3
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	b29a      	uxth	r2, r3
 800809c:	8bfb      	ldrh	r3, [r7, #30]
 800809e:	4313      	orrs	r3, r2
 80080a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	8bfa      	ldrh	r2, [r7, #30]
 80080a8:	60da      	str	r2, [r3, #12]
 80080aa:	e055      	b.n	8008158 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080b2:	e051      	b.n	8008158 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080b8:	3b01      	subs	r3, #1
 80080ba:	2b07      	cmp	r3, #7
 80080bc:	d821      	bhi.n	8008102 <UART_SetConfig+0x3c6>
 80080be:	a201      	add	r2, pc, #4	; (adr r2, 80080c4 <UART_SetConfig+0x388>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	080080e5 	.word	0x080080e5
 80080c8:	080080ed 	.word	0x080080ed
 80080cc:	08008103 	.word	0x08008103
 80080d0:	080080f3 	.word	0x080080f3
 80080d4:	08008103 	.word	0x08008103
 80080d8:	08008103 	.word	0x08008103
 80080dc:	08008103 	.word	0x08008103
 80080e0:	080080fb 	.word	0x080080fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e4:	f7fd fdcc 	bl	8005c80 <HAL_RCC_GetPCLK2Freq>
 80080e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080ea:	e010      	b.n	800810e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080ec:	4b26      	ldr	r3, [pc, #152]	; (8008188 <UART_SetConfig+0x44c>)
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080f0:	e00d      	b.n	800810e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080f2:	f7fd fd2f 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 80080f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080f8:	e009      	b.n	800810e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008100:	e005      	b.n	800810e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800810c:	bf00      	nop
    }

    if (pclk != 0U)
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d021      	beq.n	8008158 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <UART_SetConfig+0x448>)
 800811a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800811e:	461a      	mov	r2, r3
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	fbb3 f2f2 	udiv	r2, r3, r2
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	085b      	lsrs	r3, r3, #1
 800812c:	441a      	add	r2, r3
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	fbb2 f3f3 	udiv	r3, r2, r3
 8008136:	b29b      	uxth	r3, r3
 8008138:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	2b0f      	cmp	r3, #15
 800813e:	d908      	bls.n	8008152 <UART_SetConfig+0x416>
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008146:	d204      	bcs.n	8008152 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6a3a      	ldr	r2, [r7, #32]
 800814e:	60da      	str	r2, [r3, #12]
 8008150:	e002      	b.n	8008158 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2201      	movs	r2, #1
 800815c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2201      	movs	r2, #1
 8008164:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2200      	movs	r2, #0
 800816c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2200      	movs	r2, #0
 8008172:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008174:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008178:	4618      	mov	r0, r3
 800817a:	3730      	adds	r7, #48	; 0x30
 800817c:	46bd      	mov	sp, r7
 800817e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008182:	bf00      	nop
 8008184:	08011144 	.word	0x08011144
 8008188:	00f42400 	.word	0x00f42400

0800818c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	f003 0308 	and.w	r3, r3, #8
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01a      	beq.n	80082a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800828a:	d10a      	bne.n	80082a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	605a      	str	r2, [r3, #4]
  }
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082e0:	f7fb fa16 	bl	8003710 <HAL_GetTick>
 80082e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d10e      	bne.n	8008312 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f82f 	bl	8008366 <UART_WaitOnFlagUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e025      	b.n	800835e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b04      	cmp	r3, #4
 800831e:	d10e      	bne.n	800833e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f819 	bl	8008366 <UART_WaitOnFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e00f      	b.n	800835e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b09c      	sub	sp, #112	; 0x70
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	603b      	str	r3, [r7, #0]
 8008372:	4613      	mov	r3, r2
 8008374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008376:	e0a9      	b.n	80084cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800837a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837e:	f000 80a5 	beq.w	80084cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008382:	f7fb f9c5 	bl	8003710 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <UART_WaitOnFlagUntilTimeout+0x32>
 8008392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008394:	2b00      	cmp	r3, #0
 8008396:	d140      	bne.n	800841a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083ac:	667b      	str	r3, [r7, #100]	; 0x64
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e6      	bne.n	8008398 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	f023 0301 	bic.w	r3, r3, #1
 80083e0:	663b      	str	r3, [r7, #96]	; 0x60
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80083ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e5      	bne.n	80083ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e069      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d051      	beq.n	80084cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008436:	d149      	bne.n	80084cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008440:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
 8008462:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e6      	bne.n	8008442 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3308      	adds	r3, #8
 800847a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	613b      	str	r3, [r7, #16]
   return(result);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f023 0301 	bic.w	r3, r3, #1
 800848a:	66bb      	str	r3, [r7, #104]	; 0x68
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3308      	adds	r3, #8
 8008492:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008494:	623a      	str	r2, [r7, #32]
 8008496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	69f9      	ldr	r1, [r7, #28]
 800849a:	6a3a      	ldr	r2, [r7, #32]
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e5      	bne.n	8008474 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e010      	b.n	80084ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	69da      	ldr	r2, [r3, #28]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4013      	ands	r3, r2
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	429a      	cmp	r2, r3
 80084da:	bf0c      	ite	eq
 80084dc:	2301      	moveq	r3, #1
 80084de:	2300      	movne	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	461a      	mov	r2, r3
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	f43f af46 	beq.w	8008378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3770      	adds	r7, #112	; 0x70
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b08f      	sub	sp, #60	; 0x3c
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	61fb      	str	r3, [r7, #28]
   return(result);
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008512:	637b      	str	r3, [r7, #52]	; 0x34
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800851e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008546:	633b      	str	r3, [r7, #48]	; 0x30
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008550:	61ba      	str	r2, [r7, #24]
 8008552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6979      	ldr	r1, [r7, #20]
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	613b      	str	r3, [r7, #16]
   return(result);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e5      	bne.n	8008530 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800856c:	bf00      	nop
 800856e:	373c      	adds	r7, #60	; 0x3c
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b095      	sub	sp, #84	; 0x54
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859e:	643b      	str	r3, [r7, #64]	; 0x40
 80085a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e6      	bne.n	8008580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085c8:	f023 0301 	bic.w	r3, r3, #1
 80085cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e3      	bne.n	80085b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d118      	bne.n	8008624 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f023 0310 	bic.w	r3, r3, #16
 8008606:	647b      	str	r3, [r7, #68]	; 0x44
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008610:	61bb      	str	r3, [r7, #24]
 8008612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6979      	ldr	r1, [r7, #20]
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	613b      	str	r3, [r7, #16]
   return(result);
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e6      	bne.n	80085f2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008638:	bf00      	nop
 800863a:	3754      	adds	r7, #84	; 0x54
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b090      	sub	sp, #64	; 0x40
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d137      	bne.n	80086d0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008662:	2200      	movs	r2, #0
 8008664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	623b      	str	r3, [r7, #32]
   return(result);
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800867e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008688:	633a      	str	r2, [r7, #48]	; 0x30
 800868a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800868e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e5      	bne.n	8008668 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800869c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086b0:	637b      	str	r3, [r7, #52]	; 0x34
 80086b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	61fb      	str	r3, [r7, #28]
 80086bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	69b9      	ldr	r1, [r7, #24]
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	617b      	str	r3, [r7, #20]
   return(result);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e6      	bne.n	800869c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086ce:	e002      	b.n	80086d6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80086d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80086d2:	f7f9 fad1 	bl	8001c78 <HAL_UART_TxCpltCallback>
}
 80086d6:	bf00      	nop
 80086d8:	3740      	adds	r7, #64	; 0x40
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff fb05 	bl	8007cfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008716:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008722:	2b80      	cmp	r3, #128	; 0x80
 8008724:	d109      	bne.n	800873a <UART_DMAError+0x40>
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b21      	cmp	r3, #33	; 0x21
 800872a:	d106      	bne.n	800873a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2200      	movs	r2, #0
 8008730:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008734:	6978      	ldr	r0, [r7, #20]
 8008736:	f7ff fede 	bl	80084f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b40      	cmp	r3, #64	; 0x40
 8008746:	d109      	bne.n	800875c <UART_DMAError+0x62>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b22      	cmp	r3, #34	; 0x22
 800874c:	d106      	bne.n	800875c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2200      	movs	r2, #0
 8008752:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008756:	6978      	ldr	r0, [r7, #20]
 8008758:	f7ff ff0e 	bl	8008578 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008762:	f043 0210 	orr.w	r2, r3, #16
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800876c:	6978      	ldr	r0, [r7, #20]
 800876e:	f7ff facf 	bl	8007d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008772:	bf00      	nop
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f7ff fab9 	bl	8007d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b088      	sub	sp, #32
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6979      	ldr	r1, [r7, #20]
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	613b      	str	r3, [r7, #16]
   return(result);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e6      	bne.n	80087ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7f9 fa42 	bl	8001c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087f4:	bf00      	nop
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008846:	2b01      	cmp	r3, #1
 8008848:	d101      	bne.n	800884e <HAL_UARTEx_DisableFifoMode+0x16>
 800884a:	2302      	movs	r3, #2
 800884c:	e027      	b.n	800889e <HAL_UARTEx_DisableFifoMode+0x66>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2224      	movs	r2, #36	; 0x24
 800885a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0201 	bic.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800887c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2220      	movs	r2, #32
 8008890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088be:	2302      	movs	r3, #2
 80088c0:	e02d      	b.n	800891e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2224      	movs	r2, #36	; 0x24
 80088ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0201 	bic.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f850 	bl	80089a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008936:	2b01      	cmp	r3, #1
 8008938:	d101      	bne.n	800893e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800893a:	2302      	movs	r3, #2
 800893c:	e02d      	b.n	800899a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2224      	movs	r2, #36	; 0x24
 800894a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f812 	bl	80089a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d108      	bne.n	80089c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089c4:	e031      	b.n	8008a2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089c6:	2308      	movs	r3, #8
 80089c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089ca:	2308      	movs	r3, #8
 80089cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	0e5b      	lsrs	r3, r3, #25
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	0f5b      	lsrs	r3, r3, #29
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
 80089f0:	7b3a      	ldrb	r2, [r7, #12]
 80089f2:	4911      	ldr	r1, [pc, #68]	; (8008a38 <UARTEx_SetNbDataToProcess+0x94>)
 80089f4:	5c8a      	ldrb	r2, [r1, r2]
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089fa:	7b3a      	ldrb	r2, [r7, #12]
 80089fc:	490f      	ldr	r1, [pc, #60]	; (8008a3c <UARTEx_SetNbDataToProcess+0x98>)
 80089fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a00:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	7b7a      	ldrb	r2, [r7, #13]
 8008a10:	4909      	ldr	r1, [pc, #36]	; (8008a38 <UARTEx_SetNbDataToProcess+0x94>)
 8008a12:	5c8a      	ldrb	r2, [r1, r2]
 8008a14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a18:	7b7a      	ldrb	r2, [r7, #13]
 8008a1a:	4908      	ldr	r1, [pc, #32]	; (8008a3c <UARTEx_SetNbDataToProcess+0x98>)
 8008a1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a2a:	bf00      	nop
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	0801115c 	.word	0x0801115c
 8008a3c:	08011164 	.word	0x08011164

08008a40 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a4a:	f107 0308 	add.w	r3, r7, #8
 8008a4e:	2218      	movs	r2, #24
 8008a50:	2100      	movs	r1, #0
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 f9ab 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a58:	233f      	movs	r3, #63	; 0x3f
 8008a5a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008a5c:	2381      	movs	r3, #129	; 0x81
 8008a5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008a60:	1dfb      	adds	r3, r7, #7
 8008a62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008a64:	2301      	movs	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a68:	f107 0308 	add.w	r3, r7, #8
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fd38 	bl	800a4e4 <hci_send_req>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	da01      	bge.n	8008a7e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008a7a:	23ff      	movs	r3, #255	; 0xff
 8008a7c:	e000      	b.n	8008a80 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3720      	adds	r7, #32
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008a88:	b5b0      	push	{r4, r5, r7, lr}
 8008a8a:	b0ce      	sub	sp, #312	; 0x138
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4605      	mov	r5, r0
 8008a90:	460c      	mov	r4, r1
 8008a92:	4610      	mov	r0, r2
 8008a94:	4619      	mov	r1, r3
 8008a96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a9a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008aa6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008aaa:	4622      	mov	r2, r4
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ab2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	801a      	strh	r2, [r3, #0]
 8008aba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008abe:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008ac2:	460a      	mov	r2, r1
 8008ac4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008ac6:	f107 0310 	add.w	r3, r7, #16
 8008aca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008ace:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	f107 0210 	add.w	r2, r7, #16
 8008ad8:	4413      	add	r3, r2
 8008ada:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008ade:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008ae2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008ae6:	4413      	add	r3, r2
 8008ae8:	3309      	adds	r3, #9
 8008aea:	f107 0210 	add.w	r2, r7, #16
 8008aee:	4413      	add	r3, r2
 8008af0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008af4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008af8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008b06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b0a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008b0e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008b12:	7812      	ldrb	r2, [r2, #0]
 8008b14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b24:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008b28:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008b2c:	8812      	ldrh	r2, [r2, #0]
 8008b2e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b36:	3302      	adds	r3, #2
 8008b38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008b44:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008b48:	8812      	ldrh	r2, [r2, #0]
 8008b4a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008b4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b52:	3302      	adds	r3, #2
 8008b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008b58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b5c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008b60:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008b72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b76:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008b7a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b80:	3301      	adds	r3, #1
 8008b82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b8a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008b8e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008b90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b94:	3301      	adds	r3, #1
 8008b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008ba4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 f8f0 	bl	8009d8e <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008bae:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008bb2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008bbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bc0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008bc4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bca:	3301      	adds	r3, #1
 8008bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008bd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008bda:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 f8d5 	bl	8009d8e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008be4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008be8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008bec:	4413      	add	r3, r2
 8008bee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008bfa:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c00:	3302      	adds	r3, #2
 8008c02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008c0e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c14:	3302      	adds	r3, #2
 8008c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c1e:	2218      	movs	r2, #24
 8008c20:	2100      	movs	r1, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 f8c3 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c28:	233f      	movs	r3, #63	; 0x3f
 8008c2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008c2e:	2383      	movs	r3, #131	; 0x83
 8008c30:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c34:	f107 0310 	add.w	r3, r7, #16
 8008c38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c44:	f107 030f 	add.w	r3, r7, #15
 8008c48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fc43 	bl	800a4e4 <hci_send_req>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da01      	bge.n	8008c68 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008c64:	23ff      	movs	r3, #255	; 0xff
 8008c66:	e004      	b.n	8008c72 <aci_gap_set_discoverable+0x1ea>
  return status;
 8008c68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c6c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c70:	781b      	ldrb	r3, [r3, #0]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bdb0      	pop	{r4, r5, r7, pc}

08008c7c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b0cc      	sub	sp, #304	; 0x130
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4602      	mov	r2, r0
 8008c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c88:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008c8e:	f107 0310 	add.w	r3, r7, #16
 8008c92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cb0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008cb4:	7812      	ldrb	r2, [r2, #0]
 8008cb6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cc6:	2218      	movs	r2, #24
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f001 f86f 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cd0:	233f      	movs	r3, #63	; 0x3f
 8008cd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008cd6:	2385      	movs	r3, #133	; 0x85
 8008cd8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cec:	f107 030f 	add.w	r3, r7, #15
 8008cf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 fbef 	bl	800a4e4 <hci_send_req>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	da01      	bge.n	8008d10 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008d0c:	23ff      	movs	r3, #255	; 0xff
 8008d0e:	e004      	b.n	8008d1a <aci_gap_set_io_capability+0x9e>
  return status;
 8008d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d18:	781b      	ldrb	r3, [r3, #0]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008d24:	b5b0      	push	{r4, r5, r7, lr}
 8008d26:	b0cc      	sub	sp, #304	; 0x130
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d36:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d46:	4622      	mov	r2, r4
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008d52:	4602      	mov	r2, r0
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d5e:	460a      	mov	r2, r1
 8008d60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008d62:	f107 0310 	add.w	r3, r7, #16
 8008d66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d84:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008d88:	7812      	ldrb	r2, [r2, #0]
 8008d8a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d90:	3301      	adds	r3, #1
 8008d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d9e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008daa:	3301      	adds	r3, #1
 8008dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008db8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008dbc:	7812      	ldrb	r2, [r2, #0]
 8008dbe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008dd2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dde:	3301      	adds	r3, #1
 8008de0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008dec:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008df2:	3301      	adds	r3, #1
 8008df4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfc:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008e00:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008e02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e06:	3301      	adds	r3, #1
 8008e08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e10:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008e14:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008e28:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e30:	3304      	adds	r3, #4
 8008e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008e3e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e44:	3301      	adds	r3, #1
 8008e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e4e:	2218      	movs	r2, #24
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 ffab 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e58:	233f      	movs	r3, #63	; 0x3f
 8008e5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008e5e:	2386      	movs	r3, #134	; 0x86
 8008e60:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e74:	f107 030f 	add.w	r3, r7, #15
 8008e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e86:	2100      	movs	r1, #0
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 fb2b 	bl	800a4e4 <hci_send_req>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da01      	bge.n	8008e98 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008e94:	23ff      	movs	r3, #255	; 0xff
 8008e96:	e004      	b.n	8008ea2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ea0:	781b      	ldrb	r3, [r3, #0]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bdb0      	pop	{r4, r5, r7, pc}

08008eac <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b0cc      	sub	sp, #304	; 0x130
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ebc:	6019      	str	r1, [r3, #0]
 8008ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008ec6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008ec8:	f107 0310 	add.w	r3, r7, #16
 8008ecc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ee6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008eea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008eee:	8812      	ldrh	r2, [r2, #0]
 8008ef0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f04:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008f08:	6812      	ldr	r2, [r2, #0]
 8008f0a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f12:	3304      	adds	r3, #4
 8008f14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f1c:	2218      	movs	r2, #24
 8008f1e:	2100      	movs	r1, #0
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 ff44 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f26:	233f      	movs	r3, #63	; 0x3f
 8008f28:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008f2c:	2388      	movs	r3, #136	; 0x88
 8008f2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f32:	f107 0310 	add.w	r3, r7, #16
 8008f36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f42:	f107 030f 	add.w	r3, r7, #15
 8008f46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f54:	2100      	movs	r1, #0
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 fac4 	bl	800a4e4 <hci_send_req>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	da01      	bge.n	8008f66 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008f62:	23ff      	movs	r3, #255	; 0xff
 8008f64:	e004      	b.n	8008f70 <aci_gap_pass_key_resp+0xc4>
  return status;
 8008f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f6e:	781b      	ldrb	r3, [r3, #0]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008f7a:	b590      	push	{r4, r7, lr}
 8008f7c:	b0cd      	sub	sp, #308	; 0x134
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	4604      	mov	r4, r0
 8008f82:	4608      	mov	r0, r1
 8008f84:	4611      	mov	r1, r2
 8008f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f8a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f94:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008f98:	4622      	mov	r2, r4
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fac:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008fb0:	460a      	mov	r2, r1
 8008fb2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008fb4:	f107 0310 	add.w	r3, r7, #16
 8008fb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008fbc:	f107 0308 	add.w	r3, r7, #8
 8008fc0:	2207      	movs	r2, #7
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fef2 	bl	8009dae <Osal_MemSet>
  int index_input = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fd8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ff2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008ff6:	7812      	ldrb	r2, [r2, #0]
 8008ff8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ffe:	3301      	adds	r3, #1
 8009000:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009008:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800900c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009010:	7812      	ldrb	r2, [r2, #0]
 8009012:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009014:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009018:	3301      	adds	r3, #1
 800901a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800901e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009022:	2218      	movs	r2, #24
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fec1 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800902c:	233f      	movs	r3, #63	; 0x3f
 800902e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009032:	238a      	movs	r3, #138	; 0x8a
 8009034:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009038:	f107 0310 	add.w	r3, r7, #16
 800903c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009040:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009044:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009050:	2307      	movs	r3, #7
 8009052:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f001 fa41 	bl	800a4e4 <hci_send_req>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	da01      	bge.n	800906c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009068:	23ff      	movs	r3, #255	; 0xff
 800906a:	e02e      	b.n	80090ca <aci_gap_init+0x150>
  if ( resp.Status )
 800906c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009070:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <aci_gap_init+0x10c>
    return resp.Status;
 800907a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	e021      	b.n	80090ca <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800908e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009092:	b29a      	uxth	r2, r3
 8009094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80090a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80090a8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80090b2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80090b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80090bc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80090c6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd90      	pop	{r4, r7, pc}

080090d4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b0cc      	sub	sp, #304	; 0x130
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4602      	mov	r2, r0
 80090dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e4:	6019      	str	r1, [r3, #0]
 80090e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80090ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80090f0:	f107 0310 	add.w	r3, r7, #16
 80090f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009100:	2200      	movs	r2, #0
 8009102:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800910a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009112:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800911a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800911e:	3301      	adds	r3, #1
 8009120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009128:	1c58      	adds	r0, r3, #1
 800912a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	f000 fe26 	bl	8009d8e <Osal_MemCpy>
  index_input += AdvDataLen;
 8009142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009146:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009150:	4413      	add	r3, r2
 8009152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009156:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800915a:	2218      	movs	r2, #24
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fe25 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009164:	233f      	movs	r3, #63	; 0x3f
 8009166:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800916a:	238e      	movs	r3, #142	; 0x8e
 800916c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009170:	f107 0310 	add.w	r3, r7, #16
 8009174:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800917c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009180:	f107 030f 	add.w	r3, r7, #15
 8009184:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009188:	2301      	movs	r3, #1
 800918a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800918e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f001 f9a5 	bl	800a4e4 <hci_send_req>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	da01      	bge.n	80091a4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80091a0:	23ff      	movs	r3, #255	; 0xff
 80091a2:	e004      	b.n	80091ae <aci_gap_update_adv_data+0xda>
  return status;
 80091a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091ac:	781b      	ldrb	r3, [r3, #0]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	2218      	movs	r2, #24
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fdef 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 80091d0:	233f      	movs	r3, #63	; 0x3f
 80091d2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80091d4:	2392      	movs	r3, #146	; 0x92
 80091d6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80091d8:	1dfb      	adds	r3, r7, #7
 80091da:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80091dc:	2301      	movs	r3, #1
 80091de:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	2100      	movs	r1, #0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 f97c 	bl	800a4e4 <hci_send_req>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	da01      	bge.n	80091f6 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80091f2:	23ff      	movs	r3, #255	; 0xff
 80091f4:	e000      	b.n	80091f8 <aci_gap_configure_whitelist+0x40>
  return status;
 80091f6:	79fb      	ldrb	r3, [r7, #7]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b0cc      	sub	sp, #304	; 0x130
 8009204:	af00      	add	r7, sp, #0
 8009206:	4602      	mov	r2, r0
 8009208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009210:	801a      	strh	r2, [r3, #0]
 8009212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009216:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800921a:	460a      	mov	r2, r1
 800921c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800921e:	f107 0310 	add.w	r3, r7, #16
 8009222:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800923c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009240:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009244:	8812      	ldrh	r2, [r2, #0]
 8009246:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800924c:	3302      	adds	r3, #2
 800924e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009256:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800925a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800925e:	7812      	ldrb	r2, [r2, #0]
 8009260:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009266:	3301      	adds	r3, #1
 8009268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800926c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009270:	2218      	movs	r2, #24
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fd9a 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800927a:	233f      	movs	r3, #63	; 0x3f
 800927c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009280:	23a5      	movs	r3, #165	; 0xa5
 8009282:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009286:	f107 0310 	add.w	r3, r7, #16
 800928a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800928e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009292:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009296:	f107 030f 	add.w	r3, r7, #15
 800929a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800929e:	2301      	movs	r3, #1
 80092a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 f91a 	bl	800a4e4 <hci_send_req>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da01      	bge.n	80092ba <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80092b6:	23ff      	movs	r3, #255	; 0xff
 80092b8:	e004      	b.n	80092c4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80092ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092c2:	781b      	ldrb	r3, [r3, #0]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b088      	sub	sp, #32
 80092d2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092d8:	f107 0308 	add.w	r3, r7, #8
 80092dc:	2218      	movs	r2, #24
 80092de:	2100      	movs	r1, #0
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fd64 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 80092e6:	233f      	movs	r3, #63	; 0x3f
 80092e8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80092ea:	f240 1301 	movw	r3, #257	; 0x101
 80092ee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80092f0:	1dfb      	adds	r3, r7, #7
 80092f2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80092f4:	2301      	movs	r3, #1
 80092f6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092f8:	f107 0308 	add.w	r3, r7, #8
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 f8f0 	bl	800a4e4 <hci_send_req>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	da01      	bge.n	800930e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800930a:	23ff      	movs	r3, #255	; 0xff
 800930c:	e000      	b.n	8009310 <aci_gatt_init+0x42>
  return status;
 800930e:	79fb      	ldrb	r3, [r7, #7]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3720      	adds	r7, #32
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009318:	b590      	push	{r4, r7, lr}
 800931a:	b0cf      	sub	sp, #316	; 0x13c
 800931c:	af00      	add	r7, sp, #0
 800931e:	4604      	mov	r4, r0
 8009320:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009324:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009328:	6001      	str	r1, [r0, #0]
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009332:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009336:	4622      	mov	r2, r4
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800933e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009342:	4602      	mov	r2, r0
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800934a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800934e:	460a      	mov	r2, r1
 8009350:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009352:	f107 0310 	add.w	r3, r7, #16
 8009356:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800935a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800935e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d00a      	beq.n	800937e <aci_gatt_add_service+0x66>
 8009368:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800936c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d101      	bne.n	800937a <aci_gatt_add_service+0x62>
 8009376:	2311      	movs	r3, #17
 8009378:	e002      	b.n	8009380 <aci_gatt_add_service+0x68>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <aci_gatt_add_service+0x68>
 800937e:	2303      	movs	r3, #3
 8009380:	f107 0210 	add.w	r2, r7, #16
 8009384:	4413      	add	r3, r2
 8009386:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800938a:	f107 030c 	add.w	r3, r7, #12
 800938e:	2203      	movs	r2, #3
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fd0b 	bl	8009dae <Osal_MemSet>
  int index_input = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800939e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093a2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80093a6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80093aa:	7812      	ldrb	r2, [r2, #0]
 80093ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80093ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b2:	3301      	adds	r3, #1
 80093b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80093b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093bc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d002      	beq.n	80093cc <aci_gatt_add_service+0xb4>
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d004      	beq.n	80093d4 <aci_gatt_add_service+0xbc>
 80093ca:	e007      	b.n	80093dc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80093cc:	2302      	movs	r3, #2
 80093ce:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80093d2:	e005      	b.n	80093e0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80093d4:	2310      	movs	r3, #16
 80093d6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80093da:	e001      	b.n	80093e0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80093dc:	2397      	movs	r3, #151	; 0x97
 80093de:	e06c      	b.n	80094ba <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80093e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093e4:	1c58      	adds	r0, r3, #1
 80093e6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80093ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80093f2:	6819      	ldr	r1, [r3, #0]
 80093f4:	f000 fccb 	bl	8009d8e <Osal_MemCpy>
    index_input += size;
 80093f8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80093fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009400:	4413      	add	r3, r2
 8009402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800940e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009412:	7812      	ldrb	r2, [r2, #0]
 8009414:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800941a:	3301      	adds	r3, #1
 800941c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009424:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009428:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800942c:	7812      	ldrb	r2, [r2, #0]
 800942e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009434:	3301      	adds	r3, #1
 8009436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800943a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800943e:	2218      	movs	r2, #24
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fcb3 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009448:	233f      	movs	r3, #63	; 0x3f
 800944a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800944e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009452:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009456:	f107 0310 	add.w	r3, r7, #16
 800945a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800945e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009466:	f107 030c 	add.w	r3, r7, #12
 800946a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800946e:	2303      	movs	r3, #3
 8009470:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009474:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f001 f832 	bl	800a4e4 <hci_send_req>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	da01      	bge.n	800948a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009486:	23ff      	movs	r3, #255	; 0xff
 8009488:	e017      	b.n	80094ba <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800948a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800948e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009498:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800949c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	e00a      	b.n	80094ba <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80094a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80094b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd90      	pop	{r4, r7, pc}

080094c4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b0d1      	sub	sp, #324	; 0x144
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4604      	mov	r4, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80094d2:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80094d6:	600a      	str	r2, [r1, #0]
 80094d8:	4619      	mov	r1, r3
 80094da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80094de:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80094e2:	4622      	mov	r2, r4
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80094ea:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80094ee:	4602      	mov	r2, r0
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80094f6:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80094fa:	460a      	mov	r2, r1
 80094fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80094fe:	f107 0318 	add.w	r3, r7, #24
 8009502:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009506:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800950a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d00a      	beq.n	800952a <aci_gatt_add_char+0x66>
 8009514:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009518:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d101      	bne.n	8009526 <aci_gatt_add_char+0x62>
 8009522:	2313      	movs	r3, #19
 8009524:	e002      	b.n	800952c <aci_gatt_add_char+0x68>
 8009526:	2303      	movs	r3, #3
 8009528:	e000      	b.n	800952c <aci_gatt_add_char+0x68>
 800952a:	2305      	movs	r3, #5
 800952c:	f107 0218 	add.w	r2, r7, #24
 8009530:	4413      	add	r3, r2
 8009532:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009536:	f107 0314 	add.w	r3, r7, #20
 800953a:	2203      	movs	r2, #3
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fc35 	bl	8009dae <Osal_MemSet>
  int index_input = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800954a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800954e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009552:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009556:	8812      	ldrh	r2, [r2, #0]
 8009558:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800955a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800955e:	3302      	adds	r3, #2
 8009560:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009564:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009568:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800956c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009570:	7812      	ldrb	r2, [r2, #0]
 8009572:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009574:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009578:	3301      	adds	r3, #1
 800957a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800957e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009582:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d002      	beq.n	8009592 <aci_gatt_add_char+0xce>
 800958c:	2b02      	cmp	r3, #2
 800958e:	d004      	beq.n	800959a <aci_gatt_add_char+0xd6>
 8009590:	e007      	b.n	80095a2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009592:	2302      	movs	r3, #2
 8009594:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009598:	e005      	b.n	80095a6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800959a:	2310      	movs	r3, #16
 800959c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80095a0:	e001      	b.n	80095a6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80095a2:	2397      	movs	r3, #151	; 0x97
 80095a4:	e091      	b.n	80096ca <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80095a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80095aa:	1cd8      	adds	r0, r3, #3
 80095ac:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80095b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80095b4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80095b8:	6819      	ldr	r1, [r3, #0]
 80095ba:	f000 fbe8 	bl	8009d8e <Osal_MemCpy>
    index_input += size;
 80095be:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80095c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80095c6:	4413      	add	r3, r2
 80095c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80095cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095d0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80095d4:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80095d8:	8812      	ldrh	r2, [r2, #0]
 80095da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80095dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095e0:	3302      	adds	r3, #2
 80095e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80095e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095ea:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80095ee:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80095f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095f4:	3301      	adds	r3, #1
 80095f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80095fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095fe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009602:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009604:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009608:	3301      	adds	r3, #1
 800960a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800960e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009612:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009616:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009618:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800961c:	3301      	adds	r3, #1
 800961e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009622:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009626:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800962a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800962c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009630:	3301      	adds	r3, #1
 8009632:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009636:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800963a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800963e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009640:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009644:	3301      	adds	r3, #1
 8009646:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800964a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800964e:	2218      	movs	r2, #24
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fbab 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009658:	233f      	movs	r3, #63	; 0x3f
 800965a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800965e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009662:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009666:	f107 0318 	add.w	r3, r7, #24
 800966a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800966e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009672:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009676:	f107 0314 	add.w	r3, r7, #20
 800967a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800967e:	2303      	movs	r3, #3
 8009680:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009684:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f000 ff2a 	bl	800a4e4 <hci_send_req>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	da01      	bge.n	800969a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009696:	23ff      	movs	r3, #255	; 0xff
 8009698:	e017      	b.n	80096ca <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800969a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800969e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80096a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	e00a      	b.n	80096ca <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80096b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80096c6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd90      	pop	{r4, r7, pc}

080096d4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80096d4:	b5b0      	push	{r4, r5, r7, lr}
 80096d6:	b0cc      	sub	sp, #304	; 0x130
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4605      	mov	r5, r0
 80096dc:	460c      	mov	r4, r1
 80096de:	4610      	mov	r0, r2
 80096e0:	4619      	mov	r1, r3
 80096e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80096ea:	462a      	mov	r2, r5
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096f6:	4622      	mov	r2, r4
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fe:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009702:	4602      	mov	r2, r0
 8009704:	701a      	strb	r2, [r3, #0]
 8009706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800970e:	460a      	mov	r2, r1
 8009710:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009712:	f107 0310 	add.w	r3, r7, #16
 8009716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800971a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009722:	2200      	movs	r2, #0
 8009724:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800972c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009730:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009734:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009738:	8812      	ldrh	r2, [r2, #0]
 800973a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800973c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009740:	3302      	adds	r3, #2
 8009742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800974a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800974e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009752:	8812      	ldrh	r2, [r2, #0]
 8009754:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800975a:	3302      	adds	r3, #2
 800975c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009764:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009768:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800976c:	7812      	ldrb	r2, [r2, #0]
 800976e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009774:	3301      	adds	r3, #1
 8009776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800977a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800977e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009782:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009786:	7812      	ldrb	r2, [r2, #0]
 8009788:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800978a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800978e:	3301      	adds	r3, #1
 8009790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009798:	1d98      	adds	r0, r3, #6
 800979a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	461a      	mov	r2, r3
 80097a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80097aa:	f000 faf0 	bl	8009d8e <Osal_MemCpy>
  index_input += Char_Value_Length;
 80097ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80097bc:	4413      	add	r3, r2
 80097be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097c6:	2218      	movs	r2, #24
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 faef 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 80097d0:	233f      	movs	r3, #63	; 0x3f
 80097d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80097d6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80097da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097de:	f107 0310 	add.w	r3, r7, #16
 80097e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097ee:	f107 030f 	add.w	r3, r7, #15
 80097f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097f6:	2301      	movs	r3, #1
 80097f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009800:	2100      	movs	r1, #0
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fe6e 	bl	800a4e4 <hci_send_req>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	da01      	bge.n	8009812 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800980e:	23ff      	movs	r3, #255	; 0xff
 8009810:	e004      	b.n	800981c <aci_gatt_update_char_value+0x148>
  return status;
 8009812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009816:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800981a:	781b      	ldrb	r3, [r3, #0]
}
 800981c:	4618      	mov	r0, r3
 800981e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009822:	46bd      	mov	sp, r7
 8009824:	bdb0      	pop	{r4, r5, r7, pc}

08009826 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b0cc      	sub	sp, #304	; 0x130
 800982a:	af00      	add	r7, sp, #0
 800982c:	4602      	mov	r2, r0
 800982e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009832:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009836:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009844:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009856:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800985a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800985e:	8812      	ldrh	r2, [r2, #0]
 8009860:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009866:	3302      	adds	r3, #2
 8009868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800986c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009870:	2218      	movs	r2, #24
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f000 fa9a 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800987a:	233f      	movs	r3, #63	; 0x3f
 800987c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 8009880:	f240 1327 	movw	r3, #295	; 0x127
 8009884:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009888:	f107 0310 	add.w	r3, r7, #16
 800988c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009894:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009898:	f107 030f 	add.w	r3, r7, #15
 800989c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 fe19 	bl	800a4e4 <hci_send_req>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	da01      	bge.n	80098bc <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80098b8:	23ff      	movs	r3, #255	; 0xff
 80098ba:	e004      	b.n	80098c6 <aci_gatt_allow_read+0xa0>
  return status;
 80098bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80098c4:	781b      	ldrb	r3, [r3, #0]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b0cc      	sub	sp, #304	; 0x130
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80098e8:	4602      	mov	r2, r0
 80098ea:	701a      	strb	r2, [r3, #0]
 80098ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80098f4:	460a      	mov	r2, r1
 80098f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80098f8:	f107 0310 	add.w	r3, r7, #16
 80098fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009904:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009916:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800991a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800991e:	7812      	ldrb	r2, [r2, #0]
 8009920:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009926:	3301      	adds	r3, #1
 8009928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800992c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009930:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009934:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009938:	7812      	ldrb	r2, [r2, #0]
 800993a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800993c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009940:	3301      	adds	r3, #1
 8009942:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800994a:	1c98      	adds	r0, r3, #2
 800994c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009950:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009954:	781a      	ldrb	r2, [r3, #0]
 8009956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800995a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800995e:	6819      	ldr	r1, [r3, #0]
 8009960:	f000 fa15 	bl	8009d8e <Osal_MemCpy>
  index_input += Length;
 8009964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009968:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009972:	4413      	add	r3, r2
 8009974:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800997c:	2218      	movs	r2, #24
 800997e:	2100      	movs	r1, #0
 8009980:	4618      	mov	r0, r3
 8009982:	f000 fa14 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009986:	233f      	movs	r3, #63	; 0x3f
 8009988:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800998c:	230c      	movs	r3, #12
 800998e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009992:	f107 0310 	add.w	r3, r7, #16
 8009996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800999a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800999e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80099a2:	f107 030f 	add.w	r3, r7, #15
 80099a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80099aa:	2301      	movs	r3, #1
 80099ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fd94 	bl	800a4e4 <hci_send_req>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da01      	bge.n	80099c6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80099c2:	23ff      	movs	r3, #255	; 0xff
 80099c4:	e004      	b.n	80099d0 <aci_hal_write_config_data+0x100>
  return status;
 80099c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099ce:	781b      	ldrb	r3, [r3, #0]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b0cc      	sub	sp, #304	; 0x130
 80099de:	af00      	add	r7, sp, #0
 80099e0:	4602      	mov	r2, r0
 80099e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80099f4:	460a      	mov	r2, r1
 80099f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80099f8:	f107 0310 	add.w	r3, r7, #16
 80099fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a04:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a08:	2200      	movs	r2, #0
 8009a0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a1a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a26:	3301      	adds	r3, #1
 8009a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a34:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009a38:	7812      	ldrb	r2, [r2, #0]
 8009a3a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a40:	3301      	adds	r3, #1
 8009a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a4a:	2218      	movs	r2, #24
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 f9ad 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a54:	233f      	movs	r3, #63	; 0x3f
 8009a56:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009a5a:	230f      	movs	r3, #15
 8009a5c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a60:	f107 0310 	add.w	r3, r7, #16
 8009a64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a70:	f107 030f 	add.w	r3, r7, #15
 8009a74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 fd2d 	bl	800a4e4 <hci_send_req>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da01      	bge.n	8009a94 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009a90:	23ff      	movs	r3, #255	; 0xff
 8009a92:	e004      	b.n	8009a9e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a98:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a9c:	781b      	ldrb	r3, [r3, #0]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b0cc      	sub	sp, #304	; 0x130
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4602      	mov	r2, r0
 8009ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ab8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009aba:	f107 0310 	add.w	r3, r7, #16
 8009abe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009adc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ae0:	8812      	ldrh	r2, [r2, #0]
 8009ae2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ae8:	3302      	adds	r3, #2
 8009aea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009af2:	2218      	movs	r2, #24
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f959 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009afc:	233f      	movs	r3, #63	; 0x3f
 8009afe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009b02:	2318      	movs	r3, #24
 8009b04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b18:	f107 030f 	add.w	r3, r7, #15
 8009b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fcd9 	bl	800a4e4 <hci_send_req>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da01      	bge.n	8009b3c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009b38:	23ff      	movs	r3, #255	; 0xff
 8009b3a:	e004      	b.n	8009b46 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b44:	781b      	ldrb	r3, [r3, #0]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b5a:	f107 0308 	add.w	r3, r7, #8
 8009b5e:	2218      	movs	r2, #24
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f923 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x03;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009b70:	1dfb      	adds	r3, r7, #7
 8009b72:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009b74:	2301      	movs	r3, #1
 8009b76:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fcb0 	bl	800a4e4 <hci_send_req>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da01      	bge.n	8009b8e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009b8a:	23ff      	movs	r3, #255	; 0xff
 8009b8c:	e000      	b.n	8009b90 <hci_reset+0x40>
  return status;
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3720      	adds	r7, #32
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b0ce      	sub	sp, #312	; 0x138
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ba6:	6019      	str	r1, [r3, #0]
 8009ba8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bb6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009bba:	4602      	mov	r2, r0
 8009bbc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8009bbe:	f107 0318 	add.w	r3, r7, #24
 8009bc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009bc6:	f107 0310 	add.w	r3, r7, #16
 8009bca:	2205      	movs	r2, #5
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 f8ed 	bl	8009dae <Osal_MemSet>
  int index_input = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009bda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009bde:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009be2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009be6:	8812      	ldrh	r2, [r2, #0]
 8009be8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009bea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009bee:	3302      	adds	r3, #2
 8009bf0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bf4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009bf8:	2218      	movs	r2, #24
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 f8d6 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x08;
 8009c02:	2308      	movs	r3, #8
 8009c04:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009c08:	2330      	movs	r3, #48	; 0x30
 8009c0a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009c0e:	f107 0318 	add.w	r3, r7, #24
 8009c12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009c16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009c1e:	f107 0310 	add.w	r3, r7, #16
 8009c22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009c26:	2305      	movs	r3, #5
 8009c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009c30:	2100      	movs	r1, #0
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 fc56 	bl	800a4e4 <hci_send_req>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	da01      	bge.n	8009c42 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8009c3e:	23ff      	movs	r3, #255	; 0xff
 8009c40:	e023      	b.n	8009c8a <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8009c42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <hci_le_read_phy+0xc4>
    return resp.Status;
 8009c50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	e016      	b.n	8009c8a <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8009c5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009c64:	78da      	ldrb	r2, [r3, #3]
 8009c66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8009c72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009c7a:	791a      	ldrb	r2, [r3, #4]
 8009c7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b0cd      	sub	sp, #308	; 0x134
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009ca8:	4622      	mov	r2, r4
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cb0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	701a      	strb	r2, [r3, #0]
 8009cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cbc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009cc0:	460a      	mov	r2, r1
 8009cc2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009cc4:	f107 0310 	add.w	r3, r7, #16
 8009cc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ce6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009cea:	7812      	ldrb	r2, [r2, #0]
 8009cec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d00:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009d04:	7812      	ldrb	r2, [r2, #0]
 8009d06:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d1a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d26:	3301      	adds	r3, #1
 8009d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d30:	2218      	movs	r2, #24
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f83a 	bl	8009dae <Osal_MemSet>
  rq.ogf = 0x08;
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009d40:	2331      	movs	r3, #49	; 0x31
 8009d42:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d46:	f107 0310 	add.w	r3, r7, #16
 8009d4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d56:	f107 030f 	add.w	r3, r7, #15
 8009d5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fbba 	bl	800a4e4 <hci_send_req>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	da01      	bge.n	8009d7a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009d76:	23ff      	movs	r3, #255	; 0xff
 8009d78:	e004      	b.n	8009d84 <hci_le_set_default_phy+0xf0>
  return status;
 8009d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d82:	781b      	ldrb	r3, [r3, #0]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd90      	pop	{r4, r7, pc}

08009d8e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f004 f8ce 	bl	800df40 <memcpy>
 8009da4:	4603      	mov	r3, r0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f004 f8cc 	bl	800df5c <memset>
 8009dc4:	4603      	mov	r3, r0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08a      	sub	sp, #40	; 0x28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3301      	adds	r3, #1
 8009de2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2bff      	cmp	r3, #255	; 0xff
 8009dea:	d158      	bne.n	8009e9e <PeerToPeer_Event_Handler+0xce>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	3302      	adds	r3, #2
 8009df0:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	f640 4301 	movw	r3, #3073	; 0xc01
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d149      	bne.n	8009e96 <PeerToPeer_Event_Handler+0xc6>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	3302      	adds	r3, #2
 8009e06:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	885b      	ldrh	r3, [r3, #2]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	461a      	mov	r2, r3
 8009e10:	4b26      	ldr	r3, [pc, #152]	; (8009eac <PeerToPeer_Event_Handler+0xdc>)
 8009e12:	889b      	ldrh	r3, [r3, #4]
 8009e14:	3302      	adds	r3, #2
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d118      	bne.n	8009e4c <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	7a1b      	ldrb	r3, [r3, #8]
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d007      	beq.n	8009e3c <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	4618      	mov	r0, r3
 8009e36:	f003 fb45 	bl	800d4c4 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8009e3a:	e02e      	b.n	8009e9a <PeerToPeer_Event_Handler+0xca>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4618      	mov	r0, r3
 8009e46:	f003 fb3d 	bl	800d4c4 <P2PS_STM_App_Notification>
        break;
 8009e4a:	e026      	b.n	8009e9a <PeerToPeer_Event_Handler+0xca>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	885b      	ldrh	r3, [r3, #2]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	4b15      	ldr	r3, [pc, #84]	; (8009eac <PeerToPeer_Event_Handler+0xdc>)
 8009e56:	885b      	ldrh	r3, [r3, #2]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d11d      	bne.n	8009e9a <PeerToPeer_Event_Handler+0xca>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8009e5e:	4814      	ldr	r0, [pc, #80]	; (8009eb0 <PeerToPeer_Event_Handler+0xe0>)
 8009e60:	f000 ffe8 	bl	800ae34 <DbgTraceGetFileName>
 8009e64:	4601      	mov	r1, r0
 8009e66:	2395      	movs	r3, #149	; 0x95
 8009e68:	4a12      	ldr	r2, [pc, #72]	; (8009eb4 <PeerToPeer_Event_Handler+0xe4>)
 8009e6a:	4813      	ldr	r0, [pc, #76]	; (8009eb8 <PeerToPeer_Event_Handler+0xe8>)
 8009e6c:	f004 f95e 	bl	800e12c <iprintf>
 8009e70:	4812      	ldr	r0, [pc, #72]	; (8009ebc <PeerToPeer_Event_Handler+0xec>)
 8009e72:	f004 f9e1 	bl	800e238 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	88db      	ldrh	r3, [r3, #6]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	3308      	adds	r3, #8
 8009e88:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8009e8a:	f107 0308 	add.w	r3, r7, #8
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f003 fb18 	bl	800d4c4 <P2PS_STM_App_Notification>
        break;
 8009e94:	e001      	b.n	8009e9a <PeerToPeer_Event_Handler+0xca>

        default:
          break;
 8009e96:	bf00      	nop
 8009e98:	e002      	b.n	8009ea0 <PeerToPeer_Event_Handler+0xd0>
        break;
 8009e9a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009e9c:	e000      	b.n	8009ea0 <PeerToPeer_Event_Handler+0xd0>

    default:
      break;
 8009e9e:	bf00      	nop
  }

  return(return_value);
 8009ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3728      	adds	r7, #40	; 0x28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	20000140 	.word	0x20000140
 8009eb0:	0800fb4c 	.word	0x0800fb4c
 8009eb4:	0801116c 	.word	0x0801116c
 8009eb8:	0800fb80 	.word	0x0800fb80
 8009ebc:	0800fb94 	.word	0x0800fb94

08009ec0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	; 0x28
 8009ec4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8009ec6:	484a      	ldr	r0, [pc, #296]	; (8009ff0 <P2PS_STM_Init+0x130>)
 8009ec8:	f000 f942 	bl	800a150 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8009ecc:	238f      	movs	r3, #143	; 0x8f
 8009ece:	703b      	strb	r3, [r7, #0]
 8009ed0:	23e5      	movs	r3, #229	; 0xe5
 8009ed2:	707b      	strb	r3, [r7, #1]
 8009ed4:	23b3      	movs	r3, #179	; 0xb3
 8009ed6:	70bb      	strb	r3, [r7, #2]
 8009ed8:	23d5      	movs	r3, #213	; 0xd5
 8009eda:	70fb      	strb	r3, [r7, #3]
 8009edc:	232e      	movs	r3, #46	; 0x2e
 8009ede:	713b      	strb	r3, [r7, #4]
 8009ee0:	237f      	movs	r3, #127	; 0x7f
 8009ee2:	717b      	strb	r3, [r7, #5]
 8009ee4:	234a      	movs	r3, #74	; 0x4a
 8009ee6:	71bb      	strb	r3, [r7, #6]
 8009ee8:	2398      	movs	r3, #152	; 0x98
 8009eea:	71fb      	strb	r3, [r7, #7]
 8009eec:	232a      	movs	r3, #42	; 0x2a
 8009eee:	723b      	strb	r3, [r7, #8]
 8009ef0:	2348      	movs	r3, #72	; 0x48
 8009ef2:	727b      	strb	r3, [r7, #9]
 8009ef4:	237a      	movs	r3, #122	; 0x7a
 8009ef6:	72bb      	strb	r3, [r7, #10]
 8009ef8:	23cc      	movs	r3, #204	; 0xcc
 8009efa:	72fb      	strb	r3, [r7, #11]
 8009efc:	2340      	movs	r3, #64	; 0x40
 8009efe:	733b      	strb	r3, [r7, #12]
 8009f00:	23fe      	movs	r3, #254	; 0xfe
 8009f02:	737b      	strb	r3, [r7, #13]
 8009f04:	2300      	movs	r3, #0
 8009f06:	73bb      	strb	r3, [r7, #14]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009f0c:	4639      	mov	r1, r7
 8009f0e:	4b39      	ldr	r3, [pc, #228]	; (8009ff4 <P2PS_STM_Init+0x134>)
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	2308      	movs	r3, #8
 8009f14:	2201      	movs	r2, #1
 8009f16:	2002      	movs	r0, #2
 8009f18:	f7ff f9fe 	bl	8009318 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8009f1c:	2319      	movs	r3, #25
 8009f1e:	703b      	strb	r3, [r7, #0]
 8009f20:	23ed      	movs	r3, #237	; 0xed
 8009f22:	707b      	strb	r3, [r7, #1]
 8009f24:	2382      	movs	r3, #130	; 0x82
 8009f26:	70bb      	strb	r3, [r7, #2]
 8009f28:	23ae      	movs	r3, #174	; 0xae
 8009f2a:	70fb      	strb	r3, [r7, #3]
 8009f2c:	23ed      	movs	r3, #237	; 0xed
 8009f2e:	713b      	strb	r3, [r7, #4]
 8009f30:	2321      	movs	r3, #33	; 0x21
 8009f32:	717b      	strb	r3, [r7, #5]
 8009f34:	234c      	movs	r3, #76	; 0x4c
 8009f36:	71bb      	strb	r3, [r7, #6]
 8009f38:	239d      	movs	r3, #157	; 0x9d
 8009f3a:	71fb      	strb	r3, [r7, #7]
 8009f3c:	2341      	movs	r3, #65	; 0x41
 8009f3e:	723b      	strb	r3, [r7, #8]
 8009f40:	2345      	movs	r3, #69	; 0x45
 8009f42:	727b      	strb	r3, [r7, #9]
 8009f44:	2322      	movs	r3, #34	; 0x22
 8009f46:	72bb      	strb	r3, [r7, #10]
 8009f48:	238e      	movs	r3, #142	; 0x8e
 8009f4a:	72fb      	strb	r3, [r7, #11]
 8009f4c:	2341      	movs	r3, #65	; 0x41
 8009f4e:	733b      	strb	r3, [r7, #12]
 8009f50:	23fe      	movs	r3, #254	; 0xfe
 8009f52:	737b      	strb	r3, [r7, #13]
 8009f54:	2300      	movs	r3, #0
 8009f56:	73bb      	strb	r3, [r7, #14]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009f5c:	4b25      	ldr	r3, [pc, #148]	; (8009ff4 <P2PS_STM_Init+0x134>)
 8009f5e:	8818      	ldrh	r0, [r3, #0]
 8009f60:	463a      	mov	r2, r7
 8009f62:	4b25      	ldr	r3, [pc, #148]	; (8009ff8 <P2PS_STM_Init+0x138>)
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	2301      	movs	r3, #1
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	230a      	movs	r3, #10
 8009f6c:	9303      	str	r3, [sp, #12]
 8009f6e:	2301      	movs	r3, #1
 8009f70:	9302      	str	r3, [sp, #8]
 8009f72:	2300      	movs	r3, #0
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	2306      	movs	r3, #6
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	f7ff faa1 	bl	80094c4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009f82:	2319      	movs	r3, #25
 8009f84:	703b      	strb	r3, [r7, #0]
 8009f86:	23ed      	movs	r3, #237	; 0xed
 8009f88:	707b      	strb	r3, [r7, #1]
 8009f8a:	2382      	movs	r3, #130	; 0x82
 8009f8c:	70bb      	strb	r3, [r7, #2]
 8009f8e:	23ae      	movs	r3, #174	; 0xae
 8009f90:	70fb      	strb	r3, [r7, #3]
 8009f92:	23ed      	movs	r3, #237	; 0xed
 8009f94:	713b      	strb	r3, [r7, #4]
 8009f96:	2321      	movs	r3, #33	; 0x21
 8009f98:	717b      	strb	r3, [r7, #5]
 8009f9a:	234c      	movs	r3, #76	; 0x4c
 8009f9c:	71bb      	strb	r3, [r7, #6]
 8009f9e:	239d      	movs	r3, #157	; 0x9d
 8009fa0:	71fb      	strb	r3, [r7, #7]
 8009fa2:	2341      	movs	r3, #65	; 0x41
 8009fa4:	723b      	strb	r3, [r7, #8]
 8009fa6:	2345      	movs	r3, #69	; 0x45
 8009fa8:	727b      	strb	r3, [r7, #9]
 8009faa:	2322      	movs	r3, #34	; 0x22
 8009fac:	72bb      	strb	r3, [r7, #10]
 8009fae:	238e      	movs	r3, #142	; 0x8e
 8009fb0:	72fb      	strb	r3, [r7, #11]
 8009fb2:	2342      	movs	r3, #66	; 0x42
 8009fb4:	733b      	strb	r3, [r7, #12]
 8009fb6:	23fe      	movs	r3, #254	; 0xfe
 8009fb8:	737b      	strb	r3, [r7, #13]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73bb      	strb	r3, [r7, #14]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009fc2:	4b0c      	ldr	r3, [pc, #48]	; (8009ff4 <P2PS_STM_Init+0x134>)
 8009fc4:	8818      	ldrh	r0, [r3, #0]
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <P2PS_STM_Init+0x13c>)
 8009fca:	9305      	str	r3, [sp, #20]
 8009fcc:	2301      	movs	r3, #1
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	230a      	movs	r3, #10
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	2310      	movs	r3, #16
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	2102      	movs	r1, #2
 8009fe4:	f7ff fa6e 	bl	80094c4 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8009fe8:	bf00      	nop
}
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	08009dd1 	.word	0x08009dd1
 8009ff4:	20000140 	.word	0x20000140
 8009ff8:	20000142 	.word	0x20000142
 8009ffc:	20000144 	.word	0x20000144

0800a000 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0
  return;
 800a004:	bf00      	nop
}
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a00e:	b480      	push	{r7}
 800a010:	af00      	add	r7, sp, #0
  return;
 800a012:	bf00      	nop
}
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
  return;
 800a020:	bf00      	nop
}
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a02a:	b480      	push	{r7}
 800a02c:	af00      	add	r7, sp, #0
  return;
 800a02e:	bf00      	nop
}
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0
  return;
 800a03c:	bf00      	nop
}
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a046:	b480      	push	{r7}
 800a048:	af00      	add	r7, sp, #0
  return;
 800a04a:	bf00      	nop
}
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a054:	b480      	push	{r7}
 800a056:	af00      	add	r7, sp, #0
  return;
 800a058:	bf00      	nop
}
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a062:	b480      	push	{r7}
 800a064:	af00      	add	r7, sp, #0
  return;
 800a066:	bf00      	nop
}
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0
  return;
 800a074:	bf00      	nop
}
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a07e:	b480      	push	{r7}
 800a080:	af00      	add	r7, sp, #0
  return;
 800a082:	bf00      	nop
}
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0
  return;
 800a090:	bf00      	nop
}
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a09a:	b480      	push	{r7}
 800a09c:	af00      	add	r7, sp, #0
  return;
 800a09e:	bf00      	nop
}
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
  return;
 800a0ac:	bf00      	nop
}
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	af00      	add	r7, sp, #0
  return;
 800a0ba:	bf00      	nop
}
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	af00      	add	r7, sp, #0
  return;
 800a0c8:	bf00      	nop
}
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	af00      	add	r7, sp, #0
  return;
 800a0d6:	bf00      	nop
}
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a0e4:	4b04      	ldr	r3, [pc, #16]	; (800a0f8 <SVCCTL_Init+0x18>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a0ea:	4b04      	ldr	r3, [pc, #16]	; (800a0fc <SVCCTL_Init+0x1c>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a0f0:	f000 f806 	bl	800a100 <SVCCTL_SvcInit>

  return;
 800a0f4:	bf00      	nop
}
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	20000148 	.word	0x20000148
 800a0fc:	20000168 	.word	0x20000168

0800a100 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  BAS_Init();
 800a104:	f7ff ff7c 	bl	800a000 <BAS_Init>

  BLS_Init();
 800a108:	f7ff ff81 	bl	800a00e <BLS_Init>

  CRS_STM_Init();
 800a10c:	f7ff ff86 	bl	800a01c <CRS_STM_Init>

  DIS_Init();
 800a110:	f7ff ff8b 	bl	800a02a <DIS_Init>

  EDS_STM_Init();
 800a114:	f7ff ff90 	bl	800a038 <EDS_STM_Init>

  HIDS_Init();
 800a118:	f7ff ff95 	bl	800a046 <HIDS_Init>

  HRS_Init();
 800a11c:	f7ff ff9a 	bl	800a054 <HRS_Init>

  HTS_Init();
 800a120:	f7ff ff9f 	bl	800a062 <HTS_Init>

  IAS_Init();
 800a124:	f7ff ffa4 	bl	800a070 <IAS_Init>

  LLS_Init();
 800a128:	f7ff ffa9 	bl	800a07e <LLS_Init>

  TPS_Init();
 800a12c:	f7ff ffae 	bl	800a08c <TPS_Init>

  MOTENV_STM_Init();
 800a130:	f7ff ffb3 	bl	800a09a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a134:	f7ff fec4 	bl	8009ec0 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a138:	f7ff ffb6 	bl	800a0a8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a13c:	f7ff ffbb 	bl	800a0b6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a140:	f7ff ffc7 	bl	800a0d2 <BVOPUS_STM_Init>

  MESH_Init();
 800a144:	f7ff ffbe 	bl	800a0c4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a148:	f003 f82c 	bl	800d1a4 <SVCCTL_InitCustomSvc>
  
  return;
 800a14c:	bf00      	nop
}
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a158:	4b09      	ldr	r3, [pc, #36]	; (800a180 <SVCCTL_RegisterSvcHandler+0x30>)
 800a15a:	7f1b      	ldrb	r3, [r3, #28]
 800a15c:	4619      	mov	r1, r3
 800a15e:	4a08      	ldr	r2, [pc, #32]	; (800a180 <SVCCTL_RegisterSvcHandler+0x30>)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a166:	4b06      	ldr	r3, [pc, #24]	; (800a180 <SVCCTL_RegisterSvcHandler+0x30>)
 800a168:	7f1b      	ldrb	r3, [r3, #28]
 800a16a:	3301      	adds	r3, #1
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	4b04      	ldr	r3, [pc, #16]	; (800a180 <SVCCTL_RegisterSvcHandler+0x30>)
 800a170:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a172:	bf00      	nop
}
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000148 	.word	0x20000148

0800a184 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3301      	adds	r3, #1
 800a190:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a192:	2300      	movs	r3, #0
 800a194:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2bff      	cmp	r3, #255	; 0xff
 800a19c:	d125      	bne.n	800a1ea <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	3302      	adds	r3, #2
 800a1a2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1b2:	d118      	bne.n	800a1e6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	757b      	strb	r3, [r7, #21]
 800a1b8:	e00d      	b.n	800a1d6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a1ba:	7d7b      	ldrb	r3, [r7, #21]
 800a1bc:	4a1a      	ldr	r2, [pc, #104]	; (800a228 <SVCCTL_UserEvtRx+0xa4>)
 800a1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d108      	bne.n	800a1e2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a1d0:	7d7b      	ldrb	r3, [r7, #21]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	757b      	strb	r3, [r7, #21]
 800a1d6:	4b14      	ldr	r3, [pc, #80]	; (800a228 <SVCCTL_UserEvtRx+0xa4>)
 800a1d8:	7f1b      	ldrb	r3, [r3, #28]
 800a1da:	7d7a      	ldrb	r2, [r7, #21]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d3ec      	bcc.n	800a1ba <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a1e0:	e002      	b.n	800a1e8 <SVCCTL_UserEvtRx+0x64>
              break;
 800a1e2:	bf00      	nop
          break;
 800a1e4:	e000      	b.n	800a1e8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a1e6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a1e8:	e000      	b.n	800a1ec <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a1ea:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d00f      	beq.n	800a212 <SVCCTL_UserEvtRx+0x8e>
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	dc10      	bgt.n	800a218 <SVCCTL_UserEvtRx+0x94>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <SVCCTL_UserEvtRx+0x7c>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d006      	beq.n	800a20c <SVCCTL_UserEvtRx+0x88>
 800a1fe:	e00b      	b.n	800a218 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f001 fc31 	bl	800ba68 <SVCCTL_App_Notification>
 800a206:	4603      	mov	r3, r0
 800a208:	75bb      	strb	r3, [r7, #22]
      break;
 800a20a:	e008      	b.n	800a21e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a20c:	2301      	movs	r3, #1
 800a20e:	75bb      	strb	r3, [r7, #22]
      break;
 800a210:	e005      	b.n	800a21e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a212:	2300      	movs	r3, #0
 800a214:	75bb      	strb	r3, [r7, #22]
      break;
 800a216:	e002      	b.n	800a21e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a218:	2301      	movs	r3, #1
 800a21a:	75bb      	strb	r3, [r7, #22]
      break;
 800a21c:	bf00      	nop
  }

  return (return_status);
 800a21e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000148 	.word	0x20000148

0800a22c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a234:	f107 030c 	add.w	r3, r7, #12
 800a238:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	2125      	movs	r1, #37	; 0x25
 800a244:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a248:	f000 fae2 	bl	800a810 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	330b      	adds	r3, #11
 800a250:	78db      	ldrb	r3, [r3, #3]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3720      	adds	r7, #32
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b088      	sub	sp, #32
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a262:	f107 030c 	add.w	r3, r7, #12
 800a266:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	210f      	movs	r1, #15
 800a272:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a276:	f000 facb 	bl	800a810 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	330b      	adds	r3, #11
 800a27e:	78db      	ldrb	r3, [r3, #3]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a290:	f107 030c 	add.w	r3, r7, #12
 800a294:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	210e      	movs	r1, #14
 800a29c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a2a0:	f000 fab6 	bl	800a810 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	330b      	adds	r3, #11
 800a2a8:	78db      	ldrb	r3, [r3, #3]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3720      	adds	r7, #32
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b08b      	sub	sp, #44	; 0x2c
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a2dc:	4b4a      	ldr	r3, [pc, #296]	; (800a408 <SHCI_GetWirelessFwInfo+0x154>)
 800a2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a2e4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a2ee:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a44      	ldr	r2, [pc, #272]	; (800a40c <SHCI_GetWirelessFwInfo+0x158>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10f      	bne.n	800a320 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	617b      	str	r3, [r7, #20]
 800a31e:	e01a      	b.n	800a356 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a328:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a32c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	0e1b      	lsrs	r3, r3, #24
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	0c1b      	lsrs	r3, r3, #16
 800a364:	b2da      	uxtb	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	0a1b      	lsrs	r3, r3, #8
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	091b      	lsrs	r3, r3, #4
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	f003 030f 	and.w	r3, r3, #15
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f003 030f 	and.w	r3, r3, #15
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	0e1b      	lsrs	r3, r3, #24
 800a396:	b2da      	uxtb	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	0c1b      	lsrs	r3, r3, #16
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	0a1b      	lsrs	r3, r3, #8
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	0e1b      	lsrs	r3, r3, #24
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	0c1b      	lsrs	r3, r3, #16
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	0e1b      	lsrs	r3, r3, #24
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	0c1b      	lsrs	r3, r3, #16
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	372c      	adds	r7, #44	; 0x2c
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	58004000 	.word	0x58004000
 800a40c:	a94656b9 	.word	0xa94656b9

0800a410 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	4a08      	ldr	r2, [pc, #32]	; (800a440 <hci_init+0x30>)
 800a420:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a422:	4a08      	ldr	r2, [pc, #32]	; (800a444 <hci_init+0x34>)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a428:	4806      	ldr	r0, [pc, #24]	; (800a444 <hci_init+0x34>)
 800a42a:	f000 f973 	bl	800a714 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4618      	mov	r0, r3
 800a434:	f000 f8d4 	bl	800a5e0 <TlInit>

  return;
 800a438:	bf00      	nop
}
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20000618 	.word	0x20000618
 800a444:	200005f0 	.word	0x200005f0

0800a448 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a44e:	4822      	ldr	r0, [pc, #136]	; (800a4d8 <hci_user_evt_proc+0x90>)
 800a450:	f000 fdf0 	bl	800b034 <LST_is_empty>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d12b      	bne.n	800a4b2 <hci_user_evt_proc+0x6a>
 800a45a:	4b20      	ldr	r3, [pc, #128]	; (800a4dc <hci_user_evt_proc+0x94>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d027      	beq.n	800a4b2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a462:	f107 030c 	add.w	r3, r7, #12
 800a466:	4619      	mov	r1, r3
 800a468:	481b      	ldr	r0, [pc, #108]	; (800a4d8 <hci_user_evt_proc+0x90>)
 800a46a:	f000 fe72 	bl	800b152 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a46e:	4b1c      	ldr	r3, [pc, #112]	; (800a4e0 <hci_user_evt_proc+0x98>)
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00c      	beq.n	800a490 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a47a:	2301      	movs	r3, #1
 800a47c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a47e:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <hci_user_evt_proc+0x98>)
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	1d3a      	adds	r2, r7, #4
 800a484:	4610      	mov	r0, r2
 800a486:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a488:	793a      	ldrb	r2, [r7, #4]
 800a48a:	4b14      	ldr	r3, [pc, #80]	; (800a4dc <hci_user_evt_proc+0x94>)
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e002      	b.n	800a496 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a490:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <hci_user_evt_proc+0x94>)
 800a492:	2201      	movs	r2, #1
 800a494:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a496:	4b11      	ldr	r3, [pc, #68]	; (800a4dc <hci_user_evt_proc+0x94>)
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d004      	beq.n	800a4a8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fc03 	bl	800acac <TL_MM_EvtDone>
 800a4a6:	e004      	b.n	800a4b2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	480a      	ldr	r0, [pc, #40]	; (800a4d8 <hci_user_evt_proc+0x90>)
 800a4ae:	f000 fde3 	bl	800b078 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a4b2:	4809      	ldr	r0, [pc, #36]	; (800a4d8 <hci_user_evt_proc+0x90>)
 800a4b4:	f000 fdbe 	bl	800b034 <LST_is_empty>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d107      	bne.n	800a4ce <hci_user_evt_proc+0x86>
 800a4be:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <hci_user_evt_proc+0x94>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a4c6:	4804      	ldr	r0, [pc, #16]	; (800a4d8 <hci_user_evt_proc+0x90>)
 800a4c8:	f001 ff19 	bl	800c2fe <hci_notify_asynch_evt>
  }


  return;
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
}
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20000170 	.word	0x20000170
 800a4dc:	2000017c 	.word	0x2000017c
 800a4e0:	200005f0 	.word	0x200005f0

0800a4e4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f000 f8cb 	bl	800a68c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	885b      	ldrh	r3, [r3, #2]
 800a4fe:	b21b      	sxth	r3, r3
 800a500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a504:	b21a      	sxth	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	029b      	lsls	r3, r3, #10
 800a50c:	b21b      	sxth	r3, r3
 800a50e:	4313      	orrs	r3, r2
 800a510:	b21b      	sxth	r3, r3
 800a512:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	b2d9      	uxtb	r1, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689a      	ldr	r2, [r3, #8]
 800a51e:	8bbb      	ldrh	r3, [r7, #28]
 800a520:	4618      	mov	r0, r3
 800a522:	f000 f88d 	bl	800a640 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a526:	e04e      	b.n	800a5c6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a528:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a52c:	f001 fefe 	bl	800c32c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a530:	e043      	b.n	800a5ba <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a532:	f107 030c 	add.w	r3, r7, #12
 800a536:	4619      	mov	r1, r3
 800a538:	4828      	ldr	r0, [pc, #160]	; (800a5dc <hci_send_req+0xf8>)
 800a53a:	f000 fe0a 	bl	800b152 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	7a5b      	ldrb	r3, [r3, #9]
 800a542:	2b0f      	cmp	r3, #15
 800a544:	d114      	bne.n	800a570 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	330b      	adds	r3, #11
 800a54a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	885b      	ldrh	r3, [r3, #2]
 800a550:	b29b      	uxth	r3, r3
 800a552:	8bba      	ldrh	r2, [r7, #28]
 800a554:	429a      	cmp	r2, r3
 800a556:	d104      	bne.n	800a562 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	785b      	ldrb	r3, [r3, #1]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d027      	beq.n	800a5ba <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a56a:	2301      	movs	r3, #1
 800a56c:	77fb      	strb	r3, [r7, #31]
 800a56e:	e024      	b.n	800a5ba <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	330b      	adds	r3, #11
 800a574:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	8bba      	ldrh	r2, [r7, #28]
 800a580:	429a      	cmp	r2, r3
 800a582:	d114      	bne.n	800a5ae <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	7a9b      	ldrb	r3, [r3, #10]
 800a588:	3b03      	subs	r3, #3
 800a58a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	695a      	ldr	r2, [r3, #20]
 800a590:	7dfb      	ldrb	r3, [r7, #23]
 800a592:	429a      	cmp	r2, r3
 800a594:	bfa8      	it	ge
 800a596:	461a      	movge	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6918      	ldr	r0, [r3, #16]
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	1cd9      	adds	r1, r3, #3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f003 fcc9 	bl	800df40 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a5ba:	4808      	ldr	r0, [pc, #32]	; (800a5dc <hci_send_req+0xf8>)
 800a5bc:	f000 fd3a 	bl	800b034 <LST_is_empty>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0b5      	beq.n	800a532 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a5c6:	7ffb      	ldrb	r3, [r7, #31]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d0ad      	beq.n	800a528 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f000 f85d 	bl	800a68c <NotifyCmdStatus>

  return 0;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20000610 	.word	0x20000610

0800a5e0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a5e8:	480f      	ldr	r0, [pc, #60]	; (800a628 <TlInit+0x48>)
 800a5ea:	f000 fd13 	bl	800b014 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a5ee:	4a0f      	ldr	r2, [pc, #60]	; (800a62c <TlInit+0x4c>)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a5f4:	480e      	ldr	r0, [pc, #56]	; (800a630 <TlInit+0x50>)
 800a5f6:	f000 fd0d 	bl	800b014 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <TlInit+0x54>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a600:	4b0d      	ldr	r3, [pc, #52]	; (800a638 <TlInit+0x58>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00a      	beq.n	800a61e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a60c:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <TlInit+0x5c>)
 800a60e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a610:	4b09      	ldr	r3, [pc, #36]	; (800a638 <TlInit+0x58>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f107 0208 	add.w	r2, r7, #8
 800a618:	4610      	mov	r0, r2
 800a61a:	4798      	blx	r3
  }

  return;
 800a61c:	bf00      	nop
 800a61e:	bf00      	nop
}
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20000610 	.word	0x20000610
 800a62c:	20000178 	.word	0x20000178
 800a630:	20000170 	.word	0x20000170
 800a634:	2000017c 	.word	0x2000017c
 800a638:	200005f0 	.word	0x200005f0
 800a63c:	0800a6cd 	.word	0x0800a6cd

0800a640 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	603a      	str	r2, [r7, #0]
 800a64a:	80fb      	strh	r3, [r7, #6]
 800a64c:	460b      	mov	r3, r1
 800a64e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a650:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <SendCmd+0x44>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	88fa      	ldrh	r2, [r7, #6]
 800a656:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a65a:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <SendCmd+0x44>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	797a      	ldrb	r2, [r7, #5]
 800a660:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <SendCmd+0x44>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	330c      	adds	r3, #12
 800a668:	797a      	ldrb	r2, [r7, #5]
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 fc67 	bl	800df40 <memcpy>

  hciContext.io.Send(0,0);
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <SendCmd+0x48>)
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	2100      	movs	r1, #0
 800a678:	2000      	movs	r0, #0
 800a67a:	4798      	blx	r3

  return;
 800a67c:	bf00      	nop
}
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20000178 	.word	0x20000178
 800a688:	200005f0 	.word	0x200005f0

0800a68c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d108      	bne.n	800a6ae <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a69c:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <NotifyCmdStatus+0x3c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00d      	beq.n	800a6c0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a6a4:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <NotifyCmdStatus+0x3c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a6ac:	e008      	b.n	800a6c0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a6ae:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <NotifyCmdStatus+0x3c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d004      	beq.n	800a6c0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a6b6:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <NotifyCmdStatus+0x3c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2001      	movs	r0, #1
 800a6bc:	4798      	blx	r3
  return;
 800a6be:	bf00      	nop
 800a6c0:	bf00      	nop
}
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	20000618 	.word	0x20000618

0800a6cc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7a5b      	ldrb	r3, [r3, #9]
 800a6d8:	2b0f      	cmp	r3, #15
 800a6da:	d003      	beq.n	800a6e4 <TlEvtReceived+0x18>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7a5b      	ldrb	r3, [r3, #9]
 800a6e0:	2b0e      	cmp	r3, #14
 800a6e2:	d107      	bne.n	800a6f4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4809      	ldr	r0, [pc, #36]	; (800a70c <TlEvtReceived+0x40>)
 800a6e8:	f000 fcec 	bl	800b0c4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f001 fe12 	bl	800c316 <hci_cmd_resp_release>
 800a6f2:	e006      	b.n	800a702 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	4806      	ldr	r0, [pc, #24]	; (800a710 <TlEvtReceived+0x44>)
 800a6f8:	f000 fce4 	bl	800b0c4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a6fc:	4804      	ldr	r0, [pc, #16]	; (800a710 <TlEvtReceived+0x44>)
 800a6fe:	f001 fdfe 	bl	800c2fe <hci_notify_asynch_evt>
  }

  return;
 800a702:	bf00      	nop
}
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20000610 	.word	0x20000610
 800a710:	20000170 	.word	0x20000170

0800a714 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a05      	ldr	r2, [pc, #20]	; (800a734 <hci_register_io_bus+0x20>)
 800a720:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a04      	ldr	r2, [pc, #16]	; (800a738 <hci_register_io_bus+0x24>)
 800a726:	611a      	str	r2, [r3, #16]

  return;
 800a728:	bf00      	nop
}
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	0800aa25 	.word	0x0800aa25
 800a738:	0800aa8d 	.word	0x0800aa8d

0800a73c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	4a08      	ldr	r2, [pc, #32]	; (800a76c <shci_init+0x30>)
 800a74c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a74e:	4a08      	ldr	r2, [pc, #32]	; (800a770 <shci_init+0x34>)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a754:	4806      	ldr	r0, [pc, #24]	; (800a770 <shci_init+0x34>)
 800a756:	f000 f911 	bl	800a97c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 f894 	bl	800a88c <TlInit>

  return;
 800a764:	bf00      	nop
}
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	2000063c 	.word	0x2000063c
 800a770:	2000061c 	.word	0x2000061c

0800a774 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a77a:	4822      	ldr	r0, [pc, #136]	; (800a804 <shci_user_evt_proc+0x90>)
 800a77c:	f000 fc5a 	bl	800b034 <LST_is_empty>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d12b      	bne.n	800a7de <shci_user_evt_proc+0x6a>
 800a786:	4b20      	ldr	r3, [pc, #128]	; (800a808 <shci_user_evt_proc+0x94>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d027      	beq.n	800a7de <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a78e:	f107 030c 	add.w	r3, r7, #12
 800a792:	4619      	mov	r1, r3
 800a794:	481b      	ldr	r0, [pc, #108]	; (800a804 <shci_user_evt_proc+0x90>)
 800a796:	f000 fcdc 	bl	800b152 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a79a:	4b1c      	ldr	r3, [pc, #112]	; (800a80c <shci_user_evt_proc+0x98>)
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00c      	beq.n	800a7bc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a7aa:	4b18      	ldr	r3, [pc, #96]	; (800a80c <shci_user_evt_proc+0x98>)
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	1d3a      	adds	r2, r7, #4
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a7b4:	793a      	ldrb	r2, [r7, #4]
 800a7b6:	4b14      	ldr	r3, [pc, #80]	; (800a808 <shci_user_evt_proc+0x94>)
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	e002      	b.n	800a7c2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a7bc:	4b12      	ldr	r3, [pc, #72]	; (800a808 <shci_user_evt_proc+0x94>)
 800a7be:	2201      	movs	r2, #1
 800a7c0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a7c2:	4b11      	ldr	r3, [pc, #68]	; (800a808 <shci_user_evt_proc+0x94>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d004      	beq.n	800a7d4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fa6d 	bl	800acac <TL_MM_EvtDone>
 800a7d2:	e004      	b.n	800a7de <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	480a      	ldr	r0, [pc, #40]	; (800a804 <shci_user_evt_proc+0x90>)
 800a7da:	f000 fc4d 	bl	800b078 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a7de:	4809      	ldr	r0, [pc, #36]	; (800a804 <shci_user_evt_proc+0x90>)
 800a7e0:	f000 fc28 	bl	800b034 <LST_is_empty>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d107      	bne.n	800a7fa <shci_user_evt_proc+0x86>
 800a7ea:	4b07      	ldr	r3, [pc, #28]	; (800a808 <shci_user_evt_proc+0x94>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a7f2:	4804      	ldr	r0, [pc, #16]	; (800a804 <shci_user_evt_proc+0x90>)
 800a7f4:	f7f6 fade 	bl	8000db4 <shci_notify_asynch_evt>
  }


  return;
 800a7f8:	bf00      	nop
 800a7fa:	bf00      	nop
}
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	20000194 	.word	0x20000194
 800a808:	200001a4 	.word	0x200001a4
 800a80c:	2000061c 	.word	0x2000061c

0800a810 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60ba      	str	r2, [r7, #8]
 800a818:	607b      	str	r3, [r7, #4]
 800a81a:	4603      	mov	r3, r0
 800a81c:	81fb      	strh	r3, [r7, #14]
 800a81e:	460b      	mov	r3, r1
 800a820:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a822:	2000      	movs	r0, #0
 800a824:	f000 f864 	bl	800a8f0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a828:	4b16      	ldr	r3, [pc, #88]	; (800a884 <shci_send+0x74>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	89fa      	ldrh	r2, [r7, #14]
 800a82e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <shci_send+0x74>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	7b7a      	ldrb	r2, [r7, #13]
 800a838:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a83a:	4b12      	ldr	r3, [pc, #72]	; (800a884 <shci_send+0x74>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	330c      	adds	r3, #12
 800a840:	7b7a      	ldrb	r2, [r7, #13]
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	4618      	mov	r0, r3
 800a846:	f003 fb7b 	bl	800df40 <memcpy>

  shciContext.io.Send(0,0);
 800a84a:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <shci_send+0x78>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2100      	movs	r1, #0
 800a850:	2000      	movs	r0, #0
 800a852:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a854:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a858:	f7f6 fac3 	bl	8000de2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f103 0008 	add.w	r0, r3, #8
 800a862:	4b08      	ldr	r3, [pc, #32]	; (800a884 <shci_send+0x74>)
 800a864:	6819      	ldr	r1, [r3, #0]
 800a866:	4b07      	ldr	r3, [pc, #28]	; (800a884 <shci_send+0x74>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	789b      	ldrb	r3, [r3, #2]
 800a86c:	3303      	adds	r3, #3
 800a86e:	461a      	mov	r2, r3
 800a870:	f003 fb66 	bl	800df40 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a874:	2001      	movs	r0, #1
 800a876:	f000 f83b 	bl	800a8f0 <Cmd_SetStatus>

  return;
 800a87a:	bf00      	nop
}
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	200001a0 	.word	0x200001a0
 800a888:	2000061c 	.word	0x2000061c

0800a88c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a894:	4a10      	ldr	r2, [pc, #64]	; (800a8d8 <TlInit+0x4c>)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a89a:	4810      	ldr	r0, [pc, #64]	; (800a8dc <TlInit+0x50>)
 800a89c:	f000 fbba 	bl	800b014 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	f000 f825 	bl	800a8f0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a8a6:	4b0e      	ldr	r3, [pc, #56]	; (800a8e0 <TlInit+0x54>)
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <TlInit+0x58>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a8b8:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <TlInit+0x5c>)
 800a8ba:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <TlInit+0x60>)
 800a8be:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a8c0:	4b08      	ldr	r3, [pc, #32]	; (800a8e4 <TlInit+0x58>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f107 020c 	add.w	r2, r7, #12
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4798      	blx	r3
  }

  return;
 800a8cc:	bf00      	nop
 800a8ce:	bf00      	nop
}
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	200001a0 	.word	0x200001a0
 800a8dc:	20000194 	.word	0x20000194
 800a8e0:	200001a4 	.word	0x200001a4
 800a8e4:	2000061c 	.word	0x2000061c
 800a8e8:	0800a941 	.word	0x0800a941
 800a8ec:	0800a959 	.word	0x0800a959

0800a8f0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10b      	bne.n	800a918 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a900:	4b0d      	ldr	r3, [pc, #52]	; (800a938 <Cmd_SetStatus+0x48>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a908:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <Cmd_SetStatus+0x48>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2000      	movs	r0, #0
 800a90e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a910:	4b0a      	ldr	r3, [pc, #40]	; (800a93c <Cmd_SetStatus+0x4c>)
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a916:	e00b      	b.n	800a930 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a918:	4b08      	ldr	r3, [pc, #32]	; (800a93c <Cmd_SetStatus+0x4c>)
 800a91a:	2201      	movs	r2, #1
 800a91c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a91e:	4b06      	ldr	r3, [pc, #24]	; (800a938 <Cmd_SetStatus+0x48>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d004      	beq.n	800a930 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a926:	4b04      	ldr	r3, [pc, #16]	; (800a938 <Cmd_SetStatus+0x48>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2001      	movs	r0, #1
 800a92c:	4798      	blx	r3
  return;
 800a92e:	bf00      	nop
 800a930:	bf00      	nop
}
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	2000063c 	.word	0x2000063c
 800a93c:	2000019c 	.word	0x2000019c

0800a940 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a948:	2000      	movs	r0, #0
 800a94a:	f7f6 fa3f 	bl	8000dcc <shci_cmd_resp_release>

  return;
 800a94e:	bf00      	nop
}
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
	...

0800a958 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <TlUserEvtReceived+0x20>)
 800a964:	f000 fbae 	bl	800b0c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a968:	4803      	ldr	r0, [pc, #12]	; (800a978 <TlUserEvtReceived+0x20>)
 800a96a:	f7f6 fa23 	bl	8000db4 <shci_notify_asynch_evt>

  return;
 800a96e:	bf00      	nop
}
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000194 	.word	0x20000194

0800a97c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a05      	ldr	r2, [pc, #20]	; (800a99c <shci_register_io_bus+0x20>)
 800a988:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a04      	ldr	r2, [pc, #16]	; (800a9a0 <shci_register_io_bus+0x24>)
 800a98e:	611a      	str	r2, [r3, #16]

  return;
 800a990:	bf00      	nop
}
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	0800ab39 	.word	0x0800ab39
 800a9a0:	0800ab8d 	.word	0x0800ab8d

0800a9a4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a9a8:	f002 ff4e 	bl	800d848 <HW_IPCC_Enable>

  return;
 800a9ac:	bf00      	nop
}
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <TL_Init>:


void TL_Init( void )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a9b4:	4b10      	ldr	r3, [pc, #64]	; (800a9f8 <TL_Init+0x48>)
 800a9b6:	4a11      	ldr	r2, [pc, #68]	; (800a9fc <TL_Init+0x4c>)
 800a9b8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a9ba:	4b0f      	ldr	r3, [pc, #60]	; (800a9f8 <TL_Init+0x48>)
 800a9bc:	4a10      	ldr	r2, [pc, #64]	; (800aa00 <TL_Init+0x50>)
 800a9be:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a9c0:	4b0d      	ldr	r3, [pc, #52]	; (800a9f8 <TL_Init+0x48>)
 800a9c2:	4a10      	ldr	r2, [pc, #64]	; (800aa04 <TL_Init+0x54>)
 800a9c4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a9c6:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <TL_Init+0x48>)
 800a9c8:	4a0f      	ldr	r2, [pc, #60]	; (800aa08 <TL_Init+0x58>)
 800a9ca:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <TL_Init+0x48>)
 800a9ce:	4a0f      	ldr	r2, [pc, #60]	; (800aa0c <TL_Init+0x5c>)
 800a9d0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a9d2:	4b09      	ldr	r3, [pc, #36]	; (800a9f8 <TL_Init+0x48>)
 800a9d4:	4a0e      	ldr	r2, [pc, #56]	; (800aa10 <TL_Init+0x60>)
 800a9d6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a9d8:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <TL_Init+0x48>)
 800a9da:	4a0e      	ldr	r2, [pc, #56]	; (800aa14 <TL_Init+0x64>)
 800a9dc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a9de:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <TL_Init+0x48>)
 800a9e0:	4a0d      	ldr	r2, [pc, #52]	; (800aa18 <TL_Init+0x68>)
 800a9e2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a9e4:	4b04      	ldr	r3, [pc, #16]	; (800a9f8 <TL_Init+0x48>)
 800a9e6:	4a0d      	ldr	r2, [pc, #52]	; (800aa1c <TL_Init+0x6c>)
 800a9e8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a9ea:	4b03      	ldr	r3, [pc, #12]	; (800a9f8 <TL_Init+0x48>)
 800a9ec:	4a0c      	ldr	r2, [pc, #48]	; (800aa20 <TL_Init+0x70>)
 800a9ee:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a9f0:	f002 ff3e 	bl	800d870 <HW_IPCC_Init>

  return;
 800a9f4:	bf00      	nop
}
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20030000 	.word	0x20030000
 800a9fc:	20030028 	.word	0x20030028
 800aa00:	20030048 	.word	0x20030048
 800aa04:	20030058 	.word	0x20030058
 800aa08:	20030064 	.word	0x20030064
 800aa0c:	2003006c 	.word	0x2003006c
 800aa10:	20030074 	.word	0x20030074
 800aa14:	2003007c 	.word	0x2003007c
 800aa18:	20030098 	.word	0x20030098
 800aa1c:	2003009c 	.word	0x2003009c
 800aa20:	200300a8 	.word	0x200300a8

0800aa24 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800aa30:	4811      	ldr	r0, [pc, #68]	; (800aa78 <TL_BLE_Init+0x54>)
 800aa32:	f000 faef 	bl	800b014 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800aa36:	4b11      	ldr	r3, [pc, #68]	; (800aa7c <TL_BLE_Init+0x58>)
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	4a0c      	ldr	r2, [pc, #48]	; (800aa80 <TL_BLE_Init+0x5c>)
 800aa50:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <TL_BLE_Init+0x54>)
 800aa56:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800aa58:	f002 ff20 	bl	800d89c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a08      	ldr	r2, [pc, #32]	; (800aa84 <TL_BLE_Init+0x60>)
 800aa62:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4a07      	ldr	r2, [pc, #28]	; (800aa88 <TL_BLE_Init+0x64>)
 800aa6a:	6013      	str	r3, [r2, #0]

  return 0;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	200300c4 	.word	0x200300c4
 800aa7c:	20030000 	.word	0x20030000
 800aa80:	20030a48 	.word	0x20030a48
 800aa84:	20000648 	.word	0x20000648
 800aa88:	2000064c 	.word	0x2000064c

0800aa8c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800aa98:	4b09      	ldr	r3, [pc, #36]	; (800aac0 <TL_BLE_SendCmd+0x34>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <TL_BLE_SendCmd+0x34>)
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	2001      	movs	r0, #1
 800aaac:	f000 f96c 	bl	800ad88 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800aab0:	f002 fefe 	bl	800d8b0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20030000 	.word	0x20030000

0800aac4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800aaca:	e01c      	b.n	800ab06 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800aacc:	1d3b      	adds	r3, r7, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4812      	ldr	r0, [pc, #72]	; (800ab1c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800aad2:	f000 fb3e 	bl	800b152 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7a5b      	ldrb	r3, [r3, #9]
 800aada:	2b0f      	cmp	r3, #15
 800aadc:	d003      	beq.n	800aae6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	7a5b      	ldrb	r3, [r3, #9]
 800aae2:	2b0e      	cmp	r3, #14
 800aae4:	d105      	bne.n	800aaf2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4619      	mov	r1, r3
 800aaea:	2002      	movs	r0, #2
 800aaec:	f000 f94c 	bl	800ad88 <OutputDbgTrace>
 800aaf0:	e004      	b.n	800aafc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	2003      	movs	r0, #3
 800aaf8:	f000 f946 	bl	800ad88 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800aafc:	4b08      	ldr	r3, [pc, #32]	; (800ab20 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	4610      	mov	r0, r2
 800ab04:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ab06:	4805      	ldr	r0, [pc, #20]	; (800ab1c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ab08:	f000 fa94 	bl	800b034 <LST_is_empty>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0dc      	beq.n	800aacc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ab12:	bf00      	nop
}
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	200300c4 	.word	0x200300c4
 800ab20:	20000648 	.word	0x20000648

0800ab24 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4798      	blx	r3

  return;
 800ab2e:	bf00      	nop
}
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	2000064c 	.word	0x2000064c

0800ab38 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ab44:	480d      	ldr	r0, [pc, #52]	; (800ab7c <TL_SYS_Init+0x44>)
 800ab46:	f000 fa65 	bl	800b014 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <TL_SYS_Init+0x48>)
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	4a08      	ldr	r2, [pc, #32]	; (800ab7c <TL_SYS_Init+0x44>)
 800ab5c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ab5e:	f002 fec9 	bl	800d8f4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a07      	ldr	r2, [pc, #28]	; (800ab84 <TL_SYS_Init+0x4c>)
 800ab68:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4a06      	ldr	r2, [pc, #24]	; (800ab88 <TL_SYS_Init+0x50>)
 800ab70:	6013      	str	r3, [r2, #0]

  return 0;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	200300cc 	.word	0x200300cc
 800ab80:	20030000 	.word	0x20030000
 800ab84:	20000650 	.word	0x20000650
 800ab88:	20000654 	.word	0x20000654

0800ab8c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ab98:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <TL_SYS_SendCmd+0x34>)
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2210      	movs	r2, #16
 800aba0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800aba2:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <TL_SYS_SendCmd+0x34>)
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4619      	mov	r1, r3
 800abaa:	2004      	movs	r0, #4
 800abac:	f000 f8ec 	bl	800ad88 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800abb0:	f002 feaa 	bl	800d908 <HW_IPCC_SYS_SendCmd>

  return 0;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20030000 	.word	0x20030000

0800abc4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4619      	mov	r1, r3
 800abd0:	2005      	movs	r0, #5
 800abd2:	f000 f8d9 	bl	800ad88 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800abd6:	4b05      	ldr	r3, [pc, #20]	; (800abec <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a03      	ldr	r2, [pc, #12]	; (800abe8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800abdc:	68d2      	ldr	r2, [r2, #12]
 800abde:	6812      	ldr	r2, [r2, #0]
 800abe0:	4610      	mov	r0, r2
 800abe2:	4798      	blx	r3

  return;
 800abe4:	bf00      	nop
}
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20030000 	.word	0x20030000
 800abec:	20000650 	.word	0x20000650

0800abf0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800abf6:	e00e      	b.n	800ac16 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800abf8:	1d3b      	adds	r3, r7, #4
 800abfa:	4619      	mov	r1, r3
 800abfc:	480b      	ldr	r0, [pc, #44]	; (800ac2c <HW_IPCC_SYS_EvtNot+0x3c>)
 800abfe:	f000 faa8 	bl	800b152 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4619      	mov	r1, r3
 800ac06:	2006      	movs	r0, #6
 800ac08:	f000 f8be 	bl	800ad88 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ac0c:	4b08      	ldr	r3, [pc, #32]	; (800ac30 <HW_IPCC_SYS_EvtNot+0x40>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	4610      	mov	r0, r2
 800ac14:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ac16:	4805      	ldr	r0, [pc, #20]	; (800ac2c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ac18:	f000 fa0c 	bl	800b034 <LST_is_empty>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d0ea      	beq.n	800abf8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ac22:	bf00      	nop
}
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200300cc 	.word	0x200300cc
 800ac30:	20000654 	.word	0x20000654

0800ac34 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ac3c:	4817      	ldr	r0, [pc, #92]	; (800ac9c <TL_MM_Init+0x68>)
 800ac3e:	f000 f9e9 	bl	800b014 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ac42:	4817      	ldr	r0, [pc, #92]	; (800aca0 <TL_MM_Init+0x6c>)
 800ac44:	f000 f9e6 	bl	800b014 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ac48:	4b16      	ldr	r3, [pc, #88]	; (800aca4 <TL_MM_Init+0x70>)
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	4a16      	ldr	r2, [pc, #88]	; (800aca8 <TL_MM_Init+0x74>)
 800ac4e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ac50:	4b15      	ldr	r3, [pc, #84]	; (800aca8 <TL_MM_Init+0x74>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	6892      	ldr	r2, [r2, #8]
 800ac58:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ac5a:	4b13      	ldr	r3, [pc, #76]	; (800aca8 <TL_MM_Init+0x74>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	68d2      	ldr	r2, [r2, #12]
 800ac62:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ac64:	4b10      	ldr	r3, [pc, #64]	; (800aca8 <TL_MM_Init+0x74>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a0c      	ldr	r2, [pc, #48]	; (800ac9c <TL_MM_Init+0x68>)
 800ac6a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ac6c:	4b0e      	ldr	r3, [pc, #56]	; (800aca8 <TL_MM_Init+0x74>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6812      	ldr	r2, [r2, #0]
 800ac74:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ac76:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <TL_MM_Init+0x74>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6852      	ldr	r2, [r2, #4]
 800ac7e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ac80:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <TL_MM_Init+0x74>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	6912      	ldr	r2, [r2, #16]
 800ac88:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ac8a:	4b07      	ldr	r3, [pc, #28]	; (800aca8 <TL_MM_Init+0x74>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6952      	ldr	r2, [r2, #20]
 800ac92:	619a      	str	r2, [r3, #24]

  return;
 800ac94:	bf00      	nop
}
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	200300b4 	.word	0x200300b4
 800aca0:	20000640 	.word	0x20000640
 800aca4:	20030000 	.word	0x20030000
 800aca8:	20000658 	.word	0x20000658

0800acac <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4807      	ldr	r0, [pc, #28]	; (800acd4 <TL_MM_EvtDone+0x28>)
 800acb8:	f000 fa04 	bl	800b0c4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	2000      	movs	r0, #0
 800acc0:	f000 f862 	bl	800ad88 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800acc4:	4804      	ldr	r0, [pc, #16]	; (800acd8 <TL_MM_EvtDone+0x2c>)
 800acc6:	f002 fe45 	bl	800d954 <HW_IPCC_MM_SendFreeBuf>

  return;
 800acca:	bf00      	nop
}
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000640 	.word	0x20000640
 800acd8:	0800acdd 	.word	0x0800acdd

0800acdc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ace2:	e00c      	b.n	800acfe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ace4:	1d3b      	adds	r3, r7, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	480a      	ldr	r0, [pc, #40]	; (800ad14 <SendFreeBuf+0x38>)
 800acea:	f000 fa32 	bl	800b152 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800acee:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <SendFreeBuf+0x3c>)
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 f9e3 	bl	800b0c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800acfe:	4805      	ldr	r0, [pc, #20]	; (800ad14 <SendFreeBuf+0x38>)
 800ad00:	f000 f998 	bl	800b034 <LST_is_empty>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0ec      	beq.n	800ace4 <SendFreeBuf+0x8>
  }

  return;
 800ad0a:	bf00      	nop
}
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20000640 	.word	0x20000640
 800ad18:	20030000 	.word	0x20030000

0800ad1c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ad20:	4805      	ldr	r0, [pc, #20]	; (800ad38 <TL_TRACES_Init+0x1c>)
 800ad22:	f000 f977 	bl	800b014 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ad26:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <TL_TRACES_Init+0x20>)
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	4a03      	ldr	r2, [pc, #12]	; (800ad38 <TL_TRACES_Init+0x1c>)
 800ad2c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ad2e:	f002 fe47 	bl	800d9c0 <HW_IPCC_TRACES_Init>

  return;
 800ad32:	bf00      	nop
}
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	200300bc 	.word	0x200300bc
 800ad3c:	20030000 	.word	0x20030000

0800ad40 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ad46:	e008      	b.n	800ad5a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ad48:	1d3b      	adds	r3, r7, #4
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4808      	ldr	r0, [pc, #32]	; (800ad70 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ad4e:	f000 fa00 	bl	800b152 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f80d 	bl	800ad74 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ad5a:	4805      	ldr	r0, [pc, #20]	; (800ad70 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ad5c:	f000 f96a 	bl	800b034 <LST_is_empty>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0f0      	beq.n	800ad48 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ad66:	bf00      	nop
}
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	200300bc 	.word	0x200300bc

0800ad74 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	6039      	str	r1, [r7, #0]
 800ad92:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	2b06      	cmp	r3, #6
 800ad98:	d845      	bhi.n	800ae26 <OutputDbgTrace+0x9e>
 800ad9a:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <OutputDbgTrace+0x18>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800adbd 	.word	0x0800adbd
 800ada4:	0800ade1 	.word	0x0800ade1
 800ada8:	0800ade7 	.word	0x0800ade7
 800adac:	0800adfb 	.word	0x0800adfb
 800adb0:	0800ae07 	.word	0x0800ae07
 800adb4:	0800ae0d 	.word	0x0800ae0d
 800adb8:	0800ae1b 	.word	0x0800ae1b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	7a5b      	ldrb	r3, [r3, #9]
 800adc4:	2bff      	cmp	r3, #255	; 0xff
 800adc6:	d005      	beq.n	800add4 <OutputDbgTrace+0x4c>
 800adc8:	2bff      	cmp	r3, #255	; 0xff
 800adca:	dc05      	bgt.n	800add8 <OutputDbgTrace+0x50>
 800adcc:	2b0e      	cmp	r3, #14
 800adce:	d005      	beq.n	800addc <OutputDbgTrace+0x54>
 800add0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800add2:	e001      	b.n	800add8 <OutputDbgTrace+0x50>
          break;
 800add4:	bf00      	nop
 800add6:	e027      	b.n	800ae28 <OutputDbgTrace+0xa0>
          break;
 800add8:	bf00      	nop
 800adda:	e025      	b.n	800ae28 <OutputDbgTrace+0xa0>
          break;
 800addc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800adde:	e023      	b.n	800ae28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ade4:	e020      	b.n	800ae28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	7a5b      	ldrb	r3, [r3, #9]
 800adee:	2b0e      	cmp	r3, #14
 800adf0:	d001      	beq.n	800adf6 <OutputDbgTrace+0x6e>
 800adf2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800adf4:	e000      	b.n	800adf8 <OutputDbgTrace+0x70>
          break;
 800adf6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800adf8:	e016      	b.n	800ae28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	7a5b      	ldrb	r3, [r3, #9]
 800ae02:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ae04:	e010      	b.n	800ae28 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ae0a:	e00d      	b.n	800ae28 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	7a5b      	ldrb	r3, [r3, #9]
 800ae14:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ae16:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ae18:	e006      	b.n	800ae28 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	7a5b      	ldrb	r3, [r3, #9]
 800ae22:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ae24:	e000      	b.n	800ae28 <OutputDbgTrace+0xa0>

    default:
      break;
 800ae26:	bf00      	nop
  }

  return;
 800ae28:	bf00      	nop
}
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800ae40:	215c      	movs	r1, #92	; 0x5c
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f003 fa30 	bl	800e2a8 <strrchr>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d007      	beq.n	800ae5e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800ae4e:	215c      	movs	r1, #92	; 0x5c
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f003 fa29 	bl	800e2a8 <strrchr>
 800ae56:	4603      	mov	r3, r0
 800ae58:	3301      	adds	r3, #1
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	e00d      	b.n	800ae7a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800ae5e:	212f      	movs	r1, #47	; 0x2f
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f003 fa21 	bl	800e2a8 <strrchr>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d006      	beq.n	800ae7a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800ae6c:	212f      	movs	r1, #47	; 0x2f
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f003 fa1a 	bl	800e2a8 <strrchr>
 800ae74:	4603      	mov	r3, r0
 800ae76:	3301      	adds	r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae90:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ae92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae94:	b672      	cpsid	i
}
 800ae96:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ae98:	1cbb      	adds	r3, r7, #2
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4812      	ldr	r0, [pc, #72]	; (800aee8 <DbgTrace_TxCpltCallback+0x64>)
 800ae9e:	f000 fb9e 	bl	800b5de <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800aea2:	1cbb      	adds	r3, r7, #2
 800aea4:	4619      	mov	r1, r3
 800aea6:	4810      	ldr	r0, [pc, #64]	; (800aee8 <DbgTrace_TxCpltCallback+0x64>)
 800aea8:	f000 fc8a 	bl	800b7c0 <CircularQueue_Sense>
 800aeac:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00c      	beq.n	800aece <DbgTrace_TxCpltCallback+0x4a>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	f383 8810 	msr	PRIMASK, r3
}
 800aebe:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800aec0:	887b      	ldrh	r3, [r7, #2]
 800aec2:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <DbgTrace_TxCpltCallback+0x68>)
 800aec4:	4619      	mov	r1, r3
 800aec6:	6938      	ldr	r0, [r7, #16]
 800aec8:	f7f5 fb50 	bl	800056c <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800aecc:	e008      	b.n	800aee0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800aece:	4b08      	ldr	r3, [pc, #32]	; (800aef0 <DbgTrace_TxCpltCallback+0x6c>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f383 8810 	msr	PRIMASK, r3
}
 800aede:	bf00      	nop
}
 800aee0:	bf00      	nop
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	2000065c 	.word	0x2000065c
 800aeec:	0800ae85 	.word	0x0800ae85
 800aef0:	2000000d 	.word	0x2000000d

0800aef4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	68b9      	ldr	r1, [r7, #8]
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 f805 	bl	800af14 <DbgTraceWrite>
 800af0a:	4603      	mov	r3, r0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800af20:	2300      	movs	r3, #0
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af24:	f3ef 8310 	mrs	r3, PRIMASK
 800af28:	61bb      	str	r3, [r7, #24]
  return(result);
 800af2a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800af2c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af34:	d102      	bne.n	800af3c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800af36:	2300      	movs	r3, #0
 800af38:	627b      	str	r3, [r7, #36]	; 0x24
 800af3a:	e037      	b.n	800afac <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d006      	beq.n	800af50 <DbgTraceWrite+0x3c>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2b02      	cmp	r3, #2
 800af46:	d003      	beq.n	800af50 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800af48:	f04f 33ff 	mov.w	r3, #4294967295
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
 800af4e:	e02d      	b.n	800afac <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d02a      	beq.n	800afac <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800af5a:	b672      	cpsid	i
}
 800af5c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	b29a      	uxth	r2, r3
 800af62:	2301      	movs	r3, #1
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	4814      	ldr	r0, [pc, #80]	; (800afb8 <DbgTraceWrite+0xa4>)
 800af68:	f000 f912 	bl	800b190 <CircularQueue_Add>
 800af6c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d015      	beq.n	800afa0 <DbgTraceWrite+0x8c>
 800af74:	4b11      	ldr	r3, [pc, #68]	; (800afbc <DbgTraceWrite+0xa8>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d010      	beq.n	800afa0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800af7e:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <DbgTraceWrite+0xa8>)
 800af80:	2200      	movs	r2, #0
 800af82:	701a      	strb	r2, [r3, #0]
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f383 8810 	msr	PRIMASK, r3
}
 800af8e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	b29b      	uxth	r3, r3
 800af94:	4a0a      	ldr	r2, [pc, #40]	; (800afc0 <DbgTraceWrite+0xac>)
 800af96:	4619      	mov	r1, r3
 800af98:	69f8      	ldr	r0, [r7, #28]
 800af9a:	f7f5 fae7 	bl	800056c <DbgOutputTraces>
 800af9e:	e005      	b.n	800afac <DbgTraceWrite+0x98>
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f383 8810 	msr	PRIMASK, r3
}
 800afaa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3728      	adds	r7, #40	; 0x28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	2000065c 	.word	0x2000065c
 800afbc:	2000000d 	.word	0x2000000d
 800afc0:	0800ae85 	.word	0x0800ae85

0800afc4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800afce:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <OTP_Read+0x48>)
 800afd0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800afd2:	e002      	b.n	800afda <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	3b08      	subs	r3, #8
 800afd8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3307      	adds	r3, #7
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	79fa      	ldrb	r2, [r7, #7]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d003      	beq.n	800afee <OTP_Read+0x2a>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	4a09      	ldr	r2, [pc, #36]	; (800b010 <OTP_Read+0x4c>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d1f2      	bne.n	800afd4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3307      	adds	r3, #7
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	79fa      	ldrb	r2, [r7, #7]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d001      	beq.n	800affe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800affa:	2300      	movs	r3, #0
 800affc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800affe:	68fb      	ldr	r3, [r7, #12]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	1fff73f8 	.word	0x1fff73f8
 800b010:	1fff7000 	.word	0x1fff7000

0800b014 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	605a      	str	r2, [r3, #4]
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b03c:	f3ef 8310 	mrs	r3, PRIMASK
 800b040:	60fb      	str	r3, [r7, #12]
  return(result);
 800b042:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b044:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b046:	b672      	cpsid	i
}
 800b048:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d102      	bne.n	800b05a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b054:	2301      	movs	r3, #1
 800b056:	75fb      	strb	r3, [r7, #23]
 800b058:	e001      	b.n	800b05e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b05a:	2300      	movs	r3, #0
 800b05c:	75fb      	strb	r3, [r7, #23]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	f383 8810 	msr	PRIMASK, r3
}
 800b068:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b078:	b480      	push	{r7}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b082:	f3ef 8310 	mrs	r3, PRIMASK
 800b086:	60fb      	str	r3, [r7, #12]
  return(result);
 800b088:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b08a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b08c:	b672      	cpsid	i
}
 800b08e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	605a      	str	r2, [r3, #4]
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f383 8810 	msr	PRIMASK, r3
}
 800b0b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b0b8:	bf00      	nop
 800b0ba:	371c      	adds	r7, #28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b0d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b0d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0d8:	b672      	cpsid	i
}
 800b0da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f383 8810 	msr	PRIMASK, r3
}
 800b102:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b104:	bf00      	nop
 800b106:	371c      	adds	r7, #28
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b110:	b480      	push	{r7}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b118:	f3ef 8310 	mrs	r3, PRIMASK
 800b11c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b11e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b120:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b122:	b672      	cpsid	i
}
 800b124:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6812      	ldr	r2, [r2, #0]
 800b12e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	6852      	ldr	r2, [r2, #4]
 800b138:	605a      	str	r2, [r3, #4]
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f383 8810 	msr	PRIMASK, r3
}
 800b144:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b146:	bf00      	nop
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b086      	sub	sp, #24
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b15c:	f3ef 8310 	mrs	r3, PRIMASK
 800b160:	60fb      	str	r3, [r7, #12]
  return(result);
 800b162:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b164:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b166:	b672      	cpsid	i
}
 800b168:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff ffca 	bl	800b110 <LST_remove_node>
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f383 8810 	msr	PRIMASK, r3
}
 800b186:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b188:	bf00      	nop
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08e      	sub	sp, #56	; 0x38
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	4613      	mov	r3, r2
 800b19e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	891b      	ldrh	r3, [r3, #8]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <CircularQueue_Add+0x38>
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	e000      	b.n	800b1ca <CircularQueue_Add+0x3a>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d02a      	beq.n	800b22a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	891b      	ldrh	r3, [r3, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d123      	bne.n	800b224 <CircularQueue_Add+0x94>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6819      	ldr	r1, [r3, #0]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	1c58      	adds	r0, r3, #1
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	4298      	cmp	r0, r3
 800b1fa:	d306      	bcc.n	800b20a <CircularQueue_Add+0x7a>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6918      	ldr	r0, [r3, #16]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	1ac3      	subs	r3, r0, r3
 800b206:	3301      	adds	r3, #1
 800b208:	e002      	b.n	800b210 <CircularQueue_Add+0x80>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	3301      	adds	r3, #1
 800b210:	440b      	add	r3, r1
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	b29b      	uxth	r3, r3
 800b216:	021b      	lsls	r3, r3, #8
 800b218:	b29b      	uxth	r3, r3
 800b21a:	4413      	add	r3, r2
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3302      	adds	r3, #2
 800b220:	b29b      	uxth	r3, r3
 800b222:	e001      	b.n	800b228 <CircularQueue_Add+0x98>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	891b      	ldrh	r3, [r3, #8]
 800b228:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	891b      	ldrh	r3, [r3, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d002      	beq.n	800b238 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	891b      	ldrh	r3, [r3, #8]
 800b236:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	691a      	ldr	r2, [r3, #16]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	429a      	cmp	r2, r3
 800b242:	d307      	bcc.n	800b254 <CircularQueue_Add+0xc4>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	685a      	ldr	r2, [r3, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6919      	ldr	r1, [r3, #16]
 800b24c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b24e:	440b      	add	r3, r1
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	e000      	b.n	800b256 <CircularQueue_Add+0xc6>
 800b254:	2300      	movs	r3, #0
 800b256:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b258:	88fa      	ldrh	r2, [r7, #6]
 800b25a:	7ffb      	ldrb	r3, [r7, #31]
 800b25c:	4413      	add	r3, r2
 800b25e:	461a      	mov	r2, r3
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	fb02 f303 	mul.w	r3, r2, r3
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d80b      	bhi.n	800b284 <CircularQueue_Add+0xf4>
 800b26c:	88fa      	ldrh	r2, [r7, #6]
 800b26e:	7ffb      	ldrb	r3, [r7, #31]
 800b270:	4413      	add	r3, r2
 800b272:	461a      	mov	r2, r3
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	fbb3 f1f2 	udiv	r1, r3, r2
 800b27a:	fb01 f202 	mul.w	r2, r1, r2
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	b2db      	uxtb	r3, r3
 800b282:	e000      	b.n	800b286 <CircularQueue_Add+0xf6>
 800b284:	2300      	movs	r3, #0
 800b286:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b288:	7dfa      	ldrb	r2, [r7, #23]
 800b28a:	7ffb      	ldrb	r3, [r7, #31]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	bf8c      	ite	hi
 800b290:	2301      	movhi	r3, #1
 800b292:	2300      	movls	r3, #0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b298:	7fbb      	ldrb	r3, [r7, #30]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d008      	beq.n	800b2b0 <CircularQueue_Add+0x120>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	7f1b      	ldrb	r3, [r3, #28]
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <CircularQueue_Add+0x120>
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	e000      	b.n	800b2b2 <CircularQueue_Add+0x122>
 800b2b0:	8bbb      	ldrh	r3, [r7, #28]
 800b2b2:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b2b4:	7fbb      	ldrb	r3, [r7, #30]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d008      	beq.n	800b2cc <CircularQueue_Add+0x13c>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	7f1b      	ldrb	r3, [r3, #28]
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <CircularQueue_Add+0x13c>
 800b2c6:	7ffb      	ldrb	r3, [r7, #31]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	e000      	b.n	800b2ce <CircularQueue_Add+0x13e>
 800b2cc:	8bbb      	ldrh	r3, [r7, #28]
 800b2ce:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b2d0:	88fb      	ldrh	r3, [r7, #6]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 817e 	beq.w	800b5d4 <CircularQueue_Add+0x444>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	695a      	ldr	r2, [r3, #20]
 800b2dc:	88f9      	ldrh	r1, [r7, #6]
 800b2de:	7ffb      	ldrb	r3, [r7, #31]
 800b2e0:	440b      	add	r3, r1
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	fb01 f303 	mul.w	r3, r1, r3
 800b2ea:	441a      	add	r2, r3
 800b2ec:	8bbb      	ldrh	r3, [r7, #28]
 800b2ee:	441a      	add	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	f200 816d 	bhi.w	800b5d4 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2fe:	e14a      	b.n	800b596 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b306:	441a      	add	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d307      	bcc.n	800b320 <CircularQueue_Add+0x190>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	691a      	ldr	r2, [r3, #16]
 800b314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b316:	441a      	add	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	e003      	b.n	800b328 <CircularQueue_Add+0x198>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	691a      	ldr	r2, [r3, #16]
 800b324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b326:	4413      	add	r3, r2
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	891b      	ldrh	r3, [r3, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d130      	bne.n	800b39c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	1c59      	adds	r1, r3, #1
 800b342:	6339      	str	r1, [r7, #48]	; 0x30
 800b344:	4413      	add	r3, r2
 800b346:	88fa      	ldrh	r2, [r7, #6]
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b352:	429a      	cmp	r2, r3
 800b354:	d304      	bcc.n	800b360 <CircularQueue_Add+0x1d0>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	e000      	b.n	800b362 <CircularQueue_Add+0x1d2>
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b364:	88fb      	ldrh	r3, [r7, #6]
 800b366:	0a1b      	lsrs	r3, r3, #8
 800b368:	b298      	uxth	r0, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	1c59      	adds	r1, r3, #1
 800b372:	6339      	str	r1, [r7, #48]	; 0x30
 800b374:	4413      	add	r3, r2
 800b376:	b2c2      	uxtb	r2, r0
 800b378:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b380:	429a      	cmp	r2, r3
 800b382:	d304      	bcc.n	800b38e <CircularQueue_Add+0x1fe>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	e000      	b.n	800b390 <CircularQueue_Add+0x200>
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	1c9a      	adds	r2, r3, #2
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b39c:	88fa      	ldrh	r2, [r7, #6]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6859      	ldr	r1, [r3, #4]
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	1acb      	subs	r3, r1, r3
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	bf28      	it	cs
 800b3aa:	4613      	movcs	r3, r2
 800b3ac:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b3ae:	88fb      	ldrh	r3, [r7, #6]
 800b3b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d007      	beq.n	800b3c6 <CircularQueue_Add+0x236>
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d225      	bcs.n	800b40a <CircularQueue_Add+0x27a>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	7f1b      	ldrb	r3, [r3, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d121      	bne.n	800b40a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	18d0      	adds	r0, r2, r3
 800b3ce:	88fb      	ldrh	r3, [r7, #6]
 800b3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d2:	fb02 f303 	mul.w	r3, r2, r3
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	4413      	add	r3, r2
 800b3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f002 fdaf 	bl	800df40 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	695a      	ldr	r2, [r3, #20]
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	441a      	add	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f4:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b3f6:	88fa      	ldrh	r2, [r7, #6]
 800b3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b3fe:	7ffb      	ldrb	r3, [r7, #31]
 800b400:	b29a      	uxth	r2, r3
 800b402:	88fb      	ldrh	r3, [r7, #6]
 800b404:	4413      	add	r3, r2
 800b406:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b408:	e0a4      	b.n	800b554 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80a1 	beq.w	800b554 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	7f1b      	ldrb	r3, [r3, #28]
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d03a      	beq.n	800b494 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	891b      	ldrh	r3, [r3, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10d      	bne.n	800b442 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42c:	3b02      	subs	r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	22ff      	movs	r2, #255	; 0xff
 800b432:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	3b01      	subs	r3, #1
 800b43c:	4413      	add	r3, r2
 800b43e:	22ff      	movs	r2, #255	; 0xff
 800b440:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	695a      	ldr	r2, [r3, #20]
 800b446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b448:	441a      	add	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b452:	88fb      	ldrh	r3, [r7, #6]
 800b454:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b456:	2300      	movs	r3, #0
 800b458:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	891b      	ldrh	r3, [r3, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d16f      	bne.n	800b542 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	1c59      	adds	r1, r3, #1
 800b46a:	6339      	str	r1, [r7, #48]	; 0x30
 800b46c:	4413      	add	r3, r2
 800b46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	0a18      	lsrs	r0, r3, #8
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47e:	1c59      	adds	r1, r3, #1
 800b480:	6339      	str	r1, [r7, #48]	; 0x30
 800b482:	4413      	add	r3, r2
 800b484:	b2c2      	uxtb	r2, r0
 800b486:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	695b      	ldr	r3, [r3, #20]
 800b48c:	1c9a      	adds	r2, r3, #2
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	615a      	str	r2, [r3, #20]
 800b492:	e056      	b.n	800b542 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	7f1b      	ldrb	r3, [r3, #28]
 800b498:	f003 0302 	and.w	r3, r3, #2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d050      	beq.n	800b542 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	891b      	ldrh	r3, [r3, #8]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d14a      	bne.n	800b53e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ae:	3b02      	subs	r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	0a19      	lsrs	r1, r3, #8
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	4413      	add	r3, r2
 800b4c6:	b2ca      	uxtb	r2, r1
 800b4c8:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	18d0      	adds	r0, r2, r3
 800b4d2:	88fb      	ldrh	r3, [r7, #6]
 800b4d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4d6:	fb02 f303 	mul.w	r3, r2, r3
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	4413      	add	r3, r2
 800b4de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f002 fd2d 	bl	800df40 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	695a      	ldr	r2, [r3, #20]
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	441a      	add	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f4:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b4f6:	88fa      	ldrh	r2, [r7, #6]
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b508:	2300      	movs	r3, #0
 800b50a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	1c59      	adds	r1, r3, #1
 800b514:	6339      	str	r1, [r7, #48]	; 0x30
 800b516:	4413      	add	r3, r2
 800b518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b51a:	b2d2      	uxtb	r2, r2
 800b51c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b520:	0a18      	lsrs	r0, r3, #8
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	1c59      	adds	r1, r3, #1
 800b52a:	6339      	str	r1, [r7, #48]	; 0x30
 800b52c:	4413      	add	r3, r2
 800b52e:	b2c2      	uxtb	r2, r0
 800b530:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	1c9a      	adds	r2, r3, #2
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	615a      	str	r2, [r3, #20]
 800b53c:	e001      	b.n	800b542 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b53e:	2300      	movs	r3, #0
 800b540:	e049      	b.n	800b5d6 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b542:	7ffb      	ldrb	r3, [r7, #31]
 800b544:	b29a      	uxth	r2, r3
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	b29b      	uxth	r3, r3
 800b54a:	4413      	add	r3, r2
 800b54c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	2b00      	cmp	r3, #0
 800b558:	d015      	beq.n	800b586 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	18d0      	adds	r0, r2, r3
 800b562:	88fb      	ldrh	r3, [r7, #6]
 800b564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b566:	fb03 f202 	mul.w	r2, r3, r2
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	4413      	add	r3, r2
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	4413      	add	r3, r2
 800b572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b574:	4619      	mov	r1, r3
 800b576:	f002 fce3 	bl	800df40 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	695a      	ldr	r2, [r3, #20]
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	441a      	add	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b592:	3301      	adds	r3, #1
 800b594:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	f4ff aeb0 	bcc.w	800b300 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6919      	ldr	r1, [r3, #16]
 800b5a8:	7ffb      	ldrb	r3, [r7, #31]
 800b5aa:	4419      	add	r1, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	4299      	cmp	r1, r3
 800b5b2:	d307      	bcc.n	800b5c4 <CircularQueue_Add+0x434>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6919      	ldr	r1, [r3, #16]
 800b5b8:	7ffb      	ldrb	r3, [r7, #31]
 800b5ba:	4419      	add	r1, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	1acb      	subs	r3, r1, r3
 800b5c2:	e003      	b.n	800b5cc <CircularQueue_Add+0x43c>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6919      	ldr	r1, [r3, #16]
 800b5c8:	7ffb      	ldrb	r3, [r7, #31]
 800b5ca:	440b      	add	r3, r1
 800b5cc:	4413      	add	r3, r2
 800b5ce:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	e000      	b.n	800b5d6 <CircularQueue_Add+0x446>
    return NULL;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3738      	adds	r7, #56	; 0x38
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b085      	sub	sp, #20
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	891b      	ldrh	r3, [r3, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d101      	bne.n	800b5fc <CircularQueue_Remove+0x1e>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e000      	b.n	800b5fe <CircularQueue_Remove+0x20>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b600:	2300      	movs	r3, #0
 800b602:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 80cc 	beq.w	800b7a6 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	891b      	ldrh	r3, [r3, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d121      	bne.n	800b65a <CircularQueue_Remove+0x7c>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	b29a      	uxth	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6819      	ldr	r1, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	1c58      	adds	r0, r3, #1
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	4298      	cmp	r0, r3
 800b634:	d306      	bcc.n	800b644 <CircularQueue_Remove+0x66>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68d8      	ldr	r0, [r3, #12]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	1ac3      	subs	r3, r0, r3
 800b640:	3301      	adds	r3, #1
 800b642:	e002      	b.n	800b64a <CircularQueue_Remove+0x6c>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	3301      	adds	r3, #1
 800b64a:	440b      	add	r3, r1
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	b29b      	uxth	r3, r3
 800b654:	4413      	add	r3, r2
 800b656:	b29b      	uxth	r3, r3
 800b658:	e001      	b.n	800b65e <CircularQueue_Remove+0x80>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	891b      	ldrh	r3, [r3, #8]
 800b65e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7f1b      	ldrb	r3, [r3, #28]
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d057      	beq.n	800b71c <CircularQueue_Remove+0x13e>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	7f1b      	ldrb	r3, [r3, #28]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b00      	cmp	r3, #0
 800b676:	d151      	bne.n	800b71c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b678:	897b      	ldrh	r3, [r7, #10]
 800b67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b67e:	4293      	cmp	r3, r2
 800b680:	d103      	bne.n	800b68a <CircularQueue_Remove+0xac>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	891b      	ldrh	r3, [r3, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d012      	beq.n	800b6b0 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68da      	ldr	r2, [r3, #12]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b692:	429a      	cmp	r2, r3
 800b694:	d942      	bls.n	800b71c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	891b      	ldrh	r3, [r3, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d03e      	beq.n	800b71c <CircularQueue_Remove+0x13e>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	8912      	ldrh	r2, [r2, #8]
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d235      	bcs.n	800b71c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	695a      	ldr	r2, [r3, #20]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68d9      	ldr	r1, [r3, #12]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	1acb      	subs	r3, r1, r3
 800b6be:	441a      	add	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	891b      	ldrh	r3, [r3, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d121      	bne.n	800b716 <CircularQueue_Remove+0x138>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	4413      	add	r3, r2
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6819      	ldr	r1, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	1c58      	adds	r0, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	4298      	cmp	r0, r3
 800b6f0:	d306      	bcc.n	800b700 <CircularQueue_Remove+0x122>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68d8      	ldr	r0, [r3, #12]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	1ac3      	subs	r3, r0, r3
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	e002      	b.n	800b706 <CircularQueue_Remove+0x128>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	440b      	add	r3, r1
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	b29b      	uxth	r3, r3
 800b710:	4413      	add	r3, r2
 800b712:	b29b      	uxth	r3, r3
 800b714:	e001      	b.n	800b71a <CircularQueue_Remove+0x13c>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	891b      	ldrh	r3, [r3, #8]
 800b71a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	68d9      	ldr	r1, [r3, #12]
 800b724:	7a7b      	ldrb	r3, [r7, #9]
 800b726:	4419      	add	r1, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	4299      	cmp	r1, r3
 800b72e:	d307      	bcc.n	800b740 <CircularQueue_Remove+0x162>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68d9      	ldr	r1, [r3, #12]
 800b734:	7a7b      	ldrb	r3, [r7, #9]
 800b736:	4419      	add	r1, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	1acb      	subs	r3, r1, r3
 800b73e:	e003      	b.n	800b748 <CircularQueue_Remove+0x16a>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	68d9      	ldr	r1, [r3, #12]
 800b744:	7a7b      	ldrb	r3, [r7, #9]
 800b746:	440b      	add	r3, r1
 800b748:	4413      	add	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	8979      	ldrh	r1, [r7, #10]
 800b752:	7a7a      	ldrb	r2, [r7, #9]
 800b754:	440a      	add	r2, r1
 800b756:	1a9a      	subs	r2, r3, r2
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d01b      	beq.n	800b79c <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68da      	ldr	r2, [r3, #12]
 800b768:	897b      	ldrh	r3, [r7, #10]
 800b76a:	441a      	add	r2, r3
 800b76c:	7a7b      	ldrb	r3, [r7, #9]
 800b76e:	441a      	add	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d309      	bcc.n	800b78c <CircularQueue_Remove+0x1ae>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68da      	ldr	r2, [r3, #12]
 800b77c:	897b      	ldrh	r3, [r7, #10]
 800b77e:	441a      	add	r2, r3
 800b780:	7a7b      	ldrb	r3, [r7, #9]
 800b782:	441a      	add	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	e005      	b.n	800b798 <CircularQueue_Remove+0x1ba>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68da      	ldr	r2, [r3, #12]
 800b790:	897b      	ldrh	r3, [r7, #10]
 800b792:	441a      	add	r2, r3
 800b794:	7a7b      	ldrb	r3, [r7, #9]
 800b796:	4413      	add	r3, r2
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	1e5a      	subs	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	897a      	ldrh	r2, [r7, #10]
 800b7b0:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	891b      	ldrh	r3, [r3, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <CircularQueue_Sense+0x1e>
 800b7da:	2302      	movs	r3, #2
 800b7dc:	e000      	b.n	800b7e0 <CircularQueue_Sense+0x20>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 8090 	beq.w	800b914 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	891b      	ldrh	r3, [r3, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d121      	bne.n	800b846 <CircularQueue_Sense+0x86>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	4413      	add	r3, r2
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	b29a      	uxth	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6819      	ldr	r1, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	1c58      	adds	r0, r3, #1
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4298      	cmp	r0, r3
 800b820:	d306      	bcc.n	800b830 <CircularQueue_Sense+0x70>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68d8      	ldr	r0, [r3, #12]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	1ac3      	subs	r3, r0, r3
 800b82c:	3301      	adds	r3, #1
 800b82e:	e002      	b.n	800b836 <CircularQueue_Sense+0x76>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	440b      	add	r3, r1
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	021b      	lsls	r3, r3, #8
 800b83e:	b29b      	uxth	r3, r3
 800b840:	4413      	add	r3, r2
 800b842:	b29b      	uxth	r3, r3
 800b844:	e001      	b.n	800b84a <CircularQueue_Sense+0x8a>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	891b      	ldrh	r3, [r3, #8]
 800b84a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	7f1b      	ldrb	r3, [r3, #28]
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	d048      	beq.n	800b8ea <CircularQueue_Sense+0x12a>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	7f1b      	ldrb	r3, [r3, #28]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b00      	cmp	r3, #0
 800b862:	d142      	bne.n	800b8ea <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b864:	8a7b      	ldrh	r3, [r7, #18]
 800b866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d103      	bne.n	800b876 <CircularQueue_Sense+0xb6>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	891b      	ldrh	r3, [r3, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d012      	beq.n	800b89c <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68da      	ldr	r2, [r3, #12]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b87e:	429a      	cmp	r2, r3
 800b880:	d933      	bls.n	800b8ea <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	891b      	ldrh	r3, [r3, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d02f      	beq.n	800b8ea <CircularQueue_Sense+0x12a>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685a      	ldr	r2, [r3, #4]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	8912      	ldrh	r2, [r2, #8]
 800b898:	4293      	cmp	r3, r2
 800b89a:	d226      	bcs.n	800b8ea <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	891b      	ldrh	r3, [r3, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d11d      	bne.n	800b8e4 <CircularQueue_Sense+0x124>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6819      	ldr	r1, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	1c58      	adds	r0, r3, #1
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4298      	cmp	r0, r3
 800b8c2:	d305      	bcc.n	800b8d0 <CircularQueue_Sense+0x110>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	1ac3      	subs	r3, r0, r3
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	e001      	b.n	800b8d4 <CircularQueue_Sense+0x114>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	440b      	add	r3, r1
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	4413      	add	r3, r2
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	e001      	b.n	800b8e8 <CircularQueue_Sense+0x128>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	891b      	ldrh	r3, [r3, #8]
 800b8e8:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	7af9      	ldrb	r1, [r7, #11]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4419      	add	r1, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d306      	bcc.n	800b90a <CircularQueue_Sense+0x14a>
 800b8fc:	7af9      	ldrb	r1, [r7, #11]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	4419      	add	r1, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	1acb      	subs	r3, r1, r3
 800b908:	e002      	b.n	800b910 <CircularQueue_Sense+0x150>
 800b90a:	7af9      	ldrb	r1, [r7, #11]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	440b      	add	r3, r1
 800b910:	4413      	add	r3, r2
 800b912:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	8a7a      	ldrh	r2, [r7, #18]
 800b91e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b920:	697b      	ldr	r3, [r7, #20]
}
 800b922:	4618      	mov	r0, r3
 800b924:	371c      	adds	r7, #28
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
	...

0800b930 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b934:	4b03      	ldr	r3, [pc, #12]	; (800b944 <LL_FLASH_GetUDN+0x14>)
 800b936:	681b      	ldr	r3, [r3, #0]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	1fff7580 	.word	0x1fff7580

0800b948 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b948:	b480      	push	{r7}
 800b94a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b94c:	4b03      	ldr	r3, [pc, #12]	; (800b95c <LL_FLASH_GetDeviceID+0x14>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	b2db      	uxtb	r3, r3
}
 800b952:	4618      	mov	r0, r3
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	1fff7584 	.word	0x1fff7584

0800b960 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b960:	b480      	push	{r7}
 800b962:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800b964:	4b03      	ldr	r3, [pc, #12]	; (800b974 <LL_FLASH_GetSTCompanyID+0x14>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	0a1b      	lsrs	r3, r3, #8
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	1fff7584 	.word	0x1fff7584

0800b978 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800b978:	b5b0      	push	{r4, r5, r7, lr}
 800b97a:	b08e      	sub	sp, #56	; 0x38
 800b97c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b97e:	4b30      	ldr	r3, [pc, #192]	; (800ba40 <APP_BLE_Init+0xc8>)
 800b980:	1d3c      	adds	r4, r7, #4
 800b982:	461d      	mov	r5, r3
 800b984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b98a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b98c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b98e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800b994:	f000 fa5a 	bl	800be4c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b998:	2101      	movs	r1, #1
 800b99a:	2002      	movs	r0, #2
 800b99c:	f002 f838 	bl	800da10 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b9a0:	4a28      	ldr	r2, [pc, #160]	; (800ba44 <APP_BLE_Init+0xcc>)
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	2002      	movs	r0, #2
 800b9a6:	f002 f94d 	bl	800dc44 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800b9aa:	1d3b      	adds	r3, r7, #4
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fe fc3d 	bl	800a22c <SHCI_C2_BLE_Init>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800b9b8:	f7f7 f9ae 	bl	8002d18 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b9bc:	f000 fa5c 	bl	800be78 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b9c0:	f7fe fb8e 	bl	800a0e0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b9c4:	4b20      	ldr	r3, [pc, #128]	; (800ba48 <APP_BLE_Init+0xd0>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b9cc:	4b1e      	ldr	r3, [pc, #120]	; (800ba48 <APP_BLE_Init+0xd0>)
 800b9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9d2:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b9d4:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <APP_BLE_Init+0xd4>)
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	2001      	movs	r0, #1
 800b9da:	f002 f933 	bl	800dc44 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800b9de:	2006      	movs	r0, #6
 800b9e0:	f7fe f862 	bl	8009aa8 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800b9e4:	f001 fdac 	bl	800d540 <P2PS_APP_Init>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b9e8:	4a18      	ldr	r2, [pc, #96]	; (800ba4c <APP_BLE_Init+0xd4>)
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	f002 f929 	bl	800dc44 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800b9f2:	2006      	movs	r0, #6
 800b9f4:	f7fe f858 	bl	8009aa8 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b9f8:	f000 fea8 	bl	800c74c <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800b9fc:	4b14      	ldr	r3, [pc, #80]	; (800ba50 <APP_BLE_Init+0xd8>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4914      	ldr	r1, [pc, #80]	; (800ba54 <APP_BLE_Init+0xdc>)
 800ba02:	2000      	movs	r0, #0
 800ba04:	f7f5 ff3e 	bl	8001884 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800ba08:	4b13      	ldr	r3, [pc, #76]	; (800ba58 <APP_BLE_Init+0xe0>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4913      	ldr	r1, [pc, #76]	; (800ba5c <APP_BLE_Init+0xe4>)
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f7f5 ff38 	bl	8001884 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ba14:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <APP_BLE_Init+0xd0>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ba1a:	4b0b      	ldr	r3, [pc, #44]	; (800ba48 <APP_BLE_Init+0xd0>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800ba20:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <APP_BLE_Init+0xe8>)
 800ba22:	2280      	movs	r2, #128	; 0x80
 800ba24:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800ba26:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <APP_BLE_Init+0xec>)
 800ba28:	22a0      	movs	r2, #160	; 0xa0
 800ba2a:	801a      	strh	r2, [r3, #0]
   * Start to Advertise to be connected by P2P Client
   */
  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800ba2c:	2001      	movs	r0, #1
 800ba2e:	f000 fad7 	bl	800bfe0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   Clear_LED('A');
 800ba32:	2041      	movs	r0, #65	; 0x41
 800ba34:	f7f6 fd02 	bl	800243c <Clear_LED>
   //Set_LED('G'); //Start Advertizing
/* USER CODE END APP_BLE_Init_2 */
  return;
 800ba38:	bf00      	nop
}
 800ba3a:	3738      	adds	r7, #56	; 0x38
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bdb0      	pop	{r4, r5, r7, pc}
 800ba40:	0800fbbc 	.word	0x0800fbbc
 800ba44:	0800a449 	.word	0x0800a449
 800ba48:	200001a8 	.word	0x200001a8
 800ba4c:	0800c241 	.word	0x0800c241
 800ba50:	0800c2e1 	.word	0x0800c2e1
 800ba54:	20000229 	.word	0x20000229
 800ba58:	0800c2f1 	.word	0x0800c2f1
 800ba5c:	2000022a 	.word	0x2000022a
 800ba60:	2000022c 	.word	0x2000022c
 800ba64:	2000022e 	.word	0x2000022e

0800ba68 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08e      	sub	sp, #56	; 0x38
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ba70:	2392      	movs	r3, #146	; 0x92
 800ba72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	633b      	str	r3, [r7, #48]	; 0x30

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2bff      	cmp	r3, #255	; 0xff
 800ba82:	f000 811c 	beq.w	800bcbe <SVCCTL_App_Notification+0x256>
 800ba86:	2bff      	cmp	r3, #255	; 0xff
 800ba88:	f300 81cc 	bgt.w	800be24 <SVCCTL_App_Notification+0x3bc>
 800ba8c:	2b05      	cmp	r3, #5
 800ba8e:	d002      	beq.n	800ba96 <SVCCTL_App_Notification+0x2e>
 800ba90:	2b3e      	cmp	r3, #62	; 0x3e
 800ba92:	d030      	beq.n	800baf6 <SVCCTL_App_Notification+0x8e>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ba94:	e1c6      	b.n	800be24 <SVCCTL_App_Notification+0x3bc>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	3302      	adds	r3, #2
 800ba9a:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	4bb4      	ldr	r3, [pc, #720]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800baa6:	8adb      	ldrh	r3, [r3, #22]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d113      	bne.n	800bad4 <SVCCTL_App_Notification+0x6c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800baac:	4bb2      	ldr	r3, [pc, #712]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800baae:	2200      	movs	r2, #0
 800bab0:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bab2:	4bb1      	ldr	r3, [pc, #708]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800baba:	48b0      	ldr	r0, [pc, #704]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800babc:	f7ff f9ba 	bl	800ae34 <DbgTraceGetFileName>
 800bac0:	4601      	mov	r1, r0
 800bac2:	f240 233a 	movw	r3, #570	; 0x23a
 800bac6:	4aae      	ldr	r2, [pc, #696]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bac8:	48ae      	ldr	r0, [pc, #696]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800baca:	f002 fb2f 	bl	800e12c <iprintf>
 800bace:	48ae      	ldr	r0, [pc, #696]	; (800bd88 <SVCCTL_App_Notification+0x320>)
 800bad0:	f002 fbb2 	bl	800e238 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 800bad4:	2001      	movs	r0, #1
 800bad6:	f000 fa83 	bl	800bfe0 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800bada:	4bac      	ldr	r3, [pc, #688]	; (800bd8c <SVCCTL_App_Notification+0x324>)
 800badc:	2201      	movs	r2, #1
 800bade:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bae0:	4ba5      	ldr	r3, [pc, #660]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bae2:	8ada      	ldrh	r2, [r3, #22]
 800bae4:	4ba9      	ldr	r3, [pc, #676]	; (800bd8c <SVCCTL_App_Notification+0x324>)
 800bae6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800bae8:	48a8      	ldr	r0, [pc, #672]	; (800bd8c <SVCCTL_App_Notification+0x324>)
 800baea:	f000 fdcd 	bl	800c688 <Custom_APP_Notification>
      Clear_LED('B');
 800baee:	2042      	movs	r0, #66	; 0x42
 800baf0:	f7f6 fca4 	bl	800243c <Clear_LED>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800baf4:	e199      	b.n	800be2a <SVCCTL_App_Notification+0x3c2>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	3302      	adds	r3, #2
 800bafa:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b0c      	cmp	r3, #12
 800bb02:	d016      	beq.n	800bb32 <SVCCTL_App_Notification+0xca>
 800bb04:	2b0c      	cmp	r3, #12
 800bb06:	f300 80d8 	bgt.w	800bcba <SVCCTL_App_Notification+0x252>
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	f000 8095 	beq.w	800bc3a <SVCCTL_App_Notification+0x1d2>
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	f040 80d2 	bne.w	800bcba <SVCCTL_App_Notification+0x252>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800bb16:	4899      	ldr	r0, [pc, #612]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bb18:	f7ff f98c 	bl	800ae34 <DbgTraceGetFileName>
 800bb1c:	4601      	mov	r1, r0
 800bb1e:	f240 2356 	movw	r3, #598	; 0x256
 800bb22:	4a97      	ldr	r2, [pc, #604]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bb24:	4897      	ldr	r0, [pc, #604]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bb26:	f002 fb01 	bl	800e12c <iprintf>
 800bb2a:	4899      	ldr	r0, [pc, #612]	; (800bd90 <SVCCTL_App_Notification+0x328>)
 800bb2c:	f002 fb84 	bl	800e238 <puts>
          break;
 800bb30:	e0c4      	b.n	800bcbc <SVCCTL_App_Notification+0x254>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800bb32:	4892      	ldr	r0, [pc, #584]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bb34:	f7ff f97e 	bl	800ae34 <DbgTraceGetFileName>
 800bb38:	4601      	mov	r1, r0
 800bb3a:	f240 235d 	movw	r3, #605	; 0x25d
 800bb3e:	4a90      	ldr	r2, [pc, #576]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bb40:	4890      	ldr	r0, [pc, #576]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bb42:	f002 faf3 	bl	800e12c <iprintf>
 800bb46:	4893      	ldr	r0, [pc, #588]	; (800bd94 <SVCCTL_App_Notification+0x32c>)
 800bb48:	f002 fb76 	bl	800e238 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10d      	bne.n	800bb76 <SVCCTL_App_Notification+0x10e>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800bb5a:	4888      	ldr	r0, [pc, #544]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bb5c:	f7ff f96a 	bl	800ae34 <DbgTraceGetFileName>
 800bb60:	4601      	mov	r1, r0
 800bb62:	f240 2361 	movw	r3, #609	; 0x261
 800bb66:	4a86      	ldr	r2, [pc, #536]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bb68:	4886      	ldr	r0, [pc, #536]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bb6a:	f002 fadf 	bl	800e12c <iprintf>
 800bb6e:	488a      	ldr	r0, [pc, #552]	; (800bd98 <SVCCTL_App_Notification+0x330>)
 800bb70:	f002 fb62 	bl	800e238 <puts>
 800bb74:	e00c      	b.n	800bb90 <SVCCTL_App_Notification+0x128>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 800bb76:	4881      	ldr	r0, [pc, #516]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bb78:	f7ff f95c 	bl	800ae34 <DbgTraceGetFileName>
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	f240 2365 	movw	r3, #613	; 0x265
 800bb82:	4a7f      	ldr	r2, [pc, #508]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bb84:	487f      	ldr	r0, [pc, #508]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bb86:	f002 fad1 	bl	800e12c <iprintf>
 800bb8a:	4884      	ldr	r0, [pc, #528]	; (800bd9c <SVCCTL_App_Notification+0x334>)
 800bb8c:	f002 fb54 	bl	800e238 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800bb90:	4b79      	ldr	r3, [pc, #484]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bb92:	8adb      	ldrh	r3, [r3, #22]
 800bb94:	f107 020e 	add.w	r2, r7, #14
 800bb98:	f107 010f 	add.w	r1, r7, #15
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fd fffb 	bl	8009b98 <hci_le_read_phy>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if (ret == BLE_STATUS_SUCCESS)
 800bba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d136      	bne.n	800bc1e <SVCCTL_App_Notification+0x1b6>
            APP_DBG_MSG("Read_PHY success \n");
 800bbb0:	4872      	ldr	r0, [pc, #456]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bbb2:	f7ff f93f 	bl	800ae34 <DbgTraceGetFileName>
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	f240 236b 	movw	r3, #619	; 0x26b
 800bbbc:	4a70      	ldr	r2, [pc, #448]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bbbe:	4871      	ldr	r0, [pc, #452]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bbc0:	f002 fab4 	bl	800e12c <iprintf>
 800bbc4:	4876      	ldr	r0, [pc, #472]	; (800bda0 <SVCCTL_App_Notification+0x338>)
 800bbc6:	f002 fb37 	bl	800e238 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d114      	bne.n	800bbfa <SVCCTL_App_Notification+0x192>
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d111      	bne.n	800bbfa <SVCCTL_App_Notification+0x192>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800bbd6:	4869      	ldr	r0, [pc, #420]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bbd8:	f7ff f92c 	bl	800ae34 <DbgTraceGetFileName>
 800bbdc:	4601      	mov	r1, r0
 800bbde:	f240 236f 	movw	r3, #623	; 0x26f
 800bbe2:	4a67      	ldr	r2, [pc, #412]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bbe4:	4867      	ldr	r0, [pc, #412]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bbe6:	f002 faa1 	bl	800e12c <iprintf>
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	4619      	mov	r1, r3
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	486c      	ldr	r0, [pc, #432]	; (800bda4 <SVCCTL_App_Notification+0x33c>)
 800bbf4:	f002 fa9a 	bl	800e12c <iprintf>
          break;
 800bbf8:	e060      	b.n	800bcbc <SVCCTL_App_Notification+0x254>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800bbfa:	4860      	ldr	r0, [pc, #384]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bbfc:	f7ff f91a 	bl	800ae34 <DbgTraceGetFileName>
 800bc00:	4601      	mov	r1, r0
 800bc02:	f240 2373 	movw	r3, #627	; 0x273
 800bc06:	4a5e      	ldr	r2, [pc, #376]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bc08:	485e      	ldr	r0, [pc, #376]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bc0a:	f002 fa8f 	bl	800e12c <iprintf>
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
 800bc10:	4619      	mov	r1, r3
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	461a      	mov	r2, r3
 800bc16:	4863      	ldr	r0, [pc, #396]	; (800bda4 <SVCCTL_App_Notification+0x33c>)
 800bc18:	f002 fa88 	bl	800e12c <iprintf>
          break;
 800bc1c:	e04e      	b.n	800bcbc <SVCCTL_App_Notification+0x254>
            APP_DBG_MSG("Read conf not succeess \n");
 800bc1e:	4857      	ldr	r0, [pc, #348]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bc20:	f7ff f908 	bl	800ae34 <DbgTraceGetFileName>
 800bc24:	4601      	mov	r1, r0
 800bc26:	f44f 731e 	mov.w	r3, #632	; 0x278
 800bc2a:	4a55      	ldr	r2, [pc, #340]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bc2c:	4855      	ldr	r0, [pc, #340]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bc2e:	f002 fa7d 	bl	800e12c <iprintf>
 800bc32:	485d      	ldr	r0, [pc, #372]	; (800bda8 <SVCCTL_App_Notification+0x340>)
 800bc34:	f002 fb00 	bl	800e238 <puts>
          break;
 800bc38:	e040      	b.n	800bcbc <SVCCTL_App_Notification+0x254>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800bc40:	4b4d      	ldr	r3, [pc, #308]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bc42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7f5 fe96 	bl	8001978 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 800bc4c:	484b      	ldr	r0, [pc, #300]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bc4e:	f7ff f8f1 	bl	800ae34 <DbgTraceGetFileName>
 800bc52:	4601      	mov	r1, r0
 800bc54:	f240 2389 	movw	r3, #649	; 0x289
 800bc58:	4a49      	ldr	r2, [pc, #292]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bc5a:	484a      	ldr	r0, [pc, #296]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bc5c:	f002 fa66 	bl	800e12c <iprintf>
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4850      	ldr	r0, [pc, #320]	; (800bdac <SVCCTL_App_Notification+0x344>)
 800bc6c:	f002 fa5e 	bl	800e12c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800bc70:	4b41      	ldr	r3, [pc, #260]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bc72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	d104      	bne.n	800bc84 <SVCCTL_App_Notification+0x21c>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bc7a:	4b3f      	ldr	r3, [pc, #252]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bc7c:	2206      	movs	r2, #6
 800bc7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800bc82:	e003      	b.n	800bc8c <SVCCTL_App_Notification+0x224>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800bc84:	4b3c      	ldr	r3, [pc, #240]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bc86:	2205      	movs	r2, #5
 800bc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	4b38      	ldr	r3, [pc, #224]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bc96:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800bc98:	4b3c      	ldr	r3, [pc, #240]	; (800bd8c <SVCCTL_App_Notification+0x324>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bc9e:	4b36      	ldr	r3, [pc, #216]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bca0:	8ada      	ldrh	r2, [r3, #22]
 800bca2:	4b3a      	ldr	r3, [pc, #232]	; (800bd8c <SVCCTL_App_Notification+0x324>)
 800bca4:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 800bca6:	4839      	ldr	r0, [pc, #228]	; (800bd8c <SVCCTL_App_Notification+0x324>)
 800bca8:	f000 fcee 	bl	800c688 <Custom_APP_Notification>
          Clear_LED('A');
 800bcac:	2041      	movs	r0, #65	; 0x41
 800bcae:	f7f6 fbc5 	bl	800243c <Clear_LED>
          Set_LED('B');
 800bcb2:	2042      	movs	r0, #66	; 0x42
 800bcb4:	f7f6 fc1c 	bl	80024f0 <Set_LED>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800bcb8:	e000      	b.n	800bcbc <SVCCTL_App_Notification+0x254>
          break;
 800bcba:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800bcbc:	e0b5      	b.n	800be2a <SVCCTL_App_Notification+0x3c2>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	3302      	adds	r3, #2
 800bcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (blecore_evt->ecode)
 800bcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcce:	f000 80a5 	beq.w	800be1c <SVCCTL_App_Notification+0x3b4>
 800bcd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcd6:	f300 80a7 	bgt.w	800be28 <SVCCTL_App_Notification+0x3c0>
 800bcda:	2b04      	cmp	r3, #4
 800bcdc:	f000 80a0 	beq.w	800be20 <SVCCTL_App_Notification+0x3b8>
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	f2c0 80a1 	blt.w	800be28 <SVCCTL_App_Notification+0x3c0>
 800bce6:	f240 420a 	movw	r2, #1034	; 0x40a
 800bcea:	4293      	cmp	r3, r2
 800bcec:	f300 809c 	bgt.w	800be28 <SVCCTL_App_Notification+0x3c0>
 800bcf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf4:	f340 8098 	ble.w	800be28 <SVCCTL_App_Notification+0x3c0>
 800bcf8:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800bcfc:	2b09      	cmp	r3, #9
 800bcfe:	f200 8093 	bhi.w	800be28 <SVCCTL_App_Notification+0x3c0>
 800bd02:	a201      	add	r2, pc, #4	; (adr r2, 800bd08 <SVCCTL_App_Notification+0x2a0>)
 800bd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd08:	0800bdf5 	.word	0x0800bdf5
 800bd0c:	0800bd69 	.word	0x0800bd69
 800bd10:	0800be29 	.word	0x0800be29
 800bd14:	0800be29 	.word	0x0800be29
 800bd18:	0800be29 	.word	0x0800be29
 800bd1c:	0800be29 	.word	0x0800be29
 800bd20:	0800bd31 	.word	0x0800bd31
 800bd24:	0800be29 	.word	0x0800be29
 800bd28:	0800bdbd 	.word	0x0800bdbd
 800bd2c:	0800bd4d 	.word	0x0800bd4d
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 800bd30:	4812      	ldr	r0, [pc, #72]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bd32:	f7ff f87f 	bl	800ae34 <DbgTraceGetFileName>
 800bd36:	4601      	mov	r1, r0
 800bd38:	f240 23ca 	movw	r3, #714	; 0x2ca
 800bd3c:	4a10      	ldr	r2, [pc, #64]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bd3e:	4811      	ldr	r0, [pc, #68]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bd40:	f002 f9f4 	bl	800e12c <iprintf>
 800bd44:	481a      	ldr	r0, [pc, #104]	; (800bdb0 <SVCCTL_App_Notification+0x348>)
 800bd46:	f002 fa77 	bl	800e238 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800bd4a:	e06a      	b.n	800be22 <SVCCTL_App_Notification+0x3ba>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 800bd4c:	480b      	ldr	r0, [pc, #44]	; (800bd7c <SVCCTL_App_Notification+0x314>)
 800bd4e:	f7ff f871 	bl	800ae34 <DbgTraceGetFileName>
 800bd52:	4601      	mov	r1, r0
 800bd54:	f240 23d9 	movw	r3, #729	; 0x2d9
 800bd58:	4a09      	ldr	r2, [pc, #36]	; (800bd80 <SVCCTL_App_Notification+0x318>)
 800bd5a:	480a      	ldr	r0, [pc, #40]	; (800bd84 <SVCCTL_App_Notification+0x31c>)
 800bd5c:	f002 f9e6 	bl	800e12c <iprintf>
 800bd60:	4814      	ldr	r0, [pc, #80]	; (800bdb4 <SVCCTL_App_Notification+0x34c>)
 800bd62:	f002 fa69 	bl	800e238 <puts>
        break;
 800bd66:	e05c      	b.n	800be22 <SVCCTL_App_Notification+0x3ba>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800bd68:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <SVCCTL_App_Notification+0x310>)
 800bd6a:	8adb      	ldrh	r3, [r3, #22]
 800bd6c:	4912      	ldr	r1, [pc, #72]	; (800bdb8 <SVCCTL_App_Notification+0x350>)
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fd f89c 	bl	8008eac <aci_gap_pass_key_resp>
        break;
 800bd74:	e055      	b.n	800be22 <SVCCTL_App_Notification+0x3ba>
 800bd76:	bf00      	nop
 800bd78:	200001a8 	.word	0x200001a8
 800bd7c:	0800fbf0 	.word	0x0800fbf0
 800bd80:	080111b0 	.word	0x080111b0
 800bd84:	0800fc0c 	.word	0x0800fc0c
 800bd88:	0800fc20 	.word	0x0800fc20
 800bd8c:	20000684 	.word	0x20000684
 800bd90:	0800fc48 	.word	0x0800fc48
 800bd94:	0800fc74 	.word	0x0800fc74
 800bd98:	0800fc90 	.word	0x0800fc90
 800bd9c:	0800fcb4 	.word	0x0800fcb4
 800bda0:	0800fcdc 	.word	0x0800fcdc
 800bda4:	0800fcf0 	.word	0x0800fcf0
 800bda8:	0800fd0c 	.word	0x0800fd0c
 800bdac:	0800fd24 	.word	0x0800fd24
 800bdb0:	0800fd68 	.word	0x0800fd68
 800bdb4:	0800fd90 	.word	0x0800fd90
 800bdb8:	0001b207 	.word	0x0001b207
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	3302      	adds	r3, #2
 800bdc0:	62bb      	str	r3, [r7, #40]	; 0x28
            numeric_value = evt_numeric_value->Numeric_Value;
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 800bdca:	481a      	ldr	r0, [pc, #104]	; (800be34 <SVCCTL_App_Notification+0x3cc>)
 800bdcc:	f7ff f832 	bl	800ae34 <DbgTraceGetFileName>
 800bdd0:	4601      	mov	r1, r0
 800bdd2:	f240 23e3 	movw	r3, #739	; 0x2e3
 800bdd6:	4a18      	ldr	r2, [pc, #96]	; (800be38 <SVCCTL_App_Notification+0x3d0>)
 800bdd8:	4818      	ldr	r0, [pc, #96]	; (800be3c <SVCCTL_App_Notification+0x3d4>)
 800bdda:	f002 f9a7 	bl	800e12c <iprintf>
 800bdde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bde0:	4817      	ldr	r0, [pc, #92]	; (800be40 <SVCCTL_App_Notification+0x3d8>)
 800bde2:	f002 f9a3 	bl	800e12c <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800bde6:	4b17      	ldr	r3, [pc, #92]	; (800be44 <SVCCTL_App_Notification+0x3dc>)
 800bde8:	8adb      	ldrh	r3, [r3, #22]
 800bdea:	2101      	movs	r1, #1
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fd fa07 	bl	8009200 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 800bdf2:	e016      	b.n	800be22 <SVCCTL_App_Notification+0x3ba>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	3302      	adds	r3, #2
 800bdf8:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 800bdfa:	480e      	ldr	r0, [pc, #56]	; (800be34 <SVCCTL_App_Notification+0x3cc>)
 800bdfc:	f7ff f81a 	bl	800ae34 <DbgTraceGetFileName>
 800be00:	4601      	mov	r1, r0
 800be02:	f240 23e9 	movw	r3, #745	; 0x2e9
 800be06:	4a0c      	ldr	r2, [pc, #48]	; (800be38 <SVCCTL_App_Notification+0x3d0>)
 800be08:	480c      	ldr	r0, [pc, #48]	; (800be3c <SVCCTL_App_Notification+0x3d4>)
 800be0a:	f002 f98f 	bl	800e12c <iprintf>
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	789b      	ldrb	r3, [r3, #2]
 800be12:	4619      	mov	r1, r3
 800be14:	480c      	ldr	r0, [pc, #48]	; (800be48 <SVCCTL_App_Notification+0x3e0>)
 800be16:	f002 f989 	bl	800e12c <iprintf>
        break;
 800be1a:	e002      	b.n	800be22 <SVCCTL_App_Notification+0x3ba>
      break;
 800be1c:	bf00      	nop
 800be1e:	e003      	b.n	800be28 <SVCCTL_App_Notification+0x3c0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800be20:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800be22:	e001      	b.n	800be28 <SVCCTL_App_Notification+0x3c0>
      break;
 800be24:	bf00      	nop
 800be26:	e000      	b.n	800be2a <SVCCTL_App_Notification+0x3c2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800be28:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800be2a:	2301      	movs	r3, #1
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3738      	adds	r7, #56	; 0x38
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	0800fbf0 	.word	0x0800fbf0
 800be38:	080111b0 	.word	0x080111b0
 800be3c:	0800fc0c 	.word	0x0800fc0c
 800be40:	0800fdc0 	.word	0x0800fdc0
 800be44:	200001a8 	.word	0x200001a8
 800be48:	0800fdd8 	.word	0x0800fdd8

0800be4c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800be52:	4b06      	ldr	r3, [pc, #24]	; (800be6c <Ble_Tl_Init+0x20>)
 800be54:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800be56:	4b06      	ldr	r3, [pc, #24]	; (800be70 <Ble_Tl_Init+0x24>)
 800be58:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800be5a:	463b      	mov	r3, r7
 800be5c:	4619      	mov	r1, r3
 800be5e:	4805      	ldr	r0, [pc, #20]	; (800be74 <Ble_Tl_Init+0x28>)
 800be60:	f7fe fad6 	bl	800a410 <hci_init>

  return;
 800be64:	bf00      	nop
}
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	200300d4 	.word	0x200300d4
 800be70:	0800c37b 	.word	0x0800c37b
 800be74:	0800c343 	.word	0x0800c343

0800be78 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800be78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7a:	b08d      	sub	sp, #52	; 0x34
 800be7c:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800be7e:	2300      	movs	r3, #0
 800be80:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800be82:	f7fd fe65 	bl	8009b50 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800be86:	f000 f997 	bl	800c1b8 <BleGetBdAddress>
 800be8a:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	2106      	movs	r1, #6
 800be90:	2000      	movs	r0, #0
 800be92:	f7fd fd1d 	bl	80098d0 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	795a      	ldrb	r2, [r3, #5]
 800be9a:	4b4b      	ldr	r3, [pc, #300]	; (800bfc8 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800be9c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	791a      	ldrb	r2, [r3, #4]
 800bea2:	4b49      	ldr	r3, [pc, #292]	; (800bfc8 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800bea4:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	78da      	ldrb	r2, [r3, #3]
 800beaa:	4b47      	ldr	r3, [pc, #284]	; (800bfc8 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800beac:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	789a      	ldrb	r2, [r3, #2]
 800beb2:	4b45      	ldr	r3, [pc, #276]	; (800bfc8 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800beb4:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	785a      	ldrb	r2, [r3, #1]
 800beba:	4b43      	ldr	r3, [pc, #268]	; (800bfc8 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800bebc:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	781a      	ldrb	r2, [r3, #0]
 800bec2:	4b41      	ldr	r3, [pc, #260]	; (800bfc8 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800bec4:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800bec6:	4a41      	ldr	r2, [pc, #260]	; (800bfcc <Ble_Hci_Gap_Gatt_Init+0x154>)
 800bec8:	2110      	movs	r1, #16
 800beca:	2018      	movs	r0, #24
 800becc:	f7fd fd00 	bl	80098d0 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800bed0:	4a3f      	ldr	r2, [pc, #252]	; (800bfd0 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800bed2:	2110      	movs	r1, #16
 800bed4:	2008      	movs	r0, #8
 800bed6:	f7fd fcfb 	bl	80098d0 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800beda:	2119      	movs	r1, #25
 800bedc:	2001      	movs	r0, #1
 800bede:	f7fd fd7c 	bl	80099da <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800bee2:	f7fd f9f4 	bl	80092ce <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800beea:	7cfb      	ldrb	r3, [r7, #19]
 800beec:	f043 0301 	orr.w	r3, r3, #1
 800bef0:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800bef2:	7cfb      	ldrb	r3, [r7, #19]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01d      	beq.n	800bf34 <Ble_Hci_Gap_Gatt_Init+0xbc>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800bef8:	4b36      	ldr	r3, [pc, #216]	; (800bfd4 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800befa:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 800befc:	f107 020a 	add.w	r2, r7, #10
 800bf00:	7cf8      	ldrb	r0, [r7, #19]
 800bf02:	1dbb      	adds	r3, r7, #6
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	f107 0308 	add.w	r3, r7, #8
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	2206      	movs	r2, #6
 800bf10:	2100      	movs	r1, #0
 800bf12:	f7fd f832 	bl	8008f7a <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800bf16:	897c      	ldrh	r4, [r7, #10]
 800bf18:	893d      	ldrh	r5, [r7, #8]
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f7f4 f930 	bl	8000180 <strlen>
 800bf20:	4603      	mov	r3, r0
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f7fd fbd0 	bl	80096d4 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800bf34:	8978      	ldrh	r0, [r7, #10]
 800bf36:	88f9      	ldrh	r1, [r7, #6]
 800bf38:	1d3b      	adds	r3, r7, #4
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f7fd fbc8 	bl	80096d4 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800bf44:	2202      	movs	r2, #2
 800bf46:	2102      	movs	r1, #2
 800bf48:	2000      	movs	r0, #0
 800bf4a:	f7fd fea3 	bl	8009c94 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800bf4e:	4b22      	ldr	r3, [pc, #136]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800bf54:	4b20      	ldr	r3, [pc, #128]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fc fe8f 	bl	8008c7c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bf5e:	4b1e      	ldr	r3, [pc, #120]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf60:	2201      	movs	r2, #1
 800bf62:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800bf64:	4b1c      	ldr	r3, [pc, #112]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf66:	2208      	movs	r2, #8
 800bf68:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800bf6a:	4b1b      	ldr	r3, [pc, #108]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf6c:	2210      	movs	r2, #16
 800bf6e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800bf70:	4b19      	ldr	r3, [pc, #100]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800bf76:	4b18      	ldr	r3, [pc, #96]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf78:	4a18      	ldr	r2, [pc, #96]	; (800bfdc <Ble_Hci_Gap_Gatt_Init+0x164>)
 800bf7a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800bf7c:	4b16      	ldr	r3, [pc, #88]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf7e:	2201      	movs	r2, #1
 800bf80:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bf82:	4b15      	ldr	r3, [pc, #84]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf84:	789c      	ldrb	r4, [r3, #2]
 800bf86:	4b14      	ldr	r3, [pc, #80]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf88:	785d      	ldrb	r5, [r3, #1]
 800bf8a:	4b13      	ldr	r3, [pc, #76]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf8c:	791b      	ldrb	r3, [r3, #4]
 800bf8e:	4a12      	ldr	r2, [pc, #72]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf90:	7952      	ldrb	r2, [r2, #5]
 800bf92:	4911      	ldr	r1, [pc, #68]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf94:	78c9      	ldrb	r1, [r1, #3]
 800bf96:	4810      	ldr	r0, [pc, #64]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bf98:	6880      	ldr	r0, [r0, #8]
 800bf9a:	2600      	movs	r6, #0
 800bf9c:	9604      	str	r6, [sp, #16]
 800bf9e:	9003      	str	r0, [sp, #12]
 800bfa0:	9102      	str	r1, [sp, #8]
 800bfa2:	9201      	str	r2, [sp, #4]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	4629      	mov	r1, r5
 800bfac:	4620      	mov	r0, r4
 800bfae:	f7fc feb9 	bl	8008d24 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800bfb2:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bfb4:	789b      	ldrb	r3, [r3, #2]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <Ble_Hci_Gap_Gatt_Init+0x146>
   {
     aci_gap_configure_whitelist();
 800bfba:	f7fd f8fd 	bl	80091b8 <aci_gap_configure_whitelist>
   }
}
 800bfbe:	bf00      	nop
 800bfc0:	371c      	adds	r7, #28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20000028 	.word	0x20000028
 800bfcc:	08011190 	.word	0x08011190
 800bfd0:	080111a0 	.word	0x080111a0
 800bfd4:	0800fe38 	.word	0x0800fe38
 800bfd8:	200001a8 	.word	0x200001a8
 800bfdc:	0001b207 	.word	0x0001b207

0800bfe0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08c      	sub	sp, #48	; 0x30
 800bfe4:	af08      	add	r7, sp, #32
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bfea:	2392      	movs	r3, #146	; 0x92
 800bfec:	73fb      	strb	r3, [r7, #15]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d106      	bne.n	800c002 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800bff4:	4b61      	ldr	r3, [pc, #388]	; (800c17c <Adv_Request+0x19c>)
 800bff6:	881b      	ldrh	r3, [r3, #0]
 800bff8:	81bb      	strh	r3, [r7, #12]
    Max_Inter = AdvIntervalMax;
 800bffa:	4b61      	ldr	r3, [pc, #388]	; (800c180 <Adv_Request+0x1a0>)
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	817b      	strh	r3, [r7, #10]
 800c000:	e005      	b.n	800c00e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800c002:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800c006:	81bb      	strh	r3, [r7, #12]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800c008:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c00c:	817b      	strh	r3, [r7, #10]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800c00e:	4b5d      	ldr	r3, [pc, #372]	; (800c184 <Adv_Request+0x1a4>)
 800c010:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c014:	4618      	mov	r0, r3
 800c016:	f7f5 fcaf 	bl	8001978 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800c01a:	485b      	ldr	r0, [pc, #364]	; (800c188 <Adv_Request+0x1a8>)
 800c01c:	f7fe ff0a 	bl	800ae34 <DbgTraceGetFileName>
 800c020:	4601      	mov	r1, r0
 800c022:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800c026:	4a59      	ldr	r2, [pc, #356]	; (800c18c <Adv_Request+0x1ac>)
 800c028:	4859      	ldr	r0, [pc, #356]	; (800c190 <Adv_Request+0x1b0>)
 800c02a:	f002 f87f 	bl	800e12c <iprintf>
 800c02e:	4b55      	ldr	r3, [pc, #340]	; (800c184 <Adv_Request+0x1a4>)
 800c030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c034:	4619      	mov	r1, r3
 800c036:	4857      	ldr	r0, [pc, #348]	; (800c194 <Adv_Request+0x1b4>)
 800c038:	f002 f878 	bl	800e12c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800c03c:	79fb      	ldrb	r3, [r7, #7]
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d12d      	bne.n	800c09e <Adv_Request+0xbe>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800c042:	4b50      	ldr	r3, [pc, #320]	; (800c184 <Adv_Request+0x1a4>)
 800c044:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d004      	beq.n	800c056 <Adv_Request+0x76>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800c04c:	4b4d      	ldr	r3, [pc, #308]	; (800c184 <Adv_Request+0x1a4>)
 800c04e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c052:	2b02      	cmp	r3, #2
 800c054:	d123      	bne.n	800c09e <Adv_Request+0xbe>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800c056:	f7fc fcf3 	bl	8008a40 <aci_gap_set_non_discoverable>
 800c05a:	4603      	mov	r3, r0
 800c05c:	73fb      	strb	r3, [r7, #15]
      if (ret == BLE_STATUS_SUCCESS)
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10d      	bne.n	800c080 <Adv_Request+0xa0>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 800c064:	4848      	ldr	r0, [pc, #288]	; (800c188 <Adv_Request+0x1a8>)
 800c066:	f7fe fee5 	bl	800ae34 <DbgTraceGetFileName>
 800c06a:	4601      	mov	r1, r0
 800c06c:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800c070:	4a46      	ldr	r2, [pc, #280]	; (800c18c <Adv_Request+0x1ac>)
 800c072:	4847      	ldr	r0, [pc, #284]	; (800c190 <Adv_Request+0x1b0>)
 800c074:	f002 f85a 	bl	800e12c <iprintf>
 800c078:	4847      	ldr	r0, [pc, #284]	; (800c198 <Adv_Request+0x1b8>)
 800c07a:	f002 f8dd 	bl	800e238 <puts>
 800c07e:	e00e      	b.n	800c09e <Adv_Request+0xbe>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800c080:	4841      	ldr	r0, [pc, #260]	; (800c188 <Adv_Request+0x1a8>)
 800c082:	f7fe fed7 	bl	800ae34 <DbgTraceGetFileName>
 800c086:	4601      	mov	r1, r0
 800c088:	f240 33fd 	movw	r3, #1021	; 0x3fd
 800c08c:	4a3f      	ldr	r2, [pc, #252]	; (800c18c <Adv_Request+0x1ac>)
 800c08e:	4840      	ldr	r0, [pc, #256]	; (800c190 <Adv_Request+0x1b0>)
 800c090:	f002 f84c 	bl	800e12c <iprintf>
 800c094:	7bfb      	ldrb	r3, [r7, #15]
 800c096:	4619      	mov	r1, r3
 800c098:	4840      	ldr	r0, [pc, #256]	; (800c19c <Adv_Request+0x1bc>)
 800c09a:	f002 f847 	bl	800e12c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800c09e:	4a39      	ldr	r2, [pc, #228]	; (800c184 <Adv_Request+0x1a4>)
 800c0a0:	79fb      	ldrb	r3, [r7, #7]
 800c0a2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	9306      	str	r3, [sp, #24]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	9304      	str	r3, [sp, #16]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	9303      	str	r3, [sp, #12]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9302      	str	r3, [sp, #8]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	22a0      	movs	r2, #160	; 0xa0
 800c0c6:	2180      	movs	r1, #128	; 0x80
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f7fc fcdd 	bl	8008a88 <aci_gap_set_discoverable>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 800c0d2:	4933      	ldr	r1, [pc, #204]	; (800c1a0 <Adv_Request+0x1c0>)
 800c0d4:	2016      	movs	r0, #22
 800c0d6:	f7fc fffd 	bl	80090d4 <aci_gap_update_adv_data>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73fb      	strb	r3, [r7, #15]

    if (ret == BLE_STATUS_SUCCESS)
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d125      	bne.n	800c130 <Adv_Request+0x150>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800c0e4:	79fb      	ldrb	r3, [r7, #7]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d114      	bne.n	800c114 <Adv_Request+0x134>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800c0ea:	4827      	ldr	r0, [pc, #156]	; (800c188 <Adv_Request+0x1a8>)
 800c0ec:	f7fe fea2 	bl	800ae34 <DbgTraceGetFileName>
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	f240 4317 	movw	r3, #1047	; 0x417
 800c0f6:	4a25      	ldr	r2, [pc, #148]	; (800c18c <Adv_Request+0x1ac>)
 800c0f8:	4825      	ldr	r0, [pc, #148]	; (800c190 <Adv_Request+0x1b0>)
 800c0fa:	f002 f817 	bl	800e12c <iprintf>
 800c0fe:	4829      	ldr	r0, [pc, #164]	; (800c1a4 <Adv_Request+0x1c4>)
 800c100:	f002 f89a 	bl	800e238 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800c104:	4b1f      	ldr	r3, [pc, #124]	; (800c184 <Adv_Request+0x1a4>)
 800c106:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c10a:	4927      	ldr	r1, [pc, #156]	; (800c1a8 <Adv_Request+0x1c8>)
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7f5 fcbf 	bl	8001a90 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800c112:	e030      	b.n	800c176 <Adv_Request+0x196>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800c114:	481c      	ldr	r0, [pc, #112]	; (800c188 <Adv_Request+0x1a8>)
 800c116:	f7fe fe8d 	bl	800ae34 <DbgTraceGetFileName>
 800c11a:	4601      	mov	r1, r0
 800c11c:	f240 431d 	movw	r3, #1053	; 0x41d
 800c120:	4a1a      	ldr	r2, [pc, #104]	; (800c18c <Adv_Request+0x1ac>)
 800c122:	481b      	ldr	r0, [pc, #108]	; (800c190 <Adv_Request+0x1b0>)
 800c124:	f002 f802 	bl	800e12c <iprintf>
 800c128:	4820      	ldr	r0, [pc, #128]	; (800c1ac <Adv_Request+0x1cc>)
 800c12a:	f002 f885 	bl	800e238 <puts>
  return;
 800c12e:	e022      	b.n	800c176 <Adv_Request+0x196>
      if (New_Status == APP_BLE_FAST_ADV)
 800c130:	79fb      	ldrb	r3, [r7, #7]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d10f      	bne.n	800c156 <Adv_Request+0x176>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800c136:	4814      	ldr	r0, [pc, #80]	; (800c188 <Adv_Request+0x1a8>)
 800c138:	f7fe fe7c 	bl	800ae34 <DbgTraceGetFileName>
 800c13c:	4601      	mov	r1, r0
 800c13e:	f240 4324 	movw	r3, #1060	; 0x424
 800c142:	4a12      	ldr	r2, [pc, #72]	; (800c18c <Adv_Request+0x1ac>)
 800c144:	4812      	ldr	r0, [pc, #72]	; (800c190 <Adv_Request+0x1b0>)
 800c146:	f001 fff1 	bl	800e12c <iprintf>
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	4619      	mov	r1, r3
 800c14e:	4818      	ldr	r0, [pc, #96]	; (800c1b0 <Adv_Request+0x1d0>)
 800c150:	f001 ffec 	bl	800e12c <iprintf>
  return;
 800c154:	e00f      	b.n	800c176 <Adv_Request+0x196>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 800c156:	480c      	ldr	r0, [pc, #48]	; (800c188 <Adv_Request+0x1a8>)
 800c158:	f7fe fe6c 	bl	800ae34 <DbgTraceGetFileName>
 800c15c:	4601      	mov	r1, r0
 800c15e:	f44f 6385 	mov.w	r3, #1064	; 0x428
 800c162:	4a0a      	ldr	r2, [pc, #40]	; (800c18c <Adv_Request+0x1ac>)
 800c164:	480a      	ldr	r0, [pc, #40]	; (800c190 <Adv_Request+0x1b0>)
 800c166:	f001 ffe1 	bl	800e12c <iprintf>
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	4619      	mov	r1, r3
 800c16e:	4811      	ldr	r0, [pc, #68]	; (800c1b4 <Adv_Request+0x1d4>)
 800c170:	f001 ffdc 	bl	800e12c <iprintf>
  return;
 800c174:	bf00      	nop
}
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	2000022c 	.word	0x2000022c
 800c180:	2000022e 	.word	0x2000022e
 800c184:	200001a8 	.word	0x200001a8
 800c188:	0800fbf0 	.word	0x0800fbf0
 800c18c:	080111c8 	.word	0x080111c8
 800c190:	0800fc0c 	.word	0x0800fc0c
 800c194:	0800fe40 	.word	0x0800fe40
 800c198:	0800fe5c 	.word	0x0800fe5c
 800c19c:	0800fe80 	.word	0x0800fe80
 800c1a0:	20000010 	.word	0x20000010
 800c1a4:	0800fea8 	.word	0x0800fea8
 800c1a8:	0001e046 	.word	0x0001e046
 800c1ac:	0800fed0 	.word	0x0800fed0
 800c1b0:	0800fefc 	.word	0x0800fefc
 800c1b4:	0800ff2c 	.word	0x0800ff2c

0800c1b8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c1be:	f7ff fbb7 	bl	800b930 <LL_FLASH_GetUDN>
 800c1c2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ca:	d023      	beq.n	800c214 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c1cc:	f7ff fbc8 	bl	800b960 <LL_FLASH_GetSTCompanyID>
 800c1d0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c1d2:	f7ff fbb9 	bl	800b948 <LL_FLASH_GetDeviceID>
 800c1d6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	4b16      	ldr	r3, [pc, #88]	; (800c238 <BleGetBdAddress+0x80>)
 800c1de:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	0a1b      	lsrs	r3, r3, #8
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	4b14      	ldr	r3, [pc, #80]	; (800c238 <BleGetBdAddress+0x80>)
 800c1e8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	4b12      	ldr	r3, [pc, #72]	; (800c238 <BleGetBdAddress+0x80>)
 800c1f0:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <BleGetBdAddress+0x80>)
 800c1f8:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	0a1b      	lsrs	r3, r3, #8
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <BleGetBdAddress+0x80>)
 800c202:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	0c1b      	lsrs	r3, r3, #16
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	4b0b      	ldr	r3, [pc, #44]	; (800c238 <BleGetBdAddress+0x80>)
 800c20c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800c20e:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <BleGetBdAddress+0x80>)
 800c210:	617b      	str	r3, [r7, #20]
 800c212:	e00b      	b.n	800c22c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800c214:	2000      	movs	r0, #0
 800c216:	f7fe fed5 	bl	800afc4 <OTP_Read>
 800c21a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	617b      	str	r3, [r7, #20]
 800c226:	e001      	b.n	800c22c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800c228:	4b04      	ldr	r3, [pc, #16]	; (800c23c <BleGetBdAddress+0x84>)
 800c22a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800c22c:	697b      	ldr	r3, [r7, #20]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	2000067c 	.word	0x2000067c
 800c23c:	08011188 	.word	0x08011188

0800c240 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM & P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c246:	4b1f      	ldr	r3, [pc, #124]	; (800c2c4 <Adv_Cancel+0x84>)
 800c248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c24c:	2b05      	cmp	r3, #5
 800c24e:	d035      	beq.n	800c2bc <Adv_Cancel+0x7c>

  {

    tBleStatus result = 0x00;
 800c250:	2300      	movs	r3, #0
 800c252:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800c254:	f7fc fbf4 	bl	8008a40 <aci_gap_set_non_discoverable>
 800c258:	4603      	mov	r3, r0
 800c25a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c25c:	4b19      	ldr	r3, [pc, #100]	; (800c2c4 <Adv_Cancel+0x84>)
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d11a      	bne.n	800c2a0 <Adv_Cancel+0x60>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c26a:	4817      	ldr	r0, [pc, #92]	; (800c2c8 <Adv_Cancel+0x88>)
 800c26c:	f7fe fde2 	bl	800ae34 <DbgTraceGetFileName>
 800c270:	4601      	mov	r1, r0
 800c272:	f240 4379 	movw	r3, #1145	; 0x479
 800c276:	4a15      	ldr	r2, [pc, #84]	; (800c2cc <Adv_Cancel+0x8c>)
 800c278:	4815      	ldr	r0, [pc, #84]	; (800c2d0 <Adv_Cancel+0x90>)
 800c27a:	f001 ff57 	bl	800e12c <iprintf>
 800c27e:	4815      	ldr	r0, [pc, #84]	; (800c2d4 <Adv_Cancel+0x94>)
 800c280:	f001 ff54 	bl	800e12c <iprintf>
 800c284:	4810      	ldr	r0, [pc, #64]	; (800c2c8 <Adv_Cancel+0x88>)
 800c286:	f7fe fdd5 	bl	800ae34 <DbgTraceGetFileName>
 800c28a:	4601      	mov	r1, r0
 800c28c:	f240 4379 	movw	r3, #1145	; 0x479
 800c290:	4a0e      	ldr	r2, [pc, #56]	; (800c2cc <Adv_Cancel+0x8c>)
 800c292:	480f      	ldr	r0, [pc, #60]	; (800c2d0 <Adv_Cancel+0x90>)
 800c294:	f001 ff4a 	bl	800e12c <iprintf>
 800c298:	480f      	ldr	r0, [pc, #60]	; (800c2d8 <Adv_Cancel+0x98>)
 800c29a:	f001 ff47 	bl	800e12c <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800c29e:	e00d      	b.n	800c2bc <Adv_Cancel+0x7c>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c2a0:	4809      	ldr	r0, [pc, #36]	; (800c2c8 <Adv_Cancel+0x88>)
 800c2a2:	f7fe fdc7 	bl	800ae34 <DbgTraceGetFileName>
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	f240 437d 	movw	r3, #1149	; 0x47d
 800c2ac:	4a07      	ldr	r2, [pc, #28]	; (800c2cc <Adv_Cancel+0x8c>)
 800c2ae:	4808      	ldr	r0, [pc, #32]	; (800c2d0 <Adv_Cancel+0x90>)
 800c2b0:	f001 ff3c 	bl	800e12c <iprintf>
 800c2b4:	4809      	ldr	r0, [pc, #36]	; (800c2dc <Adv_Cancel+0x9c>)
 800c2b6:	f001 ff39 	bl	800e12c <iprintf>
  return;
 800c2ba:	bf00      	nop
 800c2bc:	bf00      	nop
}
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	200001a8 	.word	0x200001a8
 800c2c8:	0800fbf0 	.word	0x0800fbf0
 800c2cc:	080111d4 	.word	0x080111d4
 800c2d0:	0800fc0c 	.word	0x0800fc0c
 800c2d4:	0800ff60 	.word	0x0800ff60
 800c2d8:	0800ff68 	.word	0x0800ff68
 800c2dc:	0800ff84 	.word	0x0800ff84

0800c2e0 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	f001 fcce 	bl	800dc88 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800c2ec:	bf00      	nop
}
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c306:	2100      	movs	r1, #0
 800c308:	2002      	movs	r0, #2
 800c30a:	f001 fcbd 	bl	800dc88 <UTIL_SEQ_SetTask>
  return;
 800c30e:	bf00      	nop
}
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b082      	sub	sp, #8
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c31e:	2001      	movs	r0, #1
 800c320:	f001 fd1e 	bl	800dd60 <UTIL_SEQ_SetEvt>
  return;
 800c324:	bf00      	nop
}
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c334:	2001      	movs	r0, #1
 800c336:	f001 fd33 	bl	800dda0 <UTIL_SEQ_WaitEvt>
  return;
 800c33a:	bf00      	nop
}
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b084      	sub	sp, #16
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	3308      	adds	r3, #8
 800c354:	4618      	mov	r0, r3
 800c356:	f7fd ff15 	bl	800a184 <SVCCTL_UserEvtRx>
 800c35a:	4603      	mov	r3, r0
 800c35c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c35e:	7afb      	ldrb	r3, [r7, #11]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2201      	movs	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c36a:	e003      	b.n	800c374 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	701a      	strb	r2, [r3, #0]
  return;
 800c372:	bf00      	nop
}
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b084      	sub	sp, #16
 800c37e:	af00      	add	r7, sp, #0
 800c380:	4603      	mov	r3, r0
 800c382:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800c384:	79fb      	ldrb	r3, [r7, #7]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d002      	beq.n	800c390 <BLE_StatusNot+0x16>
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d006      	beq.n	800c39c <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800c38e:	e00b      	b.n	800c3a8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c390:	2307      	movs	r3, #7
 800c392:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f001 fca3 	bl	800dce0 <UTIL_SEQ_PauseTask>
      break;
 800c39a:	e005      	b.n	800c3a8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c39c:	2307      	movs	r3, #7
 800c39e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f001 fcbd 	bl	800dd20 <UTIL_SEQ_ResumeTask>
      break;
 800c3a6:	bf00      	nop
  }
  return;
 800c3a8:	bf00      	nop
}
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_App_Notification_1\n");
 800c3b8:	489c      	ldr	r0, [pc, #624]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c3ba:	f7fe fd3b 	bl	800ae34 <DbgTraceGetFileName>
 800c3be:	4601      	mov	r1, r0
 800c3c0:	236c      	movs	r3, #108	; 0x6c
 800c3c2:	4a9b      	ldr	r2, [pc, #620]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c3c4:	489b      	ldr	r0, [pc, #620]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c3c6:	f001 feb1 	bl	800e12c <iprintf>
 800c3ca:	489b      	ldr	r0, [pc, #620]	; (800c638 <Custom_STM_App_Notification+0x288>)
 800c3cc:	f001 ff34 	bl	800e238 <puts>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b10      	cmp	r3, #16
 800c3d6:	f200 810c 	bhi.w	800c5f2 <Custom_STM_App_Notification+0x242>
 800c3da:	a201      	add	r2, pc, #4	; (adr r2, 800c3e0 <Custom_STM_App_Notification+0x30>)
 800c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e0:	0800c425 	.word	0x0800c425
 800c3e4:	0800c43f 	.word	0x0800c43f
 800c3e8:	0800c459 	.word	0x0800c459
 800c3ec:	0800c473 	.word	0x0800c473
 800c3f0:	0800c48d 	.word	0x0800c48d
 800c3f4:	0800c4a7 	.word	0x0800c4a7
 800c3f8:	0800c4c1 	.word	0x0800c4c1
 800c3fc:	0800c4db 	.word	0x0800c4db
 800c400:	0800c4f5 	.word	0x0800c4f5
 800c404:	0800c50f 	.word	0x0800c50f
 800c408:	0800c529 	.word	0x0800c529
 800c40c:	0800c543 	.word	0x0800c543
 800c410:	0800c55d 	.word	0x0800c55d
 800c414:	0800c577 	.word	0x0800c577
 800c418:	0800c591 	.word	0x0800c591
 800c41c:	0800c5b7 	.word	0x0800c5b7
 800c420:	0800c5d5 	.word	0x0800c5d5
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

  /* My_P2P_Server */
    case CUSTOM_STM_LED_C_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_READ_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_LED_C_READ_EVT\n");
 800c424:	4881      	ldr	r0, [pc, #516]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c426:	f7fe fd05 	bl	800ae34 <DbgTraceGetFileName>
 800c42a:	4601      	mov	r1, r0
 800c42c:	2377      	movs	r3, #119	; 0x77
 800c42e:	4a80      	ldr	r2, [pc, #512]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c430:	4880      	ldr	r0, [pc, #512]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c432:	f001 fe7b 	bl	800e12c <iprintf>
 800c436:	4881      	ldr	r0, [pc, #516]	; (800c63c <Custom_STM_App_Notification+0x28c>)
 800c438:	f001 fefe 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;
 800c43c:	e0e6      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT\n");
 800c43e:	487b      	ldr	r0, [pc, #492]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c440:	f7fe fcf8 	bl	800ae34 <DbgTraceGetFileName>
 800c444:	4601      	mov	r1, r0
 800c446:	237d      	movs	r3, #125	; 0x7d
 800c448:	4a79      	ldr	r2, [pc, #484]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c44a:	487a      	ldr	r0, [pc, #488]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c44c:	f001 fe6e 	bl	800e12c <iprintf>
 800c450:	487b      	ldr	r0, [pc, #492]	; (800c640 <Custom_STM_App_Notification+0x290>)
 800c452:	f001 fef1 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 800c456:	e0d9      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT\n");
 800c458:	4874      	ldr	r0, [pc, #464]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c45a:	f7fe fceb 	bl	800ae34 <DbgTraceGetFileName>
 800c45e:	4601      	mov	r1, r0
 800c460:	2383      	movs	r3, #131	; 0x83
 800c462:	4a73      	ldr	r2, [pc, #460]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c464:	4873      	ldr	r0, [pc, #460]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c466:	f001 fe61 	bl	800e12c <iprintf>
 800c46a:	4876      	ldr	r0, [pc, #472]	; (800c644 <Custom_STM_App_Notification+0x294>)
 800c46c:	f001 fee4 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 800c470:	e0cc      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT\n");
 800c472:	486e      	ldr	r0, [pc, #440]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c474:	f7fe fcde 	bl	800ae34 <DbgTraceGetFileName>
 800c478:	4601      	mov	r1, r0
 800c47a:	2389      	movs	r3, #137	; 0x89
 800c47c:	4a6c      	ldr	r2, [pc, #432]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c47e:	486d      	ldr	r0, [pc, #436]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c480:	f001 fe54 	bl	800e12c <iprintf>
 800c484:	4870      	ldr	r0, [pc, #448]	; (800c648 <Custom_STM_App_Notification+0x298>)
 800c486:	f001 fed7 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 800c48a:	e0bf      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_MOC_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_READ_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_READ_EVT\n");
 800c48c:	4867      	ldr	r0, [pc, #412]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c48e:	f7fe fcd1 	bl	800ae34 <DbgTraceGetFileName>
 800c492:	4601      	mov	r1, r0
 800c494:	238f      	movs	r3, #143	; 0x8f
 800c496:	4a66      	ldr	r2, [pc, #408]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c498:	4866      	ldr	r0, [pc, #408]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c49a:	f001 fe47 	bl	800e12c <iprintf>
 800c49e:	486b      	ldr	r0, [pc, #428]	; (800c64c <Custom_STM_App_Notification+0x29c>)
 800c4a0:	f001 feca 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_MOC_READ_EVT */
      break;
 800c4a4:	e0b2      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_MOC_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_WRITE_NO_RESP_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_WRITE_NO_RESP_EVT\n");
 800c4a6:	4861      	ldr	r0, [pc, #388]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c4a8:	f7fe fcc4 	bl	800ae34 <DbgTraceGetFileName>
 800c4ac:	4601      	mov	r1, r0
 800c4ae:	2395      	movs	r3, #149	; 0x95
 800c4b0:	4a5f      	ldr	r2, [pc, #380]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c4b2:	4860      	ldr	r0, [pc, #384]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c4b4:	f001 fe3a 	bl	800e12c <iprintf>
 800c4b8:	4865      	ldr	r0, [pc, #404]	; (800c650 <Custom_STM_App_Notification+0x2a0>)
 800c4ba:	f001 febd 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_MOC_WRITE_NO_RESP_EVT */
      break;
 800c4be:	e0a5      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT\n");
 800c4c0:	485a      	ldr	r0, [pc, #360]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c4c2:	f7fe fcb7 	bl	800ae34 <DbgTraceGetFileName>
 800c4c6:	4601      	mov	r1, r0
 800c4c8:	239b      	movs	r3, #155	; 0x9b
 800c4ca:	4a59      	ldr	r2, [pc, #356]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c4cc:	4859      	ldr	r0, [pc, #356]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c4ce:	f001 fe2d 	bl	800e12c <iprintf>
 800c4d2:	4860      	ldr	r0, [pc, #384]	; (800c654 <Custom_STM_App_Notification+0x2a4>)
 800c4d4:	f001 feb0 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT */
      break;
 800c4d8:	e098      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT\n");
 800c4da:	4854      	ldr	r0, [pc, #336]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c4dc:	f7fe fcaa 	bl	800ae34 <DbgTraceGetFileName>
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	23a1      	movs	r3, #161	; 0xa1
 800c4e4:	4a52      	ldr	r2, [pc, #328]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c4e6:	4853      	ldr	r0, [pc, #332]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c4e8:	f001 fe20 	bl	800e12c <iprintf>
 800c4ec:	485a      	ldr	r0, [pc, #360]	; (800c658 <Custom_STM_App_Notification+0x2a8>)
 800c4ee:	f001 fea3 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT */
      break;
 800c4f2:	e08b      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_MOC_INDICATE_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_INDICATE_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_INDICATE_ENABLED_EVT\n");
 800c4f4:	484d      	ldr	r0, [pc, #308]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c4f6:	f7fe fc9d 	bl	800ae34 <DbgTraceGetFileName>
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	23a7      	movs	r3, #167	; 0xa7
 800c4fe:	4a4c      	ldr	r2, [pc, #304]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c500:	484c      	ldr	r0, [pc, #304]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c502:	f001 fe13 	bl	800e12c <iprintf>
 800c506:	4855      	ldr	r0, [pc, #340]	; (800c65c <Custom_STM_App_Notification+0x2ac>)
 800c508:	f001 fe96 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_MOC_INDICATE_ENABLED_EVT */
      break;
 800c50c:	e07e      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_MOC_INDICATE_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_INDICATE_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_INDICATE_DISABLED_EVT\n");
 800c50e:	4847      	ldr	r0, [pc, #284]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c510:	f7fe fc90 	bl	800ae34 <DbgTraceGetFileName>
 800c514:	4601      	mov	r1, r0
 800c516:	23ad      	movs	r3, #173	; 0xad
 800c518:	4a45      	ldr	r2, [pc, #276]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c51a:	4846      	ldr	r0, [pc, #280]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c51c:	f001 fe06 	bl	800e12c <iprintf>
 800c520:	484f      	ldr	r0, [pc, #316]	; (800c660 <Custom_STM_App_Notification+0x2b0>)
 800c522:	f001 fe89 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_MOC_INDICATE_DISABLED_EVT */
      break;
 800c526:	e071      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

  /* My_Heart_Rate */
    case CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT\n");
 800c528:	4840      	ldr	r0, [pc, #256]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c52a:	f7fe fc83 	bl	800ae34 <DbgTraceGetFileName>
 800c52e:	4601      	mov	r1, r0
 800c530:	23b4      	movs	r3, #180	; 0xb4
 800c532:	4a3f      	ldr	r2, [pc, #252]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c534:	483f      	ldr	r0, [pc, #252]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c536:	f001 fdf9 	bl	800e12c <iprintf>
 800c53a:	484a      	ldr	r0, [pc, #296]	; (800c664 <Custom_STM_App_Notification+0x2b4>)
 800c53c:	f001 fe7c 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */
      break;
 800c540:	e064      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT\n");
 800c542:	483a      	ldr	r0, [pc, #232]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c544:	f7fe fc76 	bl	800ae34 <DbgTraceGetFileName>
 800c548:	4601      	mov	r1, r0
 800c54a:	23ba      	movs	r3, #186	; 0xba
 800c54c:	4a38      	ldr	r2, [pc, #224]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c54e:	4839      	ldr	r0, [pc, #228]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c550:	f001 fdec 	bl	800e12c <iprintf>
 800c554:	4844      	ldr	r0, [pc, #272]	; (800c668 <Custom_STM_App_Notification+0x2b8>)
 800c556:	f001 fe6f 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
      break;
 800c55a:	e057      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_HRS_SL_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_SL_READ_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_SL_READ_EVT\n");
 800c55c:	4833      	ldr	r0, [pc, #204]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c55e:	f7fe fc69 	bl	800ae34 <DbgTraceGetFileName>
 800c562:	4601      	mov	r1, r0
 800c564:	23c0      	movs	r3, #192	; 0xc0
 800c566:	4a32      	ldr	r2, [pc, #200]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c568:	4832      	ldr	r0, [pc, #200]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c56a:	f001 fddf 	bl	800e12c <iprintf>
 800c56e:	483f      	ldr	r0, [pc, #252]	; (800c66c <Custom_STM_App_Notification+0x2bc>)
 800c570:	f001 fe62 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_HRS_SL_READ_EVT */
      break;
 800c574:	e04a      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_HRS_CTRLP_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_CTRLP_WRITE_EVT\n");
 800c576:	482d      	ldr	r0, [pc, #180]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c578:	f7fe fc5c 	bl	800ae34 <DbgTraceGetFileName>
 800c57c:	4601      	mov	r1, r0
 800c57e:	23c6      	movs	r3, #198	; 0xc6
 800c580:	4a2b      	ldr	r2, [pc, #172]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c582:	482c      	ldr	r0, [pc, #176]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c584:	f001 fdd2 	bl	800e12c <iprintf>
 800c588:	4839      	ldr	r0, [pc, #228]	; (800c670 <Custom_STM_App_Notification+0x2c0>)
 800c58a:	f001 fe55 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
      break;
 800c58e:	e03d      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

  /* CSCB_Service */
    case CUSTOM_STM_C1_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C1_WRITE_NO_RESP_EVT */
    	Clear_LED('A');
 800c590:	2041      	movs	r0, #65	; 0x41
 800c592:	f7f5 ff53 	bl	800243c <Clear_LED>
    	Toggle_LED('B');
 800c596:	2042      	movs	r0, #66	; 0x42
 800c598:	f7f6 f804 	bl	80025a4 <Toggle_LED>
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C1_WRITE_NO_RESP_EVT\n");
 800c59c:	4823      	ldr	r0, [pc, #140]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c59e:	f7fe fc49 	bl	800ae34 <DbgTraceGetFileName>
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	23cf      	movs	r3, #207	; 0xcf
 800c5a6:	4a22      	ldr	r2, [pc, #136]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c5a8:	4822      	ldr	r0, [pc, #136]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c5aa:	f001 fdbf 	bl	800e12c <iprintf>
 800c5ae:	4831      	ldr	r0, [pc, #196]	; (800c674 <Custom_STM_App_Notification+0x2c4>)
 800c5b0:	f001 fe42 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_C1_WRITE_NO_RESP_EVT */
      break;
 800c5b4:	e02a      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_C1_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C1_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C1_NOTIFY_ENABLED_EVT\n");
 800c5b6:	481d      	ldr	r0, [pc, #116]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c5b8:	f7fe fc3c 	bl	800ae34 <DbgTraceGetFileName>
 800c5bc:	4601      	mov	r1, r0
 800c5be:	23d5      	movs	r3, #213	; 0xd5
 800c5c0:	4a1b      	ldr	r2, [pc, #108]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c5c2:	481c      	ldr	r0, [pc, #112]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c5c4:	f001 fdb2 	bl	800e12c <iprintf>
 800c5c8:	482b      	ldr	r0, [pc, #172]	; (800c678 <Custom_STM_App_Notification+0x2c8>)
 800c5ca:	f001 fe35 	bl	800e238 <puts>
    	  BeginNotification();
 800c5ce:	f7f5 feb7 	bl	8002340 <BeginNotification>
      /* USER CODE END CUSTOM_STM_C1_NOTIFY_ENABLED_EVT */
      break;
 800c5d2:	e01b      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    case CUSTOM_STM_C1_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C1_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C1_NOTIFY_DISABLED_EVT\n");
 800c5d4:	4815      	ldr	r0, [pc, #84]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c5d6:	f7fe fc2d 	bl	800ae34 <DbgTraceGetFileName>
 800c5da:	4601      	mov	r1, r0
 800c5dc:	23dc      	movs	r3, #220	; 0xdc
 800c5de:	4a14      	ldr	r2, [pc, #80]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c5e0:	4814      	ldr	r0, [pc, #80]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c5e2:	f001 fda3 	bl	800e12c <iprintf>
 800c5e6:	4825      	ldr	r0, [pc, #148]	; (800c67c <Custom_STM_App_Notification+0x2cc>)
 800c5e8:	f001 fe26 	bl	800e238 <puts>
    	  FinishNotification();
 800c5ec:	f7f5 feb8 	bl	8002360 <FinishNotification>
      /* USER CODE END CUSTOM_STM_C1_NOTIFY_DISABLED_EVT */
      break;
 800c5f0:	e00c      	b.n	800c60c <Custom_STM_App_Notification+0x25c>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_App_Notification_default\n");
 800c5f2:	480e      	ldr	r0, [pc, #56]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c5f4:	f7fe fc1e 	bl	800ae34 <DbgTraceGetFileName>
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	23e3      	movs	r3, #227	; 0xe3
 800c5fc:	4a0c      	ldr	r2, [pc, #48]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c5fe:	480d      	ldr	r0, [pc, #52]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c600:	f001 fd94 	bl	800e12c <iprintf>
 800c604:	481e      	ldr	r0, [pc, #120]	; (800c680 <Custom_STM_App_Notification+0x2d0>)
 800c606:	f001 fe17 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800c60a:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */
  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_App_Notification_2\n");
 800c60c:	4807      	ldr	r0, [pc, #28]	; (800c62c <Custom_STM_App_Notification+0x27c>)
 800c60e:	f7fe fc11 	bl	800ae34 <DbgTraceGetFileName>
 800c612:	4601      	mov	r1, r0
 800c614:	23e8      	movs	r3, #232	; 0xe8
 800c616:	4a06      	ldr	r2, [pc, #24]	; (800c630 <Custom_STM_App_Notification+0x280>)
 800c618:	4806      	ldr	r0, [pc, #24]	; (800c634 <Custom_STM_App_Notification+0x284>)
 800c61a:	f001 fd87 	bl	800e12c <iprintf>
 800c61e:	4819      	ldr	r0, [pc, #100]	; (800c684 <Custom_STM_App_Notification+0x2d4>)
 800c620:	f001 fe0a 	bl	800e238 <puts>
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800c624:	bf00      	nop
}
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	0800ffa8 	.word	0x0800ffa8
 800c630:	080111e0 	.word	0x080111e0
 800c634:	0800ffc8 	.word	0x0800ffc8
 800c638:	0800ffdc 	.word	0x0800ffdc
 800c63c:	08010004 	.word	0x08010004
 800c640:	08010028 	.word	0x08010028
 800c644:	08010058 	.word	0x08010058
 800c648:	0801008c 	.word	0x0801008c
 800c64c:	080100c0 	.word	0x080100c0
 800c650:	080100e4 	.word	0x080100e4
 800c654:	08010110 	.word	0x08010110
 800c658:	0801013c 	.word	0x0801013c
 800c65c:	0801016c 	.word	0x0801016c
 800c660:	0801019c 	.word	0x0801019c
 800c664:	080101cc 	.word	0x080101cc
 800c668:	080101fc 	.word	0x080101fc
 800c66c:	0801022c 	.word	0x0801022c
 800c670:	08010254 	.word	0x08010254
 800c674:	08010280 	.word	0x08010280
 800c678:	080102ac 	.word	0x080102ac
 800c67c:	080102d8 	.word	0x080102d8
 800c680:	08010304 	.word	0x08010304
 800c684:	08010334 	.word	0x08010334

0800c688 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */
	  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Notification_1\n");
 800c690:	4826      	ldr	r0, [pc, #152]	; (800c72c <Custom_APP_Notification+0xa4>)
 800c692:	f7fe fbcf 	bl	800ae34 <DbgTraceGetFileName>
 800c696:	4601      	mov	r1, r0
 800c698:	23f0      	movs	r3, #240	; 0xf0
 800c69a:	4a25      	ldr	r2, [pc, #148]	; (800c730 <Custom_APP_Notification+0xa8>)
 800c69c:	4825      	ldr	r0, [pc, #148]	; (800c734 <Custom_APP_Notification+0xac>)
 800c69e:	f001 fd45 	bl	800e12c <iprintf>
 800c6a2:	4825      	ldr	r0, [pc, #148]	; (800c738 <Custom_APP_Notification+0xb0>)
 800c6a4:	f001 fdc8 	bl	800e238 <puts>
  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <Custom_APP_Notification+0x2e>
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d00d      	beq.n	800c6d0 <Custom_APP_Notification+0x48>
 800c6b4:	e01a      	b.n	800c6ec <Custom_APP_Notification+0x64>
    /* USER CODE BEGIN CUSTOM_APP_Notification_Custom_Evt_Opcode */

    /* USER CODE END P2PS_CUSTOM_Notification_Custom_Evt_Opcode */
    case CUSTOM_CONN_HANDLE_EVT :
      /* USER CODE BEGIN CUSTOM_CONN_HANDLE_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_CONN_HANDLE_EVT\n");
 800c6b6:	481d      	ldr	r0, [pc, #116]	; (800c72c <Custom_APP_Notification+0xa4>)
 800c6b8:	f7fe fbbc 	bl	800ae34 <DbgTraceGetFileName>
 800c6bc:	4601      	mov	r1, r0
 800c6be:	23fa      	movs	r3, #250	; 0xfa
 800c6c0:	4a1b      	ldr	r2, [pc, #108]	; (800c730 <Custom_APP_Notification+0xa8>)
 800c6c2:	481c      	ldr	r0, [pc, #112]	; (800c734 <Custom_APP_Notification+0xac>)
 800c6c4:	f001 fd32 	bl	800e12c <iprintf>
 800c6c8:	481c      	ldr	r0, [pc, #112]	; (800c73c <Custom_APP_Notification+0xb4>)
 800c6ca:	f001 fdb5 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_CONN_HANDLE_EVT */
      break;
 800c6ce:	e01b      	b.n	800c708 <Custom_APP_Notification+0x80>

    case CUSTOM_DISCON_HANDLE_EVT :
      /* USER CODE BEGIN CUSTOM_DISCON_HANDLE_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_DISCON_HANDLE_EVT\n");
 800c6d0:	4816      	ldr	r0, [pc, #88]	; (800c72c <Custom_APP_Notification+0xa4>)
 800c6d2:	f7fe fbaf 	bl	800ae34 <DbgTraceGetFileName>
 800c6d6:	4601      	mov	r1, r0
 800c6d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6dc:	4a14      	ldr	r2, [pc, #80]	; (800c730 <Custom_APP_Notification+0xa8>)
 800c6de:	4815      	ldr	r0, [pc, #84]	; (800c734 <Custom_APP_Notification+0xac>)
 800c6e0:	f001 fd24 	bl	800e12c <iprintf>
 800c6e4:	4816      	ldr	r0, [pc, #88]	; (800c740 <Custom_APP_Notification+0xb8>)
 800c6e6:	f001 fda7 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_DISCON_HANDLE_EVT */
      break;
 800c6ea:	e00d      	b.n	800c708 <Custom_APP_Notification+0x80>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Notification_default\n");
 800c6ec:	480f      	ldr	r0, [pc, #60]	; (800c72c <Custom_APP_Notification+0xa4>)
 800c6ee:	f7fe fba1 	bl	800ae34 <DbgTraceGetFileName>
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	f44f 7383 	mov.w	r3, #262	; 0x106
 800c6f8:	4a0d      	ldr	r2, [pc, #52]	; (800c730 <Custom_APP_Notification+0xa8>)
 800c6fa:	480e      	ldr	r0, [pc, #56]	; (800c734 <Custom_APP_Notification+0xac>)
 800c6fc:	f001 fd16 	bl	800e12c <iprintf>
 800c700:	4810      	ldr	r0, [pc, #64]	; (800c744 <Custom_APP_Notification+0xbc>)
 800c702:	f001 fd99 	bl	800e238 <puts>
      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800c706:	bf00      	nop
  }

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */
  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Notification_2\n");
 800c708:	4808      	ldr	r0, [pc, #32]	; (800c72c <Custom_APP_Notification+0xa4>)
 800c70a:	f7fe fb93 	bl	800ae34 <DbgTraceGetFileName>
 800c70e:	4601      	mov	r1, r0
 800c710:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800c714:	4a06      	ldr	r2, [pc, #24]	; (800c730 <Custom_APP_Notification+0xa8>)
 800c716:	4807      	ldr	r0, [pc, #28]	; (800c734 <Custom_APP_Notification+0xac>)
 800c718:	f001 fd08 	bl	800e12c <iprintf>
 800c71c:	480a      	ldr	r0, [pc, #40]	; (800c748 <Custom_APP_Notification+0xc0>)
 800c71e:	f001 fd8b 	bl	800e238 <puts>
  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800c722:	bf00      	nop
}
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	0800ffa8 	.word	0x0800ffa8
 800c730:	080111fc 	.word	0x080111fc
 800c734:	0800ffc8 	.word	0x0800ffc8
 800c738:	0801035c 	.word	0x0801035c
 800c73c:	08010380 	.word	0x08010380
 800c740:	080103a4 	.word	0x080103a4
 800c744:	080103c8 	.word	0x080103c8
 800c748:	080103f4 	.word	0x080103f4

0800c74c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Init\n");
 800c750:	480e      	ldr	r0, [pc, #56]	; (800c78c <Custom_APP_Init+0x40>)
 800c752:	f7fe fb6f 	bl	800ae34 <DbgTraceGetFileName>
 800c756:	4601      	mov	r1, r0
 800c758:	f240 1315 	movw	r3, #277	; 0x115
 800c75c:	4a0c      	ldr	r2, [pc, #48]	; (800c790 <Custom_APP_Init+0x44>)
 800c75e:	480d      	ldr	r0, [pc, #52]	; (800c794 <Custom_APP_Init+0x48>)
 800c760:	f001 fce4 	bl	800e12c <iprintf>
 800c764:	480c      	ldr	r0, [pc, #48]	; (800c798 <Custom_APP_Init+0x4c>)
 800c766:	f001 fd67 	bl	800e238 <puts>
	  Custom_Updated_Characteristic1=0;
 800c76a:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <Custom_APP_Init+0x50>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]
	  Custom_Updated_Characteristic2=0;
 800c770:	4b0b      	ldr	r3, [pc, #44]	; (800c7a0 <Custom_APP_Init+0x54>)
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]
	  Custom_Updated_Characteristic3=0;
 800c776:	4b0b      	ldr	r3, [pc, #44]	; (800c7a4 <Custom_APP_Init+0x58>)
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
	  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_ACTION, UTIL_SEQ_RFU, My_Action);
 800c77c:	4a0a      	ldr	r2, [pc, #40]	; (800c7a8 <Custom_APP_Init+0x5c>)
 800c77e:	2100      	movs	r1, #0
 800c780:	2004      	movs	r0, #4
 800c782:	f001 fa5f 	bl	800dc44 <UTIL_SEQ_RegTask>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800c786:	bf00      	nop
}
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	0800ffa8 	.word	0x0800ffa8
 800c790:	08011214 	.word	0x08011214
 800c794:	0800ffc8 	.word	0x0800ffc8
 800c798:	08010418 	.word	0x08010418
 800c79c:	20000688 	.word	0x20000688
 800c7a0:	2000068c 	.word	0x2000068c
 800c7a4:	20000690 	.word	0x20000690
 800c7a8:	0800c7ad 	.word	0x0800c7ad

0800c7ac <My_Action>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void My_Action(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
	  APP_DBG_MSG("Welcome to My action\n");
 800c7b0:	4816      	ldr	r0, [pc, #88]	; (800c80c <My_Action+0x60>)
 800c7b2:	f7fe fb3f 	bl	800ae34 <DbgTraceGetFileName>
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 800c7bc:	4a14      	ldr	r2, [pc, #80]	; (800c810 <My_Action+0x64>)
 800c7be:	4815      	ldr	r0, [pc, #84]	; (800c814 <My_Action+0x68>)
 800c7c0:	f001 fcb4 	bl	800e12c <iprintf>
 800c7c4:	4814      	ldr	r0, [pc, #80]	; (800c818 <My_Action+0x6c>)
 800c7c6:	f001 fd37 	bl	800e238 <puts>
	  if(Custom_Updated_Characteristic1==1)
 800c7ca:	4b14      	ldr	r3, [pc, #80]	; (800c81c <My_Action+0x70>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d11a      	bne.n	800c808 <My_Action+0x5c>
	  	  {
		  APP_DBG_MSG("Custom_Characteristic 1 legnth : %d\n",Custom_Characteristic1.Length);
 800c7d2:	480e      	ldr	r0, [pc, #56]	; (800c80c <My_Action+0x60>)
 800c7d4:	f7fe fb2e 	bl	800ae34 <DbgTraceGetFileName>
 800c7d8:	4601      	mov	r1, r0
 800c7da:	f240 13a5 	movw	r3, #421	; 0x1a5
 800c7de:	4a0c      	ldr	r2, [pc, #48]	; (800c810 <My_Action+0x64>)
 800c7e0:	480c      	ldr	r0, [pc, #48]	; (800c814 <My_Action+0x68>)
 800c7e2:	f001 fca3 	bl	800e12c <iprintf>
 800c7e6:	4b0e      	ldr	r3, [pc, #56]	; (800c820 <My_Action+0x74>)
 800c7e8:	791b      	ldrb	r3, [r3, #4]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	480d      	ldr	r0, [pc, #52]	; (800c824 <My_Action+0x78>)
 800c7ee:	f001 fc9d 	bl	800e12c <iprintf>
		  //Custom_STM_App_Update_Char(CUSTOM_STM_C1, Custom_Characteristic1.pPayload);
		  Custom_Characteristic_Send(CUSTOM_STM_C1, Custom_Characteristic1.pPayload,Custom_Characteristic1.Length,0);
 800c7f2:	4b0b      	ldr	r3, [pc, #44]	; (800c820 <My_Action+0x74>)
 800c7f4:	6819      	ldr	r1, [r3, #0]
 800c7f6:	4b0a      	ldr	r3, [pc, #40]	; (800c820 <My_Action+0x74>)
 800c7f8:	791a      	ldrb	r2, [r3, #4]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2006      	movs	r0, #6
 800c7fe:	f000 f89b 	bl	800c938 <Custom_Characteristic_Send>
		  Custom_Updated_Characteristic1=0;
 800c802:	4b06      	ldr	r3, [pc, #24]	; (800c81c <My_Action+0x70>)
 800c804:	2200      	movs	r2, #0
 800c806:	601a      	str	r2, [r3, #0]
	  	  }

}
 800c808:	bf00      	nop
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	0800ffa8 	.word	0x0800ffa8
 800c810:	08011224 	.word	0x08011224
 800c814:	0800ffc8 	.word	0x0800ffc8
 800c818:	0801050c 	.word	0x0801050c
 800c81c:	20000688 	.word	0x20000688
 800c820:	20000694 	.word	0x20000694
 800c824:	08010524 	.word	0x08010524

0800c828 <Ask_My_Action>:
void Ask_My_Action(void)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	af00      	add	r7, sp, #0
	  APP_DBG_MSG("Ask for My action/n");
 800c82c:	4809      	ldr	r0, [pc, #36]	; (800c854 <Ask_My_Action+0x2c>)
 800c82e:	f7fe fb01 	bl	800ae34 <DbgTraceGetFileName>
 800c832:	4601      	mov	r1, r0
 800c834:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 800c838:	4a07      	ldr	r2, [pc, #28]	; (800c858 <Ask_My_Action+0x30>)
 800c83a:	4808      	ldr	r0, [pc, #32]	; (800c85c <Ask_My_Action+0x34>)
 800c83c:	f001 fc76 	bl	800e12c <iprintf>
 800c840:	4807      	ldr	r0, [pc, #28]	; (800c860 <Ask_My_Action+0x38>)
 800c842:	f001 fc73 	bl	800e12c <iprintf>
	  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_ACTION,CFG_SCH_PRIO_0);//HW semaphore
 800c846:	2100      	movs	r1, #0
 800c848:	2004      	movs	r0, #4
 800c84a:	f001 fa1d 	bl	800dc88 <UTIL_SEQ_SetTask>
}
 800c84e:	bf00      	nop
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	0800ffa8 	.word	0x0800ffa8
 800c858:	08011230 	.word	0x08011230
 800c85c:	0800ffc8 	.word	0x0800ffc8
 800c860:	0801054c 	.word	0x0801054c

0800c864 <Mirror>:
#define COPY_CHARACTERISTIC1_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xde,0xad,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)

/* USER CODE BEGIN PF */

void Mirror(uint8_t *pPayload,uint8_t Length)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	70fb      	strb	r3, [r7, #3]
	//mirror function
	APP_DBG_MSG("\r\n\r Mirror\n");
 800c870:	4811      	ldr	r0, [pc, #68]	; (800c8b8 <Mirror+0x54>)
 800c872:	f7fe fadf 	bl	800ae34 <DbgTraceGetFileName>
 800c876:	4601      	mov	r1, r0
 800c878:	238a      	movs	r3, #138	; 0x8a
 800c87a:	4a10      	ldr	r2, [pc, #64]	; (800c8bc <Mirror+0x58>)
 800c87c:	4810      	ldr	r0, [pc, #64]	; (800c8c0 <Mirror+0x5c>)
 800c87e:	f001 fc55 	bl	800e12c <iprintf>
 800c882:	4810      	ldr	r0, [pc, #64]	; (800c8c4 <Mirror+0x60>)
 800c884:	f001 fcd8 	bl	800e238 <puts>
	pPayload[Length-1]++;//increase last byte as use case specified
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	4413      	add	r3, r2
 800c890:	781a      	ldrb	r2, [r3, #0]
 800c892:	3201      	adds	r2, #1
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]
	Custom_Characteristic2.pPayload=pPayload;
 800c898:	4a0b      	ldr	r2, [pc, #44]	; (800c8c8 <Mirror+0x64>)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6013      	str	r3, [r2, #0]
	Custom_Characteristic2.Length=Length;
 800c89e:	4a0a      	ldr	r2, [pc, #40]	; (800c8c8 <Mirror+0x64>)
 800c8a0:	78fb      	ldrb	r3, [r7, #3]
 800c8a2:	7113      	strb	r3, [r2, #4]
	Custom_Updated_Characteristic2=1;
 800c8a4:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <Mirror+0x68>)
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	601a      	str	r2, [r3, #0]
	Ask_My_Action();
 800c8aa:	f7ff ffbd 	bl	800c828 <Ask_My_Action>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	08010560 	.word	0x08010560
 800c8bc:	08011240 	.word	0x08011240
 800c8c0:	08010580 	.word	0x08010580
 800c8c4:	08010594 	.word	0x08010594
 800c8c8:	2000069c 	.word	0x2000069c
 800c8cc:	2000068c 	.word	0x2000068c

0800c8d0 <C3_NOTIFICATION>:
void C3_NOTIFICATION(uint8_t *pPayload,uint8_t Size)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	70fb      	strb	r3, [r7, #3]
	 tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800c8dc:	2392      	movs	r3, #146	; 0x92
 800c8de:	73fb      	strb	r3, [r7, #15]
//    result = aci_gatt_update_char_value(CustomContext.CustomTde_CsHdle,
//                                        CustomContext.CustomC3Hdle,
//                                        0, /* charValOffset */
//										Size, /* charValueLen */
//										Data);
	 APP_DBG_MSG("\r\n\r C3_NOTIFICATION : update char\n");
 800c8e0:	480f      	ldr	r0, [pc, #60]	; (800c920 <C3_NOTIFICATION+0x50>)
 800c8e2:	f7fe faa7 	bl	800ae34 <DbgTraceGetFileName>
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	2399      	movs	r3, #153	; 0x99
 800c8ea:	4a0e      	ldr	r2, [pc, #56]	; (800c924 <C3_NOTIFICATION+0x54>)
 800c8ec:	480e      	ldr	r0, [pc, #56]	; (800c928 <C3_NOTIFICATION+0x58>)
 800c8ee:	f001 fc1d 	bl	800e12c <iprintf>
 800c8f2:	480e      	ldr	r0, [pc, #56]	; (800c92c <C3_NOTIFICATION+0x5c>)
 800c8f4:	f001 fca0 	bl	800e238 <puts>
//		while(result != BLE_STATUS_SUCCESS)
//			{
			Custom_Characteristic1.pPayload=pPayload;
 800c8f8:	4a0d      	ldr	r2, [pc, #52]	; (800c930 <C3_NOTIFICATION+0x60>)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6013      	str	r3, [r2, #0]
			Custom_Characteristic1.Length=Size;
 800c8fe:	4a0c      	ldr	r2, [pc, #48]	; (800c930 <C3_NOTIFICATION+0x60>)
 800c900:	78fb      	ldrb	r3, [r7, #3]
 800c902:	7113      	strb	r3, [r2, #4]
			Custom_Updated_Characteristic1=1;
 800c904:	4b0b      	ldr	r3, [pc, #44]	; (800c934 <C3_NOTIFICATION+0x64>)
 800c906:	2201      	movs	r2, #1
 800c908:	601a      	str	r2, [r3, #0]
//                                         Size, /* charValueLen */
//                                         (uint8_t *)  pPayload);

    //result=Custom_STM_App_Update_Char(CUSTOM_STM_C1,Data);

    SEND_MES_BLESTATUS(result);
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7f5 feab 	bl	8002668 <SEND_MES_BLESTATUS>
    Ask_My_Action();
 800c912:	f7ff ff89 	bl	800c828 <Ask_My_Action>
//			}
}
 800c916:	bf00      	nop
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	08010560 	.word	0x08010560
 800c924:	08011248 	.word	0x08011248
 800c928:	08010580 	.word	0x08010580
 800c92c:	080105a0 	.word	0x080105a0
 800c930:	20000694 	.word	0x20000694
 800c934:	20000688 	.word	0x20000688

0800c938 <Custom_Characteristic_Send>:
tBleStatus Custom_Characteristic_Send(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload,uint8_t Length,uint8_t Offset)
{
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b087      	sub	sp, #28
 800c93c:	af02      	add	r7, sp, #8
 800c93e:	6039      	str	r1, [r7, #0]
 800c940:	4611      	mov	r1, r2
 800c942:	461a      	mov	r2, r3
 800c944:	4603      	mov	r3, r0
 800c946:	71fb      	strb	r3, [r7, #7]
 800c948:	460b      	mov	r3, r1
 800c94a:	71bb      	strb	r3, [r7, #6]
 800c94c:	4613      	mov	r3, r2
 800c94e:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800c950:	2392      	movs	r3, #146	; 0x92
 800c952:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */
  APP_DBG_MSG("\r\n\r Welcome to Custom_Characteristic_Send \n");
 800c954:	4813      	ldr	r0, [pc, #76]	; (800c9a4 <Custom_Characteristic_Send+0x6c>)
 800c956:	f7fe fa6d 	bl	800ae34 <DbgTraceGetFileName>
 800c95a:	4601      	mov	r1, r0
 800c95c:	23af      	movs	r3, #175	; 0xaf
 800c95e:	4a12      	ldr	r2, [pc, #72]	; (800c9a8 <Custom_Characteristic_Send+0x70>)
 800c960:	4812      	ldr	r0, [pc, #72]	; (800c9ac <Custom_Characteristic_Send+0x74>)
 800c962:	f001 fbe3 	bl	800e12c <iprintf>
 800c966:	4812      	ldr	r0, [pc, #72]	; (800c9b0 <Custom_Characteristic_Send+0x78>)
 800c968:	f001 fc66 	bl	800e238 <puts>
  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 800c96c:	79fb      	ldrb	r3, [r7, #7]
 800c96e:	2b06      	cmp	r3, #6
 800c970:	d111      	bne.n	800c996 <Custom_Characteristic_Send+0x5e>
  {

    case CUSTOM_STM_C1:
      result = aci_gatt_update_char_value(CustomContext.CustomTde_CsHdle,
 800c972:	4b10      	ldr	r3, [pc, #64]	; (800c9b4 <Custom_Characteristic_Send+0x7c>)
 800c974:	8a18      	ldrh	r0, [r3, #16]
 800c976:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <Custom_Characteristic_Send+0x7c>)
 800c978:	8a59      	ldrh	r1, [r3, #18]
 800c97a:	79bc      	ldrb	r4, [r7, #6]
 800c97c:	797a      	ldrb	r2, [r7, #5]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	4623      	mov	r3, r4
 800c984:	f7fc fea6 	bl	80096d4 <aci_gatt_update_char_value>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]
                                          CustomContext.CustomC1Hdle,
										  Offset, /* charValOffset */
										  Length, /* charValueLen */
                                          (uint8_t *)  pPayload);
      /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1*/
      SEND_MES_BLESTATUS(result);
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7f5 fe6a 	bl	8002668 <SEND_MES_BLESTATUS>
      /* USER CODE END CUSTOM_STM_Service_3_Char_1*/
      break;
 800c994:	e000      	b.n	800c998 <Custom_Characteristic_Send+0x60>

    default:
      break;
 800c996:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 800c998:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd90      	pop	{r4, r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	08010560 	.word	0x08010560
 800c9a8:	08011258 	.word	0x08011258
 800c9ac:	08010580 	.word	0x08010580
 800c9b0:	080105c4 	.word	0x080105c4
 800c9b4:	20000180 	.word	0x20000180

0800c9b8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b09e      	sub	sp, #120	; 0x78
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  aci_gatt_attribute_modified_event_rp0 *attribute_modified;
  aci_gatt_write_permit_req_event_rp0   *write_perm_req;
  aci_gatt_read_permit_req_event_rp0    *read_req;
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */
	  APP_DBG_MSG("\r\n\r Entry Custom_STM_Event_Handler\n");
 800c9c0:	48ab      	ldr	r0, [pc, #684]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800c9c2:	f7fe fa37 	bl	800ae34 <DbgTraceGetFileName>
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	23db      	movs	r3, #219	; 0xdb
 800c9ca:	4aaa      	ldr	r2, [pc, #680]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800c9cc:	48aa      	ldr	r0, [pc, #680]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800c9ce:	f001 fbad 	bl	800e12c <iprintf>
 800c9d2:	48aa      	ldr	r0, [pc, #680]	; (800cc7c <Custom_STM_Event_Handler+0x2c4>)
 800c9d4:	f001 fc30 	bl	800e238 <puts>
	  uint8_t My_Data_Written_Lenght;
	  uint8_t My_Data_Readen_Lenght;
	  int i;
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  switch(event_pckt->evt)
 800c9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2bff      	cmp	r3, #255	; 0xff
 800c9ea:	f040 839c 	bne.w	800d126 <Custom_STM_Event_Handler+0x76e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c9ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9f0:	3302      	adds	r3, #2
 800c9f2:	66bb      	str	r3, [r7, #104]	; 0x68
      switch(blecore_evt->ecode)
 800c9f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	f640 4214 	movw	r2, #3092	; 0xc14
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	f000 8252 	beq.w	800cea8 <Custom_STM_Event_Handler+0x4f0>
 800ca04:	f640 4214 	movw	r2, #3092	; 0xc14
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	f300 8370 	bgt.w	800d0ee <Custom_STM_Event_Handler+0x736>
 800ca0e:	f640 4201 	movw	r2, #3073	; 0xc01
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d005      	beq.n	800ca22 <Custom_STM_Event_Handler+0x6a>
 800ca16:	f640 4213 	movw	r2, #3091	; 0xc13
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	f000 828e 	beq.w	800cf3c <Custom_STM_Event_Handler+0x584>
 800ca20:	e365      	b.n	800d0ee <Custom_STM_Event_Handler+0x736>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
	        	  APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN\n");
 800ca22:	4893      	ldr	r0, [pc, #588]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800ca24:	f7fe fa06 	bl	800ae34 <DbgTraceGetFileName>
 800ca28:	4601      	mov	r1, r0
 800ca2a:	23ef      	movs	r3, #239	; 0xef
 800ca2c:	4a91      	ldr	r2, [pc, #580]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800ca2e:	4892      	ldr	r0, [pc, #584]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800ca30:	f001 fb7c 	bl	800e12c <iprintf>
 800ca34:	4892      	ldr	r0, [pc, #584]	; (800cc80 <Custom_STM_Event_Handler+0x2c8>)
 800ca36:	f001 fbff 	bl	800e238 <puts>
          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ca3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca3c:	3302      	adds	r3, #2
 800ca3e:	65bb      	str	r3, [r7, #88]	; 0x58
          if(attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ca40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca42:	885b      	ldrh	r3, [r3, #2]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	461a      	mov	r2, r3
 800ca48:	4b8e      	ldr	r3, [pc, #568]	; (800cc84 <Custom_STM_Event_Handler+0x2cc>)
 800ca4a:	889b      	ldrh	r3, [r3, #4]
 800ca4c:	3302      	adds	r3, #2
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d169      	bne.n	800cb26 <Custom_STM_Event_Handler+0x16e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ca52:	2301      	movs	r3, #1
 800ca54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2\n");
 800ca58:	4885      	ldr	r0, [pc, #532]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800ca5a:	f7fe f9eb 	bl	800ae34 <DbgTraceGetFileName>
 800ca5e:	4601      	mov	r1, r0
 800ca60:	23f6      	movs	r3, #246	; 0xf6
 800ca62:	4a84      	ldr	r2, [pc, #528]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800ca64:	4884      	ldr	r0, [pc, #528]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800ca66:	f001 fb61 	bl	800e12c <iprintf>
 800ca6a:	4887      	ldr	r0, [pc, #540]	; (800cc88 <Custom_STM_Event_Handler+0x2d0>)
 800ca6c:	f001 fbe4 	bl	800e238 <puts>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch(attribute_modified->Attr_Data[0])
 800ca70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca72:	7a1b      	ldrb	r3, [r3, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <Custom_STM_Event_Handler+0xc6>
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d023      	beq.n	800cac4 <Custom_STM_Event_Handler+0x10c>
 800ca7c:	e045      	b.n	800cb0a <Custom_STM_Event_Handler+0x152>
              /* USER CODE END CUSTOM_STM_Service_1_Char_2_attribute_modified */

              /* Disabled Notification management */
              case (!(COMSVC_Notification)):
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_Disabled_BEGIN */
					 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_Disabled_BEGIN\n");
 800ca7e:	487c      	ldr	r0, [pc, #496]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800ca80:	f7fe f9d8 	bl	800ae34 <DbgTraceGetFileName>
 800ca84:	4601      	mov	r1, r0
 800ca86:	f240 1301 	movw	r3, #257	; 0x101
 800ca8a:	4a7a      	ldr	r2, [pc, #488]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800ca8c:	487a      	ldr	r0, [pc, #488]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800ca8e:	f001 fb4d 	bl	800e12c <iprintf>
 800ca92:	487e      	ldr	r0, [pc, #504]	; (800cc8c <Custom_STM_Event_Handler+0x2d4>)
 800ca94:	f001 fbd0 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_Disabled_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800ca9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7ff fc84 	bl	800c3b0 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_Disabled_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_Disabled_END\n");
 800caa8:	4871      	ldr	r0, [pc, #452]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800caaa:	f7fe f9c3 	bl	800ae34 <DbgTraceGetFileName>
 800caae:	4601      	mov	r1, r0
 800cab0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800cab4:	4a6f      	ldr	r2, [pc, #444]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cab6:	4870      	ldr	r0, [pc, #448]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cab8:	f001 fb38 	bl	800e12c <iprintf>
 800cabc:	4874      	ldr	r0, [pc, #464]	; (800cc90 <Custom_STM_Event_Handler+0x2d8>)
 800cabe:	f001 fbbb 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_Disabled_END */
                break;
 800cac2:	e1e3      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>

              /* Enabled Notification management */
              case COMSVC_Notification:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_BEGIN\n");
 800cac4:	486a      	ldr	r0, [pc, #424]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cac6:	f7fe f9b5 	bl	800ae34 <DbgTraceGetFileName>
 800caca:	4601      	mov	r1, r0
 800cacc:	f240 130d 	movw	r3, #269	; 0x10d
 800cad0:	4a68      	ldr	r2, [pc, #416]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cad2:	4869      	ldr	r0, [pc, #420]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cad4:	f001 fb2a 	bl	800e12c <iprintf>
 800cad8:	486e      	ldr	r0, [pc, #440]	; (800cc94 <Custom_STM_Event_Handler+0x2dc>)
 800cada:	f001 fbad 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800cade:	2302      	movs	r3, #2
 800cae0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cae4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff fc61 	bl	800c3b0 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_END\n");
 800caee:	4860      	ldr	r0, [pc, #384]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800caf0:	f7fe f9a0 	bl	800ae34 <DbgTraceGetFileName>
 800caf4:	4601      	mov	r1, r0
 800caf6:	f44f 7389 	mov.w	r3, #274	; 0x112
 800cafa:	4a5e      	ldr	r2, [pc, #376]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cafc:	485e      	ldr	r0, [pc, #376]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cafe:	f001 fb15 	bl	800e12c <iprintf>
 800cb02:	4865      	ldr	r0, [pc, #404]	; (800cc98 <Custom_STM_Event_Handler+0x2e0>)
 800cb04:	f001 fb98 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_END */
                break;
 800cb08:	e1c0      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_default\n");
 800cb0a:	4859      	ldr	r0, [pc, #356]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cb0c:	f7fe f992 	bl	800ae34 <DbgTraceGetFileName>
 800cb10:	4601      	mov	r1, r0
 800cb12:	f44f 738c 	mov.w	r3, #280	; 0x118
 800cb16:	4a57      	ldr	r2, [pc, #348]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cb18:	4857      	ldr	r0, [pc, #348]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cb1a:	f001 fb07 	bl	800e12c <iprintf>
 800cb1e:	485f      	ldr	r0, [pc, #380]	; (800cc9c <Custom_STM_Event_Handler+0x2e4>)
 800cb20:	f001 fb8a 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800cb24:	e1b2      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800cb26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb28:	885b      	ldrh	r3, [r3, #2]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	4b55      	ldr	r3, [pc, #340]	; (800cc84 <Custom_STM_Event_Handler+0x2cc>)
 800cb30:	88db      	ldrh	r3, [r3, #6]
 800cb32:	3302      	adds	r3, #2
 800cb34:	429a      	cmp	r2, r3
 800cb36:	f040 80c3 	bne.w	800ccc0 <Custom_STM_Event_Handler+0x308>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3\n");
 800cb40:	484b      	ldr	r0, [pc, #300]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cb42:	f7fe f977 	bl	800ae34 <DbgTraceGetFileName>
 800cb46:	4601      	mov	r1, r0
 800cb48:	f44f 7391 	mov.w	r3, #290	; 0x122
 800cb4c:	4a49      	ldr	r2, [pc, #292]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cb4e:	484a      	ldr	r0, [pc, #296]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cb50:	f001 faec 	bl	800e12c <iprintf>
 800cb54:	4852      	ldr	r0, [pc, #328]	; (800cca0 <Custom_STM_Event_Handler+0x2e8>)
 800cb56:	f001 fb6f 	bl	800e238 <puts>

            /* USER CODE END CUSTOM_STM_Service_1_Char_3 */

            switch(attribute_modified->Attr_Data[0])
 800cb5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb5c:	7a1b      	ldrb	r3, [r3, #8]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d054      	beq.n	800cc0c <Custom_STM_Event_Handler+0x254>
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	dc75      	bgt.n	800cc52 <Custom_STM_Event_Handler+0x29a>
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <Custom_STM_Event_Handler+0x1b8>
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d02b      	beq.n	800cbc6 <Custom_STM_Event_Handler+0x20e>
 800cb6e:	e070      	b.n	800cc52 <Custom_STM_Event_Handler+0x29a>
              /* USER CODE END CUSTOM_STM_Service_1_Char_3_attribute_modified  */

              /* Disabled Notification and Indication management */
              case (!(COMSVC_Notification) | !(COMSVC_Indication)):
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_Disabled_BEGIN  */
			 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_Disabled_BEGIN\n");
 800cb70:	483f      	ldr	r0, [pc, #252]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cb72:	f7fe f95f 	bl	800ae34 <DbgTraceGetFileName>
 800cb76:	4601      	mov	r1, r0
 800cb78:	f240 132f 	movw	r3, #303	; 0x12f
 800cb7c:	4a3d      	ldr	r2, [pc, #244]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cb7e:	483e      	ldr	r0, [pc, #248]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cb80:	f001 fad4 	bl	800e12c <iprintf>
 800cb84:	4847      	ldr	r0, [pc, #284]	; (800cca4 <Custom_STM_Event_Handler+0x2ec>)
 800cb86:	f001 fb57 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_Disabled_BEGIN  */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT;
 800cb8a:	2307      	movs	r3, #7
 800cb8c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cb90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff fc0b 	bl	800c3b0 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_INDICATE_DISABLED_EVT;
 800cb9a:	2309      	movs	r3, #9
 800cb9c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cba0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff fc03 	bl	800c3b0 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_Disabled_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_Disabled_END\n");
 800cbaa:	4831      	ldr	r0, [pc, #196]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cbac:	f7fe f942 	bl	800ae34 <DbgTraceGetFileName>
 800cbb0:	4601      	mov	r1, r0
 800cbb2:	f44f 739b 	mov.w	r3, #310	; 0x136
 800cbb6:	4a2f      	ldr	r2, [pc, #188]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cbb8:	482f      	ldr	r0, [pc, #188]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cbba:	f001 fab7 	bl	800e12c <iprintf>
 800cbbe:	483a      	ldr	r0, [pc, #232]	; (800cca8 <Custom_STM_Event_Handler+0x2f0>)
 800cbc0:	f001 fb3a 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_Disabled_END */
                break;
 800cbc4:	e162      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>

              /* Enabled Notification management */
              case COMSVC_Notification:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_BEGIN\n");
 800cbc6:	482a      	ldr	r0, [pc, #168]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cbc8:	f7fe f934 	bl	800ae34 <DbgTraceGetFileName>
 800cbcc:	4601      	mov	r1, r0
 800cbce:	f240 133d 	movw	r3, #317	; 0x13d
 800cbd2:	4a28      	ldr	r2, [pc, #160]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cbd4:	4828      	ldr	r0, [pc, #160]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cbd6:	f001 faa9 	bl	800e12c <iprintf>
 800cbda:	4834      	ldr	r0, [pc, #208]	; (800ccac <Custom_STM_Event_Handler+0x2f4>)
 800cbdc:	f001 fb2c 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT;
 800cbe0:	2306      	movs	r3, #6
 800cbe2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cbe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff fbe0 	bl	800c3b0 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_END\n");
 800cbf0:	481f      	ldr	r0, [pc, #124]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cbf2:	f7fe f91f 	bl	800ae34 <DbgTraceGetFileName>
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	f44f 73a1 	mov.w	r3, #322	; 0x142
 800cbfc:	4a1d      	ldr	r2, [pc, #116]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cbfe:	481e      	ldr	r0, [pc, #120]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cc00:	f001 fa94 	bl	800e12c <iprintf>
 800cc04:	482a      	ldr	r0, [pc, #168]	; (800ccb0 <Custom_STM_Event_Handler+0x2f8>)
 800cc06:	f001 fb17 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_END */
                break;
 800cc0a:	e13f      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>

              /* Enabled Indication management */
              case COMSVC_Indication:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_BEGIN\n");
 800cc0c:	4818      	ldr	r0, [pc, #96]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cc0e:	f7fe f911 	bl	800ae34 <DbgTraceGetFileName>
 800cc12:	4601      	mov	r1, r0
 800cc14:	f240 1349 	movw	r3, #329	; 0x149
 800cc18:	4a16      	ldr	r2, [pc, #88]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cc1a:	4817      	ldr	r0, [pc, #92]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cc1c:	f001 fa86 	bl	800e12c <iprintf>
 800cc20:	4824      	ldr	r0, [pc, #144]	; (800ccb4 <Custom_STM_Event_Handler+0x2fc>)
 800cc22:	f001 fb09 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_INDICATE_ENABLED_EVT;
 800cc26:	2308      	movs	r3, #8
 800cc28:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cc2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7ff fbbd 	bl	800c3b0 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_END\n");
 800cc36:	480e      	ldr	r0, [pc, #56]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cc38:	f7fe f8fc 	bl	800ae34 <DbgTraceGetFileName>
 800cc3c:	4601      	mov	r1, r0
 800cc3e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800cc42:	4a0c      	ldr	r2, [pc, #48]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cc44:	480c      	ldr	r0, [pc, #48]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cc46:	f001 fa71 	bl	800e12c <iprintf>
 800cc4a:	481b      	ldr	r0, [pc, #108]	; (800ccb8 <Custom_STM_Event_Handler+0x300>)
 800cc4c:	f001 faf4 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_END */
                break;
 800cc50:	e11c      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_default */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_default\n");
 800cc52:	4807      	ldr	r0, [pc, #28]	; (800cc70 <Custom_STM_Event_Handler+0x2b8>)
 800cc54:	f7fe f8ee 	bl	800ae34 <DbgTraceGetFileName>
 800cc58:	4601      	mov	r1, r0
 800cc5a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800cc5e:	4a05      	ldr	r2, [pc, #20]	; (800cc74 <Custom_STM_Event_Handler+0x2bc>)
 800cc60:	4805      	ldr	r0, [pc, #20]	; (800cc78 <Custom_STM_Event_Handler+0x2c0>)
 800cc62:	f001 fa63 	bl	800e12c <iprintf>
 800cc66:	4815      	ldr	r0, [pc, #84]	; (800ccbc <Custom_STM_Event_Handler+0x304>)
 800cc68:	f001 fae6 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_default */
                break;
 800cc6c:	e10e      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
 800cc6e:	bf00      	nop
 800cc70:	08010560 	.word	0x08010560
 800cc74:	08011274 	.word	0x08011274
 800cc78:	08010580 	.word	0x08010580
 800cc7c:	080105f0 	.word	0x080105f0
 800cc80:	08010614 	.word	0x08010614
 800cc84:	20000180 	.word	0x20000180
 800cc88:	08010648 	.word	0x08010648
 800cc8c:	08010670 	.word	0x08010670
 800cc90:	080106a8 	.word	0x080106a8
 800cc94:	080106dc 	.word	0x080106dc
 800cc98:	0801071c 	.word	0x0801071c
 800cc9c:	0801075c 	.word	0x0801075c
 800cca0:	0801078c 	.word	0x0801078c
 800cca4:	080107b4 	.word	0x080107b4
 800cca8:	080107ec 	.word	0x080107ec
 800ccac:	08010820 	.word	0x08010820
 800ccb0:	08010860 	.word	0x08010860
 800ccb4:	080108a0 	.word	0x080108a0
 800ccb8:	080108e0 	.word	0x080108e0
 800ccbc:	0801091c 	.word	0x0801091c
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ccc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccc2:	885b      	ldrh	r3, [r3, #2]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	4bb1      	ldr	r3, [pc, #708]	; (800cf90 <Custom_STM_Event_Handler+0x5d8>)
 800ccca:	895b      	ldrh	r3, [r3, #10]
 800cccc:	3302      	adds	r3, #2
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d16a      	bne.n	800cda8 <Custom_STM_Event_Handler+0x3f0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1\n");
 800ccd8:	48ae      	ldr	r0, [pc, #696]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800ccda:	f7fe f8ab 	bl	800ae34 <DbgTraceGetFileName>
 800ccde:	4601      	mov	r1, r0
 800cce0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800cce4:	4aac      	ldr	r2, [pc, #688]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cce6:	48ad      	ldr	r0, [pc, #692]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cce8:	f001 fa20 	bl	800e12c <iprintf>
 800ccec:	48ac      	ldr	r0, [pc, #688]	; (800cfa0 <Custom_STM_Event_Handler+0x5e8>)
 800ccee:	f001 faa3 	bl	800e238 <puts>
            /* USER CODE END CUSTOM_STM_Service_2_Char_1 */
            switch(attribute_modified->Attr_Data[0])
 800ccf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccf4:	7a1b      	ldrb	r3, [r3, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <Custom_STM_Event_Handler+0x348>
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d023      	beq.n	800cd46 <Custom_STM_Event_Handler+0x38e>
 800ccfe:	e045      	b.n	800cd8c <Custom_STM_Event_Handler+0x3d4>
              /* USER CODE END CUSTOM_STM_Service_2_Char_1_attribute_modified */

              /* Disabled Notification management */
              case (!(COMSVC_Notification)):
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_Disabled_BEGIN */
					 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_Disabled_BEGIN\n");
 800cd00:	48a4      	ldr	r0, [pc, #656]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cd02:	f7fe f897 	bl	800ae34 <DbgTraceGetFileName>
 800cd06:	4601      	mov	r1, r0
 800cd08:	f240 1369 	movw	r3, #361	; 0x169
 800cd0c:	4aa2      	ldr	r2, [pc, #648]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cd0e:	48a3      	ldr	r0, [pc, #652]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cd10:	f001 fa0c 	bl	800e12c <iprintf>
 800cd14:	48a3      	ldr	r0, [pc, #652]	; (800cfa4 <Custom_STM_Event_Handler+0x5ec>)
 800cd16:	f001 fa8f 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_Disabled_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT;
 800cd1a:	230b      	movs	r3, #11
 800cd1c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cd20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7ff fb43 	bl	800c3b0 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_Disabled_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_Disabled_END\n");
 800cd2a:	489a      	ldr	r0, [pc, #616]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cd2c:	f7fe f882 	bl	800ae34 <DbgTraceGetFileName>
 800cd30:	4601      	mov	r1, r0
 800cd32:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800cd36:	4a98      	ldr	r2, [pc, #608]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cd38:	4898      	ldr	r0, [pc, #608]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cd3a:	f001 f9f7 	bl	800e12c <iprintf>
 800cd3e:	489a      	ldr	r0, [pc, #616]	; (800cfa8 <Custom_STM_Event_Handler+0x5f0>)
 800cd40:	f001 fa7a 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_Disabled_END */
                break;
 800cd44:	e0a2      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>

              /* Enabled Notification management */
              case COMSVC_Notification:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_BEGIN\n");
 800cd46:	4893      	ldr	r0, [pc, #588]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cd48:	f7fe f874 	bl	800ae34 <DbgTraceGetFileName>
 800cd4c:	4601      	mov	r1, r0
 800cd4e:	f240 1375 	movw	r3, #373	; 0x175
 800cd52:	4a91      	ldr	r2, [pc, #580]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cd54:	4891      	ldr	r0, [pc, #580]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cd56:	f001 f9e9 	bl	800e12c <iprintf>
 800cd5a:	4894      	ldr	r0, [pc, #592]	; (800cfac <Custom_STM_Event_Handler+0x5f4>)
 800cd5c:	f001 fa6c 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT;
 800cd60:	230a      	movs	r3, #10
 800cd62:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cd66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff fb20 	bl	800c3b0 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_END\n");
 800cd70:	4888      	ldr	r0, [pc, #544]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cd72:	f7fe f85f 	bl	800ae34 <DbgTraceGetFileName>
 800cd76:	4601      	mov	r1, r0
 800cd78:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 800cd7c:	4a86      	ldr	r2, [pc, #536]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cd7e:	4887      	ldr	r0, [pc, #540]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cd80:	f001 f9d4 	bl	800e12c <iprintf>
 800cd84:	488a      	ldr	r0, [pc, #552]	; (800cfb0 <Custom_STM_Event_Handler+0x5f8>)
 800cd86:	f001 fa57 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_END */
                break;
 800cd8a:	e07f      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_default */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_default\n");
 800cd8c:	4881      	ldr	r0, [pc, #516]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cd8e:	f7fe f851 	bl	800ae34 <DbgTraceGetFileName>
 800cd92:	4601      	mov	r1, r0
 800cd94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800cd98:	4a7f      	ldr	r2, [pc, #508]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cd9a:	4880      	ldr	r0, [pc, #512]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cd9c:	f001 f9c6 	bl	800e12c <iprintf>
 800cda0:	4884      	ldr	r0, [pc, #528]	; (800cfb4 <Custom_STM_Event_Handler+0x5fc>)
 800cda2:	f001 fa49 	bl	800e238 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_default */
              break;
 800cda6:	e071      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800cda8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdaa:	885b      	ldrh	r3, [r3, #2]
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	461a      	mov	r2, r3
 800cdb0:	4b77      	ldr	r3, [pc, #476]	; (800cf90 <Custom_STM_Event_Handler+0x5d8>)
 800cdb2:	8a5b      	ldrh	r3, [r3, #18]
 800cdb4:	3302      	adds	r3, #2
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d11b      	bne.n	800cdf2 <Custom_STM_Event_Handler+0x43a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1 */
            /* USER CODE END CUSTOM_STM_Service_3_Char_1 */
            switch(attribute_modified->Attr_Data[0])
 800cdc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdc2:	7a1b      	ldrb	r3, [r3, #8]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <Custom_STM_Event_Handler+0x416>
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d009      	beq.n	800cde0 <Custom_STM_Event_Handler+0x428>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_3_Char_1_default */
              break;
 800cdcc:	e05e      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C1_NOTIFY_DISABLED_EVT;
 800cdce:	2310      	movs	r3, #16
 800cdd0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cdd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff fae9 	bl	800c3b0 <Custom_STM_App_Notification>
                break;
 800cdde:	e055      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C1_NOTIFY_ENABLED_EVT;
 800cde0:	230f      	movs	r3, #15
 800cde2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800cde6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff fae0 	bl	800c3b0 <Custom_STM_App_Notification>
                break;
 800cdf0:	e04c      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cdf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf4:	885b      	ldrh	r3, [r3, #2]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	4b65      	ldr	r3, [pc, #404]	; (800cf90 <Custom_STM_Event_Handler+0x5d8>)
 800cdfc:	885b      	ldrh	r3, [r3, #2]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d110      	bne.n	800ce26 <Custom_STM_Event_Handler+0x46e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ce04:	2301      	movs	r3, #1
 800ce06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE\n");
 800ce0a:	4862      	ldr	r0, [pc, #392]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800ce0c:	f7fe f812 	bl	800ae34 <DbgTraceGetFileName>
 800ce10:	4601      	mov	r1, r0
 800ce12:	f240 13b5 	movw	r3, #437	; 0x1b5
 800ce16:	4a60      	ldr	r2, [pc, #384]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800ce18:	4860      	ldr	r0, [pc, #384]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800ce1a:	f001 f987 	bl	800e12c <iprintf>
 800ce1e:	4866      	ldr	r0, [pc, #408]	; (800cfb8 <Custom_STM_Event_Handler+0x600>)
 800ce20:	f001 fa0a 	bl	800e238 <puts>
 800ce24:	e032      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ce26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce28:	885b      	ldrh	r3, [r3, #2]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	4b58      	ldr	r3, [pc, #352]	; (800cf90 <Custom_STM_Event_Handler+0x5d8>)
 800ce30:	88db      	ldrh	r3, [r3, #6]
 800ce32:	3301      	adds	r3, #1
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d110      	bne.n	800ce5a <Custom_STM_Event_Handler+0x4a2>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE\n");
 800ce3e:	4855      	ldr	r0, [pc, #340]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800ce40:	f7fd fff8 	bl	800ae34 <DbgTraceGetFileName>
 800ce44:	4601      	mov	r1, r0
 800ce46:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800ce4a:	4a53      	ldr	r2, [pc, #332]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800ce4c:	4853      	ldr	r0, [pc, #332]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800ce4e:	f001 f96d 	bl	800e12c <iprintf>
 800ce52:	485a      	ldr	r0, [pc, #360]	; (800cfbc <Custom_STM_Event_Handler+0x604>)
 800ce54:	f001 f9f0 	bl	800e238 <puts>
 800ce58:	e018      	b.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ce5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce5c:	885b      	ldrh	r3, [r3, #2]
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b4b      	ldr	r3, [pc, #300]	; (800cf90 <Custom_STM_Event_Handler+0x5d8>)
 800ce64:	8a5b      	ldrh	r3, [r3, #18]
 800ce66:	3301      	adds	r3, #1
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d10f      	bne.n	800ce8c <Custom_STM_Event_Handler+0x4d4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE\n");
 800ce72:	4848      	ldr	r0, [pc, #288]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800ce74:	f7fd ffde 	bl	800ae34 <DbgTraceGetFileName>
 800ce78:	4601      	mov	r1, r0
 800ce7a:	f240 13c3 	movw	r3, #451	; 0x1c3
 800ce7e:	4a46      	ldr	r2, [pc, #280]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800ce80:	4846      	ldr	r0, [pc, #280]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800ce82:	f001 f953 	bl	800e12c <iprintf>
 800ce86:	484e      	ldr	r0, [pc, #312]	; (800cfc0 <Custom_STM_Event_Handler+0x608>)
 800ce88:	f001 f9d6 	bl	800e238 <puts>
            /* USER CODE END CUSTOM_STM_Service_3_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
	          APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END\n");
 800ce8c:	4841      	ldr	r0, [pc, #260]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800ce8e:	f7fd ffd1 	bl	800ae34 <DbgTraceGetFileName>
 800ce92:	4601      	mov	r1, r0
 800ce94:	f240 13c7 	movw	r3, #455	; 0x1c7
 800ce98:	4a3f      	ldr	r2, [pc, #252]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800ce9a:	4840      	ldr	r0, [pc, #256]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800ce9c:	f001 f946 	bl	800e12c <iprintf>
 800cea0:	4848      	ldr	r0, [pc, #288]	; (800cfc4 <Custom_STM_Event_Handler+0x60c>)
 800cea2:	f001 f9c9 	bl	800e238 <puts>
          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800cea6:	e130      	b.n	800d10a <Custom_STM_Event_Handler+0x752>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
	        	 APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN\n");
 800cea8:	483a      	ldr	r0, [pc, #232]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800ceaa:	f7fd ffc3 	bl	800ae34 <DbgTraceGetFileName>
 800ceae:	4601      	mov	r1, r0
 800ceb0:	f240 13cd 	movw	r3, #461	; 0x1cd
 800ceb4:	4a38      	ldr	r2, [pc, #224]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800ceb6:	4839      	ldr	r0, [pc, #228]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800ceb8:	f001 f938 	bl	800e12c <iprintf>
 800cebc:	4842      	ldr	r0, [pc, #264]	; (800cfc8 <Custom_STM_Event_Handler+0x610>)
 800cebe:	f001 f9bb 	bl	800e238 <puts>
          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800cec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cec4:	3302      	adds	r3, #2
 800cec6:	667b      	str	r3, [r7, #100]	; 0x64
          if(read_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceca:	885b      	ldrh	r3, [r3, #2]
 800cecc:	b29b      	uxth	r3, r3
 800cece:	461a      	mov	r2, r3
 800ced0:	4b2f      	ldr	r3, [pc, #188]	; (800cf90 <Custom_STM_Event_Handler+0x5d8>)
 800ced2:	88db      	ldrh	r3, [r3, #6]
 800ced4:	3301      	adds	r3, #1
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d122      	bne.n	800cf20 <Custom_STM_Event_Handler+0x568>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ceda:	2301      	movs	r3, #1
 800cedc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1\n");
 800cee0:	482c      	ldr	r0, [pc, #176]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cee2:	f7fd ffa7 	bl	800ae34 <DbgTraceGetFileName>
 800cee6:	4601      	mov	r1, r0
 800cee8:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 800ceec:	4a2a      	ldr	r2, [pc, #168]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800ceee:	482b      	ldr	r0, [pc, #172]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cef0:	f001 f91c 	bl	800e12c <iprintf>
 800cef4:	4835      	ldr	r0, [pc, #212]	; (800cfcc <Custom_STM_Event_Handler+0x614>)
 800cef6:	f001 f99f 	bl	800e238 <puts>
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800cefa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fc fc90 	bl	8009826 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2\n");
 800cf06:	4823      	ldr	r0, [pc, #140]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cf08:	f7fd ff94 	bl	800ae34 <DbgTraceGetFileName>
 800cf0c:	4601      	mov	r1, r0
 800cf0e:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 800cf12:	4a21      	ldr	r2, [pc, #132]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cf14:	4821      	ldr	r0, [pc, #132]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cf16:	f001 f909 	bl	800e12c <iprintf>
 800cf1a:	482d      	ldr	r0, [pc, #180]	; (800cfd0 <Custom_STM_Event_Handler+0x618>)
 800cf1c:	f001 f98c 	bl	800e238 <puts>
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if(read_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */
	          APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_READ_PERMIT_REQ_END\n");
 800cf20:	481c      	ldr	r0, [pc, #112]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cf22:	f7fd ff87 	bl	800ae34 <DbgTraceGetFileName>
 800cf26:	4601      	mov	r1, r0
 800cf28:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 800cf2c:	4a1a      	ldr	r2, [pc, #104]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cf2e:	481b      	ldr	r0, [pc, #108]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cf30:	f001 f8fc 	bl	800e12c <iprintf>
 800cf34:	4827      	ldr	r0, [pc, #156]	; (800cfd4 <Custom_STM_Event_Handler+0x61c>)
 800cf36:	f001 f97f 	bl	800e238 <puts>
          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 800cf3a:	e0e6      	b.n	800d10a <Custom_STM_Event_Handler+0x752>

        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
	        	 APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN\n");
 800cf3c:	4815      	ldr	r0, [pc, #84]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cf3e:	f7fd ff79 	bl	800ae34 <DbgTraceGetFileName>
 800cf42:	4601      	mov	r1, r0
 800cf44:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800cf48:	4a13      	ldr	r2, [pc, #76]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cf4a:	4814      	ldr	r0, [pc, #80]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cf4c:	f001 f8ee 	bl	800e12c <iprintf>
 800cf50:	4821      	ldr	r0, [pc, #132]	; (800cfd8 <Custom_STM_Event_Handler+0x620>)
 800cf52:	f001 f971 	bl	800e238 <puts>
          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800cf56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf58:	3302      	adds	r3, #2
 800cf5a:	663b      	str	r3, [r7, #96]	; 0x60
          if(write_perm_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cf5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf5e:	885b      	ldrh	r3, [r3, #2]
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	461a      	mov	r2, r3
 800cf64:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <Custom_STM_Event_Handler+0x5d8>)
 800cf66:	88db      	ldrh	r3, [r3, #6]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d138      	bne.n	800cfe0 <Custom_STM_Event_Handler+0x628>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* Allow or reject a write request from a client using aci_gatt_write_resp(...) function */
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800cf74:	4807      	ldr	r0, [pc, #28]	; (800cf94 <Custom_STM_Event_Handler+0x5dc>)
 800cf76:	f7fd ff5d 	bl	800ae34 <DbgTraceGetFileName>
 800cf7a:	4601      	mov	r1, r0
 800cf7c:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 800cf80:	4a05      	ldr	r2, [pc, #20]	; (800cf98 <Custom_STM_Event_Handler+0x5e0>)
 800cf82:	4806      	ldr	r0, [pc, #24]	; (800cf9c <Custom_STM_Event_Handler+0x5e4>)
 800cf84:	f001 f8d2 	bl	800e12c <iprintf>
 800cf88:	4814      	ldr	r0, [pc, #80]	; (800cfdc <Custom_STM_Event_Handler+0x624>)
 800cf8a:	f001 f955 	bl	800e238 <puts>
 800cf8e:	e0a0      	b.n	800d0d2 <Custom_STM_Event_Handler+0x71a>
 800cf90:	20000180 	.word	0x20000180
 800cf94:	08010560 	.word	0x08010560
 800cf98:	08011274 	.word	0x08011274
 800cf9c:	08010580 	.word	0x08010580
 800cfa0:	0801094c 	.word	0x0801094c
 800cfa4:	08010974 	.word	0x08010974
 800cfa8:	080109ac 	.word	0x080109ac
 800cfac:	080109e0 	.word	0x080109e0
 800cfb0:	08010a20 	.word	0x08010a20
 800cfb4:	08010a60 	.word	0x08010a60
 800cfb8:	08010a90 	.word	0x08010a90
 800cfbc:	08010ae0 	.word	0x08010ae0
 800cfc0:	08010b30 	.word	0x08010b30
 800cfc4:	08010b80 	.word	0x08010b80
 800cfc8:	08010bb0 	.word	0x08010bb0
 800cfcc:	08010be0 	.word	0x08010be0
 800cfd0:	08010c2c 	.word	0x08010c2c
 800cfd4:	08010c78 	.word	0x08010c78
 800cfd8:	08010ca4 	.word	0x08010ca4
 800cfdc:	08010cd4 	.word	0x08010cd4
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          else if(write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlpHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cfe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfe2:	885b      	ldrh	r3, [r3, #2]
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4b5f      	ldr	r3, [pc, #380]	; (800d168 <Custom_STM_Event_Handler+0x7b0>)
 800cfea:	89db      	ldrh	r3, [r3, #14]
 800cfec:	3301      	adds	r3, #1
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d110      	bne.n	800d014 <Custom_STM_Event_Handler+0x65c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800cff2:	2301      	movs	r3, #1
 800cff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* Allow or reject a write request from a client using aci_gatt_write_resp(...) function */
            /*USER CODE BEGIN CUSTOM_STM_Service_2_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800cff8:	485c      	ldr	r0, [pc, #368]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800cffa:	f7fd ff1b 	bl	800ae34 <DbgTraceGetFileName>
 800cffe:	4601      	mov	r1, r0
 800d000:	f240 13f3 	movw	r3, #499	; 0x1f3
 800d004:	4a5a      	ldr	r2, [pc, #360]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d006:	485b      	ldr	r0, [pc, #364]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d008:	f001 f890 	bl	800e12c <iprintf>
 800d00c:	485a      	ldr	r0, [pc, #360]	; (800d178 <Custom_STM_Event_Handler+0x7c0>)
 800d00e:	f001 f913 	bl	800e238 <puts>
 800d012:	e05e      	b.n	800d0d2 <Custom_STM_Event_Handler+0x71a>
            /*USER CODE END CUSTOM_STM_Service_2_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlpHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          else if(write_perm_req->Attribute_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800d014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d016:	885b      	ldrh	r3, [r3, #2]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	461a      	mov	r2, r3
 800d01c:	4b52      	ldr	r3, [pc, #328]	; (800d168 <Custom_STM_Event_Handler+0x7b0>)
 800d01e:	8a5b      	ldrh	r3, [r3, #18]
 800d020:	3301      	adds	r3, #1
 800d022:	429a      	cmp	r2, r3
 800d024:	d155      	bne.n	800d0d2 <Custom_STM_Event_Handler+0x71a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d026:	2301      	movs	r3, #1
 800d028:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            /* Allow or reject a write request from a client using aci_gatt_write_resp(...) function */
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_1_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800d02c:	484f      	ldr	r0, [pc, #316]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d02e:	f7fd ff01 	bl	800ae34 <DbgTraceGetFileName>
 800d032:	4601      	mov	r1, r0
 800d034:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800d038:	4a4d      	ldr	r2, [pc, #308]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d03a:	484e      	ldr	r0, [pc, #312]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d03c:	f001 f876 	bl	800e12c <iprintf>
 800d040:	484e      	ldr	r0, [pc, #312]	; (800d17c <Custom_STM_Event_Handler+0x7c4>)
 800d042:	f001 f8f9 	bl	800e238 <puts>
	            APP_DBG_MSG("\r\n\r Message :");
 800d046:	4849      	ldr	r0, [pc, #292]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d048:	f7fd fef4 	bl	800ae34 <DbgTraceGetFileName>
 800d04c:	4601      	mov	r1, r0
 800d04e:	f240 13fd 	movw	r3, #509	; 0x1fd
 800d052:	4a47      	ldr	r2, [pc, #284]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d054:	4847      	ldr	r0, [pc, #284]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d056:	f001 f869 	bl	800e12c <iprintf>
 800d05a:	4849      	ldr	r0, [pc, #292]	; (800d180 <Custom_STM_Event_Handler+0x7c8>)
 800d05c:	f001 f866 	bl	800e12c <iprintf>
	            			My_Data_Written_Lenght=write_perm_req->Data_Length;
 800d060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d062:	791b      	ldrb	r3, [r3, #4]
 800d064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	            			i=0;
 800d068:	2300      	movs	r3, #0
 800d06a:	673b      	str	r3, [r7, #112]	; 0x70
	            			while(i<My_Data_Written_Lenght)
 800d06c:	e01f      	b.n	800d0ae <Custom_STM_Event_Handler+0x6f6>
	            			{
	            				My_Data_Written[i]=write_perm_req->Data[i];
 800d06e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d072:	4413      	add	r3, r2
 800d074:	3305      	adds	r3, #5
 800d076:	7819      	ldrb	r1, [r3, #0]
 800d078:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d07c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d07e:	4413      	add	r3, r2
 800d080:	460a      	mov	r2, r1
 800d082:	701a      	strb	r2, [r3, #0]
	            				APP_DBG_MSG("%d",My_Data_Written[i++]);
 800d084:	4839      	ldr	r0, [pc, #228]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d086:	f7fd fed5 	bl	800ae34 <DbgTraceGetFileName>
 800d08a:	4601      	mov	r1, r0
 800d08c:	f240 2303 	movw	r3, #515	; 0x203
 800d090:	4a37      	ldr	r2, [pc, #220]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d092:	4838      	ldr	r0, [pc, #224]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d094:	f001 f84a 	bl	800e12c <iprintf>
 800d098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	673a      	str	r2, [r7, #112]	; 0x70
 800d09e:	3378      	adds	r3, #120	; 0x78
 800d0a0:	443b      	add	r3, r7
 800d0a2:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	4836      	ldr	r0, [pc, #216]	; (800d184 <Custom_STM_Event_Handler+0x7cc>)
 800d0aa:	f001 f83f 	bl	800e12c <iprintf>
	            			while(i<My_Data_Written_Lenght)
 800d0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	dbda      	blt.n	800d06e <Custom_STM_Event_Handler+0x6b6>
	            			}
	            			Custom_Characteristic1.pPayload=write_perm_req->Data;
 800d0b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0ba:	3305      	adds	r3, #5
 800d0bc:	4a32      	ldr	r2, [pc, #200]	; (800d188 <Custom_STM_Event_Handler+0x7d0>)
 800d0be:	6013      	str	r3, [r2, #0]
	            			Custom_Characteristic1.Length=write_perm_req->Data_Length;
 800d0c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0c2:	791a      	ldrb	r2, [r3, #4]
 800d0c4:	4b30      	ldr	r3, [pc, #192]	; (800d188 <Custom_STM_Event_Handler+0x7d0>)
 800d0c6:	711a      	strb	r2, [r3, #4]
	            			Custom_Updated_Characteristic1=1;
 800d0c8:	4b30      	ldr	r3, [pc, #192]	; (800d18c <Custom_STM_Event_Handler+0x7d4>)
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]
	            			Ask_My_Action();
 800d0ce:	f7ff fbab 	bl	800c828 <Ask_My_Action>
	            			//C3_NOTIFICATION(write_perm_req->Data,write_perm_req->Data_Length);
            /*USER CODE END CUSTOM_STM_Service_3_Char_1_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
	          APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_WRITE_PERMIT_REQ_END\n");
 800d0d2:	4826      	ldr	r0, [pc, #152]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d0d4:	f7fd feae 	bl	800ae34 <DbgTraceGetFileName>
 800d0d8:	4601      	mov	r1, r0
 800d0da:	f240 230f 	movw	r3, #527	; 0x20f
 800d0de:	4a24      	ldr	r2, [pc, #144]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d0e0:	4824      	ldr	r0, [pc, #144]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d0e2:	f001 f823 	bl	800e12c <iprintf>
 800d0e6:	482a      	ldr	r0, [pc, #168]	; (800d190 <Custom_STM_Event_Handler+0x7d8>)
 800d0e8:	f001 f8a6 	bl	800e238 <puts>
          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800d0ec:	e00d      	b.n	800d10a <Custom_STM_Event_Handler+0x752>
        /* USER CODE BEGIN BLECORE_EVT */
	          APP_DBG_MSG("\r\n\r Entry BLECORE_EVT\n");
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */
	        	 APP_DBG_MSG("\r\n\r Entry EVT_DEFAULT\n");
 800d0ee:	481f      	ldr	r0, [pc, #124]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d0f0:	f7fd fea0 	bl	800ae34 <DbgTraceGetFileName>
 800d0f4:	4601      	mov	r1, r0
 800d0f6:	f240 2317 	movw	r3, #535	; 0x217
 800d0fa:	4a1d      	ldr	r2, [pc, #116]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d0fc:	481d      	ldr	r0, [pc, #116]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d0fe:	f001 f815 	bl	800e12c <iprintf>
 800d102:	4824      	ldr	r0, [pc, #144]	; (800d194 <Custom_STM_Event_Handler+0x7dc>)
 800d104:	f001 f898 	bl	800e238 <puts>
          /* USER CODE END EVT_DEFAULT */
          break;
 800d108:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/
	      APP_DBG_MSG("\r\n\r Entry EVT_VENDOR\n");
 800d10a:	4818      	ldr	r0, [pc, #96]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d10c:	f7fd fe92 	bl	800ae34 <DbgTraceGetFileName>
 800d110:	4601      	mov	r1, r0
 800d112:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800d116:	4a16      	ldr	r2, [pc, #88]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d118:	4816      	ldr	r0, [pc, #88]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d11a:	f001 f807 	bl	800e12c <iprintf>
 800d11e:	481e      	ldr	r0, [pc, #120]	; (800d198 <Custom_STM_Event_Handler+0x7e0>)
 800d120:	f001 f88a 	bl	800e238 <puts>
      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d124:	e00d      	b.n	800d142 <Custom_STM_Event_Handler+0x78a>
	      APP_DBG_MSG("\r\n\r Entry EVENT_PCKT_CASES\n");
      /* USER CODE END EVENT_PCKT_CASES*/

    default:
      /* USER CODE BEGIN EVENT_PCKT*/
	    	 APP_DBG_MSG("\r\n\r Entry EVENT_PCKT\n");
 800d126:	4811      	ldr	r0, [pc, #68]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d128:	f7fd fe84 	bl	800ae34 <DbgTraceGetFileName>
 800d12c:	4601      	mov	r1, r0
 800d12e:	f240 2326 	movw	r3, #550	; 0x226
 800d132:	4a0f      	ldr	r2, [pc, #60]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d134:	480f      	ldr	r0, [pc, #60]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d136:	f000 fff9 	bl	800e12c <iprintf>
 800d13a:	4818      	ldr	r0, [pc, #96]	; (800d19c <Custom_STM_Event_Handler+0x7e4>)
 800d13c:	f001 f87c 	bl	800e238 <puts>
      /* USER CODE END EVENT_PCKT*/
      break;
 800d140:	bf00      	nop
  }

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */
	  APP_DBG_MSG("\r\n\r Entry Custom_STM_Event_Handler_2\n");
 800d142:	480a      	ldr	r0, [pc, #40]	; (800d16c <Custom_STM_Event_Handler+0x7b4>)
 800d144:	f7fd fe76 	bl	800ae34 <DbgTraceGetFileName>
 800d148:	4601      	mov	r1, r0
 800d14a:	f44f 730b 	mov.w	r3, #556	; 0x22c
 800d14e:	4a08      	ldr	r2, [pc, #32]	; (800d170 <Custom_STM_Event_Handler+0x7b8>)
 800d150:	4808      	ldr	r0, [pc, #32]	; (800d174 <Custom_STM_Event_Handler+0x7bc>)
 800d152:	f000 ffeb 	bl	800e12c <iprintf>
 800d156:	4812      	ldr	r0, [pc, #72]	; (800d1a0 <Custom_STM_Event_Handler+0x7e8>)
 800d158:	f001 f86e 	bl	800e238 <puts>
  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800d15c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}/* end Custom_STM_Event_Handler */
 800d160:	4618      	mov	r0, r3
 800d162:	3778      	adds	r7, #120	; 0x78
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	20000180 	.word	0x20000180
 800d16c:	08010560 	.word	0x08010560
 800d170:	08011274 	.word	0x08011274
 800d174:	08010580 	.word	0x08010580
 800d178:	08010d20 	.word	0x08010d20
 800d17c:	08010d6c 	.word	0x08010d6c
 800d180:	08010db8 	.word	0x08010db8
 800d184:	08010dc8 	.word	0x08010dc8
 800d188:	20000694 	.word	0x20000694
 800d18c:	20000688 	.word	0x20000688
 800d190:	08010dcc 	.word	0x08010dcc
 800d194:	08010dfc 	.word	0x08010dfc
 800d198:	08010e14 	.word	0x08010e14
 800d19c:	08010e2c 	.word	0x08010e2c
 800d1a0:	08010e44 	.word	0x08010e44

0800d1a4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08a      	sub	sp, #40	; 0x28
 800d1a8:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800d1aa:	48bb      	ldr	r0, [pc, #748]	; (800d498 <SVCCTL_InitCustomSvc+0x2f4>)
 800d1ac:	f7fc ffd0 	bl	800a150 <SVCCTL_RegisterSvcHandler>
   *                                1 for My_Own_Characteristic configuration descriptor +
   *                                1 for My_Own_Characteristic broadcast property +
   *                              = 10
   */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 800d1b0:	238f      	movs	r3, #143	; 0x8f
 800d1b2:	703b      	strb	r3, [r7, #0]
 800d1b4:	23e5      	movs	r3, #229	; 0xe5
 800d1b6:	707b      	strb	r3, [r7, #1]
 800d1b8:	23b3      	movs	r3, #179	; 0xb3
 800d1ba:	70bb      	strb	r3, [r7, #2]
 800d1bc:	23d5      	movs	r3, #213	; 0xd5
 800d1be:	70fb      	strb	r3, [r7, #3]
 800d1c0:	232e      	movs	r3, #46	; 0x2e
 800d1c2:	713b      	strb	r3, [r7, #4]
 800d1c4:	237f      	movs	r3, #127	; 0x7f
 800d1c6:	717b      	strb	r3, [r7, #5]
 800d1c8:	234a      	movs	r3, #74	; 0x4a
 800d1ca:	71bb      	strb	r3, [r7, #6]
 800d1cc:	2398      	movs	r3, #152	; 0x98
 800d1ce:	71fb      	strb	r3, [r7, #7]
 800d1d0:	232a      	movs	r3, #42	; 0x2a
 800d1d2:	723b      	strb	r3, [r7, #8]
 800d1d4:	2348      	movs	r3, #72	; 0x48
 800d1d6:	727b      	strb	r3, [r7, #9]
 800d1d8:	237a      	movs	r3, #122	; 0x7a
 800d1da:	72bb      	strb	r3, [r7, #10]
 800d1dc:	23cc      	movs	r3, #204	; 0xcc
 800d1de:	72fb      	strb	r3, [r7, #11]
 800d1e0:	2340      	movs	r3, #64	; 0x40
 800d1e2:	733b      	strb	r3, [r7, #12]
 800d1e4:	23fe      	movs	r3, #254	; 0xfe
 800d1e6:	737b      	strb	r3, [r7, #13]
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73bb      	strb	r3, [r7, #14]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	4baa      	ldr	r3, [pc, #680]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	230a      	movs	r3, #10
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	2002      	movs	r0, #2
 800d1fc:	f7fc f88c 	bl	8009318 <aci_gatt_add_service>
                       &(CustomContext.CustomMy_P2PsHdle));

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800d200:	2319      	movs	r3, #25
 800d202:	703b      	strb	r3, [r7, #0]
 800d204:	23ed      	movs	r3, #237	; 0xed
 800d206:	707b      	strb	r3, [r7, #1]
 800d208:	2382      	movs	r3, #130	; 0x82
 800d20a:	70bb      	strb	r3, [r7, #2]
 800d20c:	23ae      	movs	r3, #174	; 0xae
 800d20e:	70fb      	strb	r3, [r7, #3]
 800d210:	23ed      	movs	r3, #237	; 0xed
 800d212:	713b      	strb	r3, [r7, #4]
 800d214:	2321      	movs	r3, #33	; 0x21
 800d216:	717b      	strb	r3, [r7, #5]
 800d218:	234c      	movs	r3, #76	; 0x4c
 800d21a:	71bb      	strb	r3, [r7, #6]
 800d21c:	239d      	movs	r3, #157	; 0x9d
 800d21e:	71fb      	strb	r3, [r7, #7]
 800d220:	2341      	movs	r3, #65	; 0x41
 800d222:	723b      	strb	r3, [r7, #8]
 800d224:	2345      	movs	r3, #69	; 0x45
 800d226:	727b      	strb	r3, [r7, #9]
 800d228:	2322      	movs	r3, #34	; 0x22
 800d22a:	72bb      	strb	r3, [r7, #10]
 800d22c:	238e      	movs	r3, #142	; 0x8e
 800d22e:	72fb      	strb	r3, [r7, #11]
 800d230:	2341      	movs	r3, #65	; 0x41
 800d232:	733b      	strb	r3, [r7, #12]
 800d234:	23fe      	movs	r3, #254	; 0xfe
 800d236:	737b      	strb	r3, [r7, #13]
 800d238:	2300      	movs	r3, #0
 800d23a:	73bb      	strb	r3, [r7, #14]
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800d240:	4b96      	ldr	r3, [pc, #600]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d242:	8818      	ldrh	r0, [r3, #0]
 800d244:	2302      	movs	r3, #2
 800d246:	b29b      	uxth	r3, r3
 800d248:	463a      	mov	r2, r7
 800d24a:	4995      	ldr	r1, [pc, #596]	; (800d4a0 <SVCCTL_InitCustomSvc+0x2fc>)
 800d24c:	9105      	str	r1, [sp, #20]
 800d24e:	2101      	movs	r1, #1
 800d250:	9104      	str	r1, [sp, #16]
 800d252:	2110      	movs	r1, #16
 800d254:	9103      	str	r1, [sp, #12]
 800d256:	2101      	movs	r1, #1
 800d258:	9102      	str	r1, [sp, #8]
 800d25a:	2100      	movs	r1, #0
 800d25c:	9101      	str	r1, [sp, #4]
 800d25e:	2106      	movs	r1, #6
 800d260:	9100      	str	r1, [sp, #0]
 800d262:	2102      	movs	r1, #2
 800d264:	f7fc f92e 	bl	80094c4 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomLed_CHdle));
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 800d268:	2319      	movs	r3, #25
 800d26a:	703b      	strb	r3, [r7, #0]
 800d26c:	23ed      	movs	r3, #237	; 0xed
 800d26e:	707b      	strb	r3, [r7, #1]
 800d270:	2382      	movs	r3, #130	; 0x82
 800d272:	70bb      	strb	r3, [r7, #2]
 800d274:	23ae      	movs	r3, #174	; 0xae
 800d276:	70fb      	strb	r3, [r7, #3]
 800d278:	23ed      	movs	r3, #237	; 0xed
 800d27a:	713b      	strb	r3, [r7, #4]
 800d27c:	2321      	movs	r3, #33	; 0x21
 800d27e:	717b      	strb	r3, [r7, #5]
 800d280:	234c      	movs	r3, #76	; 0x4c
 800d282:	71bb      	strb	r3, [r7, #6]
 800d284:	239d      	movs	r3, #157	; 0x9d
 800d286:	71fb      	strb	r3, [r7, #7]
 800d288:	2341      	movs	r3, #65	; 0x41
 800d28a:	723b      	strb	r3, [r7, #8]
 800d28c:	2345      	movs	r3, #69	; 0x45
 800d28e:	727b      	strb	r3, [r7, #9]
 800d290:	2322      	movs	r3, #34	; 0x22
 800d292:	72bb      	strb	r3, [r7, #10]
 800d294:	238e      	movs	r3, #142	; 0x8e
 800d296:	72fb      	strb	r3, [r7, #11]
 800d298:	2342      	movs	r3, #66	; 0x42
 800d29a:	733b      	strb	r3, [r7, #12]
 800d29c:	23fe      	movs	r3, #254	; 0xfe
 800d29e:	737b      	strb	r3, [r7, #13]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	73bb      	strb	r3, [r7, #14]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800d2a8:	4b7c      	ldr	r3, [pc, #496]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d2aa:	8818      	ldrh	r0, [r3, #0]
 800d2ac:	2302      	movs	r3, #2
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	463a      	mov	r2, r7
 800d2b2:	497c      	ldr	r1, [pc, #496]	; (800d4a4 <SVCCTL_InitCustomSvc+0x300>)
 800d2b4:	9105      	str	r1, [sp, #20]
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	9104      	str	r1, [sp, #16]
 800d2ba:	2110      	movs	r1, #16
 800d2bc:	9103      	str	r1, [sp, #12]
 800d2be:	2107      	movs	r1, #7
 800d2c0:	9102      	str	r1, [sp, #8]
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	9101      	str	r1, [sp, #4]
 800d2c6:	2110      	movs	r1, #16
 800d2c8:	9100      	str	r1, [sp, #0]
 800d2ca:	2102      	movs	r1, #2
 800d2cc:	f7fc f8fa 	bl	80094c4 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomSwitch_CHdle));
  /**
   *  My_Own_Characteristic
   */
  COPY_MY_OWN_CHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800d2d0:	2319      	movs	r3, #25
 800d2d2:	703b      	strb	r3, [r7, #0]
 800d2d4:	23ed      	movs	r3, #237	; 0xed
 800d2d6:	707b      	strb	r3, [r7, #1]
 800d2d8:	2382      	movs	r3, #130	; 0x82
 800d2da:	70bb      	strb	r3, [r7, #2]
 800d2dc:	23ae      	movs	r3, #174	; 0xae
 800d2de:	70fb      	strb	r3, [r7, #3]
 800d2e0:	23ed      	movs	r3, #237	; 0xed
 800d2e2:	713b      	strb	r3, [r7, #4]
 800d2e4:	2321      	movs	r3, #33	; 0x21
 800d2e6:	717b      	strb	r3, [r7, #5]
 800d2e8:	234c      	movs	r3, #76	; 0x4c
 800d2ea:	71bb      	strb	r3, [r7, #6]
 800d2ec:	239d      	movs	r3, #157	; 0x9d
 800d2ee:	71fb      	strb	r3, [r7, #7]
 800d2f0:	2341      	movs	r3, #65	; 0x41
 800d2f2:	723b      	strb	r3, [r7, #8]
 800d2f4:	2345      	movs	r3, #69	; 0x45
 800d2f6:	727b      	strb	r3, [r7, #9]
 800d2f8:	2322      	movs	r3, #34	; 0x22
 800d2fa:	72bb      	strb	r3, [r7, #10]
 800d2fc:	238e      	movs	r3, #142	; 0x8e
 800d2fe:	72fb      	strb	r3, [r7, #11]
 800d300:	23cd      	movs	r3, #205	; 0xcd
 800d302:	733b      	strb	r3, [r7, #12]
 800d304:	23ab      	movs	r3, #171	; 0xab
 800d306:	737b      	strb	r3, [r7, #13]
 800d308:	2300      	movs	r3, #0
 800d30a:	73bb      	strb	r3, [r7, #14]
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800d310:	4b62      	ldr	r3, [pc, #392]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d312:	8818      	ldrh	r0, [r3, #0]
 800d314:	2314      	movs	r3, #20
 800d316:	b29b      	uxth	r3, r3
 800d318:	463a      	mov	r2, r7
 800d31a:	4963      	ldr	r1, [pc, #396]	; (800d4a8 <SVCCTL_InitCustomSvc+0x304>)
 800d31c:	9105      	str	r1, [sp, #20]
 800d31e:	2101      	movs	r1, #1
 800d320:	9104      	str	r1, [sp, #16]
 800d322:	2110      	movs	r1, #16
 800d324:	9103      	str	r1, [sp, #12]
 800d326:	2107      	movs	r1, #7
 800d328:	9102      	str	r1, [sp, #8]
 800d32a:	2100      	movs	r1, #0
 800d32c:	9101      	str	r1, [sp, #4]
 800d32e:	2137      	movs	r1, #55	; 0x37
 800d330:	9100      	str	r1, [sp, #0]
 800d332:	2102      	movs	r1, #2
 800d334:	f7fc f8c6 	bl	80094c4 <aci_gatt_add_char>
   *                                2 for My_HRS_CTRL_Point +
   *                                1 for My_HRS_Meas configuration descriptor +
   *                              = 8
   */

  uuid.Char_UUID_16 = 0x180d;
 800d338:	f641 030d 	movw	r3, #6157	; 0x180d
 800d33c:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_service(UUID_TYPE_16,
 800d33e:	4639      	mov	r1, r7
 800d340:	4b5a      	ldr	r3, [pc, #360]	; (800d4ac <SVCCTL_InitCustomSvc+0x308>)
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	2308      	movs	r3, #8
 800d346:	2201      	movs	r2, #1
 800d348:	2001      	movs	r0, #1
 800d34a:	f7fb ffe5 	bl	8009318 <aci_gatt_add_service>
                       &(CustomContext.CustomMy_HrsHdle));

  /**
   *  My_HRS_Meas
   */
  uuid.Char_UUID_16 = 0x2a37;
 800d34e:	f642 2337 	movw	r3, #10807	; 0x2a37
 800d352:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800d354:	4b51      	ldr	r3, [pc, #324]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d356:	8918      	ldrh	r0, [r3, #8]
 800d358:	2305      	movs	r3, #5
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	463a      	mov	r2, r7
 800d35e:	4954      	ldr	r1, [pc, #336]	; (800d4b0 <SVCCTL_InitCustomSvc+0x30c>)
 800d360:	9105      	str	r1, [sp, #20]
 800d362:	2101      	movs	r1, #1
 800d364:	9104      	str	r1, [sp, #16]
 800d366:	2110      	movs	r1, #16
 800d368:	9103      	str	r1, [sp, #12]
 800d36a:	2100      	movs	r1, #0
 800d36c:	9102      	str	r1, [sp, #8]
 800d36e:	2100      	movs	r1, #0
 800d370:	9101      	str	r1, [sp, #4]
 800d372:	2110      	movs	r1, #16
 800d374:	9100      	str	r1, [sp, #0]
 800d376:	2101      	movs	r1, #1
 800d378:	f7fc f8a4 	bl	80094c4 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomHrs_MHdle));
  /**
   *  My_Sensor_Loc
   */
  uuid.Char_UUID_16 = 0x2a38;
 800d37c:	f642 2338 	movw	r3, #10808	; 0x2a38
 800d380:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800d382:	4b46      	ldr	r3, [pc, #280]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d384:	8918      	ldrh	r0, [r3, #8]
 800d386:	2301      	movs	r3, #1
 800d388:	b29b      	uxth	r3, r3
 800d38a:	463a      	mov	r2, r7
 800d38c:	4949      	ldr	r1, [pc, #292]	; (800d4b4 <SVCCTL_InitCustomSvc+0x310>)
 800d38e:	9105      	str	r1, [sp, #20]
 800d390:	2100      	movs	r1, #0
 800d392:	9104      	str	r1, [sp, #16]
 800d394:	2110      	movs	r1, #16
 800d396:	9103      	str	r1, [sp, #12]
 800d398:	2100      	movs	r1, #0
 800d39a:	9102      	str	r1, [sp, #8]
 800d39c:	2100      	movs	r1, #0
 800d39e:	9101      	str	r1, [sp, #4]
 800d3a0:	2102      	movs	r1, #2
 800d3a2:	9100      	str	r1, [sp, #0]
 800d3a4:	2101      	movs	r1, #1
 800d3a6:	f7fc f88d 	bl	80094c4 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomHrs_SlHdle));
  /**
   *  My_HRS_CTRL_Point
   */
  uuid.Char_UUID_16 = 0x2a39;
 800d3aa:	f642 2339 	movw	r3, #10809	; 0x2a39
 800d3ae:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800d3b0:	4b3a      	ldr	r3, [pc, #232]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d3b2:	8918      	ldrh	r0, [r3, #8]
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	463a      	mov	r2, r7
 800d3ba:	493f      	ldr	r1, [pc, #252]	; (800d4b8 <SVCCTL_InitCustomSvc+0x314>)
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	2100      	movs	r1, #0
 800d3c0:	9104      	str	r1, [sp, #16]
 800d3c2:	2110      	movs	r1, #16
 800d3c4:	9103      	str	r1, [sp, #12]
 800d3c6:	2102      	movs	r1, #2
 800d3c8:	9102      	str	r1, [sp, #8]
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	9101      	str	r1, [sp, #4]
 800d3ce:	2108      	movs	r1, #8
 800d3d0:	9100      	str	r1, [sp, #0]
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	f7fc f876 	bl	80094c4 <aci_gatt_add_char>
   *                                2 for Characteristic1 +
   *                                1 for Characteristic1 configuration descriptor +
   *                              = 4
   */

  COPY_CSCB_SERVICE_UUID(uuid.Char_UUID_128);
 800d3d8:	238f      	movs	r3, #143	; 0x8f
 800d3da:	703b      	strb	r3, [r7, #0]
 800d3dc:	23e5      	movs	r3, #229	; 0xe5
 800d3de:	707b      	strb	r3, [r7, #1]
 800d3e0:	23b3      	movs	r3, #179	; 0xb3
 800d3e2:	70bb      	strb	r3, [r7, #2]
 800d3e4:	23d5      	movs	r3, #213	; 0xd5
 800d3e6:	70fb      	strb	r3, [r7, #3]
 800d3e8:	232e      	movs	r3, #46	; 0x2e
 800d3ea:	713b      	strb	r3, [r7, #4]
 800d3ec:	237f      	movs	r3, #127	; 0x7f
 800d3ee:	717b      	strb	r3, [r7, #5]
 800d3f0:	234a      	movs	r3, #74	; 0x4a
 800d3f2:	71bb      	strb	r3, [r7, #6]
 800d3f4:	2398      	movs	r3, #152	; 0x98
 800d3f6:	71fb      	strb	r3, [r7, #7]
 800d3f8:	232a      	movs	r3, #42	; 0x2a
 800d3fa:	723b      	strb	r3, [r7, #8]
 800d3fc:	2348      	movs	r3, #72	; 0x48
 800d3fe:	727b      	strb	r3, [r7, #9]
 800d400:	237a      	movs	r3, #122	; 0x7a
 800d402:	72bb      	strb	r3, [r7, #10]
 800d404:	23cc      	movs	r3, #204	; 0xcc
 800d406:	72fb      	strb	r3, [r7, #11]
 800d408:	2334      	movs	r3, #52	; 0x34
 800d40a:	733b      	strb	r3, [r7, #12]
 800d40c:	2312      	movs	r3, #18
 800d40e:	737b      	strb	r3, [r7, #13]
 800d410:	2300      	movs	r3, #0
 800d412:	73bb      	strb	r3, [r7, #14]
 800d414:	2300      	movs	r3, #0
 800d416:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 800d418:	4639      	mov	r1, r7
 800d41a:	4b28      	ldr	r3, [pc, #160]	; (800d4bc <SVCCTL_InitCustomSvc+0x318>)
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	2304      	movs	r3, #4
 800d420:	2201      	movs	r2, #1
 800d422:	2002      	movs	r0, #2
 800d424:	f7fb ff78 	bl	8009318 <aci_gatt_add_service>
                       &(CustomContext.CustomTde_CsHdle));

  /**
   *  Characteristic1
   */
  COPY_CHARACTERISTIC1_UUID(uuid.Char_UUID_128);
 800d428:	2319      	movs	r3, #25
 800d42a:	703b      	strb	r3, [r7, #0]
 800d42c:	23ed      	movs	r3, #237	; 0xed
 800d42e:	707b      	strb	r3, [r7, #1]
 800d430:	2382      	movs	r3, #130	; 0x82
 800d432:	70bb      	strb	r3, [r7, #2]
 800d434:	23ae      	movs	r3, #174	; 0xae
 800d436:	70fb      	strb	r3, [r7, #3]
 800d438:	23ed      	movs	r3, #237	; 0xed
 800d43a:	713b      	strb	r3, [r7, #4]
 800d43c:	2321      	movs	r3, #33	; 0x21
 800d43e:	717b      	strb	r3, [r7, #5]
 800d440:	234c      	movs	r3, #76	; 0x4c
 800d442:	71bb      	strb	r3, [r7, #6]
 800d444:	239d      	movs	r3, #157	; 0x9d
 800d446:	71fb      	strb	r3, [r7, #7]
 800d448:	2341      	movs	r3, #65	; 0x41
 800d44a:	723b      	strb	r3, [r7, #8]
 800d44c:	2345      	movs	r3, #69	; 0x45
 800d44e:	727b      	strb	r3, [r7, #9]
 800d450:	2322      	movs	r3, #34	; 0x22
 800d452:	72bb      	strb	r3, [r7, #10]
 800d454:	238e      	movs	r3, #142	; 0x8e
 800d456:	72fb      	strb	r3, [r7, #11]
 800d458:	23ad      	movs	r3, #173	; 0xad
 800d45a:	733b      	strb	r3, [r7, #12]
 800d45c:	23de      	movs	r3, #222	; 0xde
 800d45e:	737b      	strb	r3, [r7, #13]
 800d460:	2300      	movs	r3, #0
 800d462:	73bb      	strb	r3, [r7, #14]
 800d464:	2300      	movs	r3, #0
 800d466:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomTde_CsHdle,
 800d468:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <SVCCTL_InitCustomSvc+0x2f8>)
 800d46a:	8a18      	ldrh	r0, [r3, #16]
 800d46c:	2314      	movs	r3, #20
 800d46e:	b29b      	uxth	r3, r3
 800d470:	463a      	mov	r2, r7
 800d472:	4913      	ldr	r1, [pc, #76]	; (800d4c0 <SVCCTL_InitCustomSvc+0x31c>)
 800d474:	9105      	str	r1, [sp, #20]
 800d476:	2101      	movs	r1, #1
 800d478:	9104      	str	r1, [sp, #16]
 800d47a:	2110      	movs	r1, #16
 800d47c:	9103      	str	r1, [sp, #12]
 800d47e:	2107      	movs	r1, #7
 800d480:	9102      	str	r1, [sp, #8]
 800d482:	2100      	movs	r1, #0
 800d484:	9101      	str	r1, [sp, #4]
 800d486:	2114      	movs	r1, #20
 800d488:	9100      	str	r1, [sp, #0]
 800d48a:	2102      	movs	r1, #2
 800d48c:	f7fc f81a 	bl	80094c4 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800d490:	bf00      	nop
}
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	0800c9b9 	.word	0x0800c9b9
 800d49c:	20000180 	.word	0x20000180
 800d4a0:	20000182 	.word	0x20000182
 800d4a4:	20000184 	.word	0x20000184
 800d4a8:	20000186 	.word	0x20000186
 800d4ac:	20000188 	.word	0x20000188
 800d4b0:	2000018a 	.word	0x2000018a
 800d4b4:	2000018c 	.word	0x2000018c
 800d4b8:	2000018e 	.word	0x2000018e
 800d4bc:	20000190 	.word	0x20000190
 800d4c0:	20000192 	.word	0x20000192

0800d4c4 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d006      	beq.n	800d4e2 <P2PS_STM_App_Notification+0x1e>
 800d4d4:	2b03      	cmp	r3, #3
 800d4d6:	dc22      	bgt.n	800d51e <P2PS_STM_App_Notification+0x5a>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d022      	beq.n	800d522 <P2PS_STM_App_Notification+0x5e>
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d022      	beq.n	800d526 <P2PS_STM_App_Notification+0x62>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800d4e0:	e01d      	b.n	800d51e <P2PS_STM_App_Notification+0x5a>
    	APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n",pNotification->DataTransfered.pPayload[0],pNotification->DataTransfered.pPayload[1]);
 800d4e2:	4813      	ldr	r0, [pc, #76]	; (800d530 <P2PS_STM_App_Notification+0x6c>)
 800d4e4:	f7fd fca6 	bl	800ae34 <DbgTraceGetFileName>
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	2355      	movs	r3, #85	; 0x55
 800d4ec:	4a11      	ldr	r2, [pc, #68]	; (800d534 <P2PS_STM_App_Notification+0x70>)
 800d4ee:	4812      	ldr	r0, [pc, #72]	; (800d538 <P2PS_STM_App_Notification+0x74>)
 800d4f0:	f000 fe1c 	bl	800e12c <iprintf>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	3301      	adds	r3, #1
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	461a      	mov	r2, r3
 800d506:	480d      	ldr	r0, [pc, #52]	; (800d53c <P2PS_STM_App_Notification+0x78>)
 800d508:	f000 fe10 	bl	800e12c <iprintf>
    	Mirror(pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	7a1b      	ldrb	r3, [r3, #8]
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	f7ff f9a4 	bl	800c864 <Mirror>
      break;
 800d51c:	e004      	b.n	800d528 <P2PS_STM_App_Notification+0x64>
      break;
 800d51e:	bf00      	nop
 800d520:	e002      	b.n	800d528 <P2PS_STM_App_Notification+0x64>
      break;
 800d522:	bf00      	nop
 800d524:	e000      	b.n	800d528 <P2PS_STM_App_Notification+0x64>
      break;
 800d526:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800d528:	bf00      	nop
}
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	08010ee4 	.word	0x08010ee4
 800d534:	08011290 	.word	0x08011290
 800d538:	08010f08 	.word	0x08010f08
 800d53c:	08010f1c 	.word	0x08010f1c

0800d540 <P2PS_APP_Init>:
/* USER CODE END P2PS_APP_Notification_2 */
  return;
}

void P2PS_APP_Init(void)
{
 800d540:	b480      	push	{r7}
 800d542:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800d544:	bf00      	nop
}
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
	...

0800d550 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d558:	4b06      	ldr	r3, [pc, #24]	; (800d574 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d55a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d55e:	4905      	ldr	r1, [pc, #20]	; (800d574 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4313      	orrs	r3, r2
 800d564:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	58000800 	.word	0x58000800

0800d578 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d582:	6a1a      	ldr	r2, [r3, #32]
 800d584:	4904      	ldr	r1, [pc, #16]	; (800d598 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4313      	orrs	r3, r2
 800d58a:	620b      	str	r3, [r1, #32]
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	58000800 	.word	0x58000800

0800d59c <LL_PWR_EnableBootC2>:
{
 800d59c:	b480      	push	{r7}
 800d59e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d5a0:	4b05      	ldr	r3, [pc, #20]	; (800d5b8 <LL_PWR_EnableBootC2+0x1c>)
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	4a04      	ldr	r2, [pc, #16]	; (800d5b8 <LL_PWR_EnableBootC2+0x1c>)
 800d5a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5aa:	60d3      	str	r3, [r2, #12]
}
 800d5ac:	bf00      	nop
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	58000400 	.word	0x58000400

0800d5bc <LL_AHB3_GRP1_EnableClock>:
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d5c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d5d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4013      	ands	r3, r2
 800d5de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
}
 800d5e2:	bf00      	nop
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d5ee:	b480      	push	{r7}
 800d5f0:	b085      	sub	sp, #20
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d5f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d5fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4313      	orrs	r3, r2
 800d606:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d60a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d60e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4013      	ands	r3, r2
 800d616:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d618:	68fb      	ldr	r3, [r7, #12]
}
 800d61a:	bf00      	nop
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <LL_C1_IPCC_EnableIT_TXF>:
{
 800d626:	b480      	push	{r7}
 800d628:	b083      	sub	sp, #12
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	601a      	str	r2, [r3, #0]
}
 800d63a:	bf00      	nop
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <LL_C1_IPCC_EnableIT_RXO>:
{
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f043 0201 	orr.w	r2, r3, #1
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	601a      	str	r2, [r3, #0]
}
 800d65a:	bf00      	nop
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800d666:	b480      	push	{r7}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	041b      	lsls	r3, r3, #16
 800d678:	43db      	mvns	r3, r3
 800d67a:	401a      	ands	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	605a      	str	r2, [r3, #4]
}
 800d680:	bf00      	nop
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	041b      	lsls	r3, r3, #16
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	605a      	str	r2, [r3, #4]
}
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	43db      	mvns	r3, r3
 800d6c2:	401a      	ands	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	605a      	str	r2, [r3, #4]
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	609a      	str	r2, [r3, #8]
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <LL_C1_IPCC_SetFlag_CHx>:
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	041a      	lsls	r2, r3, #16
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	609a      	str	r2, [r3, #8]
}
 800d702:	bf00      	nop
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800d70e:	b480      	push	{r7}
 800d710:	b083      	sub	sp, #12
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	68da      	ldr	r2, [r3, #12]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	4013      	ands	r3, r2
 800d720:	683a      	ldr	r2, [r7, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d101      	bne.n	800d72a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d726:	2301      	movs	r3, #1
 800d728:	e000      	b.n	800d72c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	69da      	ldr	r2, [r3, #28]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	4013      	ands	r3, r2
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d101      	bne.n	800d754 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d750:	2301      	movs	r3, #1
 800d752:	e000      	b.n	800d756 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	370c      	adds	r7, #12
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr
	...

0800d764 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d768:	2102      	movs	r1, #2
 800d76a:	4819      	ldr	r0, [pc, #100]	; (800d7d0 <HW_IPCC_Rx_Handler+0x6c>)
 800d76c:	f7ff ffe4 	bl	800d738 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d009      	beq.n	800d78a <HW_IPCC_Rx_Handler+0x26>
 800d776:	4b16      	ldr	r3, [pc, #88]	; (800d7d0 <HW_IPCC_Rx_Handler+0x6c>)
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	43db      	mvns	r3, r3
 800d77c:	f003 0302 	and.w	r3, r3, #2
 800d780:	2b00      	cmp	r3, #0
 800d782:	d002      	beq.n	800d78a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d784:	f000 f8da 	bl	800d93c <HW_IPCC_SYS_EvtHandler>
 800d788:	e01f      	b.n	800d7ca <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d78a:	2101      	movs	r1, #1
 800d78c:	4810      	ldr	r0, [pc, #64]	; (800d7d0 <HW_IPCC_Rx_Handler+0x6c>)
 800d78e:	f7ff ffd3 	bl	800d738 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d008      	beq.n	800d7aa <HW_IPCC_Rx_Handler+0x46>
 800d798:	4b0d      	ldr	r3, [pc, #52]	; (800d7d0 <HW_IPCC_Rx_Handler+0x6c>)
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d102      	bne.n	800d7aa <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d7a4:	f000 f88e 	bl	800d8c4 <HW_IPCC_BLE_EvtHandler>
 800d7a8:	e00f      	b.n	800d7ca <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d7aa:	2108      	movs	r1, #8
 800d7ac:	4808      	ldr	r0, [pc, #32]	; (800d7d0 <HW_IPCC_Rx_Handler+0x6c>)
 800d7ae:	f7ff ffc3 	bl	800d738 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d009      	beq.n	800d7cc <HW_IPCC_Rx_Handler+0x68>
 800d7b8:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <HW_IPCC_Rx_Handler+0x6c>)
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	43db      	mvns	r3, r3
 800d7be:	f003 0308 	and.w	r3, r3, #8
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d7c6:	f000 f905 	bl	800d9d4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d7ca:	bf00      	nop
 800d7cc:	bf00      	nop
}
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	58000c00 	.word	0x58000c00

0800d7d4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d7d8:	2102      	movs	r1, #2
 800d7da:	481a      	ldr	r0, [pc, #104]	; (800d844 <HW_IPCC_Tx_Handler+0x70>)
 800d7dc:	f7ff ff97 	bl	800d70e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d109      	bne.n	800d7fa <HW_IPCC_Tx_Handler+0x26>
 800d7e6:	4b17      	ldr	r3, [pc, #92]	; (800d844 <HW_IPCC_Tx_Handler+0x70>)
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	43db      	mvns	r3, r3
 800d7ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d7f4:	f000 f896 	bl	800d924 <HW_IPCC_SYS_CmdEvtHandler>
 800d7f8:	e020      	b.n	800d83c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d7fa:	2108      	movs	r1, #8
 800d7fc:	4811      	ldr	r0, [pc, #68]	; (800d844 <HW_IPCC_Tx_Handler+0x70>)
 800d7fe:	f7ff ff86 	bl	800d70e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d109      	bne.n	800d81c <HW_IPCC_Tx_Handler+0x48>
 800d808:	4b0e      	ldr	r3, [pc, #56]	; (800d844 <HW_IPCC_Tx_Handler+0x70>)
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	43db      	mvns	r3, r3
 800d80e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d812:	2b00      	cmp	r3, #0
 800d814:	d002      	beq.n	800d81c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d816:	f000 f8bf 	bl	800d998 <HW_IPCC_MM_FreeBufHandler>
 800d81a:	e00f      	b.n	800d83c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d81c:	2120      	movs	r1, #32
 800d81e:	4809      	ldr	r0, [pc, #36]	; (800d844 <HW_IPCC_Tx_Handler+0x70>)
 800d820:	f7ff ff75 	bl	800d70e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d109      	bne.n	800d83e <HW_IPCC_Tx_Handler+0x6a>
 800d82a:	4b06      	ldr	r3, [pc, #24]	; (800d844 <HW_IPCC_Tx_Handler+0x70>)
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	43db      	mvns	r3, r3
 800d830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d838:	f000 f850 	bl	800d8dc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d83c:	bf00      	nop
 800d83e:	bf00      	nop
}
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	58000c00 	.word	0x58000c00

0800d848 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d84c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d850:	f7ff fecd 	bl	800d5ee <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d854:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d858:	f7ff fe7a 	bl	800d550 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d85c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d860:	f7ff fe8a 	bl	800d578 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d864:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d866:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d868:	f7ff fe98 	bl	800d59c <LL_PWR_EnableBootC2>

  return;
 800d86c:	bf00      	nop
}
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d874:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d878:	f7ff fea0 	bl	800d5bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d87c:	4806      	ldr	r0, [pc, #24]	; (800d898 <HW_IPCC_Init+0x28>)
 800d87e:	f7ff fee2 	bl	800d646 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d882:	4805      	ldr	r0, [pc, #20]	; (800d898 <HW_IPCC_Init+0x28>)
 800d884:	f7ff fecf 	bl	800d626 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d888:	202c      	movs	r0, #44	; 0x2c
 800d88a:	f7f6 fada 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d88e:	202d      	movs	r0, #45	; 0x2d
 800d890:	f7f6 fad7 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  return;
 800d894:	bf00      	nop
}
 800d896:	bd80      	pop	{r7, pc}
 800d898:	58000c00 	.word	0x58000c00

0800d89c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d8a0:	2101      	movs	r1, #1
 800d8a2:	4802      	ldr	r0, [pc, #8]	; (800d8ac <HW_IPCC_BLE_Init+0x10>)
 800d8a4:	f7ff ff04 	bl	800d6b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d8a8:	bf00      	nop
}
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	58000c00 	.word	0x58000c00

0800d8b0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	4802      	ldr	r0, [pc, #8]	; (800d8c0 <HW_IPCC_BLE_SendCmd+0x10>)
 800d8b8:	f7ff ff1a 	bl	800d6f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d8bc:	bf00      	nop
}
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	58000c00 	.word	0x58000c00

0800d8c4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d8c8:	f7fd f8fc 	bl	800aac4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	4802      	ldr	r0, [pc, #8]	; (800d8d8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d8d0:	f7ff ff00 	bl	800d6d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d8d4:	bf00      	nop
}
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	58000c00 	.word	0x58000c00

0800d8dc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d8e0:	2120      	movs	r1, #32
 800d8e2:	4803      	ldr	r0, [pc, #12]	; (800d8f0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d8e4:	f7ff fed2 	bl	800d68c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d8e8:	f7fd f91c 	bl	800ab24 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d8ec:	bf00      	nop
}
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	58000c00 	.word	0x58000c00

0800d8f4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d8f8:	2102      	movs	r1, #2
 800d8fa:	4802      	ldr	r0, [pc, #8]	; (800d904 <HW_IPCC_SYS_Init+0x10>)
 800d8fc:	f7ff fed8 	bl	800d6b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d900:	bf00      	nop
}
 800d902:	bd80      	pop	{r7, pc}
 800d904:	58000c00 	.word	0x58000c00

0800d908 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d90c:	2102      	movs	r1, #2
 800d90e:	4804      	ldr	r0, [pc, #16]	; (800d920 <HW_IPCC_SYS_SendCmd+0x18>)
 800d910:	f7ff feee 	bl	800d6f0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d914:	2102      	movs	r1, #2
 800d916:	4802      	ldr	r0, [pc, #8]	; (800d920 <HW_IPCC_SYS_SendCmd+0x18>)
 800d918:	f7ff fea5 	bl	800d666 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d91c:	bf00      	nop
}
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	58000c00 	.word	0x58000c00

0800d924 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d928:	2102      	movs	r1, #2
 800d92a:	4803      	ldr	r0, [pc, #12]	; (800d938 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d92c:	f7ff feae 	bl	800d68c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d930:	f7fd f948 	bl	800abc4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d934:	bf00      	nop
}
 800d936:	bd80      	pop	{r7, pc}
 800d938:	58000c00 	.word	0x58000c00

0800d93c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d940:	f7fd f956 	bl	800abf0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d944:	2102      	movs	r1, #2
 800d946:	4802      	ldr	r0, [pc, #8]	; (800d950 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d948:	f7ff fec4 	bl	800d6d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d94c:	bf00      	nop
}
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	58000c00 	.word	0x58000c00

0800d954 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d95c:	2108      	movs	r1, #8
 800d95e:	480c      	ldr	r0, [pc, #48]	; (800d990 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d960:	f7ff fed5 	bl	800d70e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d007      	beq.n	800d97a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d96a:	4a0a      	ldr	r2, [pc, #40]	; (800d994 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d970:	2108      	movs	r1, #8
 800d972:	4807      	ldr	r0, [pc, #28]	; (800d990 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d974:	f7ff fe77 	bl	800d666 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d978:	e006      	b.n	800d988 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d97e:	2108      	movs	r1, #8
 800d980:	4803      	ldr	r0, [pc, #12]	; (800d990 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d982:	f7ff feb5 	bl	800d6f0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d986:	bf00      	nop
}
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	58000c00 	.word	0x58000c00
 800d994:	200006a4 	.word	0x200006a4

0800d998 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d99c:	2108      	movs	r1, #8
 800d99e:	4806      	ldr	r0, [pc, #24]	; (800d9b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d9a0:	f7ff fe74 	bl	800d68c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d9a4:	4b05      	ldr	r3, [pc, #20]	; (800d9bc <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d9aa:	2108      	movs	r1, #8
 800d9ac:	4802      	ldr	r0, [pc, #8]	; (800d9b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d9ae:	f7ff fe9f 	bl	800d6f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d9b2:	bf00      	nop
}
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	58000c00 	.word	0x58000c00
 800d9bc:	200006a4 	.word	0x200006a4

0800d9c0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d9c4:	2108      	movs	r1, #8
 800d9c6:	4802      	ldr	r0, [pc, #8]	; (800d9d0 <HW_IPCC_TRACES_Init+0x10>)
 800d9c8:	f7ff fe72 	bl	800d6b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d9cc:	bf00      	nop
}
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	58000c00 	.word	0x58000c00

0800d9d4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d9d8:	f7fd f9b2 	bl	800ad40 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d9dc:	2108      	movs	r1, #8
 800d9de:	4802      	ldr	r0, [pc, #8]	; (800d9e8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d9e0:	f7ff fe78 	bl	800d6d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d9e4:	bf00      	nop
}
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	58000c00 	.word	0x58000c00

0800d9ec <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d9f0:	4b05      	ldr	r3, [pc, #20]	; (800da08 <UTIL_LPM_Init+0x1c>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d9f6:	4b05      	ldr	r3, [pc, #20]	; (800da0c <UTIL_LPM_Init+0x20>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d9fc:	bf00      	nop
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	200006a8 	.word	0x200006a8
 800da0c:	200006ac 	.word	0x200006ac

0800da10 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800da10:	b480      	push	{r7}
 800da12:	b087      	sub	sp, #28
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da1c:	f3ef 8310 	mrs	r3, PRIMASK
 800da20:	613b      	str	r3, [r7, #16]
  return(result);
 800da22:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800da24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da26:	b672      	cpsid	i
}
 800da28:	bf00      	nop
  
  switch(state)
 800da2a:	78fb      	ldrb	r3, [r7, #3]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d008      	beq.n	800da42 <UTIL_LPM_SetOffMode+0x32>
 800da30:	2b01      	cmp	r3, #1
 800da32:	d10e      	bne.n	800da52 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800da34:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <UTIL_LPM_SetOffMode+0x5c>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	4a0b      	ldr	r2, [pc, #44]	; (800da6c <UTIL_LPM_SetOffMode+0x5c>)
 800da3e:	6013      	str	r3, [r2, #0]
      break;
 800da40:	e008      	b.n	800da54 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	43da      	mvns	r2, r3
 800da46:	4b09      	ldr	r3, [pc, #36]	; (800da6c <UTIL_LPM_SetOffMode+0x5c>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4013      	ands	r3, r2
 800da4c:	4a07      	ldr	r2, [pc, #28]	; (800da6c <UTIL_LPM_SetOffMode+0x5c>)
 800da4e:	6013      	str	r3, [r2, #0]
      break;
 800da50:	e000      	b.n	800da54 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800da52:	bf00      	nop
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f383 8810 	msr	PRIMASK, r3
}
 800da5e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800da60:	bf00      	nop
 800da62:	371c      	adds	r7, #28
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	200006ac 	.word	0x200006ac

0800da70 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08c      	sub	sp, #48	; 0x30
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800da78:	4b6a      	ldr	r3, [pc, #424]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800da7e:	4b69      	ldr	r3, [pc, #420]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4013      	ands	r3, r2
 800da86:	4a67      	ldr	r2, [pc, #412]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800da88:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800da8a:	4b67      	ldr	r3, [pc, #412]	; (800dc28 <UTIL_SEQ_Run+0x1b8>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800da90:	e086      	b.n	800dba0 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800da92:	2300      	movs	r3, #0
 800da94:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800da96:	e002      	b.n	800da9e <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800da98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9a:	3301      	adds	r3, #1
 800da9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800da9e:	4a63      	ldr	r2, [pc, #396]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800daa6:	4b62      	ldr	r3, [pc, #392]	; (800dc30 <UTIL_SEQ_Run+0x1c0>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	401a      	ands	r2, r3
 800daac:	4b5d      	ldr	r3, [pc, #372]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4013      	ands	r3, r2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d0f0      	beq.n	800da98 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800dab6:	4a5d      	ldr	r2, [pc, #372]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800dab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dabe:	4b5c      	ldr	r3, [pc, #368]	; (800dc30 <UTIL_SEQ_Run+0x1c0>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	401a      	ands	r2, r3
 800dac4:	4b57      	ldr	r3, [pc, #348]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4013      	ands	r3, r2
 800daca:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800dacc:	4a57      	ldr	r2, [pc, #348]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800dace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad0:	00db      	lsls	r3, r3, #3
 800dad2:	4413      	add	r3, r2
 800dad4:	685a      	ldr	r2, [r3, #4]
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	4013      	ands	r3, r2
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d106      	bne.n	800daec <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800dade:	4a53      	ldr	r2, [pc, #332]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	4413      	add	r3, r2
 800dae6:	f04f 32ff 	mov.w	r2, #4294967295
 800daea:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800daec:	4a4f      	ldr	r2, [pc, #316]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf0:	00db      	lsls	r3, r3, #3
 800daf2:	4413      	add	r3, r2
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	4013      	ands	r3, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f000 f9ac 	bl	800de58 <SEQ_BitPosition>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	4b4b      	ldr	r3, [pc, #300]	; (800dc34 <UTIL_SEQ_Run+0x1c4>)
 800db06:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800db08:	4a48      	ldr	r2, [pc, #288]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800db0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	4413      	add	r3, r2
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	4b48      	ldr	r3, [pc, #288]	; (800dc34 <UTIL_SEQ_Run+0x1c4>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2101      	movs	r1, #1
 800db18:	fa01 f303 	lsl.w	r3, r1, r3
 800db1c:	43db      	mvns	r3, r3
 800db1e:	401a      	ands	r2, r3
 800db20:	4942      	ldr	r1, [pc, #264]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	00db      	lsls	r3, r3, #3
 800db26:	440b      	add	r3, r1
 800db28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db2a:	f3ef 8310 	mrs	r3, PRIMASK
 800db2e:	617b      	str	r3, [r7, #20]
  return(result);
 800db30:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800db32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800db34:	b672      	cpsid	i
}
 800db36:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800db38:	4b3e      	ldr	r3, [pc, #248]	; (800dc34 <UTIL_SEQ_Run+0x1c4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2201      	movs	r2, #1
 800db3e:	fa02 f303 	lsl.w	r3, r2, r3
 800db42:	43da      	mvns	r2, r3
 800db44:	4b38      	ldr	r3, [pc, #224]	; (800dc28 <UTIL_SEQ_Run+0x1b8>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4013      	ands	r3, r2
 800db4a:	4a37      	ldr	r2, [pc, #220]	; (800dc28 <UTIL_SEQ_Run+0x1b8>)
 800db4c:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800db4e:	2302      	movs	r3, #2
 800db50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db52:	e013      	b.n	800db7c <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	3b01      	subs	r3, #1
 800db58:	4a34      	ldr	r2, [pc, #208]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800db5a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800db5e:	4b35      	ldr	r3, [pc, #212]	; (800dc34 <UTIL_SEQ_Run+0x1c4>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2201      	movs	r2, #1
 800db64:	fa02 f303 	lsl.w	r3, r2, r3
 800db68:	43da      	mvns	r2, r3
 800db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6c:	3b01      	subs	r3, #1
 800db6e:	400a      	ands	r2, r1
 800db70:	492e      	ldr	r1, [pc, #184]	; (800dc2c <UTIL_SEQ_Run+0x1bc>)
 800db72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	3b01      	subs	r3, #1
 800db7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1e8      	bne.n	800db54 <UTIL_SEQ_Run+0xe4>
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	f383 8810 	msr	PRIMASK, r3
}
 800db8c:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800db8e:	4b29      	ldr	r3, [pc, #164]	; (800dc34 <UTIL_SEQ_Run+0x1c4>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a29      	ldr	r2, [pc, #164]	; (800dc38 <UTIL_SEQ_Run+0x1c8>)
 800db94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db98:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800db9a:	4b23      	ldr	r3, [pc, #140]	; (800dc28 <UTIL_SEQ_Run+0x1b8>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800dba0:	4b23      	ldr	r3, [pc, #140]	; (800dc30 <UTIL_SEQ_Run+0x1c0>)
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba6:	401a      	ands	r2, r3
 800dba8:	4b1e      	ldr	r3, [pc, #120]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4013      	ands	r3, r2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d007      	beq.n	800dbc2 <UTIL_SEQ_Run+0x152>
 800dbb2:	4b22      	ldr	r3, [pc, #136]	; (800dc3c <UTIL_SEQ_Run+0x1cc>)
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	4b22      	ldr	r3, [pc, #136]	; (800dc40 <UTIL_SEQ_Run+0x1d0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4013      	ands	r3, r2
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f43f af68 	beq.w	800da92 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800dbc2:	4b1c      	ldr	r3, [pc, #112]	; (800dc34 <UTIL_SEQ_Run+0x1c4>)
 800dbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc8:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800dbca:	f000 f937 	bl	800de3c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbce:	f3ef 8310 	mrs	r3, PRIMASK
 800dbd2:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800dbd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbd8:	b672      	cpsid	i
}
 800dbda:	bf00      	nop
  local_taskset = TaskSet;
 800dbdc:	4b12      	ldr	r3, [pc, #72]	; (800dc28 <UTIL_SEQ_Run+0x1b8>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800dbe2:	4b13      	ldr	r3, [pc, #76]	; (800dc30 <UTIL_SEQ_Run+0x1c0>)
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	401a      	ands	r2, r3
 800dbea:	4b0e      	ldr	r3, [pc, #56]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4013      	ands	r3, r2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d108      	bne.n	800dc06 <UTIL_SEQ_Run+0x196>
 800dbf4:	4b11      	ldr	r3, [pc, #68]	; (800dc3c <UTIL_SEQ_Run+0x1cc>)
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	4b11      	ldr	r3, [pc, #68]	; (800dc40 <UTIL_SEQ_Run+0x1d0>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800dc02:	f7f3 f8c3 	bl	8000d8c <UTIL_SEQ_Idle>
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	f383 8810 	msr	PRIMASK, r3
}
 800dc10:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800dc12:	f000 f91a 	bl	800de4a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800dc16:	4a03      	ldr	r2, [pc, #12]	; (800dc24 <UTIL_SEQ_Run+0x1b4>)
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	6013      	str	r3, [r2, #0]

  return;
 800dc1c:	bf00      	nop
}
 800dc1e:	3730      	adds	r7, #48	; 0x30
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	2000003c 	.word	0x2000003c
 800dc28:	200006b0 	.word	0x200006b0
 800dc2c:	20000740 	.word	0x20000740
 800dc30:	20000038 	.word	0x20000038
 800dc34:	200006bc 	.word	0x200006bc
 800dc38:	200006c0 	.word	0x200006c0
 800dc3c:	200006b4 	.word	0x200006b4
 800dc40:	200006b8 	.word	0x200006b8

0800dc44 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b088      	sub	sp, #32
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc50:	f3ef 8310 	mrs	r3, PRIMASK
 800dc54:	617b      	str	r3, [r7, #20]
  return(result);
 800dc56:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800dc58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc5a:	b672      	cpsid	i
}
 800dc5c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f000 f8fa 	bl	800de58 <SEQ_BitPosition>
 800dc64:	4603      	mov	r3, r0
 800dc66:	4619      	mov	r1, r3
 800dc68:	4a06      	ldr	r2, [pc, #24]	; (800dc84 <UTIL_SEQ_RegTask+0x40>)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	f383 8810 	msr	PRIMASK, r3
}
 800dc7a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800dc7c:	bf00      	nop
}
 800dc7e:	3720      	adds	r7, #32
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	200006c0 	.word	0x200006c0

0800dc88 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b087      	sub	sp, #28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc92:	f3ef 8310 	mrs	r3, PRIMASK
 800dc96:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc98:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dc9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc9c:	b672      	cpsid	i
}
 800dc9e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800dca0:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <UTIL_SEQ_SetTask+0x50>)
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	4a0b      	ldr	r2, [pc, #44]	; (800dcd8 <UTIL_SEQ_SetTask+0x50>)
 800dcaa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800dcac:	4a0b      	ldr	r2, [pc, #44]	; (800dcdc <UTIL_SEQ_SetTask+0x54>)
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	431a      	orrs	r2, r3
 800dcb8:	4908      	ldr	r1, [pc, #32]	; (800dcdc <UTIL_SEQ_SetTask+0x54>)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f383 8810 	msr	PRIMASK, r3
}
 800dcca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dccc:	bf00      	nop
}
 800dcce:	371c      	adds	r7, #28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	200006b0 	.word	0x200006b0
 800dcdc:	20000740 	.word	0x20000740

0800dce0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800dce0:	b480      	push	{r7}
 800dce2:	b087      	sub	sp, #28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dce8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcec:	60fb      	str	r3, [r7, #12]
  return(result);
 800dcee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dcf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dcf2:	b672      	cpsid	i
}
 800dcf4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	43da      	mvns	r2, r3
 800dcfa:	4b08      	ldr	r3, [pc, #32]	; (800dd1c <UTIL_SEQ_PauseTask+0x3c>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4013      	ands	r3, r2
 800dd00:	4a06      	ldr	r2, [pc, #24]	; (800dd1c <UTIL_SEQ_PauseTask+0x3c>)
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	f383 8810 	msr	PRIMASK, r3
}
 800dd0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dd10:	bf00      	nop
}
 800dd12:	371c      	adds	r7, #28
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	20000038 	.word	0x20000038

0800dd20 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800dd20:	b480      	push	{r7}
 800dd22:	b087      	sub	sp, #28
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd28:	f3ef 8310 	mrs	r3, PRIMASK
 800dd2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dd30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd32:	b672      	cpsid	i
}
 800dd34:	bf00      	nop

  TaskMask |= TaskId_bm;
 800dd36:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <UTIL_SEQ_ResumeTask+0x3c>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	4a07      	ldr	r2, [pc, #28]	; (800dd5c <UTIL_SEQ_ResumeTask+0x3c>)
 800dd40:	6013      	str	r3, [r2, #0]
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	f383 8810 	msr	PRIMASK, r3
}
 800dd4c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dd4e:	bf00      	nop
}
 800dd50:	371c      	adds	r7, #28
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	20000038 	.word	0x20000038

0800dd60 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800dd60:	b480      	push	{r7}
 800dd62:	b087      	sub	sp, #28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd68:	f3ef 8310 	mrs	r3, PRIMASK
 800dd6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dd70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd72:	b672      	cpsid	i
}
 800dd74:	bf00      	nop

  EvtSet |= EvtId_bm;
 800dd76:	4b09      	ldr	r3, [pc, #36]	; (800dd9c <UTIL_SEQ_SetEvt+0x3c>)
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	4a07      	ldr	r2, [pc, #28]	; (800dd9c <UTIL_SEQ_SetEvt+0x3c>)
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	f383 8810 	msr	PRIMASK, r3
}
 800dd8c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dd8e:	bf00      	nop
}
 800dd90:	371c      	adds	r7, #28
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	200006b4 	.word	0x200006b4

0800dda0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800dda8:	4b21      	ldr	r3, [pc, #132]	; (800de30 <UTIL_SEQ_WaitEvt+0x90>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ddae:	4b20      	ldr	r3, [pc, #128]	; (800de30 <UTIL_SEQ_WaitEvt+0x90>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb6:	d102      	bne.n	800ddbe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	61fb      	str	r3, [r7, #28]
 800ddbc:	e005      	b.n	800ddca <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800ddbe:	4b1c      	ldr	r3, [pc, #112]	; (800de30 <UTIL_SEQ_WaitEvt+0x90>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc8:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ddca:	4b1a      	ldr	r3, [pc, #104]	; (800de34 <UTIL_SEQ_WaitEvt+0x94>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ddd0:	4a18      	ldr	r2, [pc, #96]	; (800de34 <UTIL_SEQ_WaitEvt+0x94>)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800ddd6:	e005      	b.n	800dde4 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800ddd8:	4b16      	ldr	r3, [pc, #88]	; (800de34 <UTIL_SEQ_WaitEvt+0x94>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	69f8      	ldr	r0, [r7, #28]
 800dde0:	f7f2 ffdb 	bl	8000d9a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800dde4:	4b14      	ldr	r3, [pc, #80]	; (800de38 <UTIL_SEQ_WaitEvt+0x98>)
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	4b12      	ldr	r3, [pc, #72]	; (800de34 <UTIL_SEQ_WaitEvt+0x94>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4013      	ands	r3, r2
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d0f2      	beq.n	800ddd8 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ddf2:	4a0f      	ldr	r2, [pc, #60]	; (800de30 <UTIL_SEQ_WaitEvt+0x90>)
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddf8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddfe:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800de00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800de02:	b672      	cpsid	i
}
 800de04:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800de06:	4b0b      	ldr	r3, [pc, #44]	; (800de34 <UTIL_SEQ_WaitEvt+0x94>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	43da      	mvns	r2, r3
 800de0c:	4b0a      	ldr	r3, [pc, #40]	; (800de38 <UTIL_SEQ_WaitEvt+0x98>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4013      	ands	r3, r2
 800de12:	4a09      	ldr	r2, [pc, #36]	; (800de38 <UTIL_SEQ_WaitEvt+0x98>)
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f383 8810 	msr	PRIMASK, r3
}
 800de20:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800de22:	4a04      	ldr	r2, [pc, #16]	; (800de34 <UTIL_SEQ_WaitEvt+0x94>)
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	6013      	str	r3, [r2, #0]

  return;
 800de28:	bf00      	nop
}
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	200006bc 	.word	0x200006bc
 800de34:	200006b8 	.word	0x200006b8
 800de38:	200006b4 	.word	0x200006b4

0800de3c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800de40:	bf00      	nop
}
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800de4a:	b480      	push	{r7}
 800de4c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800de4e:	bf00      	nop
}
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800de60:	2300      	movs	r3, #0
 800de62:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	0c1b      	lsrs	r3, r3, #16
 800de68:	041b      	lsls	r3, r3, #16
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d104      	bne.n	800de78 <SEQ_BitPosition+0x20>
 800de6e:	2310      	movs	r3, #16
 800de70:	73fb      	strb	r3, [r7, #15]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	041b      	lsls	r3, r3, #16
 800de76:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d105      	bne.n	800de8e <SEQ_BitPosition+0x36>
 800de82:	7bfb      	ldrb	r3, [r7, #15]
 800de84:	3308      	adds	r3, #8
 800de86:	73fb      	strb	r3, [r7, #15]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	021b      	lsls	r3, r3, #8
 800de8c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d105      	bne.n	800dea4 <SEQ_BitPosition+0x4c>
 800de98:	7bfb      	ldrb	r3, [r7, #15]
 800de9a:	3304      	adds	r3, #4
 800de9c:	73fb      	strb	r3, [r7, #15]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	011b      	lsls	r3, r3, #4
 800dea2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	0f1b      	lsrs	r3, r3, #28
 800dea8:	4a07      	ldr	r2, [pc, #28]	; (800dec8 <SEQ_BitPosition+0x70>)
 800deaa:	5cd2      	ldrb	r2, [r2, r3]
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	4413      	add	r3, r2
 800deb0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	f1c3 031f 	rsb	r3, r3, #31
 800deb8:	b2db      	uxtb	r3, r3
}
 800deba:	4618      	mov	r0, r3
 800debc:	3714      	adds	r7, #20
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	080112ac 	.word	0x080112ac

0800decc <__errno>:
 800decc:	4b01      	ldr	r3, [pc, #4]	; (800ded4 <__errno+0x8>)
 800dece:	6818      	ldr	r0, [r3, #0]
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	20000040 	.word	0x20000040

0800ded8 <__libc_init_array>:
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	4d0d      	ldr	r5, [pc, #52]	; (800df10 <__libc_init_array+0x38>)
 800dedc:	4c0d      	ldr	r4, [pc, #52]	; (800df14 <__libc_init_array+0x3c>)
 800dede:	1b64      	subs	r4, r4, r5
 800dee0:	10a4      	asrs	r4, r4, #2
 800dee2:	2600      	movs	r6, #0
 800dee4:	42a6      	cmp	r6, r4
 800dee6:	d109      	bne.n	800defc <__libc_init_array+0x24>
 800dee8:	4d0b      	ldr	r5, [pc, #44]	; (800df18 <__libc_init_array+0x40>)
 800deea:	4c0c      	ldr	r4, [pc, #48]	; (800df1c <__libc_init_array+0x44>)
 800deec:	f001 fa30 	bl	800f350 <_init>
 800def0:	1b64      	subs	r4, r4, r5
 800def2:	10a4      	asrs	r4, r4, #2
 800def4:	2600      	movs	r6, #0
 800def6:	42a6      	cmp	r6, r4
 800def8:	d105      	bne.n	800df06 <__libc_init_array+0x2e>
 800defa:	bd70      	pop	{r4, r5, r6, pc}
 800defc:	f855 3b04 	ldr.w	r3, [r5], #4
 800df00:	4798      	blx	r3
 800df02:	3601      	adds	r6, #1
 800df04:	e7ee      	b.n	800dee4 <__libc_init_array+0xc>
 800df06:	f855 3b04 	ldr.w	r3, [r5], #4
 800df0a:	4798      	blx	r3
 800df0c:	3601      	adds	r6, #1
 800df0e:	e7f2      	b.n	800def6 <__libc_init_array+0x1e>
 800df10:	0801135c 	.word	0x0801135c
 800df14:	0801135c 	.word	0x0801135c
 800df18:	0801135c 	.word	0x0801135c
 800df1c:	08011360 	.word	0x08011360

0800df20 <malloc>:
 800df20:	4b02      	ldr	r3, [pc, #8]	; (800df2c <malloc+0xc>)
 800df22:	4601      	mov	r1, r0
 800df24:	6818      	ldr	r0, [r3, #0]
 800df26:	f000 b88d 	b.w	800e044 <_malloc_r>
 800df2a:	bf00      	nop
 800df2c:	20000040 	.word	0x20000040

0800df30 <free>:
 800df30:	4b02      	ldr	r3, [pc, #8]	; (800df3c <free+0xc>)
 800df32:	4601      	mov	r1, r0
 800df34:	6818      	ldr	r0, [r3, #0]
 800df36:	f000 b819 	b.w	800df6c <_free_r>
 800df3a:	bf00      	nop
 800df3c:	20000040 	.word	0x20000040

0800df40 <memcpy>:
 800df40:	440a      	add	r2, r1
 800df42:	4291      	cmp	r1, r2
 800df44:	f100 33ff 	add.w	r3, r0, #4294967295
 800df48:	d100      	bne.n	800df4c <memcpy+0xc>
 800df4a:	4770      	bx	lr
 800df4c:	b510      	push	{r4, lr}
 800df4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df56:	4291      	cmp	r1, r2
 800df58:	d1f9      	bne.n	800df4e <memcpy+0xe>
 800df5a:	bd10      	pop	{r4, pc}

0800df5c <memset>:
 800df5c:	4402      	add	r2, r0
 800df5e:	4603      	mov	r3, r0
 800df60:	4293      	cmp	r3, r2
 800df62:	d100      	bne.n	800df66 <memset+0xa>
 800df64:	4770      	bx	lr
 800df66:	f803 1b01 	strb.w	r1, [r3], #1
 800df6a:	e7f9      	b.n	800df60 <memset+0x4>

0800df6c <_free_r>:
 800df6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df6e:	2900      	cmp	r1, #0
 800df70:	d044      	beq.n	800dffc <_free_r+0x90>
 800df72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df76:	9001      	str	r0, [sp, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f1a1 0404 	sub.w	r4, r1, #4
 800df7e:	bfb8      	it	lt
 800df80:	18e4      	addlt	r4, r4, r3
 800df82:	f000 fc85 	bl	800e890 <__malloc_lock>
 800df86:	4a1e      	ldr	r2, [pc, #120]	; (800e000 <_free_r+0x94>)
 800df88:	9801      	ldr	r0, [sp, #4]
 800df8a:	6813      	ldr	r3, [r2, #0]
 800df8c:	b933      	cbnz	r3, 800df9c <_free_r+0x30>
 800df8e:	6063      	str	r3, [r4, #4]
 800df90:	6014      	str	r4, [r2, #0]
 800df92:	b003      	add	sp, #12
 800df94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df98:	f000 bc80 	b.w	800e89c <__malloc_unlock>
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	d908      	bls.n	800dfb2 <_free_r+0x46>
 800dfa0:	6825      	ldr	r5, [r4, #0]
 800dfa2:	1961      	adds	r1, r4, r5
 800dfa4:	428b      	cmp	r3, r1
 800dfa6:	bf01      	itttt	eq
 800dfa8:	6819      	ldreq	r1, [r3, #0]
 800dfaa:	685b      	ldreq	r3, [r3, #4]
 800dfac:	1949      	addeq	r1, r1, r5
 800dfae:	6021      	streq	r1, [r4, #0]
 800dfb0:	e7ed      	b.n	800df8e <_free_r+0x22>
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	b10b      	cbz	r3, 800dfbc <_free_r+0x50>
 800dfb8:	42a3      	cmp	r3, r4
 800dfba:	d9fa      	bls.n	800dfb2 <_free_r+0x46>
 800dfbc:	6811      	ldr	r1, [r2, #0]
 800dfbe:	1855      	adds	r5, r2, r1
 800dfc0:	42a5      	cmp	r5, r4
 800dfc2:	d10b      	bne.n	800dfdc <_free_r+0x70>
 800dfc4:	6824      	ldr	r4, [r4, #0]
 800dfc6:	4421      	add	r1, r4
 800dfc8:	1854      	adds	r4, r2, r1
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	6011      	str	r1, [r2, #0]
 800dfce:	d1e0      	bne.n	800df92 <_free_r+0x26>
 800dfd0:	681c      	ldr	r4, [r3, #0]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	6053      	str	r3, [r2, #4]
 800dfd6:	4421      	add	r1, r4
 800dfd8:	6011      	str	r1, [r2, #0]
 800dfda:	e7da      	b.n	800df92 <_free_r+0x26>
 800dfdc:	d902      	bls.n	800dfe4 <_free_r+0x78>
 800dfde:	230c      	movs	r3, #12
 800dfe0:	6003      	str	r3, [r0, #0]
 800dfe2:	e7d6      	b.n	800df92 <_free_r+0x26>
 800dfe4:	6825      	ldr	r5, [r4, #0]
 800dfe6:	1961      	adds	r1, r4, r5
 800dfe8:	428b      	cmp	r3, r1
 800dfea:	bf04      	itt	eq
 800dfec:	6819      	ldreq	r1, [r3, #0]
 800dfee:	685b      	ldreq	r3, [r3, #4]
 800dff0:	6063      	str	r3, [r4, #4]
 800dff2:	bf04      	itt	eq
 800dff4:	1949      	addeq	r1, r1, r5
 800dff6:	6021      	streq	r1, [r4, #0]
 800dff8:	6054      	str	r4, [r2, #4]
 800dffa:	e7ca      	b.n	800df92 <_free_r+0x26>
 800dffc:	b003      	add	sp, #12
 800dffe:	bd30      	pop	{r4, r5, pc}
 800e000:	20000750 	.word	0x20000750

0800e004 <sbrk_aligned>:
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	4e0e      	ldr	r6, [pc, #56]	; (800e040 <sbrk_aligned+0x3c>)
 800e008:	460c      	mov	r4, r1
 800e00a:	6831      	ldr	r1, [r6, #0]
 800e00c:	4605      	mov	r5, r0
 800e00e:	b911      	cbnz	r1, 800e016 <sbrk_aligned+0x12>
 800e010:	f000 f91a 	bl	800e248 <_sbrk_r>
 800e014:	6030      	str	r0, [r6, #0]
 800e016:	4621      	mov	r1, r4
 800e018:	4628      	mov	r0, r5
 800e01a:	f000 f915 	bl	800e248 <_sbrk_r>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	d00a      	beq.n	800e038 <sbrk_aligned+0x34>
 800e022:	1cc4      	adds	r4, r0, #3
 800e024:	f024 0403 	bic.w	r4, r4, #3
 800e028:	42a0      	cmp	r0, r4
 800e02a:	d007      	beq.n	800e03c <sbrk_aligned+0x38>
 800e02c:	1a21      	subs	r1, r4, r0
 800e02e:	4628      	mov	r0, r5
 800e030:	f000 f90a 	bl	800e248 <_sbrk_r>
 800e034:	3001      	adds	r0, #1
 800e036:	d101      	bne.n	800e03c <sbrk_aligned+0x38>
 800e038:	f04f 34ff 	mov.w	r4, #4294967295
 800e03c:	4620      	mov	r0, r4
 800e03e:	bd70      	pop	{r4, r5, r6, pc}
 800e040:	20000754 	.word	0x20000754

0800e044 <_malloc_r>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	1ccd      	adds	r5, r1, #3
 800e04a:	f025 0503 	bic.w	r5, r5, #3
 800e04e:	3508      	adds	r5, #8
 800e050:	2d0c      	cmp	r5, #12
 800e052:	bf38      	it	cc
 800e054:	250c      	movcc	r5, #12
 800e056:	2d00      	cmp	r5, #0
 800e058:	4607      	mov	r7, r0
 800e05a:	db01      	blt.n	800e060 <_malloc_r+0x1c>
 800e05c:	42a9      	cmp	r1, r5
 800e05e:	d905      	bls.n	800e06c <_malloc_r+0x28>
 800e060:	230c      	movs	r3, #12
 800e062:	603b      	str	r3, [r7, #0]
 800e064:	2600      	movs	r6, #0
 800e066:	4630      	mov	r0, r6
 800e068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e06c:	4e2e      	ldr	r6, [pc, #184]	; (800e128 <_malloc_r+0xe4>)
 800e06e:	f000 fc0f 	bl	800e890 <__malloc_lock>
 800e072:	6833      	ldr	r3, [r6, #0]
 800e074:	461c      	mov	r4, r3
 800e076:	bb34      	cbnz	r4, 800e0c6 <_malloc_r+0x82>
 800e078:	4629      	mov	r1, r5
 800e07a:	4638      	mov	r0, r7
 800e07c:	f7ff ffc2 	bl	800e004 <sbrk_aligned>
 800e080:	1c43      	adds	r3, r0, #1
 800e082:	4604      	mov	r4, r0
 800e084:	d14d      	bne.n	800e122 <_malloc_r+0xde>
 800e086:	6834      	ldr	r4, [r6, #0]
 800e088:	4626      	mov	r6, r4
 800e08a:	2e00      	cmp	r6, #0
 800e08c:	d140      	bne.n	800e110 <_malloc_r+0xcc>
 800e08e:	6823      	ldr	r3, [r4, #0]
 800e090:	4631      	mov	r1, r6
 800e092:	4638      	mov	r0, r7
 800e094:	eb04 0803 	add.w	r8, r4, r3
 800e098:	f000 f8d6 	bl	800e248 <_sbrk_r>
 800e09c:	4580      	cmp	r8, r0
 800e09e:	d13a      	bne.n	800e116 <_malloc_r+0xd2>
 800e0a0:	6821      	ldr	r1, [r4, #0]
 800e0a2:	3503      	adds	r5, #3
 800e0a4:	1a6d      	subs	r5, r5, r1
 800e0a6:	f025 0503 	bic.w	r5, r5, #3
 800e0aa:	3508      	adds	r5, #8
 800e0ac:	2d0c      	cmp	r5, #12
 800e0ae:	bf38      	it	cc
 800e0b0:	250c      	movcc	r5, #12
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	4638      	mov	r0, r7
 800e0b6:	f7ff ffa5 	bl	800e004 <sbrk_aligned>
 800e0ba:	3001      	adds	r0, #1
 800e0bc:	d02b      	beq.n	800e116 <_malloc_r+0xd2>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	442b      	add	r3, r5
 800e0c2:	6023      	str	r3, [r4, #0]
 800e0c4:	e00e      	b.n	800e0e4 <_malloc_r+0xa0>
 800e0c6:	6822      	ldr	r2, [r4, #0]
 800e0c8:	1b52      	subs	r2, r2, r5
 800e0ca:	d41e      	bmi.n	800e10a <_malloc_r+0xc6>
 800e0cc:	2a0b      	cmp	r2, #11
 800e0ce:	d916      	bls.n	800e0fe <_malloc_r+0xba>
 800e0d0:	1961      	adds	r1, r4, r5
 800e0d2:	42a3      	cmp	r3, r4
 800e0d4:	6025      	str	r5, [r4, #0]
 800e0d6:	bf18      	it	ne
 800e0d8:	6059      	strne	r1, [r3, #4]
 800e0da:	6863      	ldr	r3, [r4, #4]
 800e0dc:	bf08      	it	eq
 800e0de:	6031      	streq	r1, [r6, #0]
 800e0e0:	5162      	str	r2, [r4, r5]
 800e0e2:	604b      	str	r3, [r1, #4]
 800e0e4:	4638      	mov	r0, r7
 800e0e6:	f104 060b 	add.w	r6, r4, #11
 800e0ea:	f000 fbd7 	bl	800e89c <__malloc_unlock>
 800e0ee:	f026 0607 	bic.w	r6, r6, #7
 800e0f2:	1d23      	adds	r3, r4, #4
 800e0f4:	1af2      	subs	r2, r6, r3
 800e0f6:	d0b6      	beq.n	800e066 <_malloc_r+0x22>
 800e0f8:	1b9b      	subs	r3, r3, r6
 800e0fa:	50a3      	str	r3, [r4, r2]
 800e0fc:	e7b3      	b.n	800e066 <_malloc_r+0x22>
 800e0fe:	6862      	ldr	r2, [r4, #4]
 800e100:	42a3      	cmp	r3, r4
 800e102:	bf0c      	ite	eq
 800e104:	6032      	streq	r2, [r6, #0]
 800e106:	605a      	strne	r2, [r3, #4]
 800e108:	e7ec      	b.n	800e0e4 <_malloc_r+0xa0>
 800e10a:	4623      	mov	r3, r4
 800e10c:	6864      	ldr	r4, [r4, #4]
 800e10e:	e7b2      	b.n	800e076 <_malloc_r+0x32>
 800e110:	4634      	mov	r4, r6
 800e112:	6876      	ldr	r6, [r6, #4]
 800e114:	e7b9      	b.n	800e08a <_malloc_r+0x46>
 800e116:	230c      	movs	r3, #12
 800e118:	603b      	str	r3, [r7, #0]
 800e11a:	4638      	mov	r0, r7
 800e11c:	f000 fbbe 	bl	800e89c <__malloc_unlock>
 800e120:	e7a1      	b.n	800e066 <_malloc_r+0x22>
 800e122:	6025      	str	r5, [r4, #0]
 800e124:	e7de      	b.n	800e0e4 <_malloc_r+0xa0>
 800e126:	bf00      	nop
 800e128:	20000750 	.word	0x20000750

0800e12c <iprintf>:
 800e12c:	b40f      	push	{r0, r1, r2, r3}
 800e12e:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <iprintf+0x2c>)
 800e130:	b513      	push	{r0, r1, r4, lr}
 800e132:	681c      	ldr	r4, [r3, #0]
 800e134:	b124      	cbz	r4, 800e140 <iprintf+0x14>
 800e136:	69a3      	ldr	r3, [r4, #24]
 800e138:	b913      	cbnz	r3, 800e140 <iprintf+0x14>
 800e13a:	4620      	mov	r0, r4
 800e13c:	f000 faa2 	bl	800e684 <__sinit>
 800e140:	ab05      	add	r3, sp, #20
 800e142:	9a04      	ldr	r2, [sp, #16]
 800e144:	68a1      	ldr	r1, [r4, #8]
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	4620      	mov	r0, r4
 800e14a:	f000 fd33 	bl	800ebb4 <_vfiprintf_r>
 800e14e:	b002      	add	sp, #8
 800e150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e154:	b004      	add	sp, #16
 800e156:	4770      	bx	lr
 800e158:	20000040 	.word	0x20000040

0800e15c <_puts_r>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	460e      	mov	r6, r1
 800e160:	4605      	mov	r5, r0
 800e162:	b118      	cbz	r0, 800e16c <_puts_r+0x10>
 800e164:	6983      	ldr	r3, [r0, #24]
 800e166:	b90b      	cbnz	r3, 800e16c <_puts_r+0x10>
 800e168:	f000 fa8c 	bl	800e684 <__sinit>
 800e16c:	69ab      	ldr	r3, [r5, #24]
 800e16e:	68ac      	ldr	r4, [r5, #8]
 800e170:	b913      	cbnz	r3, 800e178 <_puts_r+0x1c>
 800e172:	4628      	mov	r0, r5
 800e174:	f000 fa86 	bl	800e684 <__sinit>
 800e178:	4b2c      	ldr	r3, [pc, #176]	; (800e22c <_puts_r+0xd0>)
 800e17a:	429c      	cmp	r4, r3
 800e17c:	d120      	bne.n	800e1c0 <_puts_r+0x64>
 800e17e:	686c      	ldr	r4, [r5, #4]
 800e180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e182:	07db      	lsls	r3, r3, #31
 800e184:	d405      	bmi.n	800e192 <_puts_r+0x36>
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	0598      	lsls	r0, r3, #22
 800e18a:	d402      	bmi.n	800e192 <_puts_r+0x36>
 800e18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e18e:	f000 fb17 	bl	800e7c0 <__retarget_lock_acquire_recursive>
 800e192:	89a3      	ldrh	r3, [r4, #12]
 800e194:	0719      	lsls	r1, r3, #28
 800e196:	d51d      	bpl.n	800e1d4 <_puts_r+0x78>
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	b1db      	cbz	r3, 800e1d4 <_puts_r+0x78>
 800e19c:	3e01      	subs	r6, #1
 800e19e:	68a3      	ldr	r3, [r4, #8]
 800e1a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	60a3      	str	r3, [r4, #8]
 800e1a8:	bb39      	cbnz	r1, 800e1fa <_puts_r+0x9e>
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	da38      	bge.n	800e220 <_puts_r+0xc4>
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	210a      	movs	r1, #10
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f000 f88c 	bl	800e2d0 <__swbuf_r>
 800e1b8:	3001      	adds	r0, #1
 800e1ba:	d011      	beq.n	800e1e0 <_puts_r+0x84>
 800e1bc:	250a      	movs	r5, #10
 800e1be:	e011      	b.n	800e1e4 <_puts_r+0x88>
 800e1c0:	4b1b      	ldr	r3, [pc, #108]	; (800e230 <_puts_r+0xd4>)
 800e1c2:	429c      	cmp	r4, r3
 800e1c4:	d101      	bne.n	800e1ca <_puts_r+0x6e>
 800e1c6:	68ac      	ldr	r4, [r5, #8]
 800e1c8:	e7da      	b.n	800e180 <_puts_r+0x24>
 800e1ca:	4b1a      	ldr	r3, [pc, #104]	; (800e234 <_puts_r+0xd8>)
 800e1cc:	429c      	cmp	r4, r3
 800e1ce:	bf08      	it	eq
 800e1d0:	68ec      	ldreq	r4, [r5, #12]
 800e1d2:	e7d5      	b.n	800e180 <_puts_r+0x24>
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	f000 f8cc 	bl	800e374 <__swsetup_r>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d0dd      	beq.n	800e19c <_puts_r+0x40>
 800e1e0:	f04f 35ff 	mov.w	r5, #4294967295
 800e1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1e6:	07da      	lsls	r2, r3, #31
 800e1e8:	d405      	bmi.n	800e1f6 <_puts_r+0x9a>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <_puts_r+0x9a>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f000 fae6 	bl	800e7c2 <__retarget_lock_release_recursive>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	bd70      	pop	{r4, r5, r6, pc}
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	da04      	bge.n	800e208 <_puts_r+0xac>
 800e1fe:	69a2      	ldr	r2, [r4, #24]
 800e200:	429a      	cmp	r2, r3
 800e202:	dc06      	bgt.n	800e212 <_puts_r+0xb6>
 800e204:	290a      	cmp	r1, #10
 800e206:	d004      	beq.n	800e212 <_puts_r+0xb6>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	6022      	str	r2, [r4, #0]
 800e20e:	7019      	strb	r1, [r3, #0]
 800e210:	e7c5      	b.n	800e19e <_puts_r+0x42>
 800e212:	4622      	mov	r2, r4
 800e214:	4628      	mov	r0, r5
 800e216:	f000 f85b 	bl	800e2d0 <__swbuf_r>
 800e21a:	3001      	adds	r0, #1
 800e21c:	d1bf      	bne.n	800e19e <_puts_r+0x42>
 800e21e:	e7df      	b.n	800e1e0 <_puts_r+0x84>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	250a      	movs	r5, #10
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	6022      	str	r2, [r4, #0]
 800e228:	701d      	strb	r5, [r3, #0]
 800e22a:	e7db      	b.n	800e1e4 <_puts_r+0x88>
 800e22c:	080112e0 	.word	0x080112e0
 800e230:	08011300 	.word	0x08011300
 800e234:	080112c0 	.word	0x080112c0

0800e238 <puts>:
 800e238:	4b02      	ldr	r3, [pc, #8]	; (800e244 <puts+0xc>)
 800e23a:	4601      	mov	r1, r0
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	f7ff bf8d 	b.w	800e15c <_puts_r>
 800e242:	bf00      	nop
 800e244:	20000040 	.word	0x20000040

0800e248 <_sbrk_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4d06      	ldr	r5, [pc, #24]	; (800e264 <_sbrk_r+0x1c>)
 800e24c:	2300      	movs	r3, #0
 800e24e:	4604      	mov	r4, r0
 800e250:	4608      	mov	r0, r1
 800e252:	602b      	str	r3, [r5, #0]
 800e254:	f7f5 f92e 	bl	80034b4 <_sbrk>
 800e258:	1c43      	adds	r3, r0, #1
 800e25a:	d102      	bne.n	800e262 <_sbrk_r+0x1a>
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	b103      	cbz	r3, 800e262 <_sbrk_r+0x1a>
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	2000075c 	.word	0x2000075c

0800e268 <siprintf>:
 800e268:	b40e      	push	{r1, r2, r3}
 800e26a:	b500      	push	{lr}
 800e26c:	b09c      	sub	sp, #112	; 0x70
 800e26e:	ab1d      	add	r3, sp, #116	; 0x74
 800e270:	9002      	str	r0, [sp, #8]
 800e272:	9006      	str	r0, [sp, #24]
 800e274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e278:	4809      	ldr	r0, [pc, #36]	; (800e2a0 <siprintf+0x38>)
 800e27a:	9107      	str	r1, [sp, #28]
 800e27c:	9104      	str	r1, [sp, #16]
 800e27e:	4909      	ldr	r1, [pc, #36]	; (800e2a4 <siprintf+0x3c>)
 800e280:	f853 2b04 	ldr.w	r2, [r3], #4
 800e284:	9105      	str	r1, [sp, #20]
 800e286:	6800      	ldr	r0, [r0, #0]
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	a902      	add	r1, sp, #8
 800e28c:	f000 fb68 	bl	800e960 <_svfiprintf_r>
 800e290:	9b02      	ldr	r3, [sp, #8]
 800e292:	2200      	movs	r2, #0
 800e294:	701a      	strb	r2, [r3, #0]
 800e296:	b01c      	add	sp, #112	; 0x70
 800e298:	f85d eb04 	ldr.w	lr, [sp], #4
 800e29c:	b003      	add	sp, #12
 800e29e:	4770      	bx	lr
 800e2a0:	20000040 	.word	0x20000040
 800e2a4:	ffff0208 	.word	0xffff0208

0800e2a8 <strrchr>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	b969      	cbnz	r1, 800e2cc <strrchr+0x24>
 800e2b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2b4:	f000 bf85 	b.w	800f1c2 <strchr>
 800e2b8:	1c43      	adds	r3, r0, #1
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 ff7f 	bl	800f1c2 <strchr>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d1f7      	bne.n	800e2b8 <strrchr+0x10>
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	2500      	movs	r5, #0
 800e2ce:	e7f5      	b.n	800e2bc <strrchr+0x14>

0800e2d0 <__swbuf_r>:
 800e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d2:	460e      	mov	r6, r1
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	b118      	cbz	r0, 800e2e2 <__swbuf_r+0x12>
 800e2da:	6983      	ldr	r3, [r0, #24]
 800e2dc:	b90b      	cbnz	r3, 800e2e2 <__swbuf_r+0x12>
 800e2de:	f000 f9d1 	bl	800e684 <__sinit>
 800e2e2:	4b21      	ldr	r3, [pc, #132]	; (800e368 <__swbuf_r+0x98>)
 800e2e4:	429c      	cmp	r4, r3
 800e2e6:	d12b      	bne.n	800e340 <__swbuf_r+0x70>
 800e2e8:	686c      	ldr	r4, [r5, #4]
 800e2ea:	69a3      	ldr	r3, [r4, #24]
 800e2ec:	60a3      	str	r3, [r4, #8]
 800e2ee:	89a3      	ldrh	r3, [r4, #12]
 800e2f0:	071a      	lsls	r2, r3, #28
 800e2f2:	d52f      	bpl.n	800e354 <__swbuf_r+0x84>
 800e2f4:	6923      	ldr	r3, [r4, #16]
 800e2f6:	b36b      	cbz	r3, 800e354 <__swbuf_r+0x84>
 800e2f8:	6923      	ldr	r3, [r4, #16]
 800e2fa:	6820      	ldr	r0, [r4, #0]
 800e2fc:	1ac0      	subs	r0, r0, r3
 800e2fe:	6963      	ldr	r3, [r4, #20]
 800e300:	b2f6      	uxtb	r6, r6
 800e302:	4283      	cmp	r3, r0
 800e304:	4637      	mov	r7, r6
 800e306:	dc04      	bgt.n	800e312 <__swbuf_r+0x42>
 800e308:	4621      	mov	r1, r4
 800e30a:	4628      	mov	r0, r5
 800e30c:	f000 f926 	bl	800e55c <_fflush_r>
 800e310:	bb30      	cbnz	r0, 800e360 <__swbuf_r+0x90>
 800e312:	68a3      	ldr	r3, [r4, #8]
 800e314:	3b01      	subs	r3, #1
 800e316:	60a3      	str	r3, [r4, #8]
 800e318:	6823      	ldr	r3, [r4, #0]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	6022      	str	r2, [r4, #0]
 800e31e:	701e      	strb	r6, [r3, #0]
 800e320:	6963      	ldr	r3, [r4, #20]
 800e322:	3001      	adds	r0, #1
 800e324:	4283      	cmp	r3, r0
 800e326:	d004      	beq.n	800e332 <__swbuf_r+0x62>
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	07db      	lsls	r3, r3, #31
 800e32c:	d506      	bpl.n	800e33c <__swbuf_r+0x6c>
 800e32e:	2e0a      	cmp	r6, #10
 800e330:	d104      	bne.n	800e33c <__swbuf_r+0x6c>
 800e332:	4621      	mov	r1, r4
 800e334:	4628      	mov	r0, r5
 800e336:	f000 f911 	bl	800e55c <_fflush_r>
 800e33a:	b988      	cbnz	r0, 800e360 <__swbuf_r+0x90>
 800e33c:	4638      	mov	r0, r7
 800e33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <__swbuf_r+0x9c>)
 800e342:	429c      	cmp	r4, r3
 800e344:	d101      	bne.n	800e34a <__swbuf_r+0x7a>
 800e346:	68ac      	ldr	r4, [r5, #8]
 800e348:	e7cf      	b.n	800e2ea <__swbuf_r+0x1a>
 800e34a:	4b09      	ldr	r3, [pc, #36]	; (800e370 <__swbuf_r+0xa0>)
 800e34c:	429c      	cmp	r4, r3
 800e34e:	bf08      	it	eq
 800e350:	68ec      	ldreq	r4, [r5, #12]
 800e352:	e7ca      	b.n	800e2ea <__swbuf_r+0x1a>
 800e354:	4621      	mov	r1, r4
 800e356:	4628      	mov	r0, r5
 800e358:	f000 f80c 	bl	800e374 <__swsetup_r>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d0cb      	beq.n	800e2f8 <__swbuf_r+0x28>
 800e360:	f04f 37ff 	mov.w	r7, #4294967295
 800e364:	e7ea      	b.n	800e33c <__swbuf_r+0x6c>
 800e366:	bf00      	nop
 800e368:	080112e0 	.word	0x080112e0
 800e36c:	08011300 	.word	0x08011300
 800e370:	080112c0 	.word	0x080112c0

0800e374 <__swsetup_r>:
 800e374:	4b32      	ldr	r3, [pc, #200]	; (800e440 <__swsetup_r+0xcc>)
 800e376:	b570      	push	{r4, r5, r6, lr}
 800e378:	681d      	ldr	r5, [r3, #0]
 800e37a:	4606      	mov	r6, r0
 800e37c:	460c      	mov	r4, r1
 800e37e:	b125      	cbz	r5, 800e38a <__swsetup_r+0x16>
 800e380:	69ab      	ldr	r3, [r5, #24]
 800e382:	b913      	cbnz	r3, 800e38a <__swsetup_r+0x16>
 800e384:	4628      	mov	r0, r5
 800e386:	f000 f97d 	bl	800e684 <__sinit>
 800e38a:	4b2e      	ldr	r3, [pc, #184]	; (800e444 <__swsetup_r+0xd0>)
 800e38c:	429c      	cmp	r4, r3
 800e38e:	d10f      	bne.n	800e3b0 <__swsetup_r+0x3c>
 800e390:	686c      	ldr	r4, [r5, #4]
 800e392:	89a3      	ldrh	r3, [r4, #12]
 800e394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e398:	0719      	lsls	r1, r3, #28
 800e39a:	d42c      	bmi.n	800e3f6 <__swsetup_r+0x82>
 800e39c:	06dd      	lsls	r5, r3, #27
 800e39e:	d411      	bmi.n	800e3c4 <__swsetup_r+0x50>
 800e3a0:	2309      	movs	r3, #9
 800e3a2:	6033      	str	r3, [r6, #0]
 800e3a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3a8:	81a3      	strh	r3, [r4, #12]
 800e3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ae:	e03e      	b.n	800e42e <__swsetup_r+0xba>
 800e3b0:	4b25      	ldr	r3, [pc, #148]	; (800e448 <__swsetup_r+0xd4>)
 800e3b2:	429c      	cmp	r4, r3
 800e3b4:	d101      	bne.n	800e3ba <__swsetup_r+0x46>
 800e3b6:	68ac      	ldr	r4, [r5, #8]
 800e3b8:	e7eb      	b.n	800e392 <__swsetup_r+0x1e>
 800e3ba:	4b24      	ldr	r3, [pc, #144]	; (800e44c <__swsetup_r+0xd8>)
 800e3bc:	429c      	cmp	r4, r3
 800e3be:	bf08      	it	eq
 800e3c0:	68ec      	ldreq	r4, [r5, #12]
 800e3c2:	e7e6      	b.n	800e392 <__swsetup_r+0x1e>
 800e3c4:	0758      	lsls	r0, r3, #29
 800e3c6:	d512      	bpl.n	800e3ee <__swsetup_r+0x7a>
 800e3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3ca:	b141      	cbz	r1, 800e3de <__swsetup_r+0x6a>
 800e3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3d0:	4299      	cmp	r1, r3
 800e3d2:	d002      	beq.n	800e3da <__swsetup_r+0x66>
 800e3d4:	4630      	mov	r0, r6
 800e3d6:	f7ff fdc9 	bl	800df6c <_free_r>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	6363      	str	r3, [r4, #52]	; 0x34
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3e4:	81a3      	strh	r3, [r4, #12]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	6063      	str	r3, [r4, #4]
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	89a3      	ldrh	r3, [r4, #12]
 800e3f0:	f043 0308 	orr.w	r3, r3, #8
 800e3f4:	81a3      	strh	r3, [r4, #12]
 800e3f6:	6923      	ldr	r3, [r4, #16]
 800e3f8:	b94b      	cbnz	r3, 800e40e <__swsetup_r+0x9a>
 800e3fa:	89a3      	ldrh	r3, [r4, #12]
 800e3fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e404:	d003      	beq.n	800e40e <__swsetup_r+0x9a>
 800e406:	4621      	mov	r1, r4
 800e408:	4630      	mov	r0, r6
 800e40a:	f000 fa01 	bl	800e810 <__smakebuf_r>
 800e40e:	89a0      	ldrh	r0, [r4, #12]
 800e410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e414:	f010 0301 	ands.w	r3, r0, #1
 800e418:	d00a      	beq.n	800e430 <__swsetup_r+0xbc>
 800e41a:	2300      	movs	r3, #0
 800e41c:	60a3      	str	r3, [r4, #8]
 800e41e:	6963      	ldr	r3, [r4, #20]
 800e420:	425b      	negs	r3, r3
 800e422:	61a3      	str	r3, [r4, #24]
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	b943      	cbnz	r3, 800e43a <__swsetup_r+0xc6>
 800e428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e42c:	d1ba      	bne.n	800e3a4 <__swsetup_r+0x30>
 800e42e:	bd70      	pop	{r4, r5, r6, pc}
 800e430:	0781      	lsls	r1, r0, #30
 800e432:	bf58      	it	pl
 800e434:	6963      	ldrpl	r3, [r4, #20]
 800e436:	60a3      	str	r3, [r4, #8]
 800e438:	e7f4      	b.n	800e424 <__swsetup_r+0xb0>
 800e43a:	2000      	movs	r0, #0
 800e43c:	e7f7      	b.n	800e42e <__swsetup_r+0xba>
 800e43e:	bf00      	nop
 800e440:	20000040 	.word	0x20000040
 800e444:	080112e0 	.word	0x080112e0
 800e448:	08011300 	.word	0x08011300
 800e44c:	080112c0 	.word	0x080112c0

0800e450 <__sflush_r>:
 800e450:	898a      	ldrh	r2, [r1, #12]
 800e452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e456:	4605      	mov	r5, r0
 800e458:	0710      	lsls	r0, r2, #28
 800e45a:	460c      	mov	r4, r1
 800e45c:	d458      	bmi.n	800e510 <__sflush_r+0xc0>
 800e45e:	684b      	ldr	r3, [r1, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	dc05      	bgt.n	800e470 <__sflush_r+0x20>
 800e464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e466:	2b00      	cmp	r3, #0
 800e468:	dc02      	bgt.n	800e470 <__sflush_r+0x20>
 800e46a:	2000      	movs	r0, #0
 800e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e472:	2e00      	cmp	r6, #0
 800e474:	d0f9      	beq.n	800e46a <__sflush_r+0x1a>
 800e476:	2300      	movs	r3, #0
 800e478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e47c:	682f      	ldr	r7, [r5, #0]
 800e47e:	602b      	str	r3, [r5, #0]
 800e480:	d032      	beq.n	800e4e8 <__sflush_r+0x98>
 800e482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	075a      	lsls	r2, r3, #29
 800e488:	d505      	bpl.n	800e496 <__sflush_r+0x46>
 800e48a:	6863      	ldr	r3, [r4, #4]
 800e48c:	1ac0      	subs	r0, r0, r3
 800e48e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e490:	b10b      	cbz	r3, 800e496 <__sflush_r+0x46>
 800e492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e494:	1ac0      	subs	r0, r0, r3
 800e496:	2300      	movs	r3, #0
 800e498:	4602      	mov	r2, r0
 800e49a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e49c:	6a21      	ldr	r1, [r4, #32]
 800e49e:	4628      	mov	r0, r5
 800e4a0:	47b0      	blx	r6
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	d106      	bne.n	800e4b6 <__sflush_r+0x66>
 800e4a8:	6829      	ldr	r1, [r5, #0]
 800e4aa:	291d      	cmp	r1, #29
 800e4ac:	d82c      	bhi.n	800e508 <__sflush_r+0xb8>
 800e4ae:	4a2a      	ldr	r2, [pc, #168]	; (800e558 <__sflush_r+0x108>)
 800e4b0:	40ca      	lsrs	r2, r1
 800e4b2:	07d6      	lsls	r6, r2, #31
 800e4b4:	d528      	bpl.n	800e508 <__sflush_r+0xb8>
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	6062      	str	r2, [r4, #4]
 800e4ba:	04d9      	lsls	r1, r3, #19
 800e4bc:	6922      	ldr	r2, [r4, #16]
 800e4be:	6022      	str	r2, [r4, #0]
 800e4c0:	d504      	bpl.n	800e4cc <__sflush_r+0x7c>
 800e4c2:	1c42      	adds	r2, r0, #1
 800e4c4:	d101      	bne.n	800e4ca <__sflush_r+0x7a>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	b903      	cbnz	r3, 800e4cc <__sflush_r+0x7c>
 800e4ca:	6560      	str	r0, [r4, #84]	; 0x54
 800e4cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4ce:	602f      	str	r7, [r5, #0]
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	d0ca      	beq.n	800e46a <__sflush_r+0x1a>
 800e4d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4d8:	4299      	cmp	r1, r3
 800e4da:	d002      	beq.n	800e4e2 <__sflush_r+0x92>
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f7ff fd45 	bl	800df6c <_free_r>
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	6360      	str	r0, [r4, #52]	; 0x34
 800e4e6:	e7c1      	b.n	800e46c <__sflush_r+0x1c>
 800e4e8:	6a21      	ldr	r1, [r4, #32]
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	47b0      	blx	r6
 800e4f0:	1c41      	adds	r1, r0, #1
 800e4f2:	d1c7      	bne.n	800e484 <__sflush_r+0x34>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d0c4      	beq.n	800e484 <__sflush_r+0x34>
 800e4fa:	2b1d      	cmp	r3, #29
 800e4fc:	d001      	beq.n	800e502 <__sflush_r+0xb2>
 800e4fe:	2b16      	cmp	r3, #22
 800e500:	d101      	bne.n	800e506 <__sflush_r+0xb6>
 800e502:	602f      	str	r7, [r5, #0]
 800e504:	e7b1      	b.n	800e46a <__sflush_r+0x1a>
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	e7ad      	b.n	800e46c <__sflush_r+0x1c>
 800e510:	690f      	ldr	r7, [r1, #16]
 800e512:	2f00      	cmp	r7, #0
 800e514:	d0a9      	beq.n	800e46a <__sflush_r+0x1a>
 800e516:	0793      	lsls	r3, r2, #30
 800e518:	680e      	ldr	r6, [r1, #0]
 800e51a:	bf08      	it	eq
 800e51c:	694b      	ldreq	r3, [r1, #20]
 800e51e:	600f      	str	r7, [r1, #0]
 800e520:	bf18      	it	ne
 800e522:	2300      	movne	r3, #0
 800e524:	eba6 0807 	sub.w	r8, r6, r7
 800e528:	608b      	str	r3, [r1, #8]
 800e52a:	f1b8 0f00 	cmp.w	r8, #0
 800e52e:	dd9c      	ble.n	800e46a <__sflush_r+0x1a>
 800e530:	6a21      	ldr	r1, [r4, #32]
 800e532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e534:	4643      	mov	r3, r8
 800e536:	463a      	mov	r2, r7
 800e538:	4628      	mov	r0, r5
 800e53a:	47b0      	blx	r6
 800e53c:	2800      	cmp	r0, #0
 800e53e:	dc06      	bgt.n	800e54e <__sflush_r+0xfe>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	f04f 30ff 	mov.w	r0, #4294967295
 800e54c:	e78e      	b.n	800e46c <__sflush_r+0x1c>
 800e54e:	4407      	add	r7, r0
 800e550:	eba8 0800 	sub.w	r8, r8, r0
 800e554:	e7e9      	b.n	800e52a <__sflush_r+0xda>
 800e556:	bf00      	nop
 800e558:	20400001 	.word	0x20400001

0800e55c <_fflush_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	690b      	ldr	r3, [r1, #16]
 800e560:	4605      	mov	r5, r0
 800e562:	460c      	mov	r4, r1
 800e564:	b913      	cbnz	r3, 800e56c <_fflush_r+0x10>
 800e566:	2500      	movs	r5, #0
 800e568:	4628      	mov	r0, r5
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	b118      	cbz	r0, 800e576 <_fflush_r+0x1a>
 800e56e:	6983      	ldr	r3, [r0, #24]
 800e570:	b90b      	cbnz	r3, 800e576 <_fflush_r+0x1a>
 800e572:	f000 f887 	bl	800e684 <__sinit>
 800e576:	4b14      	ldr	r3, [pc, #80]	; (800e5c8 <_fflush_r+0x6c>)
 800e578:	429c      	cmp	r4, r3
 800e57a:	d11b      	bne.n	800e5b4 <_fflush_r+0x58>
 800e57c:	686c      	ldr	r4, [r5, #4]
 800e57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d0ef      	beq.n	800e566 <_fflush_r+0xa>
 800e586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e588:	07d0      	lsls	r0, r2, #31
 800e58a:	d404      	bmi.n	800e596 <_fflush_r+0x3a>
 800e58c:	0599      	lsls	r1, r3, #22
 800e58e:	d402      	bmi.n	800e596 <_fflush_r+0x3a>
 800e590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e592:	f000 f915 	bl	800e7c0 <__retarget_lock_acquire_recursive>
 800e596:	4628      	mov	r0, r5
 800e598:	4621      	mov	r1, r4
 800e59a:	f7ff ff59 	bl	800e450 <__sflush_r>
 800e59e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a0:	07da      	lsls	r2, r3, #31
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	d4e0      	bmi.n	800e568 <_fflush_r+0xc>
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	059b      	lsls	r3, r3, #22
 800e5aa:	d4dd      	bmi.n	800e568 <_fflush_r+0xc>
 800e5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ae:	f000 f908 	bl	800e7c2 <__retarget_lock_release_recursive>
 800e5b2:	e7d9      	b.n	800e568 <_fflush_r+0xc>
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <_fflush_r+0x70>)
 800e5b6:	429c      	cmp	r4, r3
 800e5b8:	d101      	bne.n	800e5be <_fflush_r+0x62>
 800e5ba:	68ac      	ldr	r4, [r5, #8]
 800e5bc:	e7df      	b.n	800e57e <_fflush_r+0x22>
 800e5be:	4b04      	ldr	r3, [pc, #16]	; (800e5d0 <_fflush_r+0x74>)
 800e5c0:	429c      	cmp	r4, r3
 800e5c2:	bf08      	it	eq
 800e5c4:	68ec      	ldreq	r4, [r5, #12]
 800e5c6:	e7da      	b.n	800e57e <_fflush_r+0x22>
 800e5c8:	080112e0 	.word	0x080112e0
 800e5cc:	08011300 	.word	0x08011300
 800e5d0:	080112c0 	.word	0x080112c0

0800e5d4 <std>:
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	b510      	push	{r4, lr}
 800e5d8:	4604      	mov	r4, r0
 800e5da:	e9c0 3300 	strd	r3, r3, [r0]
 800e5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5e2:	6083      	str	r3, [r0, #8]
 800e5e4:	8181      	strh	r1, [r0, #12]
 800e5e6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5e8:	81c2      	strh	r2, [r0, #14]
 800e5ea:	6183      	str	r3, [r0, #24]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	2208      	movs	r2, #8
 800e5f0:	305c      	adds	r0, #92	; 0x5c
 800e5f2:	f7ff fcb3 	bl	800df5c <memset>
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <std+0x38>)
 800e5f8:	6263      	str	r3, [r4, #36]	; 0x24
 800e5fa:	4b05      	ldr	r3, [pc, #20]	; (800e610 <std+0x3c>)
 800e5fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5fe:	4b05      	ldr	r3, [pc, #20]	; (800e614 <std+0x40>)
 800e600:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <std+0x44>)
 800e604:	6224      	str	r4, [r4, #32]
 800e606:	6323      	str	r3, [r4, #48]	; 0x30
 800e608:	bd10      	pop	{r4, pc}
 800e60a:	bf00      	nop
 800e60c:	0800f13d 	.word	0x0800f13d
 800e610:	0800f15f 	.word	0x0800f15f
 800e614:	0800f197 	.word	0x0800f197
 800e618:	0800f1bb 	.word	0x0800f1bb

0800e61c <_cleanup_r>:
 800e61c:	4901      	ldr	r1, [pc, #4]	; (800e624 <_cleanup_r+0x8>)
 800e61e:	f000 b8af 	b.w	800e780 <_fwalk_reent>
 800e622:	bf00      	nop
 800e624:	0800e55d 	.word	0x0800e55d

0800e628 <__sfmoreglue>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	2268      	movs	r2, #104	; 0x68
 800e62c:	1e4d      	subs	r5, r1, #1
 800e62e:	4355      	muls	r5, r2
 800e630:	460e      	mov	r6, r1
 800e632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e636:	f7ff fd05 	bl	800e044 <_malloc_r>
 800e63a:	4604      	mov	r4, r0
 800e63c:	b140      	cbz	r0, 800e650 <__sfmoreglue+0x28>
 800e63e:	2100      	movs	r1, #0
 800e640:	e9c0 1600 	strd	r1, r6, [r0]
 800e644:	300c      	adds	r0, #12
 800e646:	60a0      	str	r0, [r4, #8]
 800e648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e64c:	f7ff fc86 	bl	800df5c <memset>
 800e650:	4620      	mov	r0, r4
 800e652:	bd70      	pop	{r4, r5, r6, pc}

0800e654 <__sfp_lock_acquire>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__sfp_lock_acquire+0x8>)
 800e656:	f000 b8b3 	b.w	800e7c0 <__retarget_lock_acquire_recursive>
 800e65a:	bf00      	nop
 800e65c:	20000759 	.word	0x20000759

0800e660 <__sfp_lock_release>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__sfp_lock_release+0x8>)
 800e662:	f000 b8ae 	b.w	800e7c2 <__retarget_lock_release_recursive>
 800e666:	bf00      	nop
 800e668:	20000759 	.word	0x20000759

0800e66c <__sinit_lock_acquire>:
 800e66c:	4801      	ldr	r0, [pc, #4]	; (800e674 <__sinit_lock_acquire+0x8>)
 800e66e:	f000 b8a7 	b.w	800e7c0 <__retarget_lock_acquire_recursive>
 800e672:	bf00      	nop
 800e674:	2000075a 	.word	0x2000075a

0800e678 <__sinit_lock_release>:
 800e678:	4801      	ldr	r0, [pc, #4]	; (800e680 <__sinit_lock_release+0x8>)
 800e67a:	f000 b8a2 	b.w	800e7c2 <__retarget_lock_release_recursive>
 800e67e:	bf00      	nop
 800e680:	2000075a 	.word	0x2000075a

0800e684 <__sinit>:
 800e684:	b510      	push	{r4, lr}
 800e686:	4604      	mov	r4, r0
 800e688:	f7ff fff0 	bl	800e66c <__sinit_lock_acquire>
 800e68c:	69a3      	ldr	r3, [r4, #24]
 800e68e:	b11b      	cbz	r3, 800e698 <__sinit+0x14>
 800e690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e694:	f7ff bff0 	b.w	800e678 <__sinit_lock_release>
 800e698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e69c:	6523      	str	r3, [r4, #80]	; 0x50
 800e69e:	4b13      	ldr	r3, [pc, #76]	; (800e6ec <__sinit+0x68>)
 800e6a0:	4a13      	ldr	r2, [pc, #76]	; (800e6f0 <__sinit+0x6c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6a6:	42a3      	cmp	r3, r4
 800e6a8:	bf04      	itt	eq
 800e6aa:	2301      	moveq	r3, #1
 800e6ac:	61a3      	streq	r3, [r4, #24]
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f000 f820 	bl	800e6f4 <__sfp>
 800e6b4:	6060      	str	r0, [r4, #4]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f000 f81c 	bl	800e6f4 <__sfp>
 800e6bc:	60a0      	str	r0, [r4, #8]
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 f818 	bl	800e6f4 <__sfp>
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	60e0      	str	r0, [r4, #12]
 800e6c8:	2104      	movs	r1, #4
 800e6ca:	6860      	ldr	r0, [r4, #4]
 800e6cc:	f7ff ff82 	bl	800e5d4 <std>
 800e6d0:	68a0      	ldr	r0, [r4, #8]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	2109      	movs	r1, #9
 800e6d6:	f7ff ff7d 	bl	800e5d4 <std>
 800e6da:	68e0      	ldr	r0, [r4, #12]
 800e6dc:	2202      	movs	r2, #2
 800e6de:	2112      	movs	r1, #18
 800e6e0:	f7ff ff78 	bl	800e5d4 <std>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	61a3      	str	r3, [r4, #24]
 800e6e8:	e7d2      	b.n	800e690 <__sinit+0xc>
 800e6ea:	bf00      	nop
 800e6ec:	080112bc 	.word	0x080112bc
 800e6f0:	0800e61d 	.word	0x0800e61d

0800e6f4 <__sfp>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	f7ff ffac 	bl	800e654 <__sfp_lock_acquire>
 800e6fc:	4b1e      	ldr	r3, [pc, #120]	; (800e778 <__sfp+0x84>)
 800e6fe:	681e      	ldr	r6, [r3, #0]
 800e700:	69b3      	ldr	r3, [r6, #24]
 800e702:	b913      	cbnz	r3, 800e70a <__sfp+0x16>
 800e704:	4630      	mov	r0, r6
 800e706:	f7ff ffbd 	bl	800e684 <__sinit>
 800e70a:	3648      	adds	r6, #72	; 0x48
 800e70c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e710:	3b01      	subs	r3, #1
 800e712:	d503      	bpl.n	800e71c <__sfp+0x28>
 800e714:	6833      	ldr	r3, [r6, #0]
 800e716:	b30b      	cbz	r3, 800e75c <__sfp+0x68>
 800e718:	6836      	ldr	r6, [r6, #0]
 800e71a:	e7f7      	b.n	800e70c <__sfp+0x18>
 800e71c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e720:	b9d5      	cbnz	r5, 800e758 <__sfp+0x64>
 800e722:	4b16      	ldr	r3, [pc, #88]	; (800e77c <__sfp+0x88>)
 800e724:	60e3      	str	r3, [r4, #12]
 800e726:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e72a:	6665      	str	r5, [r4, #100]	; 0x64
 800e72c:	f000 f847 	bl	800e7be <__retarget_lock_init_recursive>
 800e730:	f7ff ff96 	bl	800e660 <__sfp_lock_release>
 800e734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e73c:	6025      	str	r5, [r4, #0]
 800e73e:	61a5      	str	r5, [r4, #24]
 800e740:	2208      	movs	r2, #8
 800e742:	4629      	mov	r1, r5
 800e744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e748:	f7ff fc08 	bl	800df5c <memset>
 800e74c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e754:	4620      	mov	r0, r4
 800e756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e758:	3468      	adds	r4, #104	; 0x68
 800e75a:	e7d9      	b.n	800e710 <__sfp+0x1c>
 800e75c:	2104      	movs	r1, #4
 800e75e:	4638      	mov	r0, r7
 800e760:	f7ff ff62 	bl	800e628 <__sfmoreglue>
 800e764:	4604      	mov	r4, r0
 800e766:	6030      	str	r0, [r6, #0]
 800e768:	2800      	cmp	r0, #0
 800e76a:	d1d5      	bne.n	800e718 <__sfp+0x24>
 800e76c:	f7ff ff78 	bl	800e660 <__sfp_lock_release>
 800e770:	230c      	movs	r3, #12
 800e772:	603b      	str	r3, [r7, #0]
 800e774:	e7ee      	b.n	800e754 <__sfp+0x60>
 800e776:	bf00      	nop
 800e778:	080112bc 	.word	0x080112bc
 800e77c:	ffff0001 	.word	0xffff0001

0800e780 <_fwalk_reent>:
 800e780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e784:	4606      	mov	r6, r0
 800e786:	4688      	mov	r8, r1
 800e788:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e78c:	2700      	movs	r7, #0
 800e78e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e792:	f1b9 0901 	subs.w	r9, r9, #1
 800e796:	d505      	bpl.n	800e7a4 <_fwalk_reent+0x24>
 800e798:	6824      	ldr	r4, [r4, #0]
 800e79a:	2c00      	cmp	r4, #0
 800e79c:	d1f7      	bne.n	800e78e <_fwalk_reent+0xe>
 800e79e:	4638      	mov	r0, r7
 800e7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7a4:	89ab      	ldrh	r3, [r5, #12]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d907      	bls.n	800e7ba <_fwalk_reent+0x3a>
 800e7aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	d003      	beq.n	800e7ba <_fwalk_reent+0x3a>
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	47c0      	blx	r8
 800e7b8:	4307      	orrs	r7, r0
 800e7ba:	3568      	adds	r5, #104	; 0x68
 800e7bc:	e7e9      	b.n	800e792 <_fwalk_reent+0x12>

0800e7be <__retarget_lock_init_recursive>:
 800e7be:	4770      	bx	lr

0800e7c0 <__retarget_lock_acquire_recursive>:
 800e7c0:	4770      	bx	lr

0800e7c2 <__retarget_lock_release_recursive>:
 800e7c2:	4770      	bx	lr

0800e7c4 <__swhatbuf_r>:
 800e7c4:	b570      	push	{r4, r5, r6, lr}
 800e7c6:	460e      	mov	r6, r1
 800e7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	b096      	sub	sp, #88	; 0x58
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	461d      	mov	r5, r3
 800e7d4:	da08      	bge.n	800e7e8 <__swhatbuf_r+0x24>
 800e7d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	061a      	lsls	r2, r3, #24
 800e7e0:	d410      	bmi.n	800e804 <__swhatbuf_r+0x40>
 800e7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7e6:	e00e      	b.n	800e806 <__swhatbuf_r+0x42>
 800e7e8:	466a      	mov	r2, sp
 800e7ea:	f000 fd19 	bl	800f220 <_fstat_r>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	dbf1      	blt.n	800e7d6 <__swhatbuf_r+0x12>
 800e7f2:	9a01      	ldr	r2, [sp, #4]
 800e7f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7fc:	425a      	negs	r2, r3
 800e7fe:	415a      	adcs	r2, r3
 800e800:	602a      	str	r2, [r5, #0]
 800e802:	e7ee      	b.n	800e7e2 <__swhatbuf_r+0x1e>
 800e804:	2340      	movs	r3, #64	; 0x40
 800e806:	2000      	movs	r0, #0
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	b016      	add	sp, #88	; 0x58
 800e80c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e810 <__smakebuf_r>:
 800e810:	898b      	ldrh	r3, [r1, #12]
 800e812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e814:	079d      	lsls	r5, r3, #30
 800e816:	4606      	mov	r6, r0
 800e818:	460c      	mov	r4, r1
 800e81a:	d507      	bpl.n	800e82c <__smakebuf_r+0x1c>
 800e81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	2301      	movs	r3, #1
 800e826:	6163      	str	r3, [r4, #20]
 800e828:	b002      	add	sp, #8
 800e82a:	bd70      	pop	{r4, r5, r6, pc}
 800e82c:	ab01      	add	r3, sp, #4
 800e82e:	466a      	mov	r2, sp
 800e830:	f7ff ffc8 	bl	800e7c4 <__swhatbuf_r>
 800e834:	9900      	ldr	r1, [sp, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff fc03 	bl	800e044 <_malloc_r>
 800e83e:	b948      	cbnz	r0, 800e854 <__smakebuf_r+0x44>
 800e840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e844:	059a      	lsls	r2, r3, #22
 800e846:	d4ef      	bmi.n	800e828 <__smakebuf_r+0x18>
 800e848:	f023 0303 	bic.w	r3, r3, #3
 800e84c:	f043 0302 	orr.w	r3, r3, #2
 800e850:	81a3      	strh	r3, [r4, #12]
 800e852:	e7e3      	b.n	800e81c <__smakebuf_r+0xc>
 800e854:	4b0d      	ldr	r3, [pc, #52]	; (800e88c <__smakebuf_r+0x7c>)
 800e856:	62b3      	str	r3, [r6, #40]	; 0x28
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	6020      	str	r0, [r4, #0]
 800e85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e860:	81a3      	strh	r3, [r4, #12]
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	6163      	str	r3, [r4, #20]
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	6120      	str	r0, [r4, #16]
 800e86a:	b15b      	cbz	r3, 800e884 <__smakebuf_r+0x74>
 800e86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e870:	4630      	mov	r0, r6
 800e872:	f000 fce7 	bl	800f244 <_isatty_r>
 800e876:	b128      	cbz	r0, 800e884 <__smakebuf_r+0x74>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	f023 0303 	bic.w	r3, r3, #3
 800e87e:	f043 0301 	orr.w	r3, r3, #1
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	89a0      	ldrh	r0, [r4, #12]
 800e886:	4305      	orrs	r5, r0
 800e888:	81a5      	strh	r5, [r4, #12]
 800e88a:	e7cd      	b.n	800e828 <__smakebuf_r+0x18>
 800e88c:	0800e61d 	.word	0x0800e61d

0800e890 <__malloc_lock>:
 800e890:	4801      	ldr	r0, [pc, #4]	; (800e898 <__malloc_lock+0x8>)
 800e892:	f7ff bf95 	b.w	800e7c0 <__retarget_lock_acquire_recursive>
 800e896:	bf00      	nop
 800e898:	20000758 	.word	0x20000758

0800e89c <__malloc_unlock>:
 800e89c:	4801      	ldr	r0, [pc, #4]	; (800e8a4 <__malloc_unlock+0x8>)
 800e89e:	f7ff bf90 	b.w	800e7c2 <__retarget_lock_release_recursive>
 800e8a2:	bf00      	nop
 800e8a4:	20000758 	.word	0x20000758

0800e8a8 <__ssputs_r>:
 800e8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ac:	688e      	ldr	r6, [r1, #8]
 800e8ae:	429e      	cmp	r6, r3
 800e8b0:	4682      	mov	sl, r0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	4690      	mov	r8, r2
 800e8b6:	461f      	mov	r7, r3
 800e8b8:	d838      	bhi.n	800e92c <__ssputs_r+0x84>
 800e8ba:	898a      	ldrh	r2, [r1, #12]
 800e8bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8c0:	d032      	beq.n	800e928 <__ssputs_r+0x80>
 800e8c2:	6825      	ldr	r5, [r4, #0]
 800e8c4:	6909      	ldr	r1, [r1, #16]
 800e8c6:	eba5 0901 	sub.w	r9, r5, r1
 800e8ca:	6965      	ldr	r5, [r4, #20]
 800e8cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	444b      	add	r3, r9
 800e8d8:	106d      	asrs	r5, r5, #1
 800e8da:	429d      	cmp	r5, r3
 800e8dc:	bf38      	it	cc
 800e8de:	461d      	movcc	r5, r3
 800e8e0:	0553      	lsls	r3, r2, #21
 800e8e2:	d531      	bpl.n	800e948 <__ssputs_r+0xa0>
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	f7ff fbad 	bl	800e044 <_malloc_r>
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	b950      	cbnz	r0, 800e904 <__ssputs_r+0x5c>
 800e8ee:	230c      	movs	r3, #12
 800e8f0:	f8ca 3000 	str.w	r3, [sl]
 800e8f4:	89a3      	ldrh	r3, [r4, #12]
 800e8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8fa:	81a3      	strh	r3, [r4, #12]
 800e8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e904:	6921      	ldr	r1, [r4, #16]
 800e906:	464a      	mov	r2, r9
 800e908:	f7ff fb1a 	bl	800df40 <memcpy>
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e916:	81a3      	strh	r3, [r4, #12]
 800e918:	6126      	str	r6, [r4, #16]
 800e91a:	6165      	str	r5, [r4, #20]
 800e91c:	444e      	add	r6, r9
 800e91e:	eba5 0509 	sub.w	r5, r5, r9
 800e922:	6026      	str	r6, [r4, #0]
 800e924:	60a5      	str	r5, [r4, #8]
 800e926:	463e      	mov	r6, r7
 800e928:	42be      	cmp	r6, r7
 800e92a:	d900      	bls.n	800e92e <__ssputs_r+0x86>
 800e92c:	463e      	mov	r6, r7
 800e92e:	6820      	ldr	r0, [r4, #0]
 800e930:	4632      	mov	r2, r6
 800e932:	4641      	mov	r1, r8
 800e934:	f000 fca8 	bl	800f288 <memmove>
 800e938:	68a3      	ldr	r3, [r4, #8]
 800e93a:	1b9b      	subs	r3, r3, r6
 800e93c:	60a3      	str	r3, [r4, #8]
 800e93e:	6823      	ldr	r3, [r4, #0]
 800e940:	4433      	add	r3, r6
 800e942:	6023      	str	r3, [r4, #0]
 800e944:	2000      	movs	r0, #0
 800e946:	e7db      	b.n	800e900 <__ssputs_r+0x58>
 800e948:	462a      	mov	r2, r5
 800e94a:	f000 fcb7 	bl	800f2bc <_realloc_r>
 800e94e:	4606      	mov	r6, r0
 800e950:	2800      	cmp	r0, #0
 800e952:	d1e1      	bne.n	800e918 <__ssputs_r+0x70>
 800e954:	6921      	ldr	r1, [r4, #16]
 800e956:	4650      	mov	r0, sl
 800e958:	f7ff fb08 	bl	800df6c <_free_r>
 800e95c:	e7c7      	b.n	800e8ee <__ssputs_r+0x46>
	...

0800e960 <_svfiprintf_r>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	4698      	mov	r8, r3
 800e966:	898b      	ldrh	r3, [r1, #12]
 800e968:	061b      	lsls	r3, r3, #24
 800e96a:	b09d      	sub	sp, #116	; 0x74
 800e96c:	4607      	mov	r7, r0
 800e96e:	460d      	mov	r5, r1
 800e970:	4614      	mov	r4, r2
 800e972:	d50e      	bpl.n	800e992 <_svfiprintf_r+0x32>
 800e974:	690b      	ldr	r3, [r1, #16]
 800e976:	b963      	cbnz	r3, 800e992 <_svfiprintf_r+0x32>
 800e978:	2140      	movs	r1, #64	; 0x40
 800e97a:	f7ff fb63 	bl	800e044 <_malloc_r>
 800e97e:	6028      	str	r0, [r5, #0]
 800e980:	6128      	str	r0, [r5, #16]
 800e982:	b920      	cbnz	r0, 800e98e <_svfiprintf_r+0x2e>
 800e984:	230c      	movs	r3, #12
 800e986:	603b      	str	r3, [r7, #0]
 800e988:	f04f 30ff 	mov.w	r0, #4294967295
 800e98c:	e0d1      	b.n	800eb32 <_svfiprintf_r+0x1d2>
 800e98e:	2340      	movs	r3, #64	; 0x40
 800e990:	616b      	str	r3, [r5, #20]
 800e992:	2300      	movs	r3, #0
 800e994:	9309      	str	r3, [sp, #36]	; 0x24
 800e996:	2320      	movs	r3, #32
 800e998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e99c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9a0:	2330      	movs	r3, #48	; 0x30
 800e9a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb4c <_svfiprintf_r+0x1ec>
 800e9a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9aa:	f04f 0901 	mov.w	r9, #1
 800e9ae:	4623      	mov	r3, r4
 800e9b0:	469a      	mov	sl, r3
 800e9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9b6:	b10a      	cbz	r2, 800e9bc <_svfiprintf_r+0x5c>
 800e9b8:	2a25      	cmp	r2, #37	; 0x25
 800e9ba:	d1f9      	bne.n	800e9b0 <_svfiprintf_r+0x50>
 800e9bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e9c0:	d00b      	beq.n	800e9da <_svfiprintf_r+0x7a>
 800e9c2:	465b      	mov	r3, fp
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	4638      	mov	r0, r7
 800e9ca:	f7ff ff6d 	bl	800e8a8 <__ssputs_r>
 800e9ce:	3001      	adds	r0, #1
 800e9d0:	f000 80aa 	beq.w	800eb28 <_svfiprintf_r+0x1c8>
 800e9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9d6:	445a      	add	r2, fp
 800e9d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e9da:	f89a 3000 	ldrb.w	r3, [sl]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f000 80a2 	beq.w	800eb28 <_svfiprintf_r+0x1c8>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9ee:	f10a 0a01 	add.w	sl, sl, #1
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	9307      	str	r3, [sp, #28]
 800e9f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e9fc:	4654      	mov	r4, sl
 800e9fe:	2205      	movs	r2, #5
 800ea00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea04:	4851      	ldr	r0, [pc, #324]	; (800eb4c <_svfiprintf_r+0x1ec>)
 800ea06:	f7f1 fbc3 	bl	8000190 <memchr>
 800ea0a:	9a04      	ldr	r2, [sp, #16]
 800ea0c:	b9d8      	cbnz	r0, 800ea46 <_svfiprintf_r+0xe6>
 800ea0e:	06d0      	lsls	r0, r2, #27
 800ea10:	bf44      	itt	mi
 800ea12:	2320      	movmi	r3, #32
 800ea14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea18:	0711      	lsls	r1, r2, #28
 800ea1a:	bf44      	itt	mi
 800ea1c:	232b      	movmi	r3, #43	; 0x2b
 800ea1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea22:	f89a 3000 	ldrb.w	r3, [sl]
 800ea26:	2b2a      	cmp	r3, #42	; 0x2a
 800ea28:	d015      	beq.n	800ea56 <_svfiprintf_r+0xf6>
 800ea2a:	9a07      	ldr	r2, [sp, #28]
 800ea2c:	4654      	mov	r4, sl
 800ea2e:	2000      	movs	r0, #0
 800ea30:	f04f 0c0a 	mov.w	ip, #10
 800ea34:	4621      	mov	r1, r4
 800ea36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea3a:	3b30      	subs	r3, #48	; 0x30
 800ea3c:	2b09      	cmp	r3, #9
 800ea3e:	d94e      	bls.n	800eade <_svfiprintf_r+0x17e>
 800ea40:	b1b0      	cbz	r0, 800ea70 <_svfiprintf_r+0x110>
 800ea42:	9207      	str	r2, [sp, #28]
 800ea44:	e014      	b.n	800ea70 <_svfiprintf_r+0x110>
 800ea46:	eba0 0308 	sub.w	r3, r0, r8
 800ea4a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	9304      	str	r3, [sp, #16]
 800ea52:	46a2      	mov	sl, r4
 800ea54:	e7d2      	b.n	800e9fc <_svfiprintf_r+0x9c>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	1d19      	adds	r1, r3, #4
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	9103      	str	r1, [sp, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bfbb      	ittet	lt
 800ea62:	425b      	neglt	r3, r3
 800ea64:	f042 0202 	orrlt.w	r2, r2, #2
 800ea68:	9307      	strge	r3, [sp, #28]
 800ea6a:	9307      	strlt	r3, [sp, #28]
 800ea6c:	bfb8      	it	lt
 800ea6e:	9204      	strlt	r2, [sp, #16]
 800ea70:	7823      	ldrb	r3, [r4, #0]
 800ea72:	2b2e      	cmp	r3, #46	; 0x2e
 800ea74:	d10c      	bne.n	800ea90 <_svfiprintf_r+0x130>
 800ea76:	7863      	ldrb	r3, [r4, #1]
 800ea78:	2b2a      	cmp	r3, #42	; 0x2a
 800ea7a:	d135      	bne.n	800eae8 <_svfiprintf_r+0x188>
 800ea7c:	9b03      	ldr	r3, [sp, #12]
 800ea7e:	1d1a      	adds	r2, r3, #4
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	9203      	str	r2, [sp, #12]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bfb8      	it	lt
 800ea88:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea8c:	3402      	adds	r4, #2
 800ea8e:	9305      	str	r3, [sp, #20]
 800ea90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb5c <_svfiprintf_r+0x1fc>
 800ea94:	7821      	ldrb	r1, [r4, #0]
 800ea96:	2203      	movs	r2, #3
 800ea98:	4650      	mov	r0, sl
 800ea9a:	f7f1 fb79 	bl	8000190 <memchr>
 800ea9e:	b140      	cbz	r0, 800eab2 <_svfiprintf_r+0x152>
 800eaa0:	2340      	movs	r3, #64	; 0x40
 800eaa2:	eba0 000a 	sub.w	r0, r0, sl
 800eaa6:	fa03 f000 	lsl.w	r0, r3, r0
 800eaaa:	9b04      	ldr	r3, [sp, #16]
 800eaac:	4303      	orrs	r3, r0
 800eaae:	3401      	adds	r4, #1
 800eab0:	9304      	str	r3, [sp, #16]
 800eab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab6:	4826      	ldr	r0, [pc, #152]	; (800eb50 <_svfiprintf_r+0x1f0>)
 800eab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eabc:	2206      	movs	r2, #6
 800eabe:	f7f1 fb67 	bl	8000190 <memchr>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d038      	beq.n	800eb38 <_svfiprintf_r+0x1d8>
 800eac6:	4b23      	ldr	r3, [pc, #140]	; (800eb54 <_svfiprintf_r+0x1f4>)
 800eac8:	bb1b      	cbnz	r3, 800eb12 <_svfiprintf_r+0x1b2>
 800eaca:	9b03      	ldr	r3, [sp, #12]
 800eacc:	3307      	adds	r3, #7
 800eace:	f023 0307 	bic.w	r3, r3, #7
 800ead2:	3308      	adds	r3, #8
 800ead4:	9303      	str	r3, [sp, #12]
 800ead6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead8:	4433      	add	r3, r6
 800eada:	9309      	str	r3, [sp, #36]	; 0x24
 800eadc:	e767      	b.n	800e9ae <_svfiprintf_r+0x4e>
 800eade:	fb0c 3202 	mla	r2, ip, r2, r3
 800eae2:	460c      	mov	r4, r1
 800eae4:	2001      	movs	r0, #1
 800eae6:	e7a5      	b.n	800ea34 <_svfiprintf_r+0xd4>
 800eae8:	2300      	movs	r3, #0
 800eaea:	3401      	adds	r4, #1
 800eaec:	9305      	str	r3, [sp, #20]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	f04f 0c0a 	mov.w	ip, #10
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eafa:	3a30      	subs	r2, #48	; 0x30
 800eafc:	2a09      	cmp	r2, #9
 800eafe:	d903      	bls.n	800eb08 <_svfiprintf_r+0x1a8>
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0c5      	beq.n	800ea90 <_svfiprintf_r+0x130>
 800eb04:	9105      	str	r1, [sp, #20]
 800eb06:	e7c3      	b.n	800ea90 <_svfiprintf_r+0x130>
 800eb08:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e7f0      	b.n	800eaf4 <_svfiprintf_r+0x194>
 800eb12:	ab03      	add	r3, sp, #12
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	462a      	mov	r2, r5
 800eb18:	4b0f      	ldr	r3, [pc, #60]	; (800eb58 <_svfiprintf_r+0x1f8>)
 800eb1a:	a904      	add	r1, sp, #16
 800eb1c:	4638      	mov	r0, r7
 800eb1e:	f3af 8000 	nop.w
 800eb22:	1c42      	adds	r2, r0, #1
 800eb24:	4606      	mov	r6, r0
 800eb26:	d1d6      	bne.n	800ead6 <_svfiprintf_r+0x176>
 800eb28:	89ab      	ldrh	r3, [r5, #12]
 800eb2a:	065b      	lsls	r3, r3, #25
 800eb2c:	f53f af2c 	bmi.w	800e988 <_svfiprintf_r+0x28>
 800eb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb32:	b01d      	add	sp, #116	; 0x74
 800eb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb38:	ab03      	add	r3, sp, #12
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	462a      	mov	r2, r5
 800eb3e:	4b06      	ldr	r3, [pc, #24]	; (800eb58 <_svfiprintf_r+0x1f8>)
 800eb40:	a904      	add	r1, sp, #16
 800eb42:	4638      	mov	r0, r7
 800eb44:	f000 f9d4 	bl	800eef0 <_printf_i>
 800eb48:	e7eb      	b.n	800eb22 <_svfiprintf_r+0x1c2>
 800eb4a:	bf00      	nop
 800eb4c:	08011320 	.word	0x08011320
 800eb50:	0801132a 	.word	0x0801132a
 800eb54:	00000000 	.word	0x00000000
 800eb58:	0800e8a9 	.word	0x0800e8a9
 800eb5c:	08011326 	.word	0x08011326

0800eb60 <__sfputc_r>:
 800eb60:	6893      	ldr	r3, [r2, #8]
 800eb62:	3b01      	subs	r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	b410      	push	{r4}
 800eb68:	6093      	str	r3, [r2, #8]
 800eb6a:	da08      	bge.n	800eb7e <__sfputc_r+0x1e>
 800eb6c:	6994      	ldr	r4, [r2, #24]
 800eb6e:	42a3      	cmp	r3, r4
 800eb70:	db01      	blt.n	800eb76 <__sfputc_r+0x16>
 800eb72:	290a      	cmp	r1, #10
 800eb74:	d103      	bne.n	800eb7e <__sfputc_r+0x1e>
 800eb76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb7a:	f7ff bba9 	b.w	800e2d0 <__swbuf_r>
 800eb7e:	6813      	ldr	r3, [r2, #0]
 800eb80:	1c58      	adds	r0, r3, #1
 800eb82:	6010      	str	r0, [r2, #0]
 800eb84:	7019      	strb	r1, [r3, #0]
 800eb86:	4608      	mov	r0, r1
 800eb88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <__sfputs_r>:
 800eb8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb90:	4606      	mov	r6, r0
 800eb92:	460f      	mov	r7, r1
 800eb94:	4614      	mov	r4, r2
 800eb96:	18d5      	adds	r5, r2, r3
 800eb98:	42ac      	cmp	r4, r5
 800eb9a:	d101      	bne.n	800eba0 <__sfputs_r+0x12>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	e007      	b.n	800ebb0 <__sfputs_r+0x22>
 800eba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba4:	463a      	mov	r2, r7
 800eba6:	4630      	mov	r0, r6
 800eba8:	f7ff ffda 	bl	800eb60 <__sfputc_r>
 800ebac:	1c43      	adds	r3, r0, #1
 800ebae:	d1f3      	bne.n	800eb98 <__sfputs_r+0xa>
 800ebb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebb4 <_vfiprintf_r>:
 800ebb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb8:	460d      	mov	r5, r1
 800ebba:	b09d      	sub	sp, #116	; 0x74
 800ebbc:	4614      	mov	r4, r2
 800ebbe:	4698      	mov	r8, r3
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	b118      	cbz	r0, 800ebcc <_vfiprintf_r+0x18>
 800ebc4:	6983      	ldr	r3, [r0, #24]
 800ebc6:	b90b      	cbnz	r3, 800ebcc <_vfiprintf_r+0x18>
 800ebc8:	f7ff fd5c 	bl	800e684 <__sinit>
 800ebcc:	4b89      	ldr	r3, [pc, #548]	; (800edf4 <_vfiprintf_r+0x240>)
 800ebce:	429d      	cmp	r5, r3
 800ebd0:	d11b      	bne.n	800ec0a <_vfiprintf_r+0x56>
 800ebd2:	6875      	ldr	r5, [r6, #4]
 800ebd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebd6:	07d9      	lsls	r1, r3, #31
 800ebd8:	d405      	bmi.n	800ebe6 <_vfiprintf_r+0x32>
 800ebda:	89ab      	ldrh	r3, [r5, #12]
 800ebdc:	059a      	lsls	r2, r3, #22
 800ebde:	d402      	bmi.n	800ebe6 <_vfiprintf_r+0x32>
 800ebe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebe2:	f7ff fded 	bl	800e7c0 <__retarget_lock_acquire_recursive>
 800ebe6:	89ab      	ldrh	r3, [r5, #12]
 800ebe8:	071b      	lsls	r3, r3, #28
 800ebea:	d501      	bpl.n	800ebf0 <_vfiprintf_r+0x3c>
 800ebec:	692b      	ldr	r3, [r5, #16]
 800ebee:	b9eb      	cbnz	r3, 800ec2c <_vfiprintf_r+0x78>
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff fbbe 	bl	800e374 <__swsetup_r>
 800ebf8:	b1c0      	cbz	r0, 800ec2c <_vfiprintf_r+0x78>
 800ebfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebfc:	07dc      	lsls	r4, r3, #31
 800ebfe:	d50e      	bpl.n	800ec1e <_vfiprintf_r+0x6a>
 800ec00:	f04f 30ff 	mov.w	r0, #4294967295
 800ec04:	b01d      	add	sp, #116	; 0x74
 800ec06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0a:	4b7b      	ldr	r3, [pc, #492]	; (800edf8 <_vfiprintf_r+0x244>)
 800ec0c:	429d      	cmp	r5, r3
 800ec0e:	d101      	bne.n	800ec14 <_vfiprintf_r+0x60>
 800ec10:	68b5      	ldr	r5, [r6, #8]
 800ec12:	e7df      	b.n	800ebd4 <_vfiprintf_r+0x20>
 800ec14:	4b79      	ldr	r3, [pc, #484]	; (800edfc <_vfiprintf_r+0x248>)
 800ec16:	429d      	cmp	r5, r3
 800ec18:	bf08      	it	eq
 800ec1a:	68f5      	ldreq	r5, [r6, #12]
 800ec1c:	e7da      	b.n	800ebd4 <_vfiprintf_r+0x20>
 800ec1e:	89ab      	ldrh	r3, [r5, #12]
 800ec20:	0598      	lsls	r0, r3, #22
 800ec22:	d4ed      	bmi.n	800ec00 <_vfiprintf_r+0x4c>
 800ec24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec26:	f7ff fdcc 	bl	800e7c2 <__retarget_lock_release_recursive>
 800ec2a:	e7e9      	b.n	800ec00 <_vfiprintf_r+0x4c>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec30:	2320      	movs	r3, #32
 800ec32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec3a:	2330      	movs	r3, #48	; 0x30
 800ec3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee00 <_vfiprintf_r+0x24c>
 800ec40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec44:	f04f 0901 	mov.w	r9, #1
 800ec48:	4623      	mov	r3, r4
 800ec4a:	469a      	mov	sl, r3
 800ec4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec50:	b10a      	cbz	r2, 800ec56 <_vfiprintf_r+0xa2>
 800ec52:	2a25      	cmp	r2, #37	; 0x25
 800ec54:	d1f9      	bne.n	800ec4a <_vfiprintf_r+0x96>
 800ec56:	ebba 0b04 	subs.w	fp, sl, r4
 800ec5a:	d00b      	beq.n	800ec74 <_vfiprintf_r+0xc0>
 800ec5c:	465b      	mov	r3, fp
 800ec5e:	4622      	mov	r2, r4
 800ec60:	4629      	mov	r1, r5
 800ec62:	4630      	mov	r0, r6
 800ec64:	f7ff ff93 	bl	800eb8e <__sfputs_r>
 800ec68:	3001      	adds	r0, #1
 800ec6a:	f000 80aa 	beq.w	800edc2 <_vfiprintf_r+0x20e>
 800ec6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec70:	445a      	add	r2, fp
 800ec72:	9209      	str	r2, [sp, #36]	; 0x24
 800ec74:	f89a 3000 	ldrb.w	r3, [sl]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 80a2 	beq.w	800edc2 <_vfiprintf_r+0x20e>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f04f 32ff 	mov.w	r2, #4294967295
 800ec84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec88:	f10a 0a01 	add.w	sl, sl, #1
 800ec8c:	9304      	str	r3, [sp, #16]
 800ec8e:	9307      	str	r3, [sp, #28]
 800ec90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec94:	931a      	str	r3, [sp, #104]	; 0x68
 800ec96:	4654      	mov	r4, sl
 800ec98:	2205      	movs	r2, #5
 800ec9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec9e:	4858      	ldr	r0, [pc, #352]	; (800ee00 <_vfiprintf_r+0x24c>)
 800eca0:	f7f1 fa76 	bl	8000190 <memchr>
 800eca4:	9a04      	ldr	r2, [sp, #16]
 800eca6:	b9d8      	cbnz	r0, 800ece0 <_vfiprintf_r+0x12c>
 800eca8:	06d1      	lsls	r1, r2, #27
 800ecaa:	bf44      	itt	mi
 800ecac:	2320      	movmi	r3, #32
 800ecae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecb2:	0713      	lsls	r3, r2, #28
 800ecb4:	bf44      	itt	mi
 800ecb6:	232b      	movmi	r3, #43	; 0x2b
 800ecb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ecc0:	2b2a      	cmp	r3, #42	; 0x2a
 800ecc2:	d015      	beq.n	800ecf0 <_vfiprintf_r+0x13c>
 800ecc4:	9a07      	ldr	r2, [sp, #28]
 800ecc6:	4654      	mov	r4, sl
 800ecc8:	2000      	movs	r0, #0
 800ecca:	f04f 0c0a 	mov.w	ip, #10
 800ecce:	4621      	mov	r1, r4
 800ecd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd4:	3b30      	subs	r3, #48	; 0x30
 800ecd6:	2b09      	cmp	r3, #9
 800ecd8:	d94e      	bls.n	800ed78 <_vfiprintf_r+0x1c4>
 800ecda:	b1b0      	cbz	r0, 800ed0a <_vfiprintf_r+0x156>
 800ecdc:	9207      	str	r2, [sp, #28]
 800ecde:	e014      	b.n	800ed0a <_vfiprintf_r+0x156>
 800ece0:	eba0 0308 	sub.w	r3, r0, r8
 800ece4:	fa09 f303 	lsl.w	r3, r9, r3
 800ece8:	4313      	orrs	r3, r2
 800ecea:	9304      	str	r3, [sp, #16]
 800ecec:	46a2      	mov	sl, r4
 800ecee:	e7d2      	b.n	800ec96 <_vfiprintf_r+0xe2>
 800ecf0:	9b03      	ldr	r3, [sp, #12]
 800ecf2:	1d19      	adds	r1, r3, #4
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	9103      	str	r1, [sp, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	bfbb      	ittet	lt
 800ecfc:	425b      	neglt	r3, r3
 800ecfe:	f042 0202 	orrlt.w	r2, r2, #2
 800ed02:	9307      	strge	r3, [sp, #28]
 800ed04:	9307      	strlt	r3, [sp, #28]
 800ed06:	bfb8      	it	lt
 800ed08:	9204      	strlt	r2, [sp, #16]
 800ed0a:	7823      	ldrb	r3, [r4, #0]
 800ed0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed0e:	d10c      	bne.n	800ed2a <_vfiprintf_r+0x176>
 800ed10:	7863      	ldrb	r3, [r4, #1]
 800ed12:	2b2a      	cmp	r3, #42	; 0x2a
 800ed14:	d135      	bne.n	800ed82 <_vfiprintf_r+0x1ce>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	1d1a      	adds	r2, r3, #4
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	9203      	str	r2, [sp, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bfb8      	it	lt
 800ed22:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed26:	3402      	adds	r4, #2
 800ed28:	9305      	str	r3, [sp, #20]
 800ed2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee10 <_vfiprintf_r+0x25c>
 800ed2e:	7821      	ldrb	r1, [r4, #0]
 800ed30:	2203      	movs	r2, #3
 800ed32:	4650      	mov	r0, sl
 800ed34:	f7f1 fa2c 	bl	8000190 <memchr>
 800ed38:	b140      	cbz	r0, 800ed4c <_vfiprintf_r+0x198>
 800ed3a:	2340      	movs	r3, #64	; 0x40
 800ed3c:	eba0 000a 	sub.w	r0, r0, sl
 800ed40:	fa03 f000 	lsl.w	r0, r3, r0
 800ed44:	9b04      	ldr	r3, [sp, #16]
 800ed46:	4303      	orrs	r3, r0
 800ed48:	3401      	adds	r4, #1
 800ed4a:	9304      	str	r3, [sp, #16]
 800ed4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed50:	482c      	ldr	r0, [pc, #176]	; (800ee04 <_vfiprintf_r+0x250>)
 800ed52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed56:	2206      	movs	r2, #6
 800ed58:	f7f1 fa1a 	bl	8000190 <memchr>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	d03f      	beq.n	800ede0 <_vfiprintf_r+0x22c>
 800ed60:	4b29      	ldr	r3, [pc, #164]	; (800ee08 <_vfiprintf_r+0x254>)
 800ed62:	bb1b      	cbnz	r3, 800edac <_vfiprintf_r+0x1f8>
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	3307      	adds	r3, #7
 800ed68:	f023 0307 	bic.w	r3, r3, #7
 800ed6c:	3308      	adds	r3, #8
 800ed6e:	9303      	str	r3, [sp, #12]
 800ed70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed72:	443b      	add	r3, r7
 800ed74:	9309      	str	r3, [sp, #36]	; 0x24
 800ed76:	e767      	b.n	800ec48 <_vfiprintf_r+0x94>
 800ed78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed7c:	460c      	mov	r4, r1
 800ed7e:	2001      	movs	r0, #1
 800ed80:	e7a5      	b.n	800ecce <_vfiprintf_r+0x11a>
 800ed82:	2300      	movs	r3, #0
 800ed84:	3401      	adds	r4, #1
 800ed86:	9305      	str	r3, [sp, #20]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	f04f 0c0a 	mov.w	ip, #10
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed94:	3a30      	subs	r2, #48	; 0x30
 800ed96:	2a09      	cmp	r2, #9
 800ed98:	d903      	bls.n	800eda2 <_vfiprintf_r+0x1ee>
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d0c5      	beq.n	800ed2a <_vfiprintf_r+0x176>
 800ed9e:	9105      	str	r1, [sp, #20]
 800eda0:	e7c3      	b.n	800ed2a <_vfiprintf_r+0x176>
 800eda2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eda6:	4604      	mov	r4, r0
 800eda8:	2301      	movs	r3, #1
 800edaa:	e7f0      	b.n	800ed8e <_vfiprintf_r+0x1da>
 800edac:	ab03      	add	r3, sp, #12
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	462a      	mov	r2, r5
 800edb2:	4b16      	ldr	r3, [pc, #88]	; (800ee0c <_vfiprintf_r+0x258>)
 800edb4:	a904      	add	r1, sp, #16
 800edb6:	4630      	mov	r0, r6
 800edb8:	f3af 8000 	nop.w
 800edbc:	4607      	mov	r7, r0
 800edbe:	1c78      	adds	r0, r7, #1
 800edc0:	d1d6      	bne.n	800ed70 <_vfiprintf_r+0x1bc>
 800edc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc4:	07d9      	lsls	r1, r3, #31
 800edc6:	d405      	bmi.n	800edd4 <_vfiprintf_r+0x220>
 800edc8:	89ab      	ldrh	r3, [r5, #12]
 800edca:	059a      	lsls	r2, r3, #22
 800edcc:	d402      	bmi.n	800edd4 <_vfiprintf_r+0x220>
 800edce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edd0:	f7ff fcf7 	bl	800e7c2 <__retarget_lock_release_recursive>
 800edd4:	89ab      	ldrh	r3, [r5, #12]
 800edd6:	065b      	lsls	r3, r3, #25
 800edd8:	f53f af12 	bmi.w	800ec00 <_vfiprintf_r+0x4c>
 800eddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edde:	e711      	b.n	800ec04 <_vfiprintf_r+0x50>
 800ede0:	ab03      	add	r3, sp, #12
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	462a      	mov	r2, r5
 800ede6:	4b09      	ldr	r3, [pc, #36]	; (800ee0c <_vfiprintf_r+0x258>)
 800ede8:	a904      	add	r1, sp, #16
 800edea:	4630      	mov	r0, r6
 800edec:	f000 f880 	bl	800eef0 <_printf_i>
 800edf0:	e7e4      	b.n	800edbc <_vfiprintf_r+0x208>
 800edf2:	bf00      	nop
 800edf4:	080112e0 	.word	0x080112e0
 800edf8:	08011300 	.word	0x08011300
 800edfc:	080112c0 	.word	0x080112c0
 800ee00:	08011320 	.word	0x08011320
 800ee04:	0801132a 	.word	0x0801132a
 800ee08:	00000000 	.word	0x00000000
 800ee0c:	0800eb8f 	.word	0x0800eb8f
 800ee10:	08011326 	.word	0x08011326

0800ee14 <_printf_common>:
 800ee14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee18:	4616      	mov	r6, r2
 800ee1a:	4699      	mov	r9, r3
 800ee1c:	688a      	ldr	r2, [r1, #8]
 800ee1e:	690b      	ldr	r3, [r1, #16]
 800ee20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee24:	4293      	cmp	r3, r2
 800ee26:	bfb8      	it	lt
 800ee28:	4613      	movlt	r3, r2
 800ee2a:	6033      	str	r3, [r6, #0]
 800ee2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee30:	4607      	mov	r7, r0
 800ee32:	460c      	mov	r4, r1
 800ee34:	b10a      	cbz	r2, 800ee3a <_printf_common+0x26>
 800ee36:	3301      	adds	r3, #1
 800ee38:	6033      	str	r3, [r6, #0]
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	0699      	lsls	r1, r3, #26
 800ee3e:	bf42      	ittt	mi
 800ee40:	6833      	ldrmi	r3, [r6, #0]
 800ee42:	3302      	addmi	r3, #2
 800ee44:	6033      	strmi	r3, [r6, #0]
 800ee46:	6825      	ldr	r5, [r4, #0]
 800ee48:	f015 0506 	ands.w	r5, r5, #6
 800ee4c:	d106      	bne.n	800ee5c <_printf_common+0x48>
 800ee4e:	f104 0a19 	add.w	sl, r4, #25
 800ee52:	68e3      	ldr	r3, [r4, #12]
 800ee54:	6832      	ldr	r2, [r6, #0]
 800ee56:	1a9b      	subs	r3, r3, r2
 800ee58:	42ab      	cmp	r3, r5
 800ee5a:	dc26      	bgt.n	800eeaa <_printf_common+0x96>
 800ee5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee60:	1e13      	subs	r3, r2, #0
 800ee62:	6822      	ldr	r2, [r4, #0]
 800ee64:	bf18      	it	ne
 800ee66:	2301      	movne	r3, #1
 800ee68:	0692      	lsls	r2, r2, #26
 800ee6a:	d42b      	bmi.n	800eec4 <_printf_common+0xb0>
 800ee6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee70:	4649      	mov	r1, r9
 800ee72:	4638      	mov	r0, r7
 800ee74:	47c0      	blx	r8
 800ee76:	3001      	adds	r0, #1
 800ee78:	d01e      	beq.n	800eeb8 <_printf_common+0xa4>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	68e5      	ldr	r5, [r4, #12]
 800ee7e:	6832      	ldr	r2, [r6, #0]
 800ee80:	f003 0306 	and.w	r3, r3, #6
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	bf08      	it	eq
 800ee88:	1aad      	subeq	r5, r5, r2
 800ee8a:	68a3      	ldr	r3, [r4, #8]
 800ee8c:	6922      	ldr	r2, [r4, #16]
 800ee8e:	bf0c      	ite	eq
 800ee90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee94:	2500      	movne	r5, #0
 800ee96:	4293      	cmp	r3, r2
 800ee98:	bfc4      	itt	gt
 800ee9a:	1a9b      	subgt	r3, r3, r2
 800ee9c:	18ed      	addgt	r5, r5, r3
 800ee9e:	2600      	movs	r6, #0
 800eea0:	341a      	adds	r4, #26
 800eea2:	42b5      	cmp	r5, r6
 800eea4:	d11a      	bne.n	800eedc <_printf_common+0xc8>
 800eea6:	2000      	movs	r0, #0
 800eea8:	e008      	b.n	800eebc <_printf_common+0xa8>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	4652      	mov	r2, sl
 800eeae:	4649      	mov	r1, r9
 800eeb0:	4638      	mov	r0, r7
 800eeb2:	47c0      	blx	r8
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d103      	bne.n	800eec0 <_printf_common+0xac>
 800eeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800eebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec0:	3501      	adds	r5, #1
 800eec2:	e7c6      	b.n	800ee52 <_printf_common+0x3e>
 800eec4:	18e1      	adds	r1, r4, r3
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	2030      	movs	r0, #48	; 0x30
 800eeca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eece:	4422      	add	r2, r4
 800eed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eed8:	3302      	adds	r3, #2
 800eeda:	e7c7      	b.n	800ee6c <_printf_common+0x58>
 800eedc:	2301      	movs	r3, #1
 800eede:	4622      	mov	r2, r4
 800eee0:	4649      	mov	r1, r9
 800eee2:	4638      	mov	r0, r7
 800eee4:	47c0      	blx	r8
 800eee6:	3001      	adds	r0, #1
 800eee8:	d0e6      	beq.n	800eeb8 <_printf_common+0xa4>
 800eeea:	3601      	adds	r6, #1
 800eeec:	e7d9      	b.n	800eea2 <_printf_common+0x8e>
	...

0800eef0 <_printf_i>:
 800eef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eef4:	7e0f      	ldrb	r7, [r1, #24]
 800eef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eef8:	2f78      	cmp	r7, #120	; 0x78
 800eefa:	4691      	mov	r9, r2
 800eefc:	4680      	mov	r8, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	469a      	mov	sl, r3
 800ef02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef06:	d807      	bhi.n	800ef18 <_printf_i+0x28>
 800ef08:	2f62      	cmp	r7, #98	; 0x62
 800ef0a:	d80a      	bhi.n	800ef22 <_printf_i+0x32>
 800ef0c:	2f00      	cmp	r7, #0
 800ef0e:	f000 80d8 	beq.w	800f0c2 <_printf_i+0x1d2>
 800ef12:	2f58      	cmp	r7, #88	; 0x58
 800ef14:	f000 80a3 	beq.w	800f05e <_printf_i+0x16e>
 800ef18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef20:	e03a      	b.n	800ef98 <_printf_i+0xa8>
 800ef22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef26:	2b15      	cmp	r3, #21
 800ef28:	d8f6      	bhi.n	800ef18 <_printf_i+0x28>
 800ef2a:	a101      	add	r1, pc, #4	; (adr r1, 800ef30 <_printf_i+0x40>)
 800ef2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef30:	0800ef89 	.word	0x0800ef89
 800ef34:	0800ef9d 	.word	0x0800ef9d
 800ef38:	0800ef19 	.word	0x0800ef19
 800ef3c:	0800ef19 	.word	0x0800ef19
 800ef40:	0800ef19 	.word	0x0800ef19
 800ef44:	0800ef19 	.word	0x0800ef19
 800ef48:	0800ef9d 	.word	0x0800ef9d
 800ef4c:	0800ef19 	.word	0x0800ef19
 800ef50:	0800ef19 	.word	0x0800ef19
 800ef54:	0800ef19 	.word	0x0800ef19
 800ef58:	0800ef19 	.word	0x0800ef19
 800ef5c:	0800f0a9 	.word	0x0800f0a9
 800ef60:	0800efcd 	.word	0x0800efcd
 800ef64:	0800f08b 	.word	0x0800f08b
 800ef68:	0800ef19 	.word	0x0800ef19
 800ef6c:	0800ef19 	.word	0x0800ef19
 800ef70:	0800f0cb 	.word	0x0800f0cb
 800ef74:	0800ef19 	.word	0x0800ef19
 800ef78:	0800efcd 	.word	0x0800efcd
 800ef7c:	0800ef19 	.word	0x0800ef19
 800ef80:	0800ef19 	.word	0x0800ef19
 800ef84:	0800f093 	.word	0x0800f093
 800ef88:	682b      	ldr	r3, [r5, #0]
 800ef8a:	1d1a      	adds	r2, r3, #4
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	602a      	str	r2, [r5, #0]
 800ef90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e0a3      	b.n	800f0e4 <_printf_i+0x1f4>
 800ef9c:	6820      	ldr	r0, [r4, #0]
 800ef9e:	6829      	ldr	r1, [r5, #0]
 800efa0:	0606      	lsls	r6, r0, #24
 800efa2:	f101 0304 	add.w	r3, r1, #4
 800efa6:	d50a      	bpl.n	800efbe <_printf_i+0xce>
 800efa8:	680e      	ldr	r6, [r1, #0]
 800efaa:	602b      	str	r3, [r5, #0]
 800efac:	2e00      	cmp	r6, #0
 800efae:	da03      	bge.n	800efb8 <_printf_i+0xc8>
 800efb0:	232d      	movs	r3, #45	; 0x2d
 800efb2:	4276      	negs	r6, r6
 800efb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efb8:	485e      	ldr	r0, [pc, #376]	; (800f134 <_printf_i+0x244>)
 800efba:	230a      	movs	r3, #10
 800efbc:	e019      	b.n	800eff2 <_printf_i+0x102>
 800efbe:	680e      	ldr	r6, [r1, #0]
 800efc0:	602b      	str	r3, [r5, #0]
 800efc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efc6:	bf18      	it	ne
 800efc8:	b236      	sxthne	r6, r6
 800efca:	e7ef      	b.n	800efac <_printf_i+0xbc>
 800efcc:	682b      	ldr	r3, [r5, #0]
 800efce:	6820      	ldr	r0, [r4, #0]
 800efd0:	1d19      	adds	r1, r3, #4
 800efd2:	6029      	str	r1, [r5, #0]
 800efd4:	0601      	lsls	r1, r0, #24
 800efd6:	d501      	bpl.n	800efdc <_printf_i+0xec>
 800efd8:	681e      	ldr	r6, [r3, #0]
 800efda:	e002      	b.n	800efe2 <_printf_i+0xf2>
 800efdc:	0646      	lsls	r6, r0, #25
 800efde:	d5fb      	bpl.n	800efd8 <_printf_i+0xe8>
 800efe0:	881e      	ldrh	r6, [r3, #0]
 800efe2:	4854      	ldr	r0, [pc, #336]	; (800f134 <_printf_i+0x244>)
 800efe4:	2f6f      	cmp	r7, #111	; 0x6f
 800efe6:	bf0c      	ite	eq
 800efe8:	2308      	moveq	r3, #8
 800efea:	230a      	movne	r3, #10
 800efec:	2100      	movs	r1, #0
 800efee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eff2:	6865      	ldr	r5, [r4, #4]
 800eff4:	60a5      	str	r5, [r4, #8]
 800eff6:	2d00      	cmp	r5, #0
 800eff8:	bfa2      	ittt	ge
 800effa:	6821      	ldrge	r1, [r4, #0]
 800effc:	f021 0104 	bicge.w	r1, r1, #4
 800f000:	6021      	strge	r1, [r4, #0]
 800f002:	b90e      	cbnz	r6, 800f008 <_printf_i+0x118>
 800f004:	2d00      	cmp	r5, #0
 800f006:	d04d      	beq.n	800f0a4 <_printf_i+0x1b4>
 800f008:	4615      	mov	r5, r2
 800f00a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f00e:	fb03 6711 	mls	r7, r3, r1, r6
 800f012:	5dc7      	ldrb	r7, [r0, r7]
 800f014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f018:	4637      	mov	r7, r6
 800f01a:	42bb      	cmp	r3, r7
 800f01c:	460e      	mov	r6, r1
 800f01e:	d9f4      	bls.n	800f00a <_printf_i+0x11a>
 800f020:	2b08      	cmp	r3, #8
 800f022:	d10b      	bne.n	800f03c <_printf_i+0x14c>
 800f024:	6823      	ldr	r3, [r4, #0]
 800f026:	07de      	lsls	r6, r3, #31
 800f028:	d508      	bpl.n	800f03c <_printf_i+0x14c>
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	6861      	ldr	r1, [r4, #4]
 800f02e:	4299      	cmp	r1, r3
 800f030:	bfde      	ittt	le
 800f032:	2330      	movle	r3, #48	; 0x30
 800f034:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f038:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f03c:	1b52      	subs	r2, r2, r5
 800f03e:	6122      	str	r2, [r4, #16]
 800f040:	f8cd a000 	str.w	sl, [sp]
 800f044:	464b      	mov	r3, r9
 800f046:	aa03      	add	r2, sp, #12
 800f048:	4621      	mov	r1, r4
 800f04a:	4640      	mov	r0, r8
 800f04c:	f7ff fee2 	bl	800ee14 <_printf_common>
 800f050:	3001      	adds	r0, #1
 800f052:	d14c      	bne.n	800f0ee <_printf_i+0x1fe>
 800f054:	f04f 30ff 	mov.w	r0, #4294967295
 800f058:	b004      	add	sp, #16
 800f05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f05e:	4835      	ldr	r0, [pc, #212]	; (800f134 <_printf_i+0x244>)
 800f060:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f064:	6829      	ldr	r1, [r5, #0]
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	f851 6b04 	ldr.w	r6, [r1], #4
 800f06c:	6029      	str	r1, [r5, #0]
 800f06e:	061d      	lsls	r5, r3, #24
 800f070:	d514      	bpl.n	800f09c <_printf_i+0x1ac>
 800f072:	07df      	lsls	r7, r3, #31
 800f074:	bf44      	itt	mi
 800f076:	f043 0320 	orrmi.w	r3, r3, #32
 800f07a:	6023      	strmi	r3, [r4, #0]
 800f07c:	b91e      	cbnz	r6, 800f086 <_printf_i+0x196>
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	f023 0320 	bic.w	r3, r3, #32
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	2310      	movs	r3, #16
 800f088:	e7b0      	b.n	800efec <_printf_i+0xfc>
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	f043 0320 	orr.w	r3, r3, #32
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	2378      	movs	r3, #120	; 0x78
 800f094:	4828      	ldr	r0, [pc, #160]	; (800f138 <_printf_i+0x248>)
 800f096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f09a:	e7e3      	b.n	800f064 <_printf_i+0x174>
 800f09c:	0659      	lsls	r1, r3, #25
 800f09e:	bf48      	it	mi
 800f0a0:	b2b6      	uxthmi	r6, r6
 800f0a2:	e7e6      	b.n	800f072 <_printf_i+0x182>
 800f0a4:	4615      	mov	r5, r2
 800f0a6:	e7bb      	b.n	800f020 <_printf_i+0x130>
 800f0a8:	682b      	ldr	r3, [r5, #0]
 800f0aa:	6826      	ldr	r6, [r4, #0]
 800f0ac:	6961      	ldr	r1, [r4, #20]
 800f0ae:	1d18      	adds	r0, r3, #4
 800f0b0:	6028      	str	r0, [r5, #0]
 800f0b2:	0635      	lsls	r5, r6, #24
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	d501      	bpl.n	800f0bc <_printf_i+0x1cc>
 800f0b8:	6019      	str	r1, [r3, #0]
 800f0ba:	e002      	b.n	800f0c2 <_printf_i+0x1d2>
 800f0bc:	0670      	lsls	r0, r6, #25
 800f0be:	d5fb      	bpl.n	800f0b8 <_printf_i+0x1c8>
 800f0c0:	8019      	strh	r1, [r3, #0]
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	6123      	str	r3, [r4, #16]
 800f0c6:	4615      	mov	r5, r2
 800f0c8:	e7ba      	b.n	800f040 <_printf_i+0x150>
 800f0ca:	682b      	ldr	r3, [r5, #0]
 800f0cc:	1d1a      	adds	r2, r3, #4
 800f0ce:	602a      	str	r2, [r5, #0]
 800f0d0:	681d      	ldr	r5, [r3, #0]
 800f0d2:	6862      	ldr	r2, [r4, #4]
 800f0d4:	2100      	movs	r1, #0
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f7f1 f85a 	bl	8000190 <memchr>
 800f0dc:	b108      	cbz	r0, 800f0e2 <_printf_i+0x1f2>
 800f0de:	1b40      	subs	r0, r0, r5
 800f0e0:	6060      	str	r0, [r4, #4]
 800f0e2:	6863      	ldr	r3, [r4, #4]
 800f0e4:	6123      	str	r3, [r4, #16]
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0ec:	e7a8      	b.n	800f040 <_printf_i+0x150>
 800f0ee:	6923      	ldr	r3, [r4, #16]
 800f0f0:	462a      	mov	r2, r5
 800f0f2:	4649      	mov	r1, r9
 800f0f4:	4640      	mov	r0, r8
 800f0f6:	47d0      	blx	sl
 800f0f8:	3001      	adds	r0, #1
 800f0fa:	d0ab      	beq.n	800f054 <_printf_i+0x164>
 800f0fc:	6823      	ldr	r3, [r4, #0]
 800f0fe:	079b      	lsls	r3, r3, #30
 800f100:	d413      	bmi.n	800f12a <_printf_i+0x23a>
 800f102:	68e0      	ldr	r0, [r4, #12]
 800f104:	9b03      	ldr	r3, [sp, #12]
 800f106:	4298      	cmp	r0, r3
 800f108:	bfb8      	it	lt
 800f10a:	4618      	movlt	r0, r3
 800f10c:	e7a4      	b.n	800f058 <_printf_i+0x168>
 800f10e:	2301      	movs	r3, #1
 800f110:	4632      	mov	r2, r6
 800f112:	4649      	mov	r1, r9
 800f114:	4640      	mov	r0, r8
 800f116:	47d0      	blx	sl
 800f118:	3001      	adds	r0, #1
 800f11a:	d09b      	beq.n	800f054 <_printf_i+0x164>
 800f11c:	3501      	adds	r5, #1
 800f11e:	68e3      	ldr	r3, [r4, #12]
 800f120:	9903      	ldr	r1, [sp, #12]
 800f122:	1a5b      	subs	r3, r3, r1
 800f124:	42ab      	cmp	r3, r5
 800f126:	dcf2      	bgt.n	800f10e <_printf_i+0x21e>
 800f128:	e7eb      	b.n	800f102 <_printf_i+0x212>
 800f12a:	2500      	movs	r5, #0
 800f12c:	f104 0619 	add.w	r6, r4, #25
 800f130:	e7f5      	b.n	800f11e <_printf_i+0x22e>
 800f132:	bf00      	nop
 800f134:	08011331 	.word	0x08011331
 800f138:	08011342 	.word	0x08011342

0800f13c <__sread>:
 800f13c:	b510      	push	{r4, lr}
 800f13e:	460c      	mov	r4, r1
 800f140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f144:	f000 f8ea 	bl	800f31c <_read_r>
 800f148:	2800      	cmp	r0, #0
 800f14a:	bfab      	itete	ge
 800f14c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f14e:	89a3      	ldrhlt	r3, [r4, #12]
 800f150:	181b      	addge	r3, r3, r0
 800f152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f156:	bfac      	ite	ge
 800f158:	6563      	strge	r3, [r4, #84]	; 0x54
 800f15a:	81a3      	strhlt	r3, [r4, #12]
 800f15c:	bd10      	pop	{r4, pc}

0800f15e <__swrite>:
 800f15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f162:	461f      	mov	r7, r3
 800f164:	898b      	ldrh	r3, [r1, #12]
 800f166:	05db      	lsls	r3, r3, #23
 800f168:	4605      	mov	r5, r0
 800f16a:	460c      	mov	r4, r1
 800f16c:	4616      	mov	r6, r2
 800f16e:	d505      	bpl.n	800f17c <__swrite+0x1e>
 800f170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f174:	2302      	movs	r3, #2
 800f176:	2200      	movs	r2, #0
 800f178:	f000 f874 	bl	800f264 <_lseek_r>
 800f17c:	89a3      	ldrh	r3, [r4, #12]
 800f17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f186:	81a3      	strh	r3, [r4, #12]
 800f188:	4632      	mov	r2, r6
 800f18a:	463b      	mov	r3, r7
 800f18c:	4628      	mov	r0, r5
 800f18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f192:	f000 b823 	b.w	800f1dc <_write_r>

0800f196 <__sseek>:
 800f196:	b510      	push	{r4, lr}
 800f198:	460c      	mov	r4, r1
 800f19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f19e:	f000 f861 	bl	800f264 <_lseek_r>
 800f1a2:	1c43      	adds	r3, r0, #1
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	bf15      	itete	ne
 800f1a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1b2:	81a3      	strheq	r3, [r4, #12]
 800f1b4:	bf18      	it	ne
 800f1b6:	81a3      	strhne	r3, [r4, #12]
 800f1b8:	bd10      	pop	{r4, pc}

0800f1ba <__sclose>:
 800f1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1be:	f000 b81f 	b.w	800f200 <_close_r>

0800f1c2 <strchr>:
 800f1c2:	b2c9      	uxtb	r1, r1
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1ca:	b11a      	cbz	r2, 800f1d4 <strchr+0x12>
 800f1cc:	428a      	cmp	r2, r1
 800f1ce:	d1f9      	bne.n	800f1c4 <strchr+0x2>
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	4770      	bx	lr
 800f1d4:	2900      	cmp	r1, #0
 800f1d6:	bf18      	it	ne
 800f1d8:	2300      	movne	r3, #0
 800f1da:	e7f9      	b.n	800f1d0 <strchr+0xe>

0800f1dc <_write_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d07      	ldr	r5, [pc, #28]	; (800f1fc <_write_r+0x20>)
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	4608      	mov	r0, r1
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	602a      	str	r2, [r5, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	f7fb fe82 	bl	800aef4 <_write>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_write_r+0x1e>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_write_r+0x1e>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	2000075c 	.word	0x2000075c

0800f200 <_close_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4d06      	ldr	r5, [pc, #24]	; (800f21c <_close_r+0x1c>)
 800f204:	2300      	movs	r3, #0
 800f206:	4604      	mov	r4, r0
 800f208:	4608      	mov	r0, r1
 800f20a:	602b      	str	r3, [r5, #0]
 800f20c:	f7f4 f91d 	bl	800344a <_close>
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d102      	bne.n	800f21a <_close_r+0x1a>
 800f214:	682b      	ldr	r3, [r5, #0]
 800f216:	b103      	cbz	r3, 800f21a <_close_r+0x1a>
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	bd38      	pop	{r3, r4, r5, pc}
 800f21c:	2000075c 	.word	0x2000075c

0800f220 <_fstat_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4d07      	ldr	r5, [pc, #28]	; (800f240 <_fstat_r+0x20>)
 800f224:	2300      	movs	r3, #0
 800f226:	4604      	mov	r4, r0
 800f228:	4608      	mov	r0, r1
 800f22a:	4611      	mov	r1, r2
 800f22c:	602b      	str	r3, [r5, #0]
 800f22e:	f7f4 f918 	bl	8003462 <_fstat>
 800f232:	1c43      	adds	r3, r0, #1
 800f234:	d102      	bne.n	800f23c <_fstat_r+0x1c>
 800f236:	682b      	ldr	r3, [r5, #0]
 800f238:	b103      	cbz	r3, 800f23c <_fstat_r+0x1c>
 800f23a:	6023      	str	r3, [r4, #0]
 800f23c:	bd38      	pop	{r3, r4, r5, pc}
 800f23e:	bf00      	nop
 800f240:	2000075c 	.word	0x2000075c

0800f244 <_isatty_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	4d06      	ldr	r5, [pc, #24]	; (800f260 <_isatty_r+0x1c>)
 800f248:	2300      	movs	r3, #0
 800f24a:	4604      	mov	r4, r0
 800f24c:	4608      	mov	r0, r1
 800f24e:	602b      	str	r3, [r5, #0]
 800f250:	f7f4 f917 	bl	8003482 <_isatty>
 800f254:	1c43      	adds	r3, r0, #1
 800f256:	d102      	bne.n	800f25e <_isatty_r+0x1a>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	b103      	cbz	r3, 800f25e <_isatty_r+0x1a>
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	bd38      	pop	{r3, r4, r5, pc}
 800f260:	2000075c 	.word	0x2000075c

0800f264 <_lseek_r>:
 800f264:	b538      	push	{r3, r4, r5, lr}
 800f266:	4d07      	ldr	r5, [pc, #28]	; (800f284 <_lseek_r+0x20>)
 800f268:	4604      	mov	r4, r0
 800f26a:	4608      	mov	r0, r1
 800f26c:	4611      	mov	r1, r2
 800f26e:	2200      	movs	r2, #0
 800f270:	602a      	str	r2, [r5, #0]
 800f272:	461a      	mov	r2, r3
 800f274:	f7f4 f910 	bl	8003498 <_lseek>
 800f278:	1c43      	adds	r3, r0, #1
 800f27a:	d102      	bne.n	800f282 <_lseek_r+0x1e>
 800f27c:	682b      	ldr	r3, [r5, #0]
 800f27e:	b103      	cbz	r3, 800f282 <_lseek_r+0x1e>
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	bd38      	pop	{r3, r4, r5, pc}
 800f284:	2000075c 	.word	0x2000075c

0800f288 <memmove>:
 800f288:	4288      	cmp	r0, r1
 800f28a:	b510      	push	{r4, lr}
 800f28c:	eb01 0402 	add.w	r4, r1, r2
 800f290:	d902      	bls.n	800f298 <memmove+0x10>
 800f292:	4284      	cmp	r4, r0
 800f294:	4623      	mov	r3, r4
 800f296:	d807      	bhi.n	800f2a8 <memmove+0x20>
 800f298:	1e43      	subs	r3, r0, #1
 800f29a:	42a1      	cmp	r1, r4
 800f29c:	d008      	beq.n	800f2b0 <memmove+0x28>
 800f29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2a6:	e7f8      	b.n	800f29a <memmove+0x12>
 800f2a8:	4402      	add	r2, r0
 800f2aa:	4601      	mov	r1, r0
 800f2ac:	428a      	cmp	r2, r1
 800f2ae:	d100      	bne.n	800f2b2 <memmove+0x2a>
 800f2b0:	bd10      	pop	{r4, pc}
 800f2b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2ba:	e7f7      	b.n	800f2ac <memmove+0x24>

0800f2bc <_realloc_r>:
 800f2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c0:	4680      	mov	r8, r0
 800f2c2:	4614      	mov	r4, r2
 800f2c4:	460e      	mov	r6, r1
 800f2c6:	b921      	cbnz	r1, 800f2d2 <_realloc_r+0x16>
 800f2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	f7fe beb9 	b.w	800e044 <_malloc_r>
 800f2d2:	b92a      	cbnz	r2, 800f2e0 <_realloc_r+0x24>
 800f2d4:	f7fe fe4a 	bl	800df6c <_free_r>
 800f2d8:	4625      	mov	r5, r4
 800f2da:	4628      	mov	r0, r5
 800f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e0:	f000 f82e 	bl	800f340 <_malloc_usable_size_r>
 800f2e4:	4284      	cmp	r4, r0
 800f2e6:	4607      	mov	r7, r0
 800f2e8:	d802      	bhi.n	800f2f0 <_realloc_r+0x34>
 800f2ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2ee:	d812      	bhi.n	800f316 <_realloc_r+0x5a>
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	4640      	mov	r0, r8
 800f2f4:	f7fe fea6 	bl	800e044 <_malloc_r>
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d0ed      	beq.n	800f2da <_realloc_r+0x1e>
 800f2fe:	42bc      	cmp	r4, r7
 800f300:	4622      	mov	r2, r4
 800f302:	4631      	mov	r1, r6
 800f304:	bf28      	it	cs
 800f306:	463a      	movcs	r2, r7
 800f308:	f7fe fe1a 	bl	800df40 <memcpy>
 800f30c:	4631      	mov	r1, r6
 800f30e:	4640      	mov	r0, r8
 800f310:	f7fe fe2c 	bl	800df6c <_free_r>
 800f314:	e7e1      	b.n	800f2da <_realloc_r+0x1e>
 800f316:	4635      	mov	r5, r6
 800f318:	e7df      	b.n	800f2da <_realloc_r+0x1e>
	...

0800f31c <_read_r>:
 800f31c:	b538      	push	{r3, r4, r5, lr}
 800f31e:	4d07      	ldr	r5, [pc, #28]	; (800f33c <_read_r+0x20>)
 800f320:	4604      	mov	r4, r0
 800f322:	4608      	mov	r0, r1
 800f324:	4611      	mov	r1, r2
 800f326:	2200      	movs	r2, #0
 800f328:	602a      	str	r2, [r5, #0]
 800f32a:	461a      	mov	r2, r3
 800f32c:	f7f4 f870 	bl	8003410 <_read>
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d102      	bne.n	800f33a <_read_r+0x1e>
 800f334:	682b      	ldr	r3, [r5, #0]
 800f336:	b103      	cbz	r3, 800f33a <_read_r+0x1e>
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	bd38      	pop	{r3, r4, r5, pc}
 800f33c:	2000075c 	.word	0x2000075c

0800f340 <_malloc_usable_size_r>:
 800f340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f344:	1f18      	subs	r0, r3, #4
 800f346:	2b00      	cmp	r3, #0
 800f348:	bfbc      	itt	lt
 800f34a:	580b      	ldrlt	r3, [r1, r0]
 800f34c:	18c0      	addlt	r0, r0, r3
 800f34e:	4770      	bx	lr

0800f350 <_init>:
 800f350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f352:	bf00      	nop
 800f354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f356:	bc08      	pop	{r3}
 800f358:	469e      	mov	lr, r3
 800f35a:	4770      	bx	lr

0800f35c <_fini>:
 800f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35e:	bf00      	nop
 800f360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f362:	bc08      	pop	{r3}
 800f364:	469e      	mov	lr, r3
 800f366:	4770      	bx	lr

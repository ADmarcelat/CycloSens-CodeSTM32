
TDE_BLE_Custom_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e258  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000229c  0800e398  0800e398  0001e398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010634  08010634  00020634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801063c  0801063c  0002063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010640  08010640  00020640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000004  08010644  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000a4  080106e4  000300a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000058  20000140  0801077d  00030140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000198  080107d5  00030198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  200001ac  080107e6  000301ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000004e4  20000234  0801086e  00030234  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  20000718  0801086e  00030718  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000498db  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008341  00000000  00000000  00079b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002f78  00000000  00000000  00081e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002c78  00000000  00000000  00084df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00030756  00000000  00000000  00087a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00037064  00000000  00000000  000b81c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001039e3  00000000  00000000  000ef22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001f2c0d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000cde8  00000000  00000000  001f2c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000234 	.word	0x20000234
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e380 	.word	0x0800e380

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000238 	.word	0x20000238
 800017c:	0800e380 	.word	0x0800e380

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <APPD_EnableCPU2+0x34>)
 8000530:	1d3c      	adds	r4, r7, #4
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053c:	c403      	stmia	r4!, {r0, r1}
 800053e:	8022      	strh	r2, [r4, #0]
 8000540:	3402      	adds	r4, #2
 8000542:	0c13      	lsrs	r3, r2, #16
 8000544:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000546:	f009 fa79 	bl	8009a3c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4618      	mov	r0, r3
 800054e:	f008 fdd8 	bl	8009102 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000552:	bf00      	nop
}
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bdb0      	pop	{r4, r5, r7, pc}
 800055a:	bf00      	nop
 800055c:	0800e398 	.word	0x0800e398

08000560 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	460b      	mov	r3, r1
 800056a:	607a      	str	r2, [r7, #4]
 800056c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800056e:	897a      	ldrh	r2, [r7, #10]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	68f9      	ldr	r1, [r7, #12]
 8000574:	2000      	movs	r0, #0
 8000576:	f001 f957 	bl	8001828 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800057a:	bf00      	nop
}
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <LL_C2_PWR_SetPowerMode+0x28>)
 800058e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000592:	f023 0207 	bic.w	r2, r3, #7
 8000596:	4905      	ldr	r1, [pc, #20]	; (80005ac <LL_C2_PWR_SetPowerMode+0x28>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4313      	orrs	r3, r2
 800059c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	58000400 	.word	0x58000400

080005b0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <LL_EXTI_DisableIT_0_31+0x28>)
 80005ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4905      	ldr	r1, [pc, #20]	; (80005d8 <LL_EXTI_DisableIT_0_31+0x28>)
 80005c4:	4013      	ands	r3, r2
 80005c6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	58000800 	.word	0x58000800

080005dc <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <LL_EXTI_DisableIT_32_63+0x28>)
 80005e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	43db      	mvns	r3, r3
 80005ee:	4905      	ldr	r1, [pc, #20]	; (8000604 <LL_EXTI_DisableIT_32_63+0x28>)
 80005f0:	4013      	ands	r3, r2
 80005f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	58000800 	.word	0x58000800

08000608 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000614:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000616:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800061a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000622:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800062e:	4313      	orrs	r3, r2
 8000630:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	cafecafe 	.word	0xcafecafe

08000644 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800064c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	608b      	str	r3, [r1, #8]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800067c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800069e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80006b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006c4:	d101      	bne.n	80006ca <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80006c6:	2301      	movs	r3, #1
 80006c8:	e000      	b.n	80006cc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80006da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006ea:	d101      	bne.n	80006f0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e000      	b.n	80006f2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800070a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4313      	orrs	r3, r2
 8000712:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000720:	68fb      	ldr	r3, [r7, #12]
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	041b      	lsls	r3, r3, #16
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	431a      	orrs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	605a      	str	r2, [r3, #4]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	041b      	lsls	r3, r3, #16
 8000786:	431a      	orrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	615a      	str	r2, [r3, #20]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	695a      	ldr	r2, [r3, #20]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	615a      	str	r2, [r3, #20]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	609a      	str	r2, [r3, #8]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	619a      	str	r2, [r3, #24]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	22ca      	movs	r2, #202	; 0xca
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2253      	movs	r2, #83	; 0x53
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f023 0207 	bic.w	r2, r3, #7
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	431a      	orrs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	609a      	str	r2, [r3, #8]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <MX_APPE_Config+0x18>)
 800085a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800085e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000860:	f000 f829 	bl	80008b6 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000864:	f000 f868 	bl	8000938 <Config_HSE>

  return;
 8000868:	bf00      	nop
}
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58004000 	.word	0x58004000

08000870 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000874:	f000 f874 	bl	8000960 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000878:	f000 f88c 	bl	8000994 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800087c:	4903      	ldr	r1, [pc, #12]	; (800088c <MX_APPE_Init+0x1c>)
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fd50 	bl	8001324 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000884:	f000 f894 	bl	80009b0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000888:	bf00      	nop
}
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000648 	.word	0x20000648

08000890 <Init_Smps>:

void Init_Smps( void )
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000894:	bf00      	nop
}
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <Init_Exti>:

void Init_Exti( void )
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f7ff fe83 	bl	80005b0 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80008aa:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80008ae:	f7ff fe95 	bl	80005dc <LL_EXTI_DisableIT_32_63>

  return;
 80008b2:	bf00      	nop
}
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80008ba:	f000 f804 	bl	80008c6 <Reset_BackupDomain>

  Reset_IPCC();
 80008be:	f000 f819 	bl	80008f4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80008c2:	bf00      	nop
}
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008ca:	f7ff fef1 	bl	80006b0 <LL_RCC_IsActiveFlag_PINRST>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00d      	beq.n	80008f0 <Reset_BackupDomain+0x2a>
 80008d4:	f7ff feff 	bl	80006d6 <LL_RCC_IsActiveFlag_SFTRST>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d108      	bne.n	80008f0 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008de:	f003 fb91 	bl	8004004 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008e2:	f003 fb8f 	bl	8004004 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008e6:	f7ff fec1 	bl	800066c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008ea:	f7ff fed0 	bl	800068e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
}
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fc:	f7ff fefe 	bl	80006fc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000900:	213f      	movs	r1, #63	; 0x3f
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <Reset_IPCC+0x40>)
 8000904:	f7ff ff59 	bl	80007ba <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000908:	213f      	movs	r1, #63	; 0x3f
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <Reset_IPCC+0x40>)
 800090c:	f7ff ff63 	bl	80007d6 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000910:	213f      	movs	r1, #63	; 0x3f
 8000912:	4808      	ldr	r0, [pc, #32]	; (8000934 <Reset_IPCC+0x40>)
 8000914:	f7ff ff0b 	bl	800072e <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000918:	213f      	movs	r1, #63	; 0x3f
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <Reset_IPCC+0x40>)
 800091c:	f7ff ff2a 	bl	8000774 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000920:	213f      	movs	r1, #63	; 0x3f
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <Reset_IPCC+0x40>)
 8000924:	f7ff ff15 	bl	8000752 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000928:	213f      	movs	r1, #63	; 0x3f
 800092a:	4802      	ldr	r0, [pc, #8]	; (8000934 <Reset_IPCC+0x40>)
 800092c:	f7ff ff34 	bl	8000798 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000930:	bf00      	nop
}
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58000c00 	.word	0x58000c00

08000938 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800093e:	2000      	movs	r0, #0
 8000940:	f009 fa0c 	bl	8009d5c <OTP_Read>
 8000944:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	799b      	ldrb	r3, [r3, #6]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe59 	bl	8000608 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000956:	bf00      	nop
 8000958:	bf00      	nop
}
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <System_Init>:

static void System_Init( void )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000964:	f7ff ff94 	bl	8000890 <Init_Smps>

  Init_Exti( );
 8000968:	f7ff ff99 	bl	800089e <Init_Exti>

  Init_Rtc( );
 800096c:	f000 f802 	bl	8000974 <Init_Rtc>

  return;
 8000970:	bf00      	nop
}
 8000972:	bd80      	pop	{r7, pc}

08000974 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <Init_Rtc+0x1c>)
 800097a:	f7ff ff47 	bl	800080c <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800097e:	2100      	movs	r1, #0
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <Init_Rtc+0x1c>)
 8000982:	f7ff ff53 	bl	800082c <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000986:	4802      	ldr	r0, [pc, #8]	; (8000990 <Init_Rtc+0x1c>)
 8000988:	f7ff ff33 	bl	80007f2 <LL_RTC_EnableWriteProtection>

  return;
 800098c:	bf00      	nop
}
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40002800 	.word	0x40002800

08000994 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000998:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800099c:	f7ff fe52 	bl	8000644 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80009a0:	f00c fa52 	bl	800ce48 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80009a4:	2004      	movs	r0, #4
 80009a6:	f7ff fded 	bl	8000584 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80009aa:	bf00      	nop
}
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009b6:	f008 fe8b 	bl	80096d0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <appe_Tl_Init+0x50>)
 80009bc:	2100      	movs	r1, #0
 80009be:	2008      	movs	r0, #8
 80009c0:	f00c fb6e 	bl	800d0a0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <appe_Tl_Init+0x54>)
 80009c6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <appe_Tl_Init+0x58>)
 80009ca:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	480e      	ldr	r0, [pc, #56]	; (8000a0c <appe_Tl_Init+0x5c>)
 80009d2:	f008 fd43 	bl	800945c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <appe_Tl_Init+0x60>)
 80009d8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <appe_Tl_Init+0x64>)
 80009dc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <appe_Tl_Init+0x68>)
 80009e0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009e2:	f240 533c 	movw	r3, #1340	; 0x53c
 80009e6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4618      	mov	r0, r3
 80009ee:	f008 ffb1 	bl	8009954 <TL_MM_Init>

  TL_Enable();
 80009f2:	f008 fe67 	bl	80096c4 <TL_Enable>

  return;
 80009f6:	bf00      	nop
}
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	08009495 	.word	0x08009495
 8000a04:	20030724 	.word	0x20030724
 8000a08:	08000a1d 	.word	0x08000a1d
 8000a0c:	08000a33 	.word	0x08000a33
 8000a10:	2003093c 	.word	0x2003093c
 8000a14:	20030830 	.word	0x20030830
 8000a18:	200301e8 	.word	0x200301e8

08000a1c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a26:	bf00      	nop
}
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000a3a:	f7ff fd75 	bl	8000528 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000a3e:	f009 fe67 	bl	800a710 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2001      	movs	r0, #1
 8000a46:	f00c fa11 	bl	800ce6c <UTIL_LPM_SetOffMode>
  return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a56:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5a:	f00c fa37 	bl	800cecc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000a66:	bf00      	nop
}
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7e:	f00c fa25 	bl	800cecc <UTIL_SEQ_Run>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000a92:	2100      	movs	r1, #0
 8000a94:	2008      	movs	r0, #8
 8000a96:	f00c fb25 	bl	800d0e4 <UTIL_SEQ_SetTask>
  return;
 8000a9a:	bf00      	nop
}
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f00c fb86 	bl	800d1bc <UTIL_SEQ_SetEvt>
  return;
 8000ab0:	bf00      	nop
}
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f00c fb9b 	bl	800d1fc <UTIL_SEQ_WaitEvt>
  return;
 8000ac6:	bf00      	nop
}
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <LL_EXTI_EnableIT_0_31>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000ada:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000ade:	4905      	ldr	r1, [pc, #20]	; (8000af4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	58000800 	.word	0x58000800

08000af8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4904      	ldr	r1, [pc, #16]	; (8000b18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	600b      	str	r3, [r1, #0]

}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	58000800 	.word	0x58000800

08000b1c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <ReadRtcSsrValue+0x3c>)
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <ReadRtcSsrValue+0x3c>)
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000b32:	e005      	b.n	8000b40 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <ReadRtcSsrValue+0x3c>)
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d1f5      	bne.n	8000b34 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000b48:	683b      	ldr	r3, [r7, #0]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40002800 	.word	0x40002800

08000b5c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000b6c:	79ba      	ldrb	r2, [r7, #6]
 8000b6e:	491d      	ldr	r1, [pc, #116]	; (8000be4 <LinkTimerAfter+0x88>)
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	440b      	add	r3, r1
 8000b7a:	3315      	adds	r3, #21
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d009      	beq.n	8000b9a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000b86:	7bfa      	ldrb	r2, [r7, #15]
 8000b88:	4916      	ldr	r1, [pc, #88]	; (8000be4 <LinkTimerAfter+0x88>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	440b      	add	r3, r1
 8000b94:	3314      	adds	r3, #20
 8000b96:	79fa      	ldrb	r2, [r7, #7]
 8000b98:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	4911      	ldr	r1, [pc, #68]	; (8000be4 <LinkTimerAfter+0x88>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	440b      	add	r3, r1
 8000ba8:	3315      	adds	r3, #21
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <LinkTimerAfter+0x88>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	440b      	add	r3, r1
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	79ba      	ldrb	r2, [r7, #6]
 8000bc0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000bc2:	79ba      	ldrb	r2, [r7, #6]
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <LinkTimerAfter+0x88>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3315      	adds	r3, #21
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	701a      	strb	r2, [r3, #0]

  return;
 8000bd6:	bf00      	nop
}
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000a4 	.word	0x200000a4

08000be8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <LinkTimerBefore+0xb8>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	79ba      	ldrb	r2, [r7, #6]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d032      	beq.n	8000c6a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000c04:	79ba      	ldrb	r2, [r7, #6]
 8000c06:	4927      	ldr	r1, [pc, #156]	; (8000ca4 <LinkTimerBefore+0xbc>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3314      	adds	r3, #20
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	4922      	ldr	r1, [pc, #136]	; (8000ca4 <LinkTimerBefore+0xbc>)
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	3315      	adds	r3, #21
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c2c:	79fa      	ldrb	r2, [r7, #7]
 8000c2e:	491d      	ldr	r1, [pc, #116]	; (8000ca4 <LinkTimerBefore+0xbc>)
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	440b      	add	r3, r1
 8000c3a:	3315      	adds	r3, #21
 8000c3c:	79ba      	ldrb	r2, [r7, #6]
 8000c3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000c40:	79fa      	ldrb	r2, [r7, #7]
 8000c42:	4918      	ldr	r1, [pc, #96]	; (8000ca4 <LinkTimerBefore+0xbc>)
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	440b      	add	r3, r1
 8000c4e:	3314      	adds	r3, #20
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c54:	79ba      	ldrb	r2, [r7, #6]
 8000c56:	4913      	ldr	r1, [pc, #76]	; (8000ca4 <LinkTimerBefore+0xbc>)
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	3314      	adds	r3, #20
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000c68:	e014      	b.n	8000c94 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c6a:	79fa      	ldrb	r2, [r7, #7]
 8000c6c:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LinkTimerBefore+0xbc>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3315      	adds	r3, #21
 8000c7a:	79ba      	ldrb	r2, [r7, #6]
 8000c7c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c7e:	79ba      	ldrb	r2, [r7, #6]
 8000c80:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <LinkTimerBefore+0xbc>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3314      	adds	r3, #20
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	701a      	strb	r2, [r3, #0]
  return;
 8000c92:	bf00      	nop
}
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000134 	.word	0x20000134
 8000ca4:	200000a4 	.word	0x200000a4

08000ca8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cb2:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <linkTimer+0x144>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d118      	bne.n	8000cee <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000cbc:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <linkTimer+0x144>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	; (8000df0 <linkTimer+0x148>)
 8000cc4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000cc6:	4a49      	ldr	r2, [pc, #292]	; (8000dec <linkTimer+0x144>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ccc:	79fa      	ldrb	r2, [r7, #7]
 8000cce:	4949      	ldr	r1, [pc, #292]	; (8000df4 <linkTimer+0x14c>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	3315      	adds	r3, #21
 8000cdc:	2206      	movs	r2, #6
 8000cde:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ce0:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <linkTimer+0x150>)
 8000ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	81fb      	strh	r3, [r7, #14]
 8000cec:	e078      	b.n	8000de0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000cee:	f000 f909 	bl	8000f04 <ReturnTimeElapsed>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	493e      	ldr	r1, [pc, #248]	; (8000df4 <linkTimer+0x14c>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	440b      	add	r3, r1
 8000d04:	3308      	adds	r3, #8
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	4419      	add	r1, r3
 8000d0e:	4839      	ldr	r0, [pc, #228]	; (8000df4 <linkTimer+0x14c>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4403      	add	r3, r0
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	4934      	ldr	r1, [pc, #208]	; (8000df4 <linkTimer+0x14c>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <linkTimer+0x144>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4a2e      	ldr	r2, [pc, #184]	; (8000df4 <linkTimer+0x14c>)
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	440b      	add	r3, r1
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4413      	add	r3, r2
 8000d46:	3308      	adds	r3, #8
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d337      	bcc.n	8000dc0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <linkTimer+0x144>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000d56:	7b7a      	ldrb	r2, [r7, #13]
 8000d58:	4926      	ldr	r1, [pc, #152]	; (8000df4 <linkTimer+0x14c>)
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	440b      	add	r3, r1
 8000d64:	3315      	adds	r3, #21
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d6a:	e013      	b.n	8000d94 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d6c:	7b7a      	ldrb	r2, [r7, #13]
 8000d6e:	4921      	ldr	r1, [pc, #132]	; (8000df4 <linkTimer+0x14c>)
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	440b      	add	r3, r1
 8000d7a:	3315      	adds	r3, #21
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000d80:	7b7a      	ldrb	r2, [r7, #13]
 8000d82:	491c      	ldr	r1, [pc, #112]	; (8000df4 <linkTimer+0x14c>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3315      	adds	r3, #21
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d94:	7b3b      	ldrb	r3, [r7, #12]
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d00b      	beq.n	8000db2 <linkTimer+0x10a>
 8000d9a:	7b3a      	ldrb	r2, [r7, #12]
 8000d9c:	4915      	ldr	r1, [pc, #84]	; (8000df4 <linkTimer+0x14c>)
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	440b      	add	r3, r1
 8000da8:	3308      	adds	r3, #8
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d2dc      	bcs.n	8000d6c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000db2:	7b7a      	ldrb	r2, [r7, #13]
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fecf 	bl	8000b5c <LinkTimerAfter>
 8000dbe:	e00f      	b.n	8000de0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <linkTimer+0x144>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff0c 	bl	8000be8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <linkTimer+0x144>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <linkTimer+0x148>)
 8000dd8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <linkTimer+0x144>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000de0:	89fb      	ldrh	r3, [r7, #14]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000134 	.word	0x20000134
 8000df0:	20000135 	.word	0x20000135
 8000df4:	200000a4 	.word	0x200000a4
 8000df8:	20000138 	.word	0x20000138

08000dfc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <UnlinkTimer+0xf8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d111      	bne.n	8000e3c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e18:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <UnlinkTimer+0xf8>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <UnlinkTimer+0xfc>)
 8000e20:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	4935      	ldr	r1, [pc, #212]	; (8000efc <UnlinkTimer+0x100>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	3315      	adds	r3, #21
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <UnlinkTimer+0xf8>)
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	e03e      	b.n	8000eba <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	492f      	ldr	r1, [pc, #188]	; (8000efc <UnlinkTimer+0x100>)
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	3314      	adds	r3, #20
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	492a      	ldr	r1, [pc, #168]	; (8000efc <UnlinkTimer+0x100>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	3315      	adds	r3, #21
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000e64:	79f9      	ldrb	r1, [r7, #7]
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	4824      	ldr	r0, [pc, #144]	; (8000efc <UnlinkTimer+0x100>)
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	440b      	add	r3, r1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	4403      	add	r3, r0
 8000e74:	3315      	adds	r3, #21
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2d8      	uxtb	r0, r3
 8000e7a:	4920      	ldr	r1, [pc, #128]	; (8000efc <UnlinkTimer+0x100>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	440b      	add	r3, r1
 8000e86:	3315      	adds	r3, #21
 8000e88:	4602      	mov	r2, r0
 8000e8a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d013      	beq.n	8000eba <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000e92:	79f9      	ldrb	r1, [r7, #7]
 8000e94:	7bba      	ldrb	r2, [r7, #14]
 8000e96:	4819      	ldr	r0, [pc, #100]	; (8000efc <UnlinkTimer+0x100>)
 8000e98:	460b      	mov	r3, r1
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	440b      	add	r3, r1
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4403      	add	r3, r0
 8000ea2:	3314      	adds	r3, #20
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2d8      	uxtb	r0, r3
 8000ea8:	4914      	ldr	r1, [pc, #80]	; (8000efc <UnlinkTimer+0x100>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3314      	adds	r3, #20
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	490f      	ldr	r1, [pc, #60]	; (8000efc <UnlinkTimer+0x100>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	330c      	adds	r3, #12
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <UnlinkTimer+0xf8>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b06      	cmp	r3, #6
 8000ed6:	d107      	bne.n	8000ee8 <UnlinkTimer+0xec>
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <UnlinkTimer+0x104>)
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
}
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	20000134 	.word	0x20000134
 8000ef8:	20000135 	.word	0x20000135
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	20000138 	.word	0x20000138

08000f04 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <ReturnTimeElapsed+0x70>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d026      	beq.n	8000f62 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000f14:	f7ff fe02 	bl	8000b1c <ReadRtcSsrValue>
 8000f18:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <ReturnTimeElapsed+0x70>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d805      	bhi.n	8000f30 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <ReturnTimeElapsed+0x70>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e00a      	b.n	8000f46 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <ReturnTimeElapsed+0x74>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <ReturnTimeElapsed+0x70>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <ReturnTimeElapsed+0x78>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	fb02 f303 	mul.w	r3, r2, r3
 8000f52:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <ReturnTimeElapsed+0x7c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	40d3      	lsrs	r3, r2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	b29b      	uxth	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000138 	.word	0x20000138
 8000f78:	20000256 	.word	0x20000256
 8000f7c:	20000255 	.word	0x20000255
 8000f80:	20000254 	.word	0x20000254

08000f84 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f94:	f7ff fdc2 	bl	8000b1c <ReadRtcSsrValue>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a24      	ldr	r2, [pc, #144]	; (800102c <RestartWakeupCounter+0xa8>)
 8000f9c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f002 fa31 	bl	8003406 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000fa4:	e03e      	b.n	8001024 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d803      	bhi.n	8000fb4 <RestartWakeupCounter+0x30>
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <RestartWakeupCounter+0xac>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d002      	beq.n	8000fba <RestartWakeupCounter+0x36>
      Value -= 1;
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fba:	bf00      	nop
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <RestartWakeupCounter+0xb0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f7      	beq.n	8000fbc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <RestartWakeupCounter+0xb0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <RestartWakeupCounter+0xb0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fe0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <RestartWakeupCounter+0xb4>)
 8000fe4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fe8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000fea:	2003      	movs	r0, #3
 8000fec:	f002 fa19 	bl	8003422 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <RestartWakeupCounter+0xb8>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	4910      	ldr	r1, [pc, #64]	; (800103c <RestartWakeupCounter+0xb8>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001000:	f7ff fd8c 	bl	8000b1c <ReadRtcSsrValue>
 8001004:	4603      	mov	r3, r0
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <RestartWakeupCounter+0xa8>)
 8001008:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <RestartWakeupCounter+0xb0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <RestartWakeupCounter+0xb0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800101c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800101e:	f3af 8000 	nop.w
  return ;
 8001022:	bf00      	nop
}
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000138 	.word	0x20000138
 8001030:	20000254 	.word	0x20000254
 8001034:	20000250 	.word	0x20000250
 8001038:	58000800 	.word	0x58000800
 800103c:	40002800 	.word	0x40002800

08001040 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <RescheduleTimerList+0x124>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d108      	bne.n	8001066 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001054:	bf00      	nop
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <RescheduleTimerList+0x128>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f7      	bne.n	8001056 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <RescheduleTimerList+0x128>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <RescheduleTimerList+0x128>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001078:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <RescheduleTimerList+0x12c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	493b      	ldr	r1, [pc, #236]	; (8001170 <RescheduleTimerList+0x130>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3308      	adds	r3, #8
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001094:	f7ff ff36 	bl	8000f04 <ReturnTimeElapsed>
 8001098:	4603      	mov	r3, r0
 800109a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d205      	bcs.n	80010b0 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <RescheduleTimerList+0x134>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e04d      	b.n	800114c <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <RescheduleTimerList+0x138>)
 80010b4:	8812      	ldrh	r2, [r2, #0]
 80010b6:	b292      	uxth	r2, r2
 80010b8:	4413      	add	r3, r2
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4293      	cmp	r3, r2
 80010c0:	d906      	bls.n	80010d0 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <RescheduleTimerList+0x138>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <RescheduleTimerList+0x134>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e03d      	b.n	800114c <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <RescheduleTimerList+0x134>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010e0:	e034      	b.n	800114c <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	4922      	ldr	r1, [pc, #136]	; (8001170 <RescheduleTimerList+0x130>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	3308      	adds	r3, #8
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d20a      	bcs.n	8001110 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	491c      	ldr	r1, [pc, #112]	; (8001170 <RescheduleTimerList+0x130>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3308      	adds	r3, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e013      	b.n	8001138 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	4917      	ldr	r1, [pc, #92]	; (8001170 <RescheduleTimerList+0x130>)
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	3308      	adds	r3, #8
 8001120:	6819      	ldr	r1, [r3, #0]
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	1ac9      	subs	r1, r1, r3
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <RescheduleTimerList+0x130>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4403      	add	r3, r0
 8001134:	3308      	adds	r3, #8
 8001136:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <RescheduleTimerList+0x130>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	440b      	add	r3, r1
 8001146:	3315      	adds	r3, #21
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b06      	cmp	r3, #6
 8001150:	d1c7      	bne.n	80010e2 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001152:	89bb      	ldrh	r3, [r7, #12]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff15 	bl	8000f84 <RestartWakeupCounter>

  return ;
 800115a:	bf00      	nop
}
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40002800 	.word	0x40002800
 8001168:	20000250 	.word	0x20000250
 800116c:	20000134 	.word	0x20000134
 8001170:	200000a4 	.word	0x200000a4
 8001174:	2000013c 	.word	0x2000013c
 8001178:	20000258 	.word	0x20000258

0800117c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001182:	f3ef 8310 	mrs	r3, PRIMASK
 8001186:	617b      	str	r3, [r7, #20]
  return(result);
 8001188:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001190:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	22ca      	movs	r2, #202	; 0xca
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2253      	movs	r2, #83	; 0x53
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80011a4:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	4b58      	ldr	r3, [pc, #352]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80011b8:	4b56      	ldr	r3, [pc, #344]	; (8001314 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80011c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011c4:	4954      	ldr	r1, [pc, #336]	; (8001318 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	330c      	adds	r3, #12
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d172      	bne.n	80012c0 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80011da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011de:	494e      	ldr	r1, [pc, #312]	; (8001318 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80011ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011f2:	4949      	ldr	r1, [pc, #292]	; (8001318 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	440b      	add	r3, r1
 80011fe:	3310      	adds	r3, #16
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001204:	4b45      	ldr	r3, [pc, #276]	; (800131c <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d050      	beq.n	80012b0 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800120e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001212:	4941      	ldr	r1, [pc, #260]	; (8001318 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	330d      	adds	r3, #13
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d126      	bne.n	8001276 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fde4 	bl	8000dfc <UnlinkTimer>
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	f383 8810 	msr	PRIMASK, r3
}
 800123e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001240:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001244:	4934      	ldr	r1, [pc, #208]	; (8001318 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3304      	adds	r3, #4
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fa4e 	bl	80016fc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	22ca      	movs	r2, #202	; 0xca
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2253      	movs	r2, #83	; 0x53
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
 8001274:	e014      	b.n	80012a0 <HW_TS_RTC_Wakeup_Handler+0x124>
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f383 8810 	msr	PRIMASK, r3
}
 8001280:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f9ac 	bl	80015e4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	22ca      	movs	r2, #202	; 0xca
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2253      	movs	r2, #83	; 0x53
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80012a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	4619      	mov	r1, r3
 80012a8:	69b8      	ldr	r0, [r7, #24]
 80012aa:	f000 faaf 	bl	800180c <HW_TS_RTC_Int_AppNot>
 80012ae:	e025      	b.n	80012fc <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 80012b0:	f7ff fec6 	bl	8001040 <RescheduleTimerList>
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f383 8810 	msr	PRIMASK, r3
}
 80012be:	e01d      	b.n	80012fc <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80012c0:	bf00      	nop
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f7      	beq.n	80012c2 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012e6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80012ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f383 8810 	msr	PRIMASK, r3
}
 80012fa:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	22ff      	movs	r2, #255	; 0xff
 8001304:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001306:	bf00      	nop
}
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000250 	.word	0x20000250
 8001314:	20000134 	.word	0x20000134
 8001318:	200000a4 	.word	0x200000a4
 800131c:	2000013c 	.word	0x2000013c
 8001320:	58000800 	.word	0x58000800

08001324 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001330:	4a64      	ldr	r2, [pc, #400]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	22ca      	movs	r2, #202	; 0xca
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
 8001340:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2253      	movs	r2, #83	; 0x53
 8001348:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800134a:	4b5f      	ldr	r3, [pc, #380]	; (80014c8 <HW_TS_Init+0x1a4>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4a5e      	ldr	r2, [pc, #376]	; (80014c8 <HW_TS_Init+0x1a4>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001356:	4b5c      	ldr	r3, [pc, #368]	; (80014c8 <HW_TS_Init+0x1a4>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f1c3 0304 	rsb	r3, r3, #4
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b58      	ldr	r3, [pc, #352]	; (80014cc <HW_TS_Init+0x1a8>)
 800136a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HW_TS_Init+0x1a4>)
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001374:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001378:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	fa92 f2a2 	rbit	r2, r2
 8001380:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	2a00      	cmp	r2, #0
 800138a:	d101      	bne.n	8001390 <HW_TS_Init+0x6c>
  {
    return 32U;
 800138c:	2220      	movs	r2, #32
 800138e:	e003      	b.n	8001398 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	40d3      	lsrs	r3, r2
 800139a:	b2db      	uxtb	r3, r3
 800139c:	3301      	adds	r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <HW_TS_Init+0x1ac>)
 80013a2:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80013a4:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <HW_TS_Init+0x1a4>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HW_TS_Init+0x1b0>)
 80013b6:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <HW_TS_Init+0x1b0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <HW_TS_Init+0x1ac>)
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80013ca:	4a40      	ldr	r2, [pc, #256]	; (80014cc <HW_TS_Init+0x1a8>)
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	40d3      	lsrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013d8:	4293      	cmp	r3, r2
 80013da:	d904      	bls.n	80013e6 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013dc:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <HW_TS_Init+0x1b4>)
 80013de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e2:	801a      	strh	r2, [r3, #0]
 80013e4:	e003      	b.n	80013ee <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HW_TS_Init+0x1b4>)
 80013ec:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013f2:	f7ff fb81 	bl	8000af8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013fa:	f7ff fb69 	bl	8000ad0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d143      	bne.n	800148c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HW_TS_Init+0x1b8>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <HW_TS_Init+0x1bc>)
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001412:	2300      	movs	r3, #0
 8001414:	77fb      	strb	r3, [r7, #31]
 8001416:	e00c      	b.n	8001432 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001418:	7ffa      	ldrb	r2, [r7, #31]
 800141a:	4932      	ldr	r1, [pc, #200]	; (80014e4 <HW_TS_Init+0x1c0>)
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	330c      	adds	r3, #12
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	3301      	adds	r3, #1
 8001430:	77fb      	strb	r3, [r7, #31]
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d9ef      	bls.n	8001418 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HW_TS_Init+0x1c4>)
 800143a:	2206      	movs	r2, #6
 800143c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001450:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HW_TS_Init+0x1a0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001466:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HW_TS_Init+0x1c8>)
 800146a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800146e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001470:	2003      	movs	r0, #3
 8001472:	f001 ffd6 	bl	8003422 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HW_TS_Init+0x1a0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	e00a      	b.n	80014a2 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HW_TS_Init+0x1a0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800149c:	2003      	movs	r0, #3
 800149e:	f001 ffb2 	bl	8003406 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HW_TS_Init+0x1a0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	22ff      	movs	r2, #255	; 0xff
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80014ac:	2200      	movs	r2, #0
 80014ae:	2103      	movs	r1, #3
 80014b0:	2003      	movs	r0, #3
 80014b2:	f001 ff66 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014b6:	2003      	movs	r0, #3
 80014b8:	f001 ff7d 	bl	80033b6 <HAL_NVIC_EnableIRQ>

  return;
 80014bc:	bf00      	nop
}
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000250 	.word	0x20000250
 80014c8:	40002800 	.word	0x40002800
 80014cc:	20000254 	.word	0x20000254
 80014d0:	20000255 	.word	0x20000255
 80014d4:	20000256 	.word	0x20000256
 80014d8:	20000258 	.word	0x20000258
 80014dc:	2000013c 	.word	0x2000013c
 80014e0:	20000138 	.word	0x20000138
 80014e4:	200000a4 	.word	0x200000a4
 80014e8:	20000134 	.word	0x20000134
 80014ec:	58000800 	.word	0x58000800

080014f0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001506:	f3ef 8310 	mrs	r3, PRIMASK
 800150a:	61fb      	str	r3, [r7, #28]
  return(result);
 800150c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800150e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001514:	e004      	b.n	8001520 <HW_TS_Create+0x30>
  {
    loop++;
 8001516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800151a:	3301      	adds	r3, #1
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001524:	2b05      	cmp	r3, #5
 8001526:	d80c      	bhi.n	8001542 <HW_TS_Create+0x52>
 8001528:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800152c:	492c      	ldr	r1, [pc, #176]	; (80015e0 <HW_TS_Create+0xf0>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	330c      	adds	r3, #12
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e9      	bne.n	8001516 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001542:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001546:	2b06      	cmp	r3, #6
 8001548:	d038      	beq.n	80015bc <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800154a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800154e:	4924      	ldr	r1, [pc, #144]	; (80015e0 <HW_TS_Create+0xf0>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	330c      	adds	r3, #12
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f383 8810 	msr	PRIMASK, r3
}
 800156a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800156c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001570:	491b      	ldr	r1, [pc, #108]	; (80015e0 <HW_TS_Create+0xf0>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3310      	adds	r3, #16
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001582:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001586:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HW_TS_Create+0xf0>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	330d      	adds	r3, #13
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001598:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800159c:	4910      	ldr	r1, [pc, #64]	; (80015e0 <HW_TS_Create+0xf0>)
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015b2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015ba:	e008      	b.n	80015ce <HW_TS_Create+0xde>
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f383 8810 	msr	PRIMASK, r3
}
 80015c6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80015ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	372c      	adds	r7, #44	; 0x2c
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200000a4 	.word	0x200000a4

080015e4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ee:	f3ef 8310 	mrs	r3, PRIMASK
 80015f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80015f4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80015f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80015fc:	2003      	movs	r0, #3
 80015fe:	f001 fee8 	bl	80033d2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <HW_TS_Stop+0x100>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	22ca      	movs	r2, #202	; 0xca
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HW_TS_Stop+0x100>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2253      	movs	r2, #83	; 0x53
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	4933      	ldr	r1, [pc, #204]	; (80016e8 <HW_TS_Stop+0x104>)
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	330c      	adds	r3, #12
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d148      	bne.n	80016c0 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fbe2 	bl	8000dfc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <HW_TS_Stop+0x108>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	2b06      	cmp	r3, #6
 8001642:	d135      	bne.n	80016b0 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HW_TS_Stop+0x10c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001650:	d108      	bne.n	8001664 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001652:	bf00      	nop
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HW_TS_Stop+0x100>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f7      	bne.n	8001654 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HW_TS_Stop+0x100>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HW_TS_Stop+0x100>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001676:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001678:	bf00      	nop
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HW_TS_Stop+0x100>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f7      	beq.n	800167a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HW_TS_Stop+0x100>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HW_TS_Stop+0x100>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800169e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HW_TS_Stop+0x110>)
 80016a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016a6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80016a8:	2003      	movs	r0, #3
 80016aa:	f001 feba 	bl	8003422 <HAL_NVIC_ClearPendingIRQ>
 80016ae:	e007      	b.n	80016c0 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HW_TS_Stop+0x114>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	7cfa      	ldrb	r2, [r7, #19]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80016bc:	f7ff fcc0 	bl	8001040 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HW_TS_Stop+0x100>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	22ff      	movs	r2, #255	; 0xff
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016ca:	2003      	movs	r0, #3
 80016cc:	f001 fe73 	bl	80033b6 <HAL_NVIC_EnableIRQ>
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f383 8810 	msr	PRIMASK, r3
}
 80016da:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016dc:	bf00      	nop
}
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000250 	.word	0x20000250
 80016e8:	200000a4 	.word	0x200000a4
 80016ec:	20000134 	.word	0x20000134
 80016f0:	40002800 	.word	0x40002800
 80016f4:	58000800 	.word	0x58000800
 80016f8:	20000135 	.word	0x20000135

080016fc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	493c      	ldr	r1, [pc, #240]	; (80017fc <HW_TS_Start+0x100>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	330c      	adds	r3, #12
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d103      	bne.n	8001728 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff5e 	bl	80015e4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001728:	f3ef 8310 	mrs	r3, PRIMASK
 800172c:	60fb      	str	r3, [r7, #12]
  return(result);
 800172e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001732:	b672      	cpsid	i
}
 8001734:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001736:	2003      	movs	r0, #3
 8001738:	f001 fe4b 	bl	80033d2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HW_TS_Start+0x104>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	22ca      	movs	r2, #202	; 0xca
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HW_TS_Start+0x104>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2253      	movs	r2, #83	; 0x53
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	492a      	ldr	r1, [pc, #168]	; (80017fc <HW_TS_Start+0x100>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	330c      	adds	r3, #12
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	4925      	ldr	r1, [pc, #148]	; (80017fc <HW_TS_Start+0x100>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3308      	adds	r3, #8
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001778:	79fa      	ldrb	r2, [r7, #7]
 800177a:	4920      	ldr	r1, [pc, #128]	; (80017fc <HW_TS_Start+0x100>)
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fa8a 	bl	8000ca8 <linkTimer>
 8001794:	4603      	mov	r3, r0
 8001796:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HW_TS_Start+0x108>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HW_TS_Start+0x10c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	7c7a      	ldrb	r2, [r7, #17]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d002      	beq.n	80017b0 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80017aa:	f7ff fc49 	bl	8001040 <RescheduleTimerList>
 80017ae:	e013      	b.n	80017d8 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	4912      	ldr	r1, [pc, #72]	; (80017fc <HW_TS_Start+0x100>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3308      	adds	r3, #8
 80017c0:	6819      	ldr	r1, [r3, #0]
 80017c2:	8a7b      	ldrh	r3, [r7, #18]
 80017c4:	79fa      	ldrb	r2, [r7, #7]
 80017c6:	1ac9      	subs	r1, r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <HW_TS_Start+0x100>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4403      	add	r3, r0
 80017d4:	3308      	adds	r3, #8
 80017d6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HW_TS_Start+0x104>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	22ff      	movs	r2, #255	; 0xff
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017e2:	2003      	movs	r0, #3
 80017e4:	f001 fde7 	bl	80033b6 <HAL_NVIC_EnableIRQ>
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	f383 8810 	msr	PRIMASK, r3
}
 80017f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017f4:	bf00      	nop
}
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200000a4 	.word	0x200000a4
 8001800:	20000250 	.word	0x20000250
 8001804:	20000134 	.word	0x20000134
 8001808:	20000135 	.word	0x20000135

0800180c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	460b      	mov	r3, r1
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4798      	blx	r3

  return;
 800181e:	bf00      	nop
}
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	4613      	mov	r3, r2
 8001838:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800183e:	2300      	movs	r3, #0
 8001840:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HW_UART_Transmit_DMA+0x26>
 8001848:	2b02      	cmp	r3, #2
 800184a:	d00f      	beq.n	800186c <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800184c:	e01d      	b.n	800188a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HW_UART_Transmit_DMA+0xa4>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HW_UART_Transmit_DMA+0xa8>)
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HW_UART_Transmit_DMA+0xac>)
 8001858:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800185a:	89bb      	ldrh	r3, [r7, #12]
 800185c:	461a      	mov	r2, r3
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	481b      	ldr	r0, [pc, #108]	; (80018d0 <HW_UART_Transmit_DMA+0xa8>)
 8001862:	f004 ff85 	bl	8006770 <HAL_UART_Transmit_DMA>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
            break;
 800186a:	e00e      	b.n	800188a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 800186c:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HW_UART_Transmit_DMA+0xb0>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HW_UART_Transmit_DMA+0xb4>)
 8001874:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <HW_UART_Transmit_DMA+0xb8>)
 8001876:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001878:	89bb      	ldrh	r3, [r7, #12]
 800187a:	461a      	mov	r2, r3
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <HW_UART_Transmit_DMA+0xb4>)
 8001880:	f004 ff76 	bl	8006770 <HAL_UART_Transmit_DMA>
 8001884:	4603      	mov	r3, r0
 8001886:	75fb      	strb	r3, [r7, #23]
            break;
 8001888:	bf00      	nop
    }

    switch (hal_status)
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d817      	bhi.n	80018c0 <HW_UART_Transmit_DMA+0x98>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <HW_UART_Transmit_DMA+0x70>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018af 	.word	0x080018af
 80018a0:	080018b5 	.word	0x080018b5
 80018a4:	080018bb 	.word	0x080018bb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80018a8:	2300      	movs	r3, #0
 80018aa:	75bb      	strb	r3, [r7, #22]
            break;
 80018ac:	e009      	b.n	80018c2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75bb      	strb	r3, [r7, #22]
            break;
 80018b2:	e006      	b.n	80018c2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80018b4:	2302      	movs	r3, #2
 80018b6:	75bb      	strb	r3, [r7, #22]
            break;
 80018b8:	e003      	b.n	80018c2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80018ba:	2303      	movs	r3, #3
 80018bc:	75bb      	strb	r3, [r7, #22]
            break;
 80018be:	e000      	b.n	80018c2 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80018c0:	bf00      	nop
    }

    return hw_status;
 80018c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200003d8 	.word	0x200003d8
 80018d0:	200005b8 	.word	0x200005b8
 80018d4:	40013800 	.word	0x40013800
 80018d8:	200003cc 	.word	0x200003cc
 80018dc:	20000468 	.word	0x20000468
 80018e0:	40008000 	.word	0x40008000

080018e4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <HAL_UART_TxCpltCallback+0x4c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00a      	beq.n	800190c <HAL_UART_TxCpltCallback+0x28>
 80018f6:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_UART_TxCpltCallback+0x50>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d10f      	bne.n	800191c <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_UART_TxCpltCallback+0x54>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_UART_TxCpltCallback+0x54>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4798      	blx	r3
            }
            break;
 800190a:	e009      	b.n	8001920 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_UART_TxCpltCallback+0x58>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_UART_TxCpltCallback+0x58>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4798      	blx	r3
            }
            break;
 800191a:	e003      	b.n	8001924 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 800191c:	bf00      	nop
 800191e:	e002      	b.n	8001926 <HAL_UART_TxCpltCallback+0x42>
            break;
 8001920:	bf00      	nop
 8001922:	e000      	b.n	8001926 <HAL_UART_TxCpltCallback+0x42>
            break;
 8001924:	bf00      	nop
    }

    return;
 8001926:	bf00      	nop
}
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40008000 	.word	0x40008000
 8001934:	40013800 	.word	0x40013800
 8001938:	200003d8 	.word	0x200003d8
 800193c:	200003cc 	.word	0x200003cc

08001940 <LL_RCC_LSE_SetDriveCapability>:
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001950:	f023 0218 	bic.w	r2, r3, #24
 8001954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4313      	orrs	r3, r2
 800195c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_AHB1_GRP1_EnableClock>:
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800197a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4313      	orrs	r3, r2
 8001982:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_AHB2_GRP1_EnableClock>:
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4013      	ands	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef UART_error;
	HAL_StatusTypeDef LPUART_error;
	HAL_UART_StateTypeDef UART_State;
	TimerCount=0;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <main+0x6c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019dc:	f001 fb10 	bl	8003000 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80019e0:	f7fe ff38 	bl	8000854 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e4:	f000 f832 	bl	8001a4c <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80019e8:	f000 f8b6 	bl	8001b58 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ec:	f000 f9b6 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80019f0:	f000 f98e 	bl	8001d10 <MX_DMA_Init>
  MX_RF_Init();
 80019f4:	f000 f912 	bl	8001c1c <MX_RF_Init>
  MX_RTC_Init();
 80019f8:	f000 f92e 	bl	8001c58 <MX_RTC_Init>
  MX_RNG_Init();
 80019fc:	f000 f916 	bl	8001c2c <MX_RNG_Init>
  MX_TIM17_Init();
 8001a00:	f000 f95e 	bl	8001cc0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  MX_USART1_UART_Init();
 8001a04:	f000 f8bc 	bl	8001b80 <MX_USART1_UART_Init>
//  printf("Hello World!\n");
  Set_LED('A');
 8001a08:	2041      	movs	r0, #65	; 0x41
 8001a0a:	f000 fae3 	bl	8001fd4 <Set_LED>
  //HAL_Delay(200);

  char *msg = "Hello Nucleo Fun!\n\r";
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <main+0x70>)
 8001a10:	607b      	str	r3, [r7, #4]
  char *msg2 = "Hello Nucleo !\n\r";
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <main+0x74>)
 8001a14:	603b      	str	r3, [r7, #0]

  //UART_error=HAL_UART_Transmit_DMA(&huart1, (uint8_t*)msg, strlen(msg));
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001a16:	f7fe ff2b 	bl	8000870 <MX_APPE_Init>
//  while(UART_State!=HAL_UART_STATE_READY)
//  {
//	  UART_State=HAL_UART_GetState(&huart1);
//  }

 HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x100);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe fbb0 	bl	8000180 <strlen>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <main+0x78>)
 8001a2c:	f004 fe0a 	bl	8006644 <HAL_UART_Transmit>
  //UART_error=HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x10);
  Clear_LED('A');
 8001a30:	2041      	movs	r0, #65	; 0x41
 8001a32:	f000 fa75 	bl	8001f20 <Clear_LED>
  while (1)
  {
//	  printf("Hello World!\n");
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001a36:	f7ff f80c 	bl	8000a52 <MX_APPE_Process>
 8001a3a:	e7fc      	b.n	8001a36 <main+0x66>
 8001a3c:	200003dc 	.word	0x200003dc
 8001a40:	0800e3b4 	.word	0x0800e3b4
 8001a44:	0800e3c8 	.word	0x0800e3c8
 8001a48:	200005b8 	.word	0x200005b8

08001a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0ae      	sub	sp, #184	; 0xb8
 8001a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a56:	2248      	movs	r2, #72	; 0x48
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00b fc9c 	bl	800d398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2250      	movs	r2, #80	; 0x50
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00b fc8c 	bl	800d398 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a80:	f002 fac0 	bl	8004004 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff ff5b 	bl	8001940 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8a:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <SystemClock_Config+0x108>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a92:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <SystemClock_Config+0x108>)
 8001a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <SystemClock_Config+0x108>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001aa6:	2347      	movs	r3, #71	; 0x47
 8001aa8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac0:	2340      	movs	r3, #64	; 0x40
 8001ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fe2b 	bl	800472c <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001adc:	f000 fed6 	bl	800288c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ae0:	236f      	movs	r3, #111	; 0x6f
 8001ae2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001af4:	2300      	movs	r3, #0
 8001af6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001afc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b00:	2101      	movs	r1, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 f99e 	bl	8004e44 <HAL_RCC_ClockConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b0e:	f000 febd 	bl	800288c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001b12:	f643 3303 	movw	r3, #15107	; 0x3b03
 8001b16:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_CLK48SEL
                              |RCC_PERIPHCLK_RNG;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001b20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001b32:	2302      	movs	r3, #2
 8001b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001b36:	2310      	movs	r3, #16
 8001b38:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fdc2 	bl	80056c6 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001b48:	f000 fea0 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001b4c:	bf00      	nop
 8001b4e:	37b8      	adds	r7, #184	; 0xb8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	58000400 	.word	0x58000400

08001b58 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_IPCC_Init+0x20>)
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <MX_IPCC_Init+0x24>)
 8001b60:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_IPCC_Init+0x20>)
 8001b64:	f002 f9c8 	bl	8003ef8 <HAL_IPCC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001b6e:	f000 fe8d 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000042c 	.word	0x2000042c
 8001b7c:	58000c00 	.word	0x58000c00

08001b80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001b86:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <MX_USART1_UART_Init+0x98>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bca:	4812      	ldr	r0, [pc, #72]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bcc:	f004 fcea 	bl	80065a4 <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001bd6:	f000 fe59 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bde:	f005 ff26 	bl	8007a2e <HAL_UARTEx_SetTxFifoThreshold>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001be8:	f000 fe50 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bec:	2100      	movs	r1, #0
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001bf0:	f005 ff5b 	bl	8007aaa <HAL_UARTEx_SetRxFifoThreshold>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001bfa:	f000 fe47 	bl	800288c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART1_UART_Init+0x94>)
 8001c00:	f005 fedc 	bl	80079bc <HAL_UARTEx_DisableFifoMode>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001c0a:	f000 fe3f 	bl	800288c <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
//  HAL_HalfDuplex_EnableTransmitter(&huart1);
//  HAL_HalfDuplex_EnableReceiver(&huart1);
  /* USER CODE END USART1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200005b8 	.word	0x200005b8
 8001c18:	40013800 	.word	0x40013800

08001c1c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_RNG_Init+0x24>)
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <MX_RNG_Init+0x28>)
 8001c34:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_RNG_Init+0x24>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_RNG_Init+0x24>)
 8001c3e:	f003 ffc9 	bl	8005bd4 <HAL_RNG_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001c48:	f000 fe20 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200006cc 	.word	0x200006cc
 8001c54:	58001000 	.word	0x58001000

08001c58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c5e:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <MX_RTC_Init+0x64>)
 8001c60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001c74:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c8e:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001c90:	f003 ffd5 	bl	8005c3e <HAL_RTC_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001c9a:	f000 fdf7 	bl	800288c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_RTC_Init+0x60>)
 8001ca4:	f004 f8ba 	bl	8005e1c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001cae:	f000 fded 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000648 	.word	0x20000648
 8001cbc:	40002800 	.word	0x40002800

08001cc0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <MX_TIM17_Init+0x4c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 32000;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001ccc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001cd0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001cda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cde:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_TIM17_Init+0x48>)
 8001cf4:	f004 f94e 	bl	8005f94 <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001cfe:	f000 fdc5 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200003e0 	.word	0x200003e0
 8001d0c:	40014800 	.word	0x40014800

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d14:	2004      	movs	r0, #4
 8001d16:	f7ff fe29 	bl	800196c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff fe26 	bl	800196c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff fe23 	bl	800196c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	200b      	movs	r0, #11
 8001d2c:	f001 fb29 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d30:	200b      	movs	r0, #11
 8001d32:	f001 fb40 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	210f      	movs	r1, #15
 8001d3a:	200e      	movs	r0, #14
 8001d3c:	f001 fb21 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001d40:	200e      	movs	r0, #14
 8001d42:	f001 fb38 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	203a      	movs	r0, #58	; 0x3a
 8001d4c:	f001 fb19 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001d50:	203a      	movs	r0, #58	; 0x3a
 8001d52:	f001 fb30 	bl	80033b6 <HAL_NVIC_EnableIRQ>

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d70:	2004      	movs	r0, #4
 8001d72:	f7ff fe14 	bl	800199e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7ff fe11 	bl	800199e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f7ff fe0e 	bl	800199e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	2008      	movs	r0, #8
 8001d84:	f7ff fe0b 	bl	800199e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2123      	movs	r1, #35	; 0x23
 8001d8c:	4821      	ldr	r0, [pc, #132]	; (8001e14 <MX_GPIO_Init+0xb8>)
 8001d8e:	f002 f839 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001d92:	2310      	movs	r3, #16
 8001d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	481c      	ldr	r0, [pc, #112]	; (8001e18 <MX_GPIO_Init+0xbc>)
 8001da6:	f001 febd 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8001daa:	2323      	movs	r3, #35	; 0x23
 8001dac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4815      	ldr	r0, [pc, #84]	; (8001e14 <MX_GPIO_Init+0xb8>)
 8001dc0:	f001 feb0 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4811      	ldr	r0, [pc, #68]	; (8001e1c <MX_GPIO_Init+0xc0>)
 8001dd8:	f001 fea4 	bl	8003b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2006      	movs	r0, #6
 8001de2:	f001 face 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001de6:	2006      	movs	r0, #6
 8001de8:	f001 fae5 	bl	80033b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	2007      	movs	r0, #7
 8001df2:	f001 fac6 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001df6:	2007      	movs	r0, #7
 8001df8:	f001 fadd 	bl	80033b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	200a      	movs	r0, #10
 8001e02:	f001 fabe 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e06:	200a      	movs	r0, #10
 8001e08:	f001 fad5 	bl	80033b6 <HAL_NVIC_EnableIRQ>

}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	48000400 	.word	0x48000400
 8001e18:	48000800 	.word	0x48000800
 8001e1c:	48000c00 	.word	0x48000c00

08001e20 <BeginNotification>:

/* USER CODE BEGIN 4 */
void BeginNotification (void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim17);
 8001e26:	480d      	ldr	r0, [pc, #52]	; (8001e5c <BeginNotification+0x3c>)
 8001e28:	f004 f97a 	bl	8006120 <HAL_TIM_Base_Start_IT>
	char *msg = "C3: start notification !\n\r";
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <BeginNotification+0x40>)
 8001e2e:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x100);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe f9a5 	bl	8000180 <strlen>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <BeginNotification+0x44>)
 8001e42:	f004 fbff 	bl	8006644 <HAL_UART_Transmit>
	htim17.Instance->DIER=1; //UIE 1
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <BeginNotification+0x3c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim17);
 8001e4e:	4803      	ldr	r0, [pc, #12]	; (8001e5c <BeginNotification+0x3c>)
 8001e50:	f004 f8f8 	bl	8006044 <HAL_TIM_Base_Start>

	//htim17->Instance->SR=1; //UIF 1
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200003e0 	.word	0x200003e0
 8001e60:	0800e3dc 	.word	0x0800e3dc
 8001e64:	200005b8 	.word	0x200005b8

08001e68 <FinishNotification>:

void FinishNotification(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	char *msg = "C3: stop notification !\n\r";
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <FinishNotification+0x30>)
 8001e70:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x100);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe f984 	bl	8000180 <strlen>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <FinishNotification+0x34>)
 8001e84:	f004 fbde 	bl	8006644 <HAL_UART_Transmit>
	HAL_TIM_Base_Stop(&htim17);
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <FinishNotification+0x38>)
 8001e8a:	f004 f921 	bl	80060d0 <HAL_TIM_Base_Stop>
	//HAL_TIM_Base_Stop_IT(&htim17);
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	0800e3f8 	.word	0x0800e3f8
 8001e9c:	200005b8 	.word	0x200005b8
 8001ea0:	200003e0 	.word	0x200003e0

08001ea4 <TimerIRQ>:

void TimerIRQ(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

	char *msg = "Timer 17 IRQ!\n\r";
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <TimerIRQ+0x44>)
 8001eac:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0x100);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe f966 	bl	8000180 <strlen>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	480b      	ldr	r0, [pc, #44]	; (8001eec <TimerIRQ+0x48>)
 8001ec0:	f004 fbc0 	bl	8006644 <HAL_UART_Transmit>
	Toggle_LED('R');
 8001ec4:	2052      	movs	r0, #82	; 0x52
 8001ec6:	f000 f8df 	bl	8002088 <Toggle_LED>
	 C3_NOTIFICATION(&TimerCount,1);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <TimerIRQ+0x4c>)
 8001ece:	f009 fcbf 	bl	800b850 <C3_NOTIFICATION>
	// UTIL_SEQ_SetTask(1<<CFG_TASK_MY_ACTION,CFG_SCH_PRIO_0);//HW semaphore
	TimerCount++;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <TimerIRQ+0x4c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <TimerIRQ+0x4c>)
 8001edc:	701a      	strb	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0800e414 	.word	0x0800e414
 8001eec:	200005b8 	.word	0x200005b8
 8001ef0:	200003dc 	.word	0x200003dc

08001ef4 <SendUART>:


*/

HAL_StatusTypeDef SendUART(const unsigned char * buf, size_t bufSize)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef UART_error;

	 //UART_error=HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(msg), 0x100);
	UART_error=HAL_UART_Transmit(&huart1, (uint8_t*)buf, bufSize, 0x100);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <SendUART+0x28>)
 8001f0a:	f004 fb9b 	bl	8006644 <HAL_UART_Transmit>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]

	 return UART_error;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200005b8 	.word	0x200005b8

08001f20 <Clear_LED>:
// HAL_UART_Transmit(&huart1, &*c, 1, 10);
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x10);
 return ch;
}
void Clear_LED(char data)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	switch(data){
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	3b41      	subs	r3, #65	; 0x41
 8001f2e:	2b11      	cmp	r3, #17
 8001f30:	d848      	bhi.n	8001fc4 <Clear_LED+0xa4>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <Clear_LED+0x18>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001fa5 	.word	0x08001fa5
 8001f3c:	08001f8d 	.word	0x08001f8d
 8001f40:	08001fc5 	.word	0x08001fc5
 8001f44:	08001fc5 	.word	0x08001fc5
 8001f48:	08001fc5 	.word	0x08001fc5
 8001f4c:	08001fc5 	.word	0x08001fc5
 8001f50:	08001f99 	.word	0x08001f99
 8001f54:	08001fc5 	.word	0x08001fc5
 8001f58:	08001fc5 	.word	0x08001fc5
 8001f5c:	08001fc5 	.word	0x08001fc5
 8001f60:	08001fc5 	.word	0x08001fc5
 8001f64:	08001fc5 	.word	0x08001fc5
 8001f68:	08001fc5 	.word	0x08001fc5
 8001f6c:	08001fc5 	.word	0x08001fc5
 8001f70:	08001fc5 	.word	0x08001fc5
 8001f74:	08001fc5 	.word	0x08001fc5
 8001f78:	08001fc5 	.word	0x08001fc5
 8001f7c:	08001f81 	.word	0x08001f81

	case 'R' :
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2102      	movs	r1, #2
 8001f84:	4812      	ldr	r0, [pc, #72]	; (8001fd0 <Clear_LED+0xb0>)
 8001f86:	f001 ff3d 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 8001f8a:	e01c      	b.n	8001fc6 <Clear_LED+0xa6>

	case 'B' :
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2120      	movs	r1, #32
 8001f90:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <Clear_LED+0xb0>)
 8001f92:	f001 ff37 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 8001f96:	e016      	b.n	8001fc6 <Clear_LED+0xa6>

	case 'G' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <Clear_LED+0xb0>)
 8001f9e:	f001 ff31 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 8001fa2:	e010      	b.n	8001fc6 <Clear_LED+0xa6>

	case 'A' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <Clear_LED+0xb0>)
 8001faa:	f001 ff2b 	bl	8003e04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <Clear_LED+0xb0>)
 8001fb4:	f001 ff26 	bl	8003e04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <Clear_LED+0xb0>)
 8001fbe:	f001 ff21 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 8001fc2:	e000      	b.n	8001fc6 <Clear_LED+0xa6>

	default :
		break;
 8001fc4:	bf00      	nop

				}
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <Set_LED>:

void Set_LED(char data)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	switch(data){
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	3b41      	subs	r3, #65	; 0x41
 8001fe2:	2b11      	cmp	r3, #17
 8001fe4:	d848      	bhi.n	8002078 <Set_LED+0xa4>
 8001fe6:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <Set_LED+0x18>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	08002059 	.word	0x08002059
 8001ff0:	08002041 	.word	0x08002041
 8001ff4:	08002079 	.word	0x08002079
 8001ff8:	08002079 	.word	0x08002079
 8001ffc:	08002079 	.word	0x08002079
 8002000:	08002079 	.word	0x08002079
 8002004:	0800204d 	.word	0x0800204d
 8002008:	08002079 	.word	0x08002079
 800200c:	08002079 	.word	0x08002079
 8002010:	08002079 	.word	0x08002079
 8002014:	08002079 	.word	0x08002079
 8002018:	08002079 	.word	0x08002079
 800201c:	08002079 	.word	0x08002079
 8002020:	08002079 	.word	0x08002079
 8002024:	08002079 	.word	0x08002079
 8002028:	08002079 	.word	0x08002079
 800202c:	08002079 	.word	0x08002079
 8002030:	08002035 	.word	0x08002035

	case 'R' :
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8002034:	2201      	movs	r2, #1
 8002036:	2102      	movs	r1, #2
 8002038:	4812      	ldr	r0, [pc, #72]	; (8002084 <Set_LED+0xb0>)
 800203a:	f001 fee3 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 800203e:	e01c      	b.n	800207a <Set_LED+0xa6>

	case 'B' :
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8002040:	2201      	movs	r2, #1
 8002042:	2120      	movs	r1, #32
 8002044:	480f      	ldr	r0, [pc, #60]	; (8002084 <Set_LED+0xb0>)
 8002046:	f001 fedd 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 800204a:	e016      	b.n	800207a <Set_LED+0xa6>

	case 'G' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2101      	movs	r1, #1
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <Set_LED+0xb0>)
 8002052:	f001 fed7 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 8002056:	e010      	b.n	800207a <Set_LED+0xa6>

	case 'A' :
		HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	2101      	movs	r1, #1
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <Set_LED+0xb0>)
 800205e:	f001 fed1 	bl	8003e04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	2120      	movs	r1, #32
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <Set_LED+0xb0>)
 8002068:	f001 fecc 	bl	8003e04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2102      	movs	r1, #2
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <Set_LED+0xb0>)
 8002072:	f001 fec7 	bl	8003e04 <HAL_GPIO_WritePin>
		break;
 8002076:	e000      	b.n	800207a <Set_LED+0xa6>

	default :
		break;
 8002078:	bf00      	nop

				}
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	48000400 	.word	0x48000400

08002088 <Toggle_LED>:

void Toggle_LED(char data)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	switch(data){
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	3b41      	subs	r3, #65	; 0x41
 8002096:	2b11      	cmp	r3, #17
 8002098:	d842      	bhi.n	8002120 <Toggle_LED+0x98>
 800209a:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <Toggle_LED+0x18>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	08002107 	.word	0x08002107
 80020a4:	080020f3 	.word	0x080020f3
 80020a8:	08002121 	.word	0x08002121
 80020ac:	08002121 	.word	0x08002121
 80020b0:	08002121 	.word	0x08002121
 80020b4:	08002121 	.word	0x08002121
 80020b8:	080020fd 	.word	0x080020fd
 80020bc:	08002121 	.word	0x08002121
 80020c0:	08002121 	.word	0x08002121
 80020c4:	08002121 	.word	0x08002121
 80020c8:	08002121 	.word	0x08002121
 80020cc:	08002121 	.word	0x08002121
 80020d0:	08002121 	.word	0x08002121
 80020d4:	08002121 	.word	0x08002121
 80020d8:	08002121 	.word	0x08002121
 80020dc:	08002121 	.word	0x08002121
 80020e0:	08002121 	.word	0x08002121
 80020e4:	080020e9 	.word	0x080020e9

	case 'R' :
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 80020e8:	2102      	movs	r1, #2
 80020ea:	4810      	ldr	r0, [pc, #64]	; (800212c <Toggle_LED+0xa4>)
 80020ec:	f001 fea2 	bl	8003e34 <HAL_GPIO_TogglePin>
		break;
 80020f0:	e017      	b.n	8002122 <Toggle_LED+0x9a>

	case 'B' :
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 80020f2:	2120      	movs	r1, #32
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <Toggle_LED+0xa4>)
 80020f6:	f001 fe9d 	bl	8003e34 <HAL_GPIO_TogglePin>
		break;
 80020fa:	e012      	b.n	8002122 <Toggle_LED+0x9a>

	case 'G' :
		HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 80020fc:	2101      	movs	r1, #1
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <Toggle_LED+0xa4>)
 8002100:	f001 fe98 	bl	8003e34 <HAL_GPIO_TogglePin>
		break;
 8002104:	e00d      	b.n	8002122 <Toggle_LED+0x9a>

	case 'A' :
		HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8002106:	2101      	movs	r1, #1
 8002108:	4808      	ldr	r0, [pc, #32]	; (800212c <Toggle_LED+0xa4>)
 800210a:	f001 fe93 	bl	8003e34 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 800210e:	2120      	movs	r1, #32
 8002110:	4806      	ldr	r0, [pc, #24]	; (800212c <Toggle_LED+0xa4>)
 8002112:	f001 fe8f 	bl	8003e34 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8002116:	2102      	movs	r1, #2
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <Toggle_LED+0xa4>)
 800211a:	f001 fe8b 	bl	8003e34 <HAL_GPIO_TogglePin>
		break;
 800211e:	e000      	b.n	8002122 <Toggle_LED+0x9a>

	default :
		break;
 8002120:	bf00      	nop

				}
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	48000400 	.word	0x48000400

08002130 <SEND_MES_BLESTATUS>:

void SEND_MES_BLESTATUS(tBleStatus Status)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]

	APP_DBG_MSG("\r\n\r */*/*/*/ ");
 800213a:	48ec      	ldr	r0, [pc, #944]	; (80024ec <SEND_MES_BLESTATUS+0x3bc>)
 800213c:	f007 fd31 	bl	8009ba2 <DbgTraceGetFileName>
 8002140:	4601      	mov	r1, r0
 8002142:	f240 23ba 	movw	r3, #698	; 0x2ba
 8002146:	4aea      	ldr	r2, [pc, #936]	; (80024f0 <SEND_MES_BLESTATUS+0x3c0>)
 8002148:	48ea      	ldr	r0, [pc, #936]	; (80024f4 <SEND_MES_BLESTATUS+0x3c4>)
 800214a:	f00b f92d 	bl	800d3a8 <iprintf>
 800214e:	48ea      	ldr	r0, [pc, #936]	; (80024f8 <SEND_MES_BLESTATUS+0x3c8>)
 8002150:	f00b f92a 	bl	800d3a8 <iprintf>

	switch(Status){
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8190 	beq.w	800247c <SEND_MES_BLESTATUS+0x34c>
 800215c:	2b00      	cmp	r3, #0
 800215e:	f2c0 836b 	blt.w	8002838 <SEND_MES_BLESTATUS+0x708>
 8002162:	2bff      	cmp	r3, #255	; 0xff
 8002164:	f300 8368 	bgt.w	8002838 <SEND_MES_BLESTATUS+0x708>
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	f2c0 8365 	blt.w	8002838 <SEND_MES_BLESTATUS+0x708>
 800216e:	3b40      	subs	r3, #64	; 0x40
 8002170:	2bbf      	cmp	r3, #191	; 0xbf
 8002172:	f200 8361 	bhi.w	8002838 <SEND_MES_BLESTATUS+0x708>
 8002176:	a201      	add	r2, pc, #4	; (adr r2, 800217c <SEND_MES_BLESTATUS+0x4c>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	08002499 	.word	0x08002499
 8002180:	080024b5 	.word	0x080024b5
 8002184:	080024d1 	.word	0x080024d1
 8002188:	0800250d 	.word	0x0800250d
 800218c:	08002839 	.word	0x08002839
 8002190:	08002529 	.word	0x08002529
 8002194:	08002545 	.word	0x08002545
 8002198:	08002561 	.word	0x08002561
 800219c:	0800257d 	.word	0x0800257d
 80021a0:	08002839 	.word	0x08002839
 80021a4:	08002839 	.word	0x08002839
 80021a8:	08002839 	.word	0x08002839
 80021ac:	08002839 	.word	0x08002839
 80021b0:	08002839 	.word	0x08002839
 80021b4:	08002839 	.word	0x08002839
 80021b8:	08002839 	.word	0x08002839
 80021bc:	08002599 	.word	0x08002599
 80021c0:	08002839 	.word	0x08002839
 80021c4:	08002839 	.word	0x08002839
 80021c8:	08002839 	.word	0x08002839
 80021cc:	08002839 	.word	0x08002839
 80021d0:	08002839 	.word	0x08002839
 80021d4:	08002839 	.word	0x08002839
 80021d8:	08002839 	.word	0x08002839
 80021dc:	08002839 	.word	0x08002839
 80021e0:	080025b5 	.word	0x080025b5
 80021e4:	080025ed 	.word	0x080025ed
 80021e8:	08002609 	.word	0x08002609
 80021ec:	08002839 	.word	0x08002839
 80021f0:	08002641 	.word	0x08002641
 80021f4:	080025d1 	.word	0x080025d1
 80021f8:	08002625 	.word	0x08002625
 80021fc:	0800265d 	.word	0x0800265d
 8002200:	08002679 	.word	0x08002679
 8002204:	08002695 	.word	0x08002695
 8002208:	080026b1 	.word	0x080026b1
 800220c:	080026cd 	.word	0x080026cd
 8002210:	080026e9 	.word	0x080026e9
 8002214:	08002839 	.word	0x08002839
 8002218:	08002839 	.word	0x08002839
 800221c:	08002839 	.word	0x08002839
 8002220:	08002839 	.word	0x08002839
 8002224:	08002839 	.word	0x08002839
 8002228:	08002839 	.word	0x08002839
 800222c:	08002839 	.word	0x08002839
 8002230:	08002839 	.word	0x08002839
 8002234:	08002839 	.word	0x08002839
 8002238:	08002839 	.word	0x08002839
 800223c:	08002705 	.word	0x08002705
 8002240:	08002839 	.word	0x08002839
 8002244:	08002839 	.word	0x08002839
 8002248:	08002839 	.word	0x08002839
 800224c:	08002839 	.word	0x08002839
 8002250:	08002839 	.word	0x08002839
 8002254:	08002839 	.word	0x08002839
 8002258:	08002839 	.word	0x08002839
 800225c:	08002839 	.word	0x08002839
 8002260:	08002839 	.word	0x08002839
 8002264:	08002839 	.word	0x08002839
 8002268:	08002839 	.word	0x08002839
 800226c:	08002839 	.word	0x08002839
 8002270:	08002839 	.word	0x08002839
 8002274:	08002839 	.word	0x08002839
 8002278:	08002839 	.word	0x08002839
 800227c:	08002839 	.word	0x08002839
 8002280:	08002839 	.word	0x08002839
 8002284:	08002721 	.word	0x08002721
 8002288:	0800273d 	.word	0x0800273d
 800228c:	08002759 	.word	0x08002759
 8002290:	080027ad 	.word	0x080027ad
 8002294:	08002791 	.word	0x08002791
 8002298:	08002839 	.word	0x08002839
 800229c:	08002839 	.word	0x08002839
 80022a0:	08002839 	.word	0x08002839
 80022a4:	08002839 	.word	0x08002839
 80022a8:	08002839 	.word	0x08002839
 80022ac:	08002839 	.word	0x08002839
 80022b0:	08002839 	.word	0x08002839
 80022b4:	08002839 	.word	0x08002839
 80022b8:	08002839 	.word	0x08002839
 80022bc:	08002839 	.word	0x08002839
 80022c0:	08002839 	.word	0x08002839
 80022c4:	08002839 	.word	0x08002839
 80022c8:	08002839 	.word	0x08002839
 80022cc:	08002839 	.word	0x08002839
 80022d0:	08002839 	.word	0x08002839
 80022d4:	08002839 	.word	0x08002839
 80022d8:	08002839 	.word	0x08002839
 80022dc:	08002839 	.word	0x08002839
 80022e0:	08002839 	.word	0x08002839
 80022e4:	08002839 	.word	0x08002839
 80022e8:	08002839 	.word	0x08002839
 80022ec:	08002839 	.word	0x08002839
 80022f0:	08002839 	.word	0x08002839
 80022f4:	08002839 	.word	0x08002839
 80022f8:	08002839 	.word	0x08002839
 80022fc:	08002839 	.word	0x08002839
 8002300:	08002839 	.word	0x08002839
 8002304:	08002839 	.word	0x08002839
 8002308:	08002839 	.word	0x08002839
 800230c:	08002839 	.word	0x08002839
 8002310:	08002839 	.word	0x08002839
 8002314:	08002839 	.word	0x08002839
 8002318:	08002839 	.word	0x08002839
 800231c:	08002839 	.word	0x08002839
 8002320:	08002839 	.word	0x08002839
 8002324:	08002839 	.word	0x08002839
 8002328:	08002839 	.word	0x08002839
 800232c:	08002839 	.word	0x08002839
 8002330:	08002839 	.word	0x08002839
 8002334:	08002839 	.word	0x08002839
 8002338:	08002839 	.word	0x08002839
 800233c:	08002839 	.word	0x08002839
 8002340:	08002839 	.word	0x08002839
 8002344:	08002839 	.word	0x08002839
 8002348:	08002839 	.word	0x08002839
 800234c:	08002839 	.word	0x08002839
 8002350:	08002839 	.word	0x08002839
 8002354:	08002839 	.word	0x08002839
 8002358:	08002839 	.word	0x08002839
 800235c:	08002839 	.word	0x08002839
 8002360:	08002839 	.word	0x08002839
 8002364:	08002839 	.word	0x08002839
 8002368:	08002839 	.word	0x08002839
 800236c:	08002839 	.word	0x08002839
 8002370:	08002839 	.word	0x08002839
 8002374:	08002839 	.word	0x08002839
 8002378:	08002839 	.word	0x08002839
 800237c:	08002839 	.word	0x08002839
 8002380:	08002839 	.word	0x08002839
 8002384:	08002839 	.word	0x08002839
 8002388:	08002839 	.word	0x08002839
 800238c:	08002839 	.word	0x08002839
 8002390:	08002839 	.word	0x08002839
 8002394:	08002839 	.word	0x08002839
 8002398:	08002839 	.word	0x08002839
 800239c:	08002839 	.word	0x08002839
 80023a0:	08002839 	.word	0x08002839
 80023a4:	08002839 	.word	0x08002839
 80023a8:	08002839 	.word	0x08002839
 80023ac:	08002839 	.word	0x08002839
 80023b0:	08002839 	.word	0x08002839
 80023b4:	08002839 	.word	0x08002839
 80023b8:	08002839 	.word	0x08002839
 80023bc:	08002839 	.word	0x08002839
 80023c0:	08002839 	.word	0x08002839
 80023c4:	08002839 	.word	0x08002839
 80023c8:	08002839 	.word	0x08002839
 80023cc:	08002839 	.word	0x08002839
 80023d0:	08002839 	.word	0x08002839
 80023d4:	08002839 	.word	0x08002839
 80023d8:	08002839 	.word	0x08002839
 80023dc:	08002839 	.word	0x08002839
 80023e0:	08002839 	.word	0x08002839
 80023e4:	08002839 	.word	0x08002839
 80023e8:	08002839 	.word	0x08002839
 80023ec:	08002839 	.word	0x08002839
 80023f0:	08002839 	.word	0x08002839
 80023f4:	08002839 	.word	0x08002839
 80023f8:	08002839 	.word	0x08002839
 80023fc:	08002839 	.word	0x08002839
 8002400:	08002839 	.word	0x08002839
 8002404:	08002839 	.word	0x08002839
 8002408:	08002839 	.word	0x08002839
 800240c:	08002839 	.word	0x08002839
 8002410:	08002839 	.word	0x08002839
 8002414:	08002839 	.word	0x08002839
 8002418:	08002839 	.word	0x08002839
 800241c:	08002839 	.word	0x08002839
 8002420:	08002839 	.word	0x08002839
 8002424:	08002839 	.word	0x08002839
 8002428:	08002839 	.word	0x08002839
 800242c:	08002839 	.word	0x08002839
 8002430:	08002839 	.word	0x08002839
 8002434:	08002839 	.word	0x08002839
 8002438:	08002839 	.word	0x08002839
 800243c:	08002839 	.word	0x08002839
 8002440:	08002839 	.word	0x08002839
 8002444:	08002839 	.word	0x08002839
 8002448:	08002839 	.word	0x08002839
 800244c:	08002839 	.word	0x08002839
 8002450:	08002839 	.word	0x08002839
 8002454:	08002839 	.word	0x08002839
 8002458:	08002839 	.word	0x08002839
 800245c:	08002839 	.word	0x08002839
 8002460:	08002839 	.word	0x08002839
 8002464:	08002839 	.word	0x08002839
 8002468:	08002839 	.word	0x08002839
 800246c:	08002839 	.word	0x08002839
 8002470:	08002839 	.word	0x08002839
 8002474:	08002839 	.word	0x08002839
 8002478:	08002775 	.word	0x08002775

	case BLE_STATUS_SUCCESS :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SUCCESS ");
 800247c:	481b      	ldr	r0, [pc, #108]	; (80024ec <SEND_MES_BLESTATUS+0x3bc>)
 800247e:	f007 fb90 	bl	8009ba2 <DbgTraceGetFileName>
 8002482:	4601      	mov	r1, r0
 8002484:	f240 23bf 	movw	r3, #703	; 0x2bf
 8002488:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <SEND_MES_BLESTATUS+0x3c0>)
 800248a:	481a      	ldr	r0, [pc, #104]	; (80024f4 <SEND_MES_BLESTATUS+0x3c4>)
 800248c:	f00a ff8c 	bl	800d3a8 <iprintf>
 8002490:	481a      	ldr	r0, [pc, #104]	; (80024fc <SEND_MES_BLESTATUS+0x3cc>)
 8002492:	f00a ff89 	bl	800d3a8 <iprintf>
	break;
 8002496:	e1dd      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_UNKNOWN_CONNECTION_ID :
			APP_DBG_MSG("\r\n\r BLE_STATUS_UNKNOWN_CONNECTION_ID ");
 8002498:	4814      	ldr	r0, [pc, #80]	; (80024ec <SEND_MES_BLESTATUS+0x3bc>)
 800249a:	f007 fb82 	bl	8009ba2 <DbgTraceGetFileName>
 800249e:	4601      	mov	r1, r0
 80024a0:	f240 23c3 	movw	r3, #707	; 0x2c3
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <SEND_MES_BLESTATUS+0x3c0>)
 80024a6:	4813      	ldr	r0, [pc, #76]	; (80024f4 <SEND_MES_BLESTATUS+0x3c4>)
 80024a8:	f00a ff7e 	bl	800d3a8 <iprintf>
 80024ac:	4814      	ldr	r0, [pc, #80]	; (8002500 <SEND_MES_BLESTATUS+0x3d0>)
 80024ae:	f00a ff7b 	bl	800d3a8 <iprintf>
	break;
 80024b2:	e1cf      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_FAILED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_FAILED ");
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <SEND_MES_BLESTATUS+0x3bc>)
 80024b6:	f007 fb74 	bl	8009ba2 <DbgTraceGetFileName>
 80024ba:	4601      	mov	r1, r0
 80024bc:	f240 23c7 	movw	r3, #711	; 0x2c7
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <SEND_MES_BLESTATUS+0x3c0>)
 80024c2:	480c      	ldr	r0, [pc, #48]	; (80024f4 <SEND_MES_BLESTATUS+0x3c4>)
 80024c4:	f00a ff70 	bl	800d3a8 <iprintf>
 80024c8:	480e      	ldr	r0, [pc, #56]	; (8002504 <SEND_MES_BLESTATUS+0x3d4>)
 80024ca:	f00a ff6d 	bl	800d3a8 <iprintf>
	break;
 80024ce:	e1c1      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_INVALID_PARAMS :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_PARAMS ");
 80024d0:	4806      	ldr	r0, [pc, #24]	; (80024ec <SEND_MES_BLESTATUS+0x3bc>)
 80024d2:	f007 fb66 	bl	8009ba2 <DbgTraceGetFileName>
 80024d6:	4601      	mov	r1, r0
 80024d8:	f240 23cb 	movw	r3, #715	; 0x2cb
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <SEND_MES_BLESTATUS+0x3c0>)
 80024de:	4805      	ldr	r0, [pc, #20]	; (80024f4 <SEND_MES_BLESTATUS+0x3c4>)
 80024e0:	f00a ff62 	bl	800d3a8 <iprintf>
 80024e4:	4808      	ldr	r0, [pc, #32]	; (8002508 <SEND_MES_BLESTATUS+0x3d8>)
 80024e6:	f00a ff5f 	bl	800d3a8 <iprintf>
	break;
 80024ea:	e1b3      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>
 80024ec:	0800e424 	.word	0x0800e424
 80024f0:	08010378 	.word	0x08010378
 80024f4:	0800e438 	.word	0x0800e438
 80024f8:	0800e44c 	.word	0x0800e44c
 80024fc:	0800e45c 	.word	0x0800e45c
 8002500:	0800e474 	.word	0x0800e474
 8002504:	0800e49c 	.word	0x0800e49c
 8002508:	0800e4b4 	.word	0x0800e4b4

	case BLE_STATUS_BUSY :
			APP_DBG_MSG("\r\n\r BLE_STATUS_BUSY ");
 800250c:	48ae      	ldr	r0, [pc, #696]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800250e:	f007 fb48 	bl	8009ba2 <DbgTraceGetFileName>
 8002512:	4601      	mov	r1, r0
 8002514:	f240 23cf 	movw	r3, #719	; 0x2cf
 8002518:	4aac      	ldr	r2, [pc, #688]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800251a:	48ad      	ldr	r0, [pc, #692]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 800251c:	f00a ff44 	bl	800d3a8 <iprintf>
 8002520:	48ac      	ldr	r0, [pc, #688]	; (80027d4 <SEND_MES_BLESTATUS+0x6a4>)
 8002522:	f00a ff41 	bl	800d3a8 <iprintf>
	break;
 8002526:	e195      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_PENDING :
			APP_DBG_MSG("\r\n\r BLE_STATUS_PENDING ");
 8002528:	48a7      	ldr	r0, [pc, #668]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800252a:	f007 fb3a 	bl	8009ba2 <DbgTraceGetFileName>
 800252e:	4601      	mov	r1, r0
 8002530:	f240 23d3 	movw	r3, #723	; 0x2d3
 8002534:	4aa5      	ldr	r2, [pc, #660]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002536:	48a6      	ldr	r0, [pc, #664]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002538:	f00a ff36 	bl	800d3a8 <iprintf>
 800253c:	48a6      	ldr	r0, [pc, #664]	; (80027d8 <SEND_MES_BLESTATUS+0x6a8>)
 800253e:	f00a ff33 	bl	800d3a8 <iprintf>
	break;
 8002542:	e187      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_NOT_ALLOWED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_NOT_ALLOWED ");
 8002544:	48a0      	ldr	r0, [pc, #640]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002546:	f007 fb2c 	bl	8009ba2 <DbgTraceGetFileName>
 800254a:	4601      	mov	r1, r0
 800254c:	f240 23d7 	movw	r3, #727	; 0x2d7
 8002550:	4a9e      	ldr	r2, [pc, #632]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002552:	489f      	ldr	r0, [pc, #636]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002554:	f00a ff28 	bl	800d3a8 <iprintf>
 8002558:	48a0      	ldr	r0, [pc, #640]	; (80027dc <SEND_MES_BLESTATUS+0x6ac>)
 800255a:	f00a ff25 	bl	800d3a8 <iprintf>
	break;
 800255e:	e179      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_ERROR :
			APP_DBG_MSG("\r\n\r BLE_STATUS_ERROR ");
 8002560:	4899      	ldr	r0, [pc, #612]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002562:	f007 fb1e 	bl	8009ba2 <DbgTraceGetFileName>
 8002566:	4601      	mov	r1, r0
 8002568:	f240 23db 	movw	r3, #731	; 0x2db
 800256c:	4a97      	ldr	r2, [pc, #604]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800256e:	4898      	ldr	r0, [pc, #608]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002570:	f00a ff1a 	bl	800d3a8 <iprintf>
 8002574:	489a      	ldr	r0, [pc, #616]	; (80027e0 <SEND_MES_BLESTATUS+0x6b0>)
 8002576:	f00a ff17 	bl	800d3a8 <iprintf>
	break;
 800257a:	e16b      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_OUT_OF_MEMORY :
			APP_DBG_MSG("\r\n\r BLE_STATUS_OUT_OF_MEMORY ");
 800257c:	4892      	ldr	r0, [pc, #584]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800257e:	f007 fb10 	bl	8009ba2 <DbgTraceGetFileName>
 8002582:	4601      	mov	r1, r0
 8002584:	f240 23df 	movw	r3, #735	; 0x2df
 8002588:	4a90      	ldr	r2, [pc, #576]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800258a:	4891      	ldr	r0, [pc, #580]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 800258c:	f00a ff0c 	bl	800d3a8 <iprintf>
 8002590:	4894      	ldr	r0, [pc, #592]	; (80027e4 <SEND_MES_BLESTATUS+0x6b4>)
 8002592:	f00a ff09 	bl	800d3a8 <iprintf>
	break;
 8002596:	e15d      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_INVALID_CID :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_CID ");
 8002598:	488b      	ldr	r0, [pc, #556]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800259a:	f007 fb02 	bl	8009ba2 <DbgTraceGetFileName>
 800259e:	4601      	mov	r1, r0
 80025a0:	f240 23e3 	movw	r3, #739	; 0x2e3
 80025a4:	4a89      	ldr	r2, [pc, #548]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80025a6:	488a      	ldr	r0, [pc, #552]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80025a8:	f00a fefe 	bl	800d3a8 <iprintf>
 80025ac:	488e      	ldr	r0, [pc, #568]	; (80027e8 <SEND_MES_BLESTATUS+0x6b8>)
 80025ae:	f00a fefb 	bl	800d3a8 <iprintf>
	break;
 80025b2:	e14f      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_DEV_IN_BLACKLIST :
			APP_DBG_MSG("\r\n\r BLE_STATUS_DEV_IN_BLACKLIST ");
 80025b4:	4884      	ldr	r0, [pc, #528]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 80025b6:	f007 faf4 	bl	8009ba2 <DbgTraceGetFileName>
 80025ba:	4601      	mov	r1, r0
 80025bc:	f240 23e7 	movw	r3, #743	; 0x2e7
 80025c0:	4a82      	ldr	r2, [pc, #520]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80025c2:	4883      	ldr	r0, [pc, #524]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80025c4:	f00a fef0 	bl	800d3a8 <iprintf>
 80025c8:	4888      	ldr	r0, [pc, #544]	; (80027ec <SEND_MES_BLESTATUS+0x6bc>)
 80025ca:	f00a feed 	bl	800d3a8 <iprintf>
	break;
 80025ce:	e141      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_DEV_NOT_BONDED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_DEV_NOT_BONDED ");
 80025d0:	487d      	ldr	r0, [pc, #500]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 80025d2:	f007 fae6 	bl	8009ba2 <DbgTraceGetFileName>
 80025d6:	4601      	mov	r1, r0
 80025d8:	f240 23eb 	movw	r3, #747	; 0x2eb
 80025dc:	4a7b      	ldr	r2, [pc, #492]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80025de:	487c      	ldr	r0, [pc, #496]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80025e0:	f00a fee2 	bl	800d3a8 <iprintf>
 80025e4:	4882      	ldr	r0, [pc, #520]	; (80027f0 <SEND_MES_BLESTATUS+0x6c0>)
 80025e6:	f00a fedf 	bl	800d3a8 <iprintf>
	break;
 80025ea:	e133      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_CSRK_NOT_FOUND :
			APP_DBG_MSG("\r\n\r BLE_STATUS_CSRK_NOT_FOUND ");
 80025ec:	4876      	ldr	r0, [pc, #472]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 80025ee:	f007 fad8 	bl	8009ba2 <DbgTraceGetFileName>
 80025f2:	4601      	mov	r1, r0
 80025f4:	f240 23ef 	movw	r3, #751	; 0x2ef
 80025f8:	4a74      	ldr	r2, [pc, #464]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80025fa:	4875      	ldr	r0, [pc, #468]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80025fc:	f00a fed4 	bl	800d3a8 <iprintf>
 8002600:	487c      	ldr	r0, [pc, #496]	; (80027f4 <SEND_MES_BLESTATUS+0x6c4>)
 8002602:	f00a fed1 	bl	800d3a8 <iprintf>
	break;
 8002606:	e125      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_IRK_NOT_FOUND :
			APP_DBG_MSG("\r\n\r BLE_STATUS_IRK_NOT_FOUND ");
 8002608:	486f      	ldr	r0, [pc, #444]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800260a:	f007 faca 	bl	8009ba2 <DbgTraceGetFileName>
 800260e:	4601      	mov	r1, r0
 8002610:	f240 23f3 	movw	r3, #755	; 0x2f3
 8002614:	4a6d      	ldr	r2, [pc, #436]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002616:	486e      	ldr	r0, [pc, #440]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002618:	f00a fec6 	bl	800d3a8 <iprintf>
 800261c:	4876      	ldr	r0, [pc, #472]	; (80027f8 <SEND_MES_BLESTATUS+0x6c8>)
 800261e:	f00a fec3 	bl	800d3a8 <iprintf>
	break;
 8002622:	e117      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_INSUFFICIENT_ENC_KEYSIZE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INSUFFICIENT_ENC_KEYSIZE ");
 8002624:	4868      	ldr	r0, [pc, #416]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002626:	f007 fabc 	bl	8009ba2 <DbgTraceGetFileName>
 800262a:	4601      	mov	r1, r0
 800262c:	f240 23f7 	movw	r3, #759	; 0x2f7
 8002630:	4a66      	ldr	r2, [pc, #408]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002632:	4867      	ldr	r0, [pc, #412]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002634:	f00a feb8 	bl	800d3a8 <iprintf>
 8002638:	4870      	ldr	r0, [pc, #448]	; (80027fc <SEND_MES_BLESTATUS+0x6cc>)
 800263a:	f00a feb5 	bl	800d3a8 <iprintf>
	break;
 800263e:	e109      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_SEC_DB_FULL :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SEC_DB_FULL ");
 8002640:	4861      	ldr	r0, [pc, #388]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002642:	f007 faae 	bl	8009ba2 <DbgTraceGetFileName>
 8002646:	4601      	mov	r1, r0
 8002648:	f240 23fb 	movw	r3, #763	; 0x2fb
 800264c:	4a5f      	ldr	r2, [pc, #380]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800264e:	4860      	ldr	r0, [pc, #384]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002650:	f00a feaa 	bl	800d3a8 <iprintf>
 8002654:	486a      	ldr	r0, [pc, #424]	; (8002800 <SEND_MES_BLESTATUS+0x6d0>)
 8002656:	f00a fea7 	bl	800d3a8 <iprintf>
	break;
 800265a:	e0fb      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_INVALID_HANDLE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_HANDLE ");
 800265c:	485a      	ldr	r0, [pc, #360]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800265e:	f007 faa0 	bl	8009ba2 <DbgTraceGetFileName>
 8002662:	4601      	mov	r1, r0
 8002664:	f240 23ff 	movw	r3, #767	; 0x2ff
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800266a:	4859      	ldr	r0, [pc, #356]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 800266c:	f00a fe9c 	bl	800d3a8 <iprintf>
 8002670:	4864      	ldr	r0, [pc, #400]	; (8002804 <SEND_MES_BLESTATUS+0x6d4>)
 8002672:	f00a fe99 	bl	800d3a8 <iprintf>
	break;
 8002676:	e0ed      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_OUT_OF_HANDLE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_OUT_OF_HANDLE ");
 8002678:	4853      	ldr	r0, [pc, #332]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800267a:	f007 fa92 	bl	8009ba2 <DbgTraceGetFileName>
 800267e:	4601      	mov	r1, r0
 8002680:	f240 3303 	movw	r3, #771	; 0x303
 8002684:	4a51      	ldr	r2, [pc, #324]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002686:	4852      	ldr	r0, [pc, #328]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002688:	f00a fe8e 	bl	800d3a8 <iprintf>
 800268c:	485e      	ldr	r0, [pc, #376]	; (8002808 <SEND_MES_BLESTATUS+0x6d8>)
 800268e:	f00a fe8b 	bl	800d3a8 <iprintf>
	break;
 8002692:	e0df      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_INVALID_OPERATION :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INVALID_OPERATION ");
 8002694:	484c      	ldr	r0, [pc, #304]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002696:	f007 fa84 	bl	8009ba2 <DbgTraceGetFileName>
 800269a:	4601      	mov	r1, r0
 800269c:	f240 3307 	movw	r3, #775	; 0x307
 80026a0:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80026a2:	484b      	ldr	r0, [pc, #300]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80026a4:	f00a fe80 	bl	800d3a8 <iprintf>
 80026a8:	4858      	ldr	r0, [pc, #352]	; (800280c <SEND_MES_BLESTATUS+0x6dc>)
 80026aa:	f00a fe7d 	bl	800d3a8 <iprintf>
	break;
 80026ae:	e0d1      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_CHARAC_ALREADY_EXISTS :
			APP_DBG_MSG("\r\n\r BLE_STATUS_CHARAC_ALREADY_EXISTS ");
 80026b0:	4845      	ldr	r0, [pc, #276]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 80026b2:	f007 fa76 	bl	8009ba2 <DbgTraceGetFileName>
 80026b6:	4601      	mov	r1, r0
 80026b8:	f240 330b 	movw	r3, #779	; 0x30b
 80026bc:	4a43      	ldr	r2, [pc, #268]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80026be:	4844      	ldr	r0, [pc, #272]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80026c0:	f00a fe72 	bl	800d3a8 <iprintf>
 80026c4:	4852      	ldr	r0, [pc, #328]	; (8002810 <SEND_MES_BLESTATUS+0x6e0>)
 80026c6:	f00a fe6f 	bl	800d3a8 <iprintf>
	break;
 80026ca:	e0c3      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_INSUFFICIENT_RESOURCES :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INSUFFICIENT_RESOURCES ");
 80026cc:	483e      	ldr	r0, [pc, #248]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 80026ce:	f007 fa68 	bl	8009ba2 <DbgTraceGetFileName>
 80026d2:	4601      	mov	r1, r0
 80026d4:	f240 330f 	movw	r3, #783	; 0x30f
 80026d8:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80026da:	483d      	ldr	r0, [pc, #244]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80026dc:	f00a fe64 	bl	800d3a8 <iprintf>
 80026e0:	484c      	ldr	r0, [pc, #304]	; (8002814 <SEND_MES_BLESTATUS+0x6e4>)
 80026e2:	f00a fe61 	bl	800d3a8 <iprintf>
	break;
 80026e6:	e0b5      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_SEC_PERMISSION_ERROR :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SEC_PERMISSION_ERROR ");
 80026e8:	4837      	ldr	r0, [pc, #220]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 80026ea:	f007 fa5a 	bl	8009ba2 <DbgTraceGetFileName>
 80026ee:	4601      	mov	r1, r0
 80026f0:	f240 3313 	movw	r3, #787	; 0x313
 80026f4:	4a35      	ldr	r2, [pc, #212]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80026f6:	4836      	ldr	r0, [pc, #216]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80026f8:	f00a fe56 	bl	800d3a8 <iprintf>
 80026fc:	4846      	ldr	r0, [pc, #280]	; (8002818 <SEND_MES_BLESTATUS+0x6e8>)
 80026fe:	f00a fe53 	bl	800d3a8 <iprintf>
	break;
 8002702:	e0a7      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_ADDRESS_NOT_RESOLVED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_ADDRESS_NOT_RESOLVED ");
 8002704:	4830      	ldr	r0, [pc, #192]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002706:	f007 fa4c 	bl	8009ba2 <DbgTraceGetFileName>
 800270a:	4601      	mov	r1, r0
 800270c:	f240 3317 	movw	r3, #791	; 0x317
 8002710:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002712:	482f      	ldr	r0, [pc, #188]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002714:	f00a fe48 	bl	800d3a8 <iprintf>
 8002718:	4840      	ldr	r0, [pc, #256]	; (800281c <SEND_MES_BLESTATUS+0x6ec>)
 800271a:	f00a fe45 	bl	800d3a8 <iprintf>
	break;
 800271e:	e099      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_NO_VALID_SLOT :
			APP_DBG_MSG("\r\n\r BLE_STATUS_NO_VALID_SLOT ");
 8002720:	4829      	ldr	r0, [pc, #164]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002722:	f007 fa3e 	bl	8009ba2 <DbgTraceGetFileName>
 8002726:	4601      	mov	r1, r0
 8002728:	f240 331b 	movw	r3, #795	; 0x31b
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800272e:	4828      	ldr	r0, [pc, #160]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002730:	f00a fe3a 	bl	800d3a8 <iprintf>
 8002734:	483a      	ldr	r0, [pc, #232]	; (8002820 <SEND_MES_BLESTATUS+0x6f0>)
 8002736:	f00a fe37 	bl	800d3a8 <iprintf>
	break;
 800273a:	e08b      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_SCAN_WINDOW_SHORT :
			APP_DBG_MSG("\r\n\r BLE_STATUS_SCAN_WINDOW_SHORT ");
 800273c:	4822      	ldr	r0, [pc, #136]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800273e:	f007 fa30 	bl	8009ba2 <DbgTraceGetFileName>
 8002742:	4601      	mov	r1, r0
 8002744:	f240 331f 	movw	r3, #799	; 0x31f
 8002748:	4a20      	ldr	r2, [pc, #128]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800274a:	4821      	ldr	r0, [pc, #132]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 800274c:	f00a fe2c 	bl	800d3a8 <iprintf>
 8002750:	4834      	ldr	r0, [pc, #208]	; (8002824 <SEND_MES_BLESTATUS+0x6f4>)
 8002752:	f00a fe29 	bl	800d3a8 <iprintf>
	break;
 8002756:	e07d      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_NEW_INTERVAL_FAILED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_NEW_INTERVAL_FAILED ");
 8002758:	481b      	ldr	r0, [pc, #108]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 800275a:	f007 fa22 	bl	8009ba2 <DbgTraceGetFileName>
 800275e:	4601      	mov	r1, r0
 8002760:	f240 3323 	movw	r3, #803	; 0x323
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002766:	481a      	ldr	r0, [pc, #104]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002768:	f00a fe1e 	bl	800d3a8 <iprintf>
 800276c:	482e      	ldr	r0, [pc, #184]	; (8002828 <SEND_MES_BLESTATUS+0x6f8>)
 800276e:	f00a fe1b 	bl	800d3a8 <iprintf>
	break;
 8002772:	e06f      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_TIMEOUT :
			APP_DBG_MSG("\r\n\r BLE_STATUS_TIMEOUT ");
 8002774:	4814      	ldr	r0, [pc, #80]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002776:	f007 fa14 	bl	8009ba2 <DbgTraceGetFileName>
 800277a:	4601      	mov	r1, r0
 800277c:	f240 3327 	movw	r3, #807	; 0x327
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 8002782:	4813      	ldr	r0, [pc, #76]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 8002784:	f00a fe10 	bl	800d3a8 <iprintf>
 8002788:	4828      	ldr	r0, [pc, #160]	; (800282c <SEND_MES_BLESTATUS+0x6fc>)
 800278a:	f00a fe0d 	bl	800d3a8 <iprintf>
	break;
 800278e:	e061      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_LENGTH_FAILED :
			APP_DBG_MSG("\r\n\r BLE_STATUS_LENGTH_FAILED ");
 8002790:	480d      	ldr	r0, [pc, #52]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 8002792:	f007 fa06 	bl	8009ba2 <DbgTraceGetFileName>
 8002796:	4601      	mov	r1, r0
 8002798:	f240 332b 	movw	r3, #811	; 0x32b
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 800279e:	480c      	ldr	r0, [pc, #48]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80027a0:	f00a fe02 	bl	800d3a8 <iprintf>
 80027a4:	4822      	ldr	r0, [pc, #136]	; (8002830 <SEND_MES_BLESTATUS+0x700>)
 80027a6:	f00a fdff 	bl	800d3a8 <iprintf>
	break;
 80027aa:	e053      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>

	case BLE_STATUS_INTERVAL_TOO_LARGE :
			APP_DBG_MSG("\r\n\r BLE_STATUS_INTERVAL_TOO_LARGE ");
 80027ac:	4806      	ldr	r0, [pc, #24]	; (80027c8 <SEND_MES_BLESTATUS+0x698>)
 80027ae:	f007 f9f8 	bl	8009ba2 <DbgTraceGetFileName>
 80027b2:	4601      	mov	r1, r0
 80027b4:	f240 332f 	movw	r3, #815	; 0x32f
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <SEND_MES_BLESTATUS+0x69c>)
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <SEND_MES_BLESTATUS+0x6a0>)
 80027bc:	f00a fdf4 	bl	800d3a8 <iprintf>
 80027c0:	481c      	ldr	r0, [pc, #112]	; (8002834 <SEND_MES_BLESTATUS+0x704>)
 80027c2:	f00a fdf1 	bl	800d3a8 <iprintf>
	break;
 80027c6:	e045      	b.n	8002854 <SEND_MES_BLESTATUS+0x724>
 80027c8:	0800e424 	.word	0x0800e424
 80027cc:	08010378 	.word	0x08010378
 80027d0:	0800e438 	.word	0x0800e438
 80027d4:	0800e4d4 	.word	0x0800e4d4
 80027d8:	0800e4ec 	.word	0x0800e4ec
 80027dc:	0800e504 	.word	0x0800e504
 80027e0:	0800e520 	.word	0x0800e520
 80027e4:	0800e538 	.word	0x0800e538
 80027e8:	0800e558 	.word	0x0800e558
 80027ec:	0800e574 	.word	0x0800e574
 80027f0:	0800e598 	.word	0x0800e598
 80027f4:	0800e5b8 	.word	0x0800e5b8
 80027f8:	0800e5d8 	.word	0x0800e5d8
 80027fc:	0800e5f8 	.word	0x0800e5f8
 8002800:	0800e624 	.word	0x0800e624
 8002804:	0800e640 	.word	0x0800e640
 8002808:	0800e660 	.word	0x0800e660
 800280c:	0800e680 	.word	0x0800e680
 8002810:	0800e6a4 	.word	0x0800e6a4
 8002814:	0800e6cc 	.word	0x0800e6cc
 8002818:	0800e6f4 	.word	0x0800e6f4
 800281c:	0800e71c 	.word	0x0800e71c
 8002820:	0800e744 	.word	0x0800e744
 8002824:	0800e764 	.word	0x0800e764
 8002828:	0800e788 	.word	0x0800e788
 800282c:	0800e7ac 	.word	0x0800e7ac
 8002830:	0800e7c4 	.word	0x0800e7c4
 8002834:	0800e7e4 	.word	0x0800e7e4

	default :
		APP_DBG_MSG("\r\n\r Unknow error ");
 8002838:	480f      	ldr	r0, [pc, #60]	; (8002878 <SEND_MES_BLESTATUS+0x748>)
 800283a:	f007 f9b2 	bl	8009ba2 <DbgTraceGetFileName>
 800283e:	4601      	mov	r1, r0
 8002840:	f240 3333 	movw	r3, #819	; 0x333
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <SEND_MES_BLESTATUS+0x74c>)
 8002846:	480e      	ldr	r0, [pc, #56]	; (8002880 <SEND_MES_BLESTATUS+0x750>)
 8002848:	f00a fdae 	bl	800d3a8 <iprintf>
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <SEND_MES_BLESTATUS+0x754>)
 800284e:	f00a fdab 	bl	800d3a8 <iprintf>
	break;
 8002852:	bf00      	nop
	}

	APP_DBG_MSG("\r\n\r */*/*/*/ ");
 8002854:	4808      	ldr	r0, [pc, #32]	; (8002878 <SEND_MES_BLESTATUS+0x748>)
 8002856:	f007 f9a4 	bl	8009ba2 <DbgTraceGetFileName>
 800285a:	4601      	mov	r1, r0
 800285c:	f240 3337 	movw	r3, #823	; 0x337
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <SEND_MES_BLESTATUS+0x74c>)
 8002862:	4807      	ldr	r0, [pc, #28]	; (8002880 <SEND_MES_BLESTATUS+0x750>)
 8002864:	f00a fda0 	bl	800d3a8 <iprintf>
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <SEND_MES_BLESTATUS+0x758>)
 800286a:	f00a fd9d 	bl	800d3a8 <iprintf>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	0800e424 	.word	0x0800e424
 800287c:	08010378 	.word	0x08010378
 8002880:	0800e438 	.word	0x0800e438
 8002884:	0800e808 	.word	0x0800e808
 8002888:	0800e44c 	.word	0x0800e44c

0800288c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002894:	e7fe      	b.n	8002894 <Error_Handler+0x8>

08002896 <LL_RCC_EnableRTC>:
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_AHB2_GRP1_EnableClock>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4013      	ands	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028dc:	68fb      	ldr	r3, [r7, #12]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_AHB3_GRP1_EnableClock>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4313      	orrs	r3, r2
 8002900:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800292a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002940:	68fb      	ldr	r3, [r7, #12]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800295c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4313      	orrs	r3, r2
 8002964:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4013      	ands	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029a4:	68fb      	ldr	r3, [r7, #12]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80029b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029ba:	f7ff ff96 	bl	80028ea <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	202e      	movs	r0, #46	; 0x2e
 80029c4:	f000 fcdd 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80029c8:	202e      	movs	r0, #46	; 0x2e
 80029ca:	f000 fcf4 	bl	80033b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <HAL_IPCC_MspInit+0x44>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80029e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80029ea:	f7ff ff7e 	bl	80028ea <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	f000 fcc5 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80029f8:	202c      	movs	r0, #44	; 0x2c
 80029fa:	f000 fcdc 	bl	80033b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	202d      	movs	r0, #45	; 0x2d
 8002a04:	f000 fcbd 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a08:	202d      	movs	r0, #45	; 0x2d
 8002a0a:	f000 fcd4 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	58000c00 	.word	0x58000c00

08002a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6d      	ldr	r2, [pc, #436]	; (8002bf0 <HAL_UART_MspInit+0x1d4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d15e      	bne.n	8002afc <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7ff ff85 	bl	800294e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	2001      	movs	r0, #1
 8002a46:	f7ff ff37 	bl	80028b8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 031c 	add.w	r3, r7, #28
 8002a62:	4619      	mov	r1, r3
 8002a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a68:	f001 f85c 	bl	8003b24 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a6e:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <HAL_UART_MspInit+0x1dc>)
 8002a70:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002a72:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a74:	2211      	movs	r2, #17
 8002a76:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a78:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a84:	4b5b      	ldr	r3, [pc, #364]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a90:	4b58      	ldr	r3, [pc, #352]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002a96:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9c:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002aa2:	4854      	ldr	r0, [pc, #336]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002aa4:	f000 fccc 	bl	8003440 <HAL_DMA_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8002aae:	f7ff feed 	bl	800288c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002ab2:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002ab6:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	4619      	mov	r1, r3
 8002ace:	4849      	ldr	r0, [pc, #292]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002ad0:	f000 ffe8 	bl	8003aa4 <HAL_DMAEx_ConfigMuxSync>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002ada:	f7ff fed7 	bl	800288c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a44      	ldr	r2, [pc, #272]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002ae2:	679a      	str	r2, [r3, #120]	; 0x78
 8002ae4:	4a43      	ldr	r2, [pc, #268]	; (8002bf4 <HAL_UART_MspInit+0x1d8>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	2025      	movs	r0, #37	; 0x25
 8002af0:	f000 fc47 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002af4:	2025      	movs	r0, #37	; 0x25
 8002af6:	f000 fc5e 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002afa:	e075      	b.n	8002be8 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a3e      	ldr	r2, [pc, #248]	; (8002bfc <HAL_UART_MspInit+0x1e0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d170      	bne.n	8002be8 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b0a:	f7ff ff39 	bl	8002980 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f7ff fed2 	bl	80028b8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b14:	23c0      	movs	r3, #192	; 0xc0
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b24:	2307      	movs	r3, #7
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4834      	ldr	r0, [pc, #208]	; (8002c00 <HAL_UART_MspInit+0x1e4>)
 8002b30:	f000 fff8 	bl	8003b24 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002b34:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b36:	4a34      	ldr	r2, [pc, #208]	; (8002c08 <HAL_UART_MspInit+0x1ec>)
 8002b38:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b42:	2210      	movs	r2, #16
 8002b44:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b60:	2220      	movs	r2, #32
 8002b62:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b6a:	4826      	ldr	r0, [pc, #152]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b6c:	f000 fc68 	bl	8003440 <HAL_DMA_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8002b76:	f7ff fe89 	bl	800288c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b7e:	679a      	str	r2, [r3, #120]	; 0x78
 8002b80:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <HAL_UART_MspInit+0x1e8>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002b88:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_UART_MspInit+0x1f4>)
 8002b8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002b8e:	220e      	movs	r2, #14
 8002b90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002bbc:	4813      	ldr	r0, [pc, #76]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002bbe:	f000 fc3f 	bl	8003440 <HAL_DMA_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002bc8:	f7ff fe60 	bl	800288c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002bd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_UART_MspInit+0x1f0>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2024      	movs	r0, #36	; 0x24
 8002bde:	f000 fbd0 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002be2:	2024      	movs	r0, #36	; 0x24
 8002be4:	f000 fbe7 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 8002be8:	bf00      	nop
 8002bea:	3730      	adds	r7, #48	; 0x30
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40008000 	.word	0x40008000
 8002bf4:	2000066c 	.word	0x2000066c
 8002bf8:	40020044 	.word	0x40020044
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	48000400 	.word	0x48000400
 8002c04:	200004f8 	.word	0x200004f8
 8002c08:	40020444 	.word	0x40020444
 8002c0c:	20000558 	.word	0x20000558
 8002c10:	40020008 	.word	0x40020008

08002c14 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <HAL_RNG_MspInit+0x24>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d103      	bne.n	8002c2e <HAL_RNG_MspInit+0x1a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c26:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c2a:	f7ff fe5e 	bl	80028ea <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	58001000 	.word	0x58001000

08002c3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_RTC_MspInit+0x38>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10d      	bne.n	8002c6a <HAL_RTC_MspInit+0x2e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c4e:	f7ff fe22 	bl	8002896 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c52:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c56:	f7ff fe61 	bl	800291c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2003      	movs	r0, #3
 8002c60:	f000 fb8f 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f000 fba6 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40002800 	.word	0x40002800

08002c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_TIM_Base_MspInit+0x34>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10b      	bne.n	8002ca2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c8e:	f7ff fe77 	bl	8002980 <LL_APB2_GRP1_EnableClock>
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	201a      	movs	r0, #26
 8002c98:	f000 fb73 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c9c:	201a      	movs	r0, #26
 8002c9e:	f000 fb8a 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40014800 	.word	0x40014800

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 f9da 	bl	80030b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002d08:	f7fe fa38 	bl	800117c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f001 f8a7 	bl	8003e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d22:	2002      	movs	r0, #2
 8002d24:	f001 f8a0 	bl	8003e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d30:	2010      	movs	r0, #16
 8002d32:	f001 f899 	bl	8003e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <DMA1_Channel1_IRQHandler+0x10>)
 8002d42:	f000 fd5e 	bl	8003802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000558 	.word	0x20000558

08002d50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <DMA1_Channel4_IRQHandler+0x10>)
 8002d56:	f000 fd54 	bl	8003802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000066c 	.word	0x2000066c

08002d64 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	TimerIRQ();
 8002d68:	f7ff f89c 	bl	8001ea4 <TimerIRQ>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002d6e:	f003 fa25 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200003e0 	.word	0x200003e0

08002d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <USART1_IRQHandler+0x10>)
 8002d82:	f003 fd87 	bl	8006894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200005b8 	.word	0x200005b8

08002d90 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <LPUART1_IRQHandler+0x10>)
 8002d96:	f003 fd7d 	bl	8006894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000468 	.word	0x20000468

08002da4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002da8:	f009 fefa 	bl	800cba0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002db4:	f009 ff2c 	bl	800cc10 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002dc0:	f001 f876 	bl	8003eb0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <DMA2_Channel4_IRQHandler+0x10>)
 8002dce:	f000 fd18 	bl	8003802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200004f8 	.word	0x200004f8

08002ddc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e00a      	b.n	8002e04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dee:	f3af 8000 	nop.w
 8002df2:	4601      	mov	r1, r0
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	60ba      	str	r2, [r7, #8]
 8002dfa:	b2ca      	uxtb	r2, r1
 8002dfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	dbf0      	blt.n	8002dee <_read+0x12>
	}

return len;
 8002e0c:	687b      	ldr	r3, [r7, #4]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <_isatty>:

int _isatty(int file)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
	return 1;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e88:	4a14      	ldr	r2, [pc, #80]	; (8002edc <_sbrk+0x5c>)
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <_sbrk+0x60>)
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <_sbrk+0x64>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <_sbrk+0x64>)
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <_sbrk+0x68>)
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d207      	bcs.n	8002ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb0:	f00a fa3a 	bl	800d328 <__errno>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	e009      	b.n	8002ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <_sbrk+0x64>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <_sbrk+0x64>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <_sbrk+0x64>)
 8002ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20030000 	.word	0x20030000
 8002ee0:	00001000 	.word	0x00001000
 8002ee4:	2000025c 	.word	0x2000025c
 8002ee8:	20000718 	.word	0x20000718

08002eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <SystemInit+0x98>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <SystemInit+0x98>)
 8002ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002f18:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <SystemInit+0x9c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f36:	f023 0305 	bic.w	r3, r3, #5
 8002f3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <SystemInit+0xa0>)
 8002f58:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <SystemInit+0xa0>)
 8002f60:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	faf6fefb 	.word	0xfaf6fefb
 8002f8c:	22041000 	.word	0x22041000

08002f90 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002f90:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f92:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f94:	3304      	adds	r3, #4

08002f96 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f96:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f98:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002f9a:	d3f9      	bcc.n	8002f90 <CopyDataInit>
  bx lr
 8002f9c:	4770      	bx	lr

08002f9e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002f9e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002fa0:	3004      	adds	r0, #4

08002fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002fa2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002fa4:	d3fb      	bcc.n	8002f9e <FillZerobss>
  bx lr
 8002fa6:	4770      	bx	lr

08002fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fa8:	480c      	ldr	r0, [pc, #48]	; (8002fdc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002faa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002fac:	f7ff ff9e 	bl	8002eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002fb0:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <LoopForever+0x8>)
 8002fb2:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <LoopForever+0xc>)
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <LoopForever+0x10>)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f7ff ffed 	bl	8002f96 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002fbc:	480b      	ldr	r0, [pc, #44]	; (8002fec <LoopForever+0x14>)
 8002fbe:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <LoopForever+0x18>)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f7ff ffee 	bl	8002fa2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002fc6:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <LoopForever+0x1c>)
 8002fc8:	490b      	ldr	r1, [pc, #44]	; (8002ff8 <LoopForever+0x20>)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f7ff ffe9 	bl	8002fa2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fd0:	f00a f9b0 	bl	800d334 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002fd4:	f7fe fcfc 	bl	80019d0 <main>

08002fd8 <LoopForever>:

LoopForever:
  b LoopForever
 8002fd8:	e7fe      	b.n	8002fd8 <LoopForever>
 8002fda:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002fdc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	200000a4 	.word	0x200000a4
 8002fe8:	08010644 	.word	0x08010644
  INIT_BSS _sbss, _ebss
 8002fec:	20000234 	.word	0x20000234
 8002ff0:	20000718 	.word	0x20000718
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002ff4:	200301e0 	.word	0x200301e0
 8002ff8:	20030a57 	.word	0x20030a57

08002ffc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ffc:	e7fe      	b.n	8002ffc <ADC1_IRQHandler>
	...

08003000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_Init+0x3c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <HAL_Init+0x3c>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003016:	2003      	movs	r0, #3
 8003018:	f000 f9a8 	bl	800336c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800301c:	2000      	movs	r0, #0
 800301e:	f000 f80f 	bl	8003040 <HAL_InitTick>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	71fb      	strb	r3, [r7, #7]
 800302c:	e001      	b.n	8003032 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800302e:	f7ff fcc0 	bl	80029b2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003032:	79fb      	ldrb	r3, [r7, #7]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	58004000 	.word	0x58004000

08003040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_InitTick+0x6c>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d024      	beq.n	800309e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003054:	f002 f8a2 	bl	800519c <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_InitTick+0x6c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003064:	fbb3 f3f1 	udiv	r3, r3, r1
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f9be 	bl	80033ee <HAL_SYSTICK_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10f      	bne.n	8003098 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d809      	bhi.n	8003092 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307e:	2200      	movs	r2, #0
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	f04f 30ff 	mov.w	r0, #4294967295
 8003086:	f000 f97c 	bl	8003382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <HAL_InitTick+0x70>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e007      	b.n	80030a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	e004      	b.n	80030a2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e001      	b.n	80030a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	20000008 	.word	0x20000008

080030b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_IncTick+0x20>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_IncTick+0x24>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_IncTick+0x24>)
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	20000700 	.word	0x20000700

080030dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return uwTick;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_GetTick+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000700 	.word	0x20000700

080030f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <HAL_GetTickPrio+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000008 	.word	0x20000008

0800310c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db12      	blt.n	80031e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	490a      	ldr	r1, [pc, #40]	; (80031f0 <__NVIC_DisableIRQ+0x44>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	3320      	adds	r3, #32
 80031d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031d8:	f3bf 8f4f 	dsb	sy
}
 80031dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031de:	f3bf 8f6f 	isb	sy
}
 80031e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000e100 	.word	0xe000e100

080031f4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0c      	blt.n	8003220 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4907      	ldr	r1, [pc, #28]	; (800322c <__NVIC_SetPendingIRQ+0x38>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2001      	movs	r0, #1
 8003216:	fa00 f202 	lsl.w	r2, r0, r2
 800321a:	3340      	adds	r3, #64	; 0x40
 800321c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100

08003230 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	2b00      	cmp	r3, #0
 8003240:	db0c      	blt.n	800325c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	4907      	ldr	r1, [pc, #28]	; (8003268 <__NVIC_ClearPendingIRQ+0x38>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2001      	movs	r0, #1
 8003252:	fa00 f202 	lsl.w	r2, r0, r2
 8003256:	3360      	adds	r3, #96	; 0x60
 8003258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000e100 	.word	0xe000e100

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	; (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	; (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1c3 0307 	rsb	r3, r3, #7
 80032da:	2b04      	cmp	r3, #4
 80032dc:	bf28      	it	cs
 80032de:	2304      	movcs	r3, #4
 80032e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d902      	bls.n	80032f0 <NVIC_EncodePriority+0x30>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b03      	subs	r3, #3
 80032ee:	e000      	b.n	80032f2 <NVIC_EncodePriority+0x32>
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43d9      	mvns	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	4313      	orrs	r3, r2
         );
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003338:	d301      	bcc.n	800333e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <SysTick_Config+0x40>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003346:	210f      	movs	r1, #15
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f7ff ff8e 	bl	800326c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <SysTick_Config+0x40>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <SysTick_Config+0x40>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000e010 	.word	0xe000e010

0800336c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fec9 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003390:	f7ff fee0 	bl	8003154 <__NVIC_GetPriorityGrouping>
 8003394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7ff ff90 	bl	80032c0 <NVIC_EncodePriority>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff5f 	bl	800326c <__NVIC_SetPriority>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fed3 	bl	8003170 <__NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fee3 	bl	80031ac <__NVIC_DisableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ff96 	bl	8003328 <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff feed 	bl	80031f4 <__NVIC_SetPendingIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fefd 	bl	8003230 <__NVIC_ClearPendingIRQ>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e08e      	b.n	8003570 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_DMA_Init+0x138>)
 800345a:	429a      	cmp	r2, r3
 800345c:	d80f      	bhi.n	800347e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4b45      	ldr	r3, [pc, #276]	; (800357c <HAL_DMA_Init+0x13c>)
 8003466:	4413      	add	r3, r2
 8003468:	4a45      	ldr	r2, [pc, #276]	; (8003580 <HAL_DMA_Init+0x140>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	009a      	lsls	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a42      	ldr	r2, [pc, #264]	; (8003584 <HAL_DMA_Init+0x144>)
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
 800347c:	e00e      	b.n	800349c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_DMA_Init+0x148>)
 8003486:	4413      	add	r3, r2
 8003488:	4a3d      	ldr	r2, [pc, #244]	; (8003580 <HAL_DMA_Init+0x140>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a3c      	ldr	r2, [pc, #240]	; (800358c <HAL_DMA_Init+0x14c>)
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa74 	bl	80039dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fc:	d102      	bne.n	8003504 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003510:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800351a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_DMA_Init+0x106>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d80c      	bhi.n	8003546 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fa93 	bl	8003a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	e008      	b.n	8003558 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40020407 	.word	0x40020407
 800357c:	bffdfff8 	.word	0xbffdfff8
 8003580:	cccccccd 	.word	0xcccccccd
 8003584:	40020000 	.word	0x40020000
 8003588:	bffdfbf8 	.word	0xbffdfbf8
 800358c:	40020400 	.word	0x40020400

08003590 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_DMA_Start_IT+0x20>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e066      	b.n	800367e <HAL_DMA_Start_IT+0xee>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d155      	bne.n	8003670 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f9b9 	bl	8003960 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 020e 	orr.w	r2, r2, #14
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e00f      	b.n	8003628 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 020a 	orr.w	r2, r2, #10
 8003626:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003644:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e005      	b.n	800367c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003678:	2302      	movs	r3, #2
 800367a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04f      	b.n	8003738 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2204      	movs	r2, #4
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e040      	b.n	8003738 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 020e 	bic.w	r2, r2, #14
 80036c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f003 021c 	and.w	r2, r3, #28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003702:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003724:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d005      	beq.n	8003768 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2204      	movs	r2, #4
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	e047      	b.n	80037f8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 020e 	bic.w	r2, r2, #14
 8003776:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f003 021c 	and.w	r2, r3, #28
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f202 	lsl.w	r2, r1, r2
 80037aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
    }
  }
  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f003 031c 	and.w	r3, r3, #28
 8003822:	2204      	movs	r2, #4
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d026      	beq.n	800387c <HAL_DMA_IRQHandler+0x7a>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d021      	beq.n	800387c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d107      	bne.n	8003856 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0204 	bic.w	r2, r2, #4
 8003854:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f003 021c 	and.w	r2, r3, #28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2104      	movs	r1, #4
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	2b00      	cmp	r3, #0
 8003870:	d071      	beq.n	8003956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800387a:	e06c      	b.n	8003956 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	f003 031c 	and.w	r3, r3, #28
 8003884:	2202      	movs	r2, #2
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d02e      	beq.n	80038ee <HAL_DMA_IRQHandler+0xec>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d029      	beq.n	80038ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 020a 	bic.w	r2, r2, #10
 80038b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f003 021c 	and.w	r2, r3, #28
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2102      	movs	r1, #2
 80038ce:	fa01 f202 	lsl.w	r2, r1, r2
 80038d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d038      	beq.n	8003956 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038ec:	e033      	b.n	8003956 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f003 031c 	and.w	r3, r3, #28
 80038f6:	2208      	movs	r2, #8
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02a      	beq.n	8003958 <HAL_DMA_IRQHandler+0x156>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d025      	beq.n	8003958 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 020e 	bic.w	r2, r2, #14
 800391a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f003 021c 	and.w	r2, r3, #28
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003956:	bf00      	nop
 8003958:	bf00      	nop
}
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003976:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f003 021c 	and.w	r2, r3, #28
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d108      	bne.n	80039c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039be:	e007      	b.n	80039d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d80a      	bhi.n	8003a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039fc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6493      	str	r3, [r2, #72]	; 0x48
 8003a04:	e007      	b.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	009a      	lsls	r2, r3, #2
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a10:	4413      	add	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3b08      	subs	r3, #8
 8003a1e:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a2c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2201      	movs	r2, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40020407 	.word	0x40020407
 8003a4c:	4002081c 	.word	0x4002081c
 8003a50:	cccccccd 	.word	0xcccccccd
 8003a54:	40020880 	.word	0x40020880

08003a58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003a7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2201      	movs	r2, #1
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	1000823f 	.word	0x1000823f
 8003aa0:	40020940 	.word	0x40020940

08003aa4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d12b      	bne.n	8003b12 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e025      	b.n	8003b14 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	6811      	ldr	r1, [r2, #0]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	3a01      	subs	r2, #1
 8003ae4:	04d2      	lsls	r2, r2, #19
 8003ae6:	4311      	orrs	r1, r2
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	6852      	ldr	r2, [r2, #4]
 8003aec:	4311      	orrs	r1, r2
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	7a12      	ldrb	r2, [r2, #8]
 8003af2:	0412      	lsls	r2, r2, #16
 8003af4:	4311      	orrs	r1, r2
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	7a52      	ldrb	r2, [r2, #9]
 8003afa:	0252      	lsls	r2, r2, #9
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b02:	430b      	orrs	r3, r1
 8003b04:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000fdff 	.word	0xe000fdff

08003b24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b32:	e14c      	b.n	8003dce <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 813e 	beq.w	8003dc8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d005      	beq.n	8003b64 <HAL_GPIO_Init+0x40>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d130      	bne.n	8003bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 0201 	and.w	r2, r3, #1
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d017      	beq.n	8003c02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	2203      	movs	r2, #3
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d123      	bne.n	8003c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	08da      	lsrs	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3208      	adds	r2, #8
 8003c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	220f      	movs	r2, #15
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	6939      	ldr	r1, [r7, #16]
 8003c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0203 	and.w	r2, r3, #3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8098 	beq.w	8003dc8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c98:	4a54      	ldr	r2, [pc, #336]	; (8003dec <HAL_GPIO_Init+0x2c8>)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	220f      	movs	r2, #15
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cc2:	d019      	beq.n	8003cf8 <HAL_GPIO_Init+0x1d4>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_GPIO_Init+0x2cc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_GPIO_Init+0x1d0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a49      	ldr	r2, [pc, #292]	; (8003df4 <HAL_GPIO_Init+0x2d0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_GPIO_Init+0x1cc>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a48      	ldr	r2, [pc, #288]	; (8003df8 <HAL_GPIO_Init+0x2d4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <HAL_GPIO_Init+0x1c8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a47      	ldr	r2, [pc, #284]	; (8003dfc <HAL_GPIO_Init+0x2d8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_GPIO_Init+0x1c4>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	e008      	b.n	8003cfa <HAL_GPIO_Init+0x1d6>
 8003ce8:	2307      	movs	r3, #7
 8003cea:	e006      	b.n	8003cfa <HAL_GPIO_Init+0x1d6>
 8003cec:	2303      	movs	r3, #3
 8003cee:	e004      	b.n	8003cfa <HAL_GPIO_Init+0x1d6>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e002      	b.n	8003cfa <HAL_GPIO_Init+0x1d6>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_GPIO_Init+0x1d6>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	f002 0203 	and.w	r2, r2, #3
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	4093      	lsls	r3, r2
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d0a:	4938      	ldr	r1, [pc, #224]	; (8003dec <HAL_GPIO_Init+0x2c8>)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d3e:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003d46:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d98:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dc2:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <HAL_GPIO_Init+0x2dc>)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f47f aeab 	bne.w	8003b34 <HAL_GPIO_Init+0x10>
  }
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40010000 	.word	0x40010000
 8003df0:	48000400 	.word	0x48000400
 8003df4:	48000800 	.word	0x48000800
 8003df8:	48000c00 	.word	0x48000c00
 8003dfc:	48001000 	.word	0x48001000
 8003e00:	58000800 	.word	0x58000800

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	041a      	lsls	r2, r3, #16
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43d9      	mvns	r1, r3
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	400b      	ands	r3, r1
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	619a      	str	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d006      	beq.n	8003e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f806 	bl	8003e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	58000800 	.word	0x58000800

08003e98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_HSEM_IRQHandler+0x30>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_HSEM_IRQHandler+0x30>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4906      	ldr	r1, [pc, #24]	; (8003ee0 <HAL_HSEM_IRQHandler+0x30>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003eca:	4a05      	ldr	r2, [pc, #20]	; (8003ee0 <HAL_HSEM_IRQHandler+0x30>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f807 	bl	8003ee4 <HAL_HSEM_FreeCallback>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	58001500 	.word	0x58001500

08003ee4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01e      	beq.n	8003f48 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <HAL_IPCC_Init+0x60>)
 8003f0c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe fd5a 	bl	80029d4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003f20:	68b8      	ldr	r0, [r7, #8]
 8003f22:	f000 f85b 	bl	8003fdc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f82c 	bl	8003f90 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003f46:	e001      	b.n	8003f4c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	58000c00 	.word	0x58000c00

08003f5c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	4613      	mov	r3, r2
 8003f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e00f      	b.n	8003fbe <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <IPCC_SetDefaultCallbacks+0x44>)
 8003fa8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3306      	adds	r3, #6
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <IPCC_SetDefaultCallbacks+0x48>)
 8003fb6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d9ec      	bls.n	8003f9e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	08003f5d 	.word	0x08003f5d
 8003fd8:	08003f77 	.word	0x08003f77

08003fdc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003ff0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	223f      	movs	r2, #63	; 0x3f
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800400e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	58000400 	.word	0x58000400

08004024 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <HAL_PWREx_GetVoltageRange+0x18>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	58000400 	.word	0x58000400

08004040 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004052:	d101      	bne.n	8004058 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_RCC_HSE_Enable>:
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_HSE_Disable>:
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_HSE_IsReady>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b2:	d101      	bne.n	80040b8 <LL_RCC_HSE_IsReady+0x18>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <LL_RCC_HSE_IsReady+0x1a>
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_HSI_Enable>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_RCC_HSI_Disable>:
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f4:	6013      	str	r3, [r2, #0]
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_HSI_IsReady>:
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	d101      	bne.n	8004118 <LL_RCC_HSI_IsReady+0x18>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <LL_RCC_HSI_IsReady+0x1a>
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <LL_RCC_HSI48_Enable>:
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_RCC_HSI48_Disable>:
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800417c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_RCC_HSI48_IsReady>:
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d101      	bne.n	80041aa <LL_RCC_HSI48_IsReady+0x18>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <LL_RCC_HSI48_IsReady+0x1a>
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_LSE_Enable>:
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_LSE_Disable>:
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_LSE_EnableBypass>:
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_LSE_DisableBypass>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422c:	f023 0304 	bic.w	r3, r3, #4
 8004230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_RCC_LSE_IsReady>:
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d101      	bne.n	8004256 <LL_RCC_LSE_IsReady+0x18>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_RCC_LSE_IsReady+0x1a>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_RCC_LSI1_Enable>:
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_RCC_LSI1_Disable>:
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_LSI1_IsReady>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d101      	bne.n	80042be <LL_RCC_LSI1_IsReady+0x18>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <LL_RCC_LSI1_IsReady+0x1a>
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_LSI2_Enable>:
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_LSI2_Disable>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_RCC_LSI2_IsReady>:
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b08      	cmp	r3, #8
 8004320:	d101      	bne.n	8004326 <LL_RCC_LSI2_IsReady+0x18>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <LL_RCC_LSI2_IsReady+0x1a>
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_RCC_LSI2_SetTrimming>:
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004342:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_RCC_MSI_Enable>:
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6013      	str	r3, [r2, #0]
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_RCC_MSI_Disable>:
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6013      	str	r3, [r2, #0]
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_RCC_MSI_IsReady>:
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d101      	bne.n	80043b2 <LL_RCC_MSI_IsReady+0x16>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <LL_RCC_MSI_IsReady+0x18>
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <LL_RCC_MSI_SetRange>:
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_MSI_GetRange>:
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2bb0      	cmp	r3, #176	; 0xb0
 80043fc:	d901      	bls.n	8004402 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80043fe:	23b0      	movs	r3, #176	; 0xb0
 8004400:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004402:	687b      	ldr	r3, [r7, #4]
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_RCC_SetSysClkSource>:
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 0203 	bic.w	r2, r3, #3
 800444c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_RCC_GetSysClkSource>:
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 030c 	and.w	r3, r3, #12
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_RCC_SetAHBPrescaler>:
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800448c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_SetAHB4Prescaler>:
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80044d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044de:	f023 020f 	bic.w	r2, r3, #15
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_RCC_SetAPB1Prescaler>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800450e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_RCC_SetAPB2Prescaler>:
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_RCC_GetAHBPrescaler>:
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800455a:	4618      	mov	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_RCC_GetAHB4Prescaler>:
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <LL_RCC_GetAPB1Prescaler>:
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800458e:	4618      	mov	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_RCC_GetAPB2Prescaler>:
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_RCC_PLL_Enable>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80045b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c2:	6013      	str	r3, [r2, #0]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <LL_RCC_PLL_Disable>:
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e0:	6013      	str	r3, [r2, #0]
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_PLL_IsReady>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045fe:	d101      	bne.n	8004604 <LL_RCC_PLL_IsReady+0x18>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <LL_RCC_PLL_IsReady+0x1a>
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_RCC_PLL_GetN>:
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <LL_RCC_PLL_GetR>:
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_RCC_PLL_GetDivider>:
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_RCC_PLL_GetMainSource>:
{
 800465a:	b480      	push	{r7}
 800465c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0303 	and.w	r3, r3, #3
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004672:	b480      	push	{r7}
 8004674:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	d101      	bne.n	800468a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800469a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046aa:	d101      	bne.n	80046b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80046c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d101      	bne.n	80046d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80046e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046f4:	d101      	bne.n	80046fa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004706:	b480      	push	{r7}
 8004708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004718:	d101      	bne.n	800471e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b08d      	sub	sp, #52	; 0x34
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e37e      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8092 	beq.w	8004870 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474c:	f7ff fe89 	bl	8004462 <LL_RCC_GetSysClkSource>
 8004750:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004752:	f7ff ff82 	bl	800465a <LL_RCC_PLL_GetMainSource>
 8004756:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_RCC_OscConfig+0x3e>
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d14c      	bne.n	80047fe <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	2b01      	cmp	r3, #1
 8004768:	d149      	bne.n	80047fe <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800476a:	f7ff fe17 	bl	800439c <LL_RCC_MSI_IsReady>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x54>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e35d      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004784:	f7ff fe2f 	bl	80043e6 <LL_RCC_MSI_GetRange>
 8004788:	4603      	mov	r3, r0
 800478a:	429c      	cmp	r4, r3
 800478c:	d914      	bls.n	80047b8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fd42 	bl	800521c <RCC_SetFlashLatencyFromMSIRange>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e34c      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fe09 	bl	80043be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fe2d 	bl	8004410 <LL_RCC_MSI_SetCalibTrimming>
 80047b6:	e013      	b.n	80047e0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fdfe 	bl	80043be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fe22 	bl	8004410 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fd23 	bl	800521c <RCC_SetFlashLatencyFromMSIRange>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e32d      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80047e0:	f000 fcdc 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4ab3      	ldr	r2, [pc, #716]	; (8004ab4 <HAL_RCC_OscConfig+0x388>)
 80047e8:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047ea:	4bb3      	ldr	r3, [pc, #716]	; (8004ab8 <HAL_RCC_OscConfig+0x38c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fc26 	bl	8003040 <HAL_InitTick>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d039      	beq.n	800486e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e31e      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01e      	beq.n	8004844 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004806:	f7ff fdab 	bl	8004360 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800480a:	f7fe fc67 	bl	80030dc <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004812:	f7fe fc63 	bl	80030dc <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e30b      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004824:	f7ff fdba 	bl	800439c <LL_RCC_MSI_IsReady>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f1      	beq.n	8004812 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fdc3 	bl	80043be <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fde7 	bl	8004410 <LL_RCC_MSI_SetCalibTrimming>
 8004842:	e015      	b.n	8004870 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004844:	f7ff fd9b 	bl	800437e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004848:	f7fe fc48 	bl	80030dc <HAL_GetTick>
 800484c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004850:	f7fe fc44 	bl	80030dc <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e2ec      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004862:	f7ff fd9b 	bl	800439c <LL_RCC_MSI_IsReady>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f1      	bne.n	8004850 <HAL_RCC_OscConfig+0x124>
 800486c:	e000      	b.n	8004870 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800486e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d04e      	beq.n	800491a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487c:	f7ff fdf1 	bl	8004462 <LL_RCC_GetSysClkSource>
 8004880:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004882:	f7ff feea 	bl	800465a <LL_RCC_PLL_GetMainSource>
 8004886:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	2b08      	cmp	r3, #8
 800488c:	d005      	beq.n	800489a <HAL_RCC_OscConfig+0x16e>
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d10d      	bne.n	80048b0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d10a      	bne.n	80048b0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489a:	f7ff fc01 	bl	80040a0 <LL_RCC_HSE_IsReady>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d039      	beq.n	8004918 <HAL_RCC_OscConfig+0x1ec>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d135      	bne.n	8004918 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e2c5      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_OscConfig+0x194>
 80048ba:	f7ff fbd3 	bl	8004064 <LL_RCC_HSE_Enable>
 80048be:	e001      	b.n	80048c4 <HAL_RCC_OscConfig+0x198>
 80048c0:	f7ff fbdf 	bl	8004082 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d012      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fe fc06 	bl	80030dc <HAL_GetTick>
 80048d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d4:	f7fe fc02 	bl	80030dc <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b64      	cmp	r3, #100	; 0x64
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e2aa      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80048e6:	f7ff fbdb 	bl	80040a0 <LL_RCC_HSE_IsReady>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f1      	beq.n	80048d4 <HAL_RCC_OscConfig+0x1a8>
 80048f0:	e013      	b.n	800491a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fe fbf3 	bl	80030dc <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048fa:	f7fe fbef 	bl	80030dc <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b64      	cmp	r3, #100	; 0x64
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e297      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800490c:	f7ff fbc8 	bl	80040a0 <LL_RCC_HSE_IsReady>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f1      	bne.n	80048fa <HAL_RCC_OscConfig+0x1ce>
 8004916:	e000      	b.n	800491a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004918:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d051      	beq.n	80049ca <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	f7ff fd9c 	bl	8004462 <LL_RCC_GetSysClkSource>
 800492a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800492c:	f7ff fe95 	bl	800465a <LL_RCC_PLL_GetMainSource>
 8004930:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d005      	beq.n	8004944 <HAL_RCC_OscConfig+0x218>
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b0c      	cmp	r3, #12
 800493c:	d113      	bne.n	8004966 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d110      	bne.n	8004966 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004944:	f7ff fbdc 	bl	8004100 <LL_RCC_HSI_IsReady>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_RCC_OscConfig+0x22e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e270      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fbe0 	bl	8004124 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004964:	e031      	b.n	80049ca <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d019      	beq.n	80049a2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800496e:	f7ff fba9 	bl	80040c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fe fbb3 	bl	80030dc <HAL_GetTick>
 8004976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497a:	f7fe fbaf 	bl	80030dc <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e257      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800498c:	f7ff fbb8 	bl	8004100 <LL_RCC_HSI_IsReady>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f1      	beq.n	800497a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fbc2 	bl	8004124 <LL_RCC_HSI_SetCalibTrimming>
 80049a0:	e013      	b.n	80049ca <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a2:	f7ff fb9e 	bl	80040e2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fe fb99 	bl	80030dc <HAL_GetTick>
 80049aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ae:	f7fe fb95 	bl	80030dc <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e23d      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049c0:	f7ff fb9e 	bl	8004100 <LL_RCC_HSI_IsReady>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f1      	bne.n	80049ae <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80a3 	beq.w	8004b2a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d076      	beq.n	8004ada <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d046      	beq.n	8004a86 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80049f8:	f7ff fc55 	bl	80042a6 <LL_RCC_LSI1_IsReady>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d113      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004a02:	f7ff fc2e 	bl	8004262 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a06:	f7fe fb69 	bl	80030dc <HAL_GetTick>
 8004a0a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a0e:	f7fe fb65 	bl	80030dc <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e20d      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a20:	f7ff fc41 	bl	80042a6 <LL_RCC_LSI1_IsReady>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f1      	beq.n	8004a0e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004a2a:	f7ff fc4e 	bl	80042ca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fe fb55 	bl	80030dc <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a36:	f7fe fb51 	bl	80030dc <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e1f9      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a48:	f7ff fc61 	bl	800430e <LL_RCC_LSI2_IsReady>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f1      	beq.n	8004a36 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fc6b 	bl	8004332 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004a5c:	f7ff fc12 	bl	8004284 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe fb3c 	bl	80030dc <HAL_GetTick>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a68:	f7fe fb38 	bl	80030dc <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e1e0      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a7a:	f7ff fc14 	bl	80042a6 <LL_RCC_LSI1_IsReady>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f1      	bne.n	8004a68 <HAL_RCC_OscConfig+0x33c>
 8004a84:	e051      	b.n	8004b2a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004a86:	f7ff fbec 	bl	8004262 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fe fb27 	bl	80030dc <HAL_GetTick>
 8004a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a92:	f7fe fb23 	bl	80030dc <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1cb      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004aa4:	f7ff fbff 	bl	80042a6 <LL_RCC_LSI1_IsReady>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f1      	beq.n	8004a92 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004aae:	f7ff fc1d 	bl	80042ec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ab2:	e00c      	b.n	8004ace <HAL_RCC_OscConfig+0x3a2>
 8004ab4:	20000004 	.word	0x20000004
 8004ab8:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004abc:	f7fe fb0e 	bl	80030dc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e1b6      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ace:	f7ff fc1e 	bl	800430e <LL_RCC_LSI2_IsReady>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f1      	bne.n	8004abc <HAL_RCC_OscConfig+0x390>
 8004ad8:	e027      	b.n	8004b2a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004ada:	f7ff fc07 	bl	80042ec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ade:	f7fe fafd 	bl	80030dc <HAL_GetTick>
 8004ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ae6:	f7fe faf9 	bl	80030dc <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e1a1      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004af8:	f7ff fc09 	bl	800430e <LL_RCC_LSI2_IsReady>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f1      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004b02:	f7ff fbbf 	bl	8004284 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b06:	f7fe fae9 	bl	80030dc <HAL_GetTick>
 8004b0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b0e:	f7fe fae5 	bl	80030dc <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e18d      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b20:	f7ff fbc1 	bl	80042a6 <LL_RCC_LSI1_IsReady>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f1      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d05b      	beq.n	8004bee <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b36:	4bb5      	ldr	r3, [pc, #724]	; (8004e0c <HAL_RCC_OscConfig+0x6e0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d114      	bne.n	8004b6c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b42:	f7ff fa5f 	bl	8004004 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b46:	f7fe fac9 	bl	80030dc <HAL_GetTick>
 8004b4a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4e:	f7fe fac5 	bl	80030dc <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e16d      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b60:	4baa      	ldr	r3, [pc, #680]	; (8004e0c <HAL_RCC_OscConfig+0x6e0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d102      	bne.n	8004b7a <HAL_RCC_OscConfig+0x44e>
 8004b74:	f7ff fb1f 	bl	80041b6 <LL_RCC_LSE_Enable>
 8004b78:	e00c      	b.n	8004b94 <HAL_RCC_OscConfig+0x468>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b05      	cmp	r3, #5
 8004b80:	d104      	bne.n	8004b8c <HAL_RCC_OscConfig+0x460>
 8004b82:	f7ff fb3a 	bl	80041fa <LL_RCC_LSE_EnableBypass>
 8004b86:	f7ff fb16 	bl	80041b6 <LL_RCC_LSE_Enable>
 8004b8a:	e003      	b.n	8004b94 <HAL_RCC_OscConfig+0x468>
 8004b8c:	f7ff fb24 	bl	80041d8 <LL_RCC_LSE_Disable>
 8004b90:	f7ff fb44 	bl	800421c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d014      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fe fa9e 	bl	80030dc <HAL_GetTick>
 8004ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fe fa9a 	bl	80030dc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e140      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004bba:	f7ff fb40 	bl	800423e <LL_RCC_LSE_IsReady>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ef      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x478>
 8004bc4:	e013      	b.n	8004bee <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fe fa89 	bl	80030dc <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fe fa85 	bl	80030dc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e12b      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004be4:	f7ff fb2b 	bl	800423e <LL_RCC_LSE_IsReady>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ef      	bne.n	8004bce <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02c      	beq.n	8004c54 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c02:	f7ff faa4 	bl	800414e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fe fa69 	bl	80030dc <HAL_GetTick>
 8004c0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c0e:	f7fe fa65 	bl	80030dc <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e10d      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c20:	f7ff fab7 	bl	8004192 <LL_RCC_HSI48_IsReady>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f1      	beq.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
 8004c2a:	e013      	b.n	8004c54 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c2c:	f7ff faa0 	bl	8004170 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fe fa54 	bl	80030dc <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c38:	f7fe fa50 	bl	80030dc <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0f8      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c4a:	f7ff faa2 	bl	8004192 <LL_RCC_HSI48_IsReady>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f1      	bne.n	8004c38 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80ee 	beq.w	8004e3a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5e:	f7ff fc00 	bl	8004462 <LL_RCC_GetSysClkSource>
 8004c62:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	f040 80af 	bne.w	8004dd4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0203 	and.w	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d123      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d11c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d114      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d10d      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d106      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d05d      	beq.n	8004d88 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d058      	beq.n	8004d84 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0ab      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ce4:	f7ff fc73 	bl	80045ce <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ce8:	f7fe f9f8 	bl	80030dc <HAL_GetTick>
 8004cec:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fe f9f4 	bl	80030dc <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e09c      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ef      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <HAL_RCC_OscConfig+0x6e4>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d22:	4311      	orrs	r1, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d28:	0212      	lsls	r2, r2, #8
 8004d2a:	4311      	orrs	r1, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d30:	4311      	orrs	r1, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d36:	4311      	orrs	r1, r2
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d46:	f7ff fc33 	bl	80045b0 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d58:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d5a:	f7fe f9bf 	bl	80030dc <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d62:	f7fe f9bb 	bl	80030dc <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e063      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0ef      	beq.n	8004d62 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d82:	e05a      	b.n	8004e3a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e059      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d151      	bne.n	8004e3a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d96:	f7ff fc0b 	bl	80045b0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004daa:	f7fe f997 	bl	80030dc <HAL_GetTick>
 8004dae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fe f993 	bl	80030dc <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e03b      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0ef      	beq.n	8004db2 <HAL_RCC_OscConfig+0x686>
 8004dd2:	e032      	b.n	8004e3a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d02d      	beq.n	8004e36 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dda:	f7ff fbf8 	bl	80045ce <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fe f96b 	bl	80030dc <HAL_GetTick>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e08:	e00d      	b.n	8004e26 <HAL_RCC_OscConfig+0x6fa>
 8004e0a:	bf00      	nop
 8004e0c:	58000400 	.word	0x58000400
 8004e10:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe f962 	bl	80030dc <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1ef      	bne.n	8004e14 <HAL_RCC_OscConfig+0x6e8>
 8004e34:	e001      	b.n	8004e3a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3734      	adds	r7, #52	; 0x34
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd90      	pop	{r4, r7, pc}

08004e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e12d      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e58:	4b98      	ldr	r3, [pc, #608]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d91b      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b95      	ldr	r3, [pc, #596]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 0207 	bic.w	r2, r3, #7
 8004e6e:	4993      	ldr	r1, [pc, #588]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e76:	f7fe f931 	bl	80030dc <HAL_GetTick>
 8004e7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e7e:	f7fe f92d 	bl	80030dc <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e111      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e90:	4b8a      	ldr	r3, [pc, #552]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d1ef      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fae3 	bl	800447a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004eb4:	f7fe f912 	bl	80030dc <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ebc:	f7fe f90e 	bl	80030dc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0f2      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ece:	f7ff fbd0 	bl	8004672 <LL_RCC_IsActiveFlag_HPRE>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f1      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d016      	beq.n	8004f12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fada 	bl	80044a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004eee:	f7fe f8f5 	bl	80030dc <HAL_GetTick>
 8004ef2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ef6:	f7fe f8f1 	bl	80030dc <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0d5      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f08:	f7ff fbc5 	bl	8004696 <LL_RCC_IsActiveFlag_C2HPRE>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f1      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fad3 	bl	80044ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f28:	f7fe f8d8 	bl	80030dc <HAL_GetTick>
 8004f2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f30:	f7fe f8d4 	bl	80030dc <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0b8      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f42:	f7ff fbbb 	bl	80046bc <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f1      	beq.n	8004f30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d016      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff facd 	bl	80044fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f62:	f7fe f8bb 	bl	80030dc <HAL_GetTick>
 8004f66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f6a:	f7fe f8b7 	bl	80030dc <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e09b      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f7c:	f7ff fbb1 	bl	80046e2 <LL_RCC_IsActiveFlag_PPRE1>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f1      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d017      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fac3 	bl	8004524 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f9e:	f7fe f89d 	bl	80030dc <HAL_GetTick>
 8004fa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fa6:	f7fe f899 	bl	80030dc <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e07d      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fb8:	f7ff fba5 	bl	8004706 <LL_RCC_IsActiveFlag_PPRE2>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f1      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d043      	beq.n	8005056 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d106      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004fd6:	f7ff f863 	bl	80040a0 <LL_RCC_HSE_IsReady>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d11e      	bne.n	800501e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e067      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004fec:	f7ff fafe 	bl	80045ec <LL_RCC_PLL_IsReady>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d113      	bne.n	800501e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e05c      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005002:	f7ff f9cb 	bl	800439c <LL_RCC_MSI_IsReady>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e051      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005010:	f7ff f876 	bl	8004100 <LL_RCC_HSI_IsReady>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e04a      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fa09 	bl	800443a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005028:	f7fe f858 	bl	80030dc <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	e00a      	b.n	8005046 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005030:	f7fe f854 	bl	80030dc <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e036      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	f7ff fa0c 	bl	8004462 <LL_RCC_GetSysClkSource>
 800504a:	4602      	mov	r2, r0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	429a      	cmp	r2, r3
 8005054:	d1ec      	bne.n	8005030 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d21b      	bcs.n	800509c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 0207 	bic.w	r2, r3, #7
 800506c:	4913      	ldr	r1, [pc, #76]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005074:	f7fe f832 	bl	80030dc <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	e008      	b.n	800508e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800507c:	f7fe f82e 	bl	80030dc <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e012      	b.n	80050b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_ClockConfig+0x278>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d1ef      	bne.n	800507c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800509c:	f000 f87e 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <HAL_RCC_ClockConfig+0x27c>)
 80050a4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80050a6:	f7fe f825 	bl	80030f4 <HAL_GetTickPrio>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fd ffc7 	bl	8003040 <HAL_InitTick>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	58004000 	.word	0x58004000
 80050c0:	20000004 	.word	0x20000004

080050c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ca:	f7ff f9ca 	bl	8004462 <LL_RCC_GetSysClkSource>
 80050ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80050d6:	f7ff f986 	bl	80043e6 <LL_RCC_MSI_GetRange>
 80050da:	4603      	mov	r3, r0
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	4a2b      	ldr	r2, [pc, #172]	; (8005190 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e04b      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d102      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050f2:	4b28      	ldr	r3, [pc, #160]	; (8005194 <HAL_RCC_GetSysClockFreq+0xd0>)
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e045      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d10a      	bne.n	8005114 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050fe:	f7fe ff9f 	bl	8004040 <LL_RCC_HSE_IsEnabledDiv2>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d102      	bne.n	800510e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_RCC_GetSysClockFreq+0xd0>)
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e03a      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800510e:	4b22      	ldr	r3, [pc, #136]	; (8005198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	e037      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005114:	f7ff faa1 	bl	800465a <LL_RCC_PLL_GetMainSource>
 8005118:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d003      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x64>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d003      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x6a>
 8005126:	e00d      	b.n	8005144 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005128:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <HAL_RCC_GetSysClockFreq+0xd0>)
 800512a:	60bb      	str	r3, [r7, #8]
        break;
 800512c:	e015      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800512e:	f7fe ff87 	bl	8004040 <LL_RCC_HSE_IsEnabledDiv2>
 8005132:	4603      	mov	r3, r0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <HAL_RCC_GetSysClockFreq+0xd0>)
 800513a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800513c:	e00d      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800513e:	4b16      	ldr	r3, [pc, #88]	; (8005198 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005140:	60bb      	str	r3, [r7, #8]
        break;
 8005142:	e00a      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005144:	f7ff f94f 	bl	80043e6 <LL_RCC_MSI_GetRange>
 8005148:	4603      	mov	r3, r0
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	4a0f      	ldr	r2, [pc, #60]	; (8005190 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005156:	60bb      	str	r3, [r7, #8]
        break;
 8005158:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800515a:	f7ff fa59 	bl	8004610 <LL_RCC_PLL_GetN>
 800515e:	4602      	mov	r2, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	fb03 f402 	mul.w	r4, r3, r2
 8005166:	f7ff fa6c 	bl	8004642 <LL_RCC_PLL_GetDivider>
 800516a:	4603      	mov	r3, r0
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	3301      	adds	r3, #1
 8005170:	fbb4 f4f3 	udiv	r4, r4, r3
 8005174:	f7ff fa59 	bl	800462a <LL_RCC_PLL_GetR>
 8005178:	4603      	mov	r3, r0
 800517a:	0f5b      	lsrs	r3, r3, #29
 800517c:	3301      	adds	r3, #1
 800517e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005182:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}
 800518e:	bf00      	nop
 8005190:	080103ec 	.word	0x080103ec
 8005194:	00f42400 	.word	0x00f42400
 8005198:	01e84800 	.word	0x01e84800

0800519c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800519c:	b598      	push	{r3, r4, r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051a0:	f7ff ff90 	bl	80050c4 <HAL_RCC_GetSysClockFreq>
 80051a4:	4604      	mov	r4, r0
 80051a6:	f7ff f9d1 	bl	800454c <LL_RCC_GetAHBPrescaler>
 80051aa:	4603      	mov	r3, r0
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	4a03      	ldr	r2, [pc, #12]	; (80051c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80051b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd98      	pop	{r3, r4, r7, pc}
 80051c0:	0801038c 	.word	0x0801038c

080051c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c4:	b598      	push	{r3, r4, r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051c8:	f7ff ffe8 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051cc:	4604      	mov	r4, r0
 80051ce:	f7ff f9d7 	bl	8004580 <LL_RCC_GetAPB1Prescaler>
 80051d2:	4603      	mov	r3, r0
 80051d4:	0a1b      	lsrs	r3, r3, #8
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80051dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd98      	pop	{r3, r4, r7, pc}
 80051ec:	080103cc 	.word	0x080103cc

080051f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051f0:	b598      	push	{r3, r4, r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80051f4:	f7ff ffd2 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051f8:	4604      	mov	r4, r0
 80051fa:	f7ff f9cd 	bl	8004598 <LL_RCC_GetAPB2Prescaler>
 80051fe:	4603      	mov	r3, r0
 8005200:	0adb      	lsrs	r3, r3, #11
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd98      	pop	{r3, r4, r7, pc}
 8005218:	080103cc 	.word	0x080103cc

0800521c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2bb0      	cmp	r3, #176	; 0xb0
 8005228:	d903      	bls.n	8005232 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e007      	b.n	8005242 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	4a11      	ldr	r2, [pc, #68]	; (8005280 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005240:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005242:	f7ff f98f 	bl	8004564 <LL_RCC_GetAHB4Prescaler>
 8005246:	4603      	mov	r3, r0
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	0c9c      	lsrs	r4, r3, #18
 8005266:	f7fe fedd 	bl	8004024 <HAL_PWREx_GetVoltageRange>
 800526a:	4603      	mov	r3, r0
 800526c:	4619      	mov	r1, r3
 800526e:	4620      	mov	r0, r4
 8005270:	f000 f80c 	bl	800528c <RCC_SetFlashLatency>
 8005274:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop
 8005280:	080103ec 	.word	0x080103ec
 8005284:	0801038c 	.word	0x0801038c
 8005288:	431bde83 	.word	0x431bde83

0800528c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b093      	sub	sp, #76	; 0x4c
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005296:	4b39      	ldr	r3, [pc, #228]	; (800537c <RCC_SetFlashLatency+0xf0>)
 8005298:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800529c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800529e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80052a2:	4a37      	ldr	r2, [pc, #220]	; (8005380 <RCC_SetFlashLatency+0xf4>)
 80052a4:	f107 031c 	add.w	r3, r7, #28
 80052a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80052aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80052ae:	4b35      	ldr	r3, [pc, #212]	; (8005384 <RCC_SetFlashLatency+0xf8>)
 80052b0:	f107 040c 	add.w	r4, r7, #12
 80052b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80052ba:	2300      	movs	r3, #0
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c4:	d11c      	bne.n	8005300 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ca:	e015      	b.n	80052f8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052d4:	4413      	add	r3, r2
 80052d6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d808      	bhi.n	80052f2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052e8:	4413      	add	r3, r2
 80052ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80052ee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80052f0:	e022      	b.n	8005338 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f4:	3301      	adds	r3, #1
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
 80052f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d9e6      	bls.n	80052cc <RCC_SetFlashLatency+0x40>
 80052fe:	e01b      	b.n	8005338 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005300:	2300      	movs	r3, #0
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005304:	e015      	b.n	8005332 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800530e:	4413      	add	r3, r2
 8005310:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d808      	bhi.n	800532c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005322:	4413      	add	r3, r2
 8005324:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800532a:	e005      	b.n	8005338 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	3301      	adds	r3, #1
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005334:	2b02      	cmp	r3, #2
 8005336:	d9e6      	bls.n	8005306 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005338:	4b13      	ldr	r3, [pc, #76]	; (8005388 <RCC_SetFlashLatency+0xfc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f023 0207 	bic.w	r2, r3, #7
 8005340:	4911      	ldr	r1, [pc, #68]	; (8005388 <RCC_SetFlashLatency+0xfc>)
 8005342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005344:	4313      	orrs	r3, r2
 8005346:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005348:	f7fd fec8 	bl	80030dc <HAL_GetTick>
 800534c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800534e:	e008      	b.n	8005362 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005350:	f7fd fec4 	bl	80030dc <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e007      	b.n	8005372 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <RCC_SetFlashLatency+0xfc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800536c:	429a      	cmp	r2, r3
 800536e:	d1ef      	bne.n	8005350 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	374c      	adds	r7, #76	; 0x4c
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}
 800537a:	bf00      	nop
 800537c:	0800e81c 	.word	0x0800e81c
 8005380:	0800e82c 	.word	0x0800e82c
 8005384:	0800e838 	.word	0x0800e838
 8005388:	58004000 	.word	0x58004000

0800538c <LL_RCC_LSE_IsEnabled>:
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <LL_RCC_LSE_IsEnabled+0x18>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <LL_RCC_LSE_IsReady>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d101      	bne.n	80053c8 <LL_RCC_LSE_IsReady+0x18>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <LL_RCC_LSE_IsReady+0x1a>
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <LL_RCC_SetRFWKPClockSource>:
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_RCC_SetSMPSClockSource>:
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f023 0203 	bic.w	r2, r3, #3
 8005412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4313      	orrs	r3, r2
 800541a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_RCC_SetSMPSPrescaler>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800543a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4313      	orrs	r3, r2
 8005442:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <LL_RCC_SetUSARTClockSource>:
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	f023 0203 	bic.w	r2, r3, #3
 8005464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_RCC_SetLPUARTClockSource>:
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <LL_RCC_SetI2CClockSource>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80054c0:	43db      	mvns	r3, r3
 80054c2:	401a      	ands	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80054cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <LL_RCC_SetLPTIMClockSource>:
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_RCC_SetSAIClockSource>:
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800552a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_RCC_SetRNGClockSource>:
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <LL_RCC_SetCLK48ClockSource>:
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_RCC_SetUSBClockSource>:
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff ffe3 	bl	800556e <LL_RCC_SetCLK48ClockSource>
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <LL_RCC_SetADCClockSource>:
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_RCC_SetRTCClockSource>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <LL_RCC_GetRTCClockSource>:
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005614:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005618:	4618      	mov	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_RCC_ForceBackupDomainReset>:
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800563a:	bf00      	nop
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800565c:	bf00      	nop
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <LL_RCC_PLLSAI1_Enable>:
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005678:	6013      	str	r3, [r2, #0]
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <LL_RCC_PLLSAI1_Disable>:
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005692:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005696:	6013      	str	r3, [r2, #0]
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <LL_RCC_PLLSAI1_IsReady>:
{
 80056a2:	b480      	push	{r7}
 80056a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80056a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b4:	d101      	bne.n	80056ba <LL_RCC_PLLSAI1_IsReady+0x18>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b088      	sub	sp, #32
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80056ce:	2300      	movs	r3, #0
 80056d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80056d2:	2300      	movs	r3, #0
 80056d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d034      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056ea:	d021      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80056ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056f0:	d81b      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f6:	d01d      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80056f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056fc:	d815      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005706:	d110      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005716:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005718:	e00d      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f947 	bl	80059b2 <RCCEx_PLLSAI1_ConfigNP>
 8005724:	4603      	mov	r3, r0
 8005726:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005728:	e005      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	77fb      	strb	r3, [r7, #31]
        break;
 800572e:	e002      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005730:	bf00      	nop
 8005732:	e000      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005736:	7ffb      	ldrb	r3, [r7, #31]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d105      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fee8 	bl	8005516 <LL_RCC_SetSAIClockSource>
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	7ffb      	ldrb	r3, [r7, #31]
 800574a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005754:	2b00      	cmp	r3, #0
 8005756:	d046      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005758:	f7ff ff56 	bl	8005608 <LL_RCC_GetRTCClockSource>
 800575c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	429a      	cmp	r2, r3
 8005766:	d03c      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005768:	f7fe fc4c 	bl	8004004 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ff30 	bl	80055dc <LL_RCC_SetRTCClockSource>
 800577c:	e02e      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005788:	f7ff ff4b 	bl	8005622 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800578c:	f7ff ff5a 	bl	8005644 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800579e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80057a8:	f7ff fdf0 	bl	800538c <LL_RCC_LSE_IsEnabled>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d114      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057b2:	f7fd fc93 	bl	80030dc <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80057b8:	e00b      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ba:	f7fd fc8f 	bl	80030dc <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d902      	bls.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	77fb      	strb	r3, [r7, #31]
              break;
 80057d0:	e004      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80057d2:	f7ff fded 	bl	80053b0 <LL_RCC_LSE_IsReady>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d1ee      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80057dc:	7ffb      	ldrb	r3, [r7, #31]
 80057de:	77bb      	strb	r3, [r7, #30]
 80057e0:	e001      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
 80057e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fe2a 	bl	8005450 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fe35 	bl	800547c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fe5d 	bl	80054e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fe52 	bl	80054e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fe2a 	bl	80054a8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fe1f 	bl	80054a8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d022      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fe8d 	bl	800559a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005888:	d107      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005898:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a2:	d10b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f8dd 	bl	8005a68 <RCCEx_PLLSAI1_ConfigNQ>
 80058ae:	4603      	mov	r3, r0
 80058b0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d02b      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d008      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058da:	d003      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fe2a 	bl	8005542 <LL_RCC_SetRNGClockSource>
 80058ee:	e00a      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	2000      	movs	r0, #0
 80058fc:	f7ff fe21 	bl	8005542 <LL_RCC_SetRNGClockSource>
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff fe34 	bl	800556e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800590e:	d107      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005928:	2b00      	cmp	r3, #0
 800592a:	d022      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff fe3d 	bl	80055b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593e:	d107      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005958:	d10b      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f8dd 	bl	8005b1e <RCCEx_PLLSAI1_ConfigNR>
 8005964:	4603      	mov	r3, r0
 8005966:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005968:	7ffb      	ldrb	r3, [r7, #31]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fd26 	bl	80053d4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fd45 	bl	8005428 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fd2c 	bl	8005400 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80059a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80059be:	f7ff fe61 	bl	8005684 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059c2:	f7fd fb8b 	bl	80030dc <HAL_GetTick>
 80059c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059c8:	e009      	b.n	80059de <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ca:	f7fd fb87 	bl	80030dc <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d902      	bls.n	80059de <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	73fb      	strb	r3, [r7, #15]
      break;
 80059dc:	e004      	b.n	80059e8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059de:	f7ff fe60 	bl	80056a2 <LL_RCC_PLLSAI1_IsReady>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d137      	bne.n	8005a5e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a1c:	f7ff fe23 	bl	8005666 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a20:	f7fd fb5c 	bl	80030dc <HAL_GetTick>
 8005a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a26:	e009      	b.n	8005a3c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a28:	f7fd fb58 	bl	80030dc <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d902      	bls.n	8005a3c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	73fb      	strb	r3, [r7, #15]
        break;
 8005a3a:	e004      	b.n	8005a46 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a3c:	f7ff fe31 	bl	80056a2 <LL_RCC_PLLSAI1_IsReady>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d1f0      	bne.n	8005a28 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d108      	bne.n	8005a5e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a74:	f7ff fe06 	bl	8005684 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a78:	f7fd fb30 	bl	80030dc <HAL_GetTick>
 8005a7c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a7e:	e009      	b.n	8005a94 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a80:	f7fd fb2c 	bl	80030dc <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d902      	bls.n	8005a94 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	73fb      	strb	r3, [r7, #15]
      break;
 8005a92:	e004      	b.n	8005a9e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a94:	f7ff fe05 	bl	80056a2 <LL_RCC_PLLSAI1_IsReady>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d137      	bne.n	8005b14 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ad2:	f7ff fdc8 	bl	8005666 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad6:	f7fd fb01 	bl	80030dc <HAL_GetTick>
 8005ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005adc:	e009      	b.n	8005af2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ade:	f7fd fafd 	bl	80030dc <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d902      	bls.n	8005af2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	73fb      	strb	r3, [r7, #15]
        break;
 8005af0:	e004      	b.n	8005afc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005af2:	f7ff fdd6 	bl	80056a2 <LL_RCC_PLLSAI1_IsReady>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d1f0      	bne.n	8005ade <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b10:	4313      	orrs	r3, r2
 8005b12:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b2a:	f7ff fdab 	bl	8005684 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b2e:	f7fd fad5 	bl	80030dc <HAL_GetTick>
 8005b32:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b34:	e009      	b.n	8005b4a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b36:	f7fd fad1 	bl	80030dc <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d902      	bls.n	8005b4a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	73fb      	strb	r3, [r7, #15]
      break;
 8005b48:	e004      	b.n	8005b54 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b4a:	f7ff fdaa 	bl	80056a2 <LL_RCC_PLLSAI1_IsReady>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d137      	bne.n	8005bca <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b84:	4313      	orrs	r3, r2
 8005b86:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b88:	f7ff fd6d 	bl	8005666 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8c:	f7fd faa6 	bl	80030dc <HAL_GetTick>
 8005b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b92:	e009      	b.n	8005ba8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b94:	f7fd faa2 	bl	80030dc <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d902      	bls.n	8005ba8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ba6:	e004      	b.n	8005bb2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ba8:	f7ff fd7b 	bl	80056a2 <LL_RCC_PLLSAI1_IsReady>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d1f0      	bne.n	8005b94 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d108      	bne.n	8005bca <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e027      	b.n	8005c36 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7a5b      	ldrb	r3, [r3, #9]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fd f80c 	bl	8002c14 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 0120 	bic.w	r1, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0204 	orr.w	r2, r2, #4
 8005c26:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e090      	b.n	8005d72 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fc ffe9 	bl	8002c3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	22ca      	movs	r2, #202	; 0xca
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2253      	movs	r2, #83	; 0x53
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f89f 	bl	8005dc6 <RTC_EnterInitMode>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e067      	b.n	8005d72 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6899      	ldr	r1, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	68d2      	ldr	r2, [r2, #12]
 8005cdc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6919      	ldr	r1, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	041a      	lsls	r2, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d00:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0203 	bic.w	r2, r2, #3
 8005d10:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d113      	bne.n	8005d60 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f81e 	bl	8005d7a <HAL_RTC_WaitForSynchro>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00d      	beq.n	8005d60 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	22ff      	movs	r2, #255	; 0xff
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e008      	b.n	8005d72 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	22ff      	movs	r2, #255	; 0xff
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d90:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005d92:	f7fd f9a3 	bl	80030dc <HAL_GetTick>
 8005d96:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d98:	e009      	b.n	8005dae <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d9a:	f7fd f99f 	bl	80030dc <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da8:	d901      	bls.n	8005dae <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e007      	b.n	8005dbe <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ee      	beq.n	8005d9a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d119      	bne.n	8005e10 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005de6:	f7fd f979 	bl	80030dc <HAL_GetTick>
 8005dea:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dec:	e009      	b.n	8005e02 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005dee:	f7fd f975 	bl	80030dc <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dfc:	d901      	bls.n	8005e02 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e007      	b.n	8005e12 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0ee      	beq.n	8005dee <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0a8      	b.n	8005f88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	22ca      	movs	r2, #202	; 0xca
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2253      	movs	r2, #83	; 0x53
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d020      	beq.n	8005ea6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005e64:	f7fd f93a 	bl	80030dc <HAL_GetTick>
 8005e68:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005e6a:	e015      	b.n	8005e98 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e6c:	f7fd f936 	bl	80030dc <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e7a:	d90d      	bls.n	8005e98 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	22ff      	movs	r2, #255	; 0xff
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2203      	movs	r2, #3
 8005e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e077      	b.n	8005f88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e2      	bne.n	8005e6c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005ec6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ec8:	f7fd f908 	bl	80030dc <HAL_GetTick>
 8005ecc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ece:	e015      	b.n	8005efc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ed0:	f7fd f904 	bl	80030dc <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ede:	d90d      	bls.n	8005efc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	22ff      	movs	r2, #255	; 0xff
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2203      	movs	r2, #3
 8005eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e045      	b.n	8005f88 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0e2      	beq.n	8005ed0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0207 	bic.w	r2, r2, #7
 8005f20:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6899      	ldr	r1, [r3, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005f32:	4b17      	ldr	r3, [pc, #92]	; (8005f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005f42:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f4c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f6c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	22ff      	movs	r2, #255	; 0xff
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	58000800 	.word	0x58000800

08005f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e049      	b.n	800603a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc fe5c 	bl	8002c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f000 fa44 	bl	8006460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e02e      	b.n	80060ba <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <HAL_TIM_Base_Start+0x84>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIM_Base_Start+0x34>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d115      	bne.n	80060a4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	4b13      	ldr	r3, [pc, #76]	; (80060cc <HAL_TIM_Base_Start+0x88>)
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b06      	cmp	r3, #6
 8006088:	d015      	beq.n	80060b6 <HAL_TIM_Base_Start+0x72>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006090:	d011      	beq.n	80060b6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a2:	e008      	b.n	80060b6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e000      	b.n	80060b8 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	00010007 	.word	0x00010007

080060d0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a1a      	ldr	r2, [r3, #32]
 80060de:	f241 1311 	movw	r3, #4369	; 0x1111
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10f      	bne.n	8006108 <HAL_TIM_Base_Stop+0x38>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a1a      	ldr	r2, [r3, #32]
 80060ee:	f240 4344 	movw	r3, #1092	; 0x444
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <HAL_TIM_Base_Stop+0x38>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d001      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e036      	b.n	80061a6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <HAL_TIM_Base_Start_IT+0x94>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d004      	beq.n	8006164 <HAL_TIM_Base_Start_IT+0x44>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006162:	d115      	bne.n	8006190 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <HAL_TIM_Base_Start_IT+0x98>)
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b06      	cmp	r3, #6
 8006174:	d015      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x82>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d011      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618e:	e008      	b.n	80061a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e000      	b.n	80061a4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	00010007 	.word	0x00010007

080061bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d122      	bne.n	8006218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d11b      	bne.n	8006218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0202 	mvn.w	r2, #2
 80061e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f90f 	bl	8006422 <HAL_TIM_IC_CaptureCallback>
 8006204:	e005      	b.n	8006212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f901 	bl	800640e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f912 	bl	8006436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b04      	cmp	r3, #4
 8006224:	d122      	bne.n	800626c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b04      	cmp	r3, #4
 8006232:	d11b      	bne.n	800626c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0204 	mvn.w	r2, #4
 800623c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f8e5 	bl	8006422 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f8d7 	bl	800640e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8e8 	bl	8006436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b08      	cmp	r3, #8
 8006278:	d122      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b08      	cmp	r3, #8
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0208 	mvn.w	r2, #8
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8bb 	bl	8006422 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f8ad 	bl	800640e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f8be 	bl	8006436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d122      	bne.n	8006314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d11b      	bne.n	8006314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0210 	mvn.w	r2, #16
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2208      	movs	r2, #8
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f891 	bl	8006422 <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f883 	bl	800640e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f894 	bl	8006436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b01      	cmp	r3, #1
 8006320:	d10e      	bne.n	8006340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	d107      	bne.n	8006340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0201 	mvn.w	r2, #1
 8006338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f85d 	bl	80063fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d10e      	bne.n	800636c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006358:	2b80      	cmp	r3, #128	; 0x80
 800635a:	d107      	bne.n	800636c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8e8 	bl	800653c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637a:	d10e      	bne.n	800639a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d107      	bne.n	800639a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f8db 	bl	8006550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	d10e      	bne.n	80063c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d107      	bne.n	80063c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f842 	bl	800644a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d10e      	bne.n	80063f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d107      	bne.n	80063f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f06f 0220 	mvn.w	r2, #32
 80063ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f89b 	bl	8006528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2a      	ldr	r2, [pc, #168]	; (800651c <TIM_Base_SetConfig+0xbc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0x20>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647e:	d108      	bne.n	8006492 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a21      	ldr	r2, [pc, #132]	; (800651c <TIM_Base_SetConfig+0xbc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00b      	beq.n	80064b2 <TIM_Base_SetConfig+0x52>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d007      	beq.n	80064b2 <TIM_Base_SetConfig+0x52>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a1e      	ldr	r2, [pc, #120]	; (8006520 <TIM_Base_SetConfig+0xc0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_Base_SetConfig+0x52>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1d      	ldr	r2, [pc, #116]	; (8006524 <TIM_Base_SetConfig+0xc4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d108      	bne.n	80064c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a0c      	ldr	r2, [pc, #48]	; (800651c <TIM_Base_SetConfig+0xbc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_Base_SetConfig+0xa0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <TIM_Base_SetConfig+0xc0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0xa0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a0a      	ldr	r2, [pc, #40]	; (8006524 <TIM_Base_SetConfig+0xc4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d103      	bne.n	8006508 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	615a      	str	r2, [r3, #20]
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800

08006528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <LL_RCC_GetUSARTClockSource>:
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800656c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006570:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4013      	ands	r3, r2
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <LL_RCC_GetLPUARTClockSource>:
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006590:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4013      	ands	r3, r2
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e042      	b.n	800663c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fc fa27 	bl	8002a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2224      	movs	r2, #36	; 0x24
 80065d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fc8c 	bl	8006f04 <UART_SetConfig>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e022      	b.n	800663c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fe86 	bl	8007310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 ff0d 	bl	8007454 <UART_CheckIdleState>
 800663a:	4603      	mov	r3, r0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af02      	add	r7, sp, #8
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665a:	2b20      	cmp	r3, #32
 800665c:	f040 8083 	bne.w	8006766 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Transmit+0x28>
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e07b      	b.n	8006768 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_UART_Transmit+0x3a>
 800667a:	2302      	movs	r3, #2
 800667c:	e074      	b.n	8006768 <HAL_UART_Transmit+0x124>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2221      	movs	r2, #33	; 0x21
 8006692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006696:	f7fc fd21 	bl	80030dc <HAL_GetTick>
 800669a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b4:	d108      	bne.n	80066c8 <HAL_UART_Transmit+0x84>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e003      	b.n	80066d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80066d8:	e02c      	b.n	8006734 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 ff00 	bl	80074ea <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e039      	b.n	8006768 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3302      	adds	r3, #2
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e007      	b.n	8006722 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1cc      	bne.n	80066da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fecd 	bl	80074ea <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e006      	b.n	8006768 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	; 0x28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006784:	2b20      	cmp	r3, #32
 8006786:	d17a      	bne.n	800687e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Transmit_DMA+0x24>
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e073      	b.n	8006880 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Transmit_DMA+0x36>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e06c      	b.n	8006880 <HAL_UART_Transmit_DMA+0x110>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	88fa      	ldrh	r2, [r7, #6]
 80067c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2221      	movs	r2, #33	; 0x21
 80067d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d02c      	beq.n	8006836 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e0:	4a29      	ldr	r2, [pc, #164]	; (8006888 <HAL_UART_Transmit_DMA+0x118>)
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e8:	4a28      	ldr	r2, [pc, #160]	; (800688c <HAL_UART_Transmit_DMA+0x11c>)
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f0:	4a27      	ldr	r2, [pc, #156]	; (8006890 <HAL_UART_Transmit_DMA+0x120>)
 80067f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f8:	2200      	movs	r2, #0
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	4619      	mov	r1, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3328      	adds	r3, #40	; 0x28
 800680c:	461a      	mov	r2, r3
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	f7fc febe 	bl	8003590 <HAL_DMA_Start_IT>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00d      	beq.n	8006836 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2210      	movs	r2, #16
 800681e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e024      	b.n	8006880 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2240      	movs	r2, #64	; 0x40
 800683c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	613b      	str	r3, [r7, #16]
   return(result);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3308      	adds	r3, #8
 8006864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006866:	623a      	str	r2, [r7, #32]
 8006868:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	69f9      	ldr	r1, [r7, #28]
 800686c:	6a3a      	ldr	r2, [r7, #32]
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	61bb      	str	r3, [r7, #24]
   return(result);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	3728      	adds	r7, #40	; 0x28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	080077c9 	.word	0x080077c9
 800688c:	08007863 	.word	0x08007863
 8006890:	0800787f 	.word	0x0800787f

08006894 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b0ba      	sub	sp, #232	; 0xe8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068be:	f640 030f 	movw	r3, #2063	; 0x80f
 80068c2:	4013      	ands	r3, r2
 80068c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11b      	bne.n	8006908 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d015      	beq.n	8006908 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e0:	f003 0320 	and.w	r3, r3, #32
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 82d6 	beq.w	8006eaa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
      }
      return;
 8006906:	e2d0      	b.n	8006eaa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 811f 	beq.w	8006b50 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006912:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006916:	4b8b      	ldr	r3, [pc, #556]	; (8006b44 <HAL_UART_IRQHandler+0x2b0>)
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800691e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006922:	4b89      	ldr	r3, [pc, #548]	; (8006b48 <HAL_UART_IRQHandler+0x2b4>)
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8112 	beq.w	8006b50 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800692c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d011      	beq.n	800695c <HAL_UART_IRQHandler+0xc8>
 8006938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2201      	movs	r2, #1
 800694a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006952:	f043 0201 	orr.w	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d011      	beq.n	800698c <HAL_UART_IRQHandler+0xf8>
 8006968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2202      	movs	r2, #2
 800697a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006982:	f043 0204 	orr.w	r2, r3, #4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d011      	beq.n	80069bc <HAL_UART_IRQHandler+0x128>
 8006998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2204      	movs	r2, #4
 80069aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b2:	f043 0202 	orr.w	r2, r3, #2
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d017      	beq.n	80069f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069d8:	4b5a      	ldr	r3, [pc, #360]	; (8006b44 <HAL_UART_IRQHandler+0x2b0>)
 80069da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2208      	movs	r2, #8
 80069e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ee:	f043 0208 	orr.w	r2, r3, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d012      	beq.n	8006a2a <HAL_UART_IRQHandler+0x196>
 8006a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00c      	beq.n	8006a2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a20:	f043 0220 	orr.w	r2, r3, #32
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 823c 	beq.w	8006eae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d013      	beq.n	8006a6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b40      	cmp	r3, #64	; 0x40
 8006a80:	d005      	beq.n	8006a8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d04f      	beq.n	8006b2e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fe34 	bl	80076fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d141      	bne.n	8006b26 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1d9      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d013      	beq.n	8006b1e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006afa:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <HAL_UART_IRQHandler+0x2b8>)
 8006afc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fc fe1e 	bl	8003744 <HAL_DMA_Abort_IT>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d017      	beq.n	8006b3e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	e00f      	b.n	8006b3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9da 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	e00b      	b.n	8006b3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9d6 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b2c:	e007      	b.n	8006b3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9d2 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006b3c:	e1b7      	b.n	8006eae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3e:	bf00      	nop
    return;
 8006b40:	e1b5      	b.n	8006eae <HAL_UART_IRQHandler+0x61a>
 8006b42:	bf00      	nop
 8006b44:	10000001 	.word	0x10000001
 8006b48:	04000120 	.word	0x04000120
 8006b4c:	080078ff 	.word	0x080078ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f040 814a 	bne.w	8006dee <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8143 	beq.w	8006dee <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f003 0310 	and.w	r3, r3, #16
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 813c 	beq.w	8006dee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	f040 80b5 	bne.w	8006cf8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006b9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 8187 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	f080 817f 	bcs.w	8006eb2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 8086 	bne.w	8006cdc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1da      	bne.n	8006bd0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e1      	bne.n	8006c1a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3308      	adds	r3, #8
 8006c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e3      	bne.n	8006c56 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cac:	f023 0310 	bic.w	r3, r3, #16
 8006cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e4      	bne.n	8006c9c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fc fcd5 	bl	8003686 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8fb 	bl	8006eec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006cf6:	e0dc      	b.n	8006eb2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80ce 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80c9 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
 8006d48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e4      	bne.n	8006d24 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	623b      	str	r3, [r7, #32]
   return(result);
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d70:	f023 0301 	bic.w	r3, r3, #1
 8006d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d82:	633a      	str	r2, [r7, #48]	; 0x30
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e1      	bne.n	8006d5a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0310 	bic.w	r3, r3, #16
 8006dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e4      	bne.n	8006daa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f880 	bl	8006eec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006dec:	e063      	b.n	8006eb6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00e      	beq.n	8006e18 <HAL_UART_IRQHandler+0x584>
 8006dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fdb5 	bl	8007980 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e16:	e051      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d014      	beq.n	8006e4e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d008      	beq.n	8006e4e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d03a      	beq.n	8006eba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	4798      	blx	r3
    }
    return;
 8006e4c:	e035      	b.n	8006eba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <HAL_UART_IRQHandler+0x5da>
 8006e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fd5f 	bl	800792a <UART_EndTransmit_IT>
    return;
 8006e6c:	e026      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <HAL_UART_IRQHandler+0x5fa>
 8006e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fd8e 	bl	80079a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e8c:	e016      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d010      	beq.n	8006ebc <HAL_UART_IRQHandler+0x628>
 8006e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da0c      	bge.n	8006ebc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fd76 	bl	8007994 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ea8:	e008      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
      return;
 8006eaa:	bf00      	nop
 8006eac:	e006      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
    return;
 8006eae:	bf00      	nop
 8006eb0:	e004      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
      return;
 8006eb2:	bf00      	nop
 8006eb4:	e002      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
      return;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <HAL_UART_IRQHandler+0x628>
    return;
 8006eba:	bf00      	nop
  }
}
 8006ebc:	37e8      	adds	r7, #232	; 0xe8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop

08006ec4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f04:	b5b0      	push	{r4, r5, r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4ba3      	ldr	r3, [pc, #652]	; (80071bc <UART_SetConfig+0x2b8>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	69f9      	ldr	r1, [r7, #28]
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a98      	ldr	r2, [pc, #608]	; (80071c0 <UART_SetConfig+0x2bc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	69f9      	ldr	r1, [r7, #28]
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	f023 010f 	bic.w	r1, r3, #15
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a89      	ldr	r2, [pc, #548]	; (80071c4 <UART_SetConfig+0x2c0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d120      	bne.n	8006fe6 <UART_SetConfig+0xe2>
 8006fa4:	2003      	movs	r0, #3
 8006fa6:	f7ff fadd 	bl	8006564 <LL_RCC_GetUSARTClockSource>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d817      	bhi.n	8006fe0 <UART_SetConfig+0xdc>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <UART_SetConfig+0xb4>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08006fd5 	.word	0x08006fd5
 8006fc0:	08006fcf 	.word	0x08006fcf
 8006fc4:	08006fdb 	.word	0x08006fdb
 8006fc8:	2301      	movs	r3, #1
 8006fca:	76fb      	strb	r3, [r7, #27]
 8006fcc:	e038      	b.n	8007040 <UART_SetConfig+0x13c>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	76fb      	strb	r3, [r7, #27]
 8006fd2:	e035      	b.n	8007040 <UART_SetConfig+0x13c>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	76fb      	strb	r3, [r7, #27]
 8006fd8:	e032      	b.n	8007040 <UART_SetConfig+0x13c>
 8006fda:	2308      	movs	r3, #8
 8006fdc:	76fb      	strb	r3, [r7, #27]
 8006fde:	e02f      	b.n	8007040 <UART_SetConfig+0x13c>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	76fb      	strb	r3, [r7, #27]
 8006fe4:	e02c      	b.n	8007040 <UART_SetConfig+0x13c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a75      	ldr	r2, [pc, #468]	; (80071c0 <UART_SetConfig+0x2bc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d125      	bne.n	800703c <UART_SetConfig+0x138>
 8006ff0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006ff4:	f7ff fac6 	bl	8006584 <LL_RCC_GetLPUARTClockSource>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ffe:	d017      	beq.n	8007030 <UART_SetConfig+0x12c>
 8007000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007004:	d817      	bhi.n	8007036 <UART_SetConfig+0x132>
 8007006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800700a:	d00b      	beq.n	8007024 <UART_SetConfig+0x120>
 800700c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007010:	d811      	bhi.n	8007036 <UART_SetConfig+0x132>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <UART_SetConfig+0x11a>
 8007016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800701a:	d006      	beq.n	800702a <UART_SetConfig+0x126>
 800701c:	e00b      	b.n	8007036 <UART_SetConfig+0x132>
 800701e:	2300      	movs	r3, #0
 8007020:	76fb      	strb	r3, [r7, #27]
 8007022:	e00d      	b.n	8007040 <UART_SetConfig+0x13c>
 8007024:	2302      	movs	r3, #2
 8007026:	76fb      	strb	r3, [r7, #27]
 8007028:	e00a      	b.n	8007040 <UART_SetConfig+0x13c>
 800702a:	2304      	movs	r3, #4
 800702c:	76fb      	strb	r3, [r7, #27]
 800702e:	e007      	b.n	8007040 <UART_SetConfig+0x13c>
 8007030:	2308      	movs	r3, #8
 8007032:	76fb      	strb	r3, [r7, #27]
 8007034:	e004      	b.n	8007040 <UART_SetConfig+0x13c>
 8007036:	2310      	movs	r3, #16
 8007038:	76fb      	strb	r3, [r7, #27]
 800703a:	e001      	b.n	8007040 <UART_SetConfig+0x13c>
 800703c:	2310      	movs	r3, #16
 800703e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a5e      	ldr	r2, [pc, #376]	; (80071c0 <UART_SetConfig+0x2bc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f040 808b 	bne.w	8007162 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800704c:	7efb      	ldrb	r3, [r7, #27]
 800704e:	2b08      	cmp	r3, #8
 8007050:	d823      	bhi.n	800709a <UART_SetConfig+0x196>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x154>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	0800707d 	.word	0x0800707d
 800705c:	0800709b 	.word	0x0800709b
 8007060:	08007085 	.word	0x08007085
 8007064:	0800709b 	.word	0x0800709b
 8007068:	0800708b 	.word	0x0800708b
 800706c:	0800709b 	.word	0x0800709b
 8007070:	0800709b 	.word	0x0800709b
 8007074:	0800709b 	.word	0x0800709b
 8007078:	08007093 	.word	0x08007093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fe f8a2 	bl	80051c4 <HAL_RCC_GetPCLK1Freq>
 8007080:	6178      	str	r0, [r7, #20]
        break;
 8007082:	e00f      	b.n	80070a4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007084:	4b50      	ldr	r3, [pc, #320]	; (80071c8 <UART_SetConfig+0x2c4>)
 8007086:	617b      	str	r3, [r7, #20]
        break;
 8007088:	e00c      	b.n	80070a4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708a:	f7fe f81b 	bl	80050c4 <HAL_RCC_GetSysClockFreq>
 800708e:	6178      	str	r0, [r7, #20]
        break;
 8007090:	e008      	b.n	80070a4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007096:	617b      	str	r3, [r7, #20]
        break;
 8007098:	e004      	b.n	80070a4 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	76bb      	strb	r3, [r7, #26]
        break;
 80070a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 811a 	beq.w	80072e0 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	4a46      	ldr	r2, [pc, #280]	; (80071cc <UART_SetConfig+0x2c8>)
 80070b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b6:	461a      	mov	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80070be:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d305      	bcc.n	80070dc <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d902      	bls.n	80070e2 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	76bb      	strb	r3, [r7, #26]
 80070e0:	e0fe      	b.n	80072e0 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	4a37      	ldr	r2, [pc, #220]	; (80071cc <UART_SetConfig+0x2c8>)
 80070f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	f7f9 f899 	bl	8000230 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	020b      	lsls	r3, r1, #8
 8007110:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007114:	0202      	lsls	r2, r0, #8
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	6849      	ldr	r1, [r1, #4]
 800711a:	0849      	lsrs	r1, r1, #1
 800711c:	4608      	mov	r0, r1
 800711e:	f04f 0100 	mov.w	r1, #0
 8007122:	1814      	adds	r4, r2, r0
 8007124:	eb43 0501 	adc.w	r5, r3, r1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	461a      	mov	r2, r3
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	4620      	mov	r0, r4
 8007134:	4629      	mov	r1, r5
 8007136:	f7f9 f87b 	bl	8000230 <__aeabi_uldivmod>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4613      	mov	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007148:	d308      	bcc.n	800715c <UART_SetConfig+0x258>
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007150:	d204      	bcs.n	800715c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	e0c1      	b.n	80072e0 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	76bb      	strb	r3, [r7, #26]
 8007160:	e0be      	b.n	80072e0 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716a:	d16a      	bne.n	8007242 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800716c:	7efb      	ldrb	r3, [r7, #27]
 800716e:	3b01      	subs	r3, #1
 8007170:	2b07      	cmp	r3, #7
 8007172:	d82d      	bhi.n	80071d0 <UART_SetConfig+0x2cc>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0x278>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	0800719d 	.word	0x0800719d
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071d1 	.word	0x080071d1
 8007188:	080071ab 	.word	0x080071ab
 800718c:	080071d1 	.word	0x080071d1
 8007190:	080071d1 	.word	0x080071d1
 8007194:	080071d1 	.word	0x080071d1
 8007198:	080071b3 	.word	0x080071b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800719c:	f7fe f828 	bl	80051f0 <HAL_RCC_GetPCLK2Freq>
 80071a0:	6178      	str	r0, [r7, #20]
        break;
 80071a2:	e01a      	b.n	80071da <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a4:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <UART_SetConfig+0x2c4>)
 80071a6:	617b      	str	r3, [r7, #20]
        break;
 80071a8:	e017      	b.n	80071da <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071aa:	f7fd ff8b 	bl	80050c4 <HAL_RCC_GetSysClockFreq>
 80071ae:	6178      	str	r0, [r7, #20]
        break;
 80071b0:	e013      	b.n	80071da <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b6:	617b      	str	r3, [r7, #20]
        break;
 80071b8:	e00f      	b.n	80071da <UART_SetConfig+0x2d6>
 80071ba:	bf00      	nop
 80071bc:	cfff69f3 	.word	0xcfff69f3
 80071c0:	40008000 	.word	0x40008000
 80071c4:	40013800 	.word	0x40013800
 80071c8:	00f42400 	.word	0x00f42400
 80071cc:	0801042c 	.word	0x0801042c
      default:
        pclk = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	76bb      	strb	r3, [r7, #26]
        break;
 80071d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d07f      	beq.n	80072e0 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	4a48      	ldr	r2, [pc, #288]	; (8007308 <UART_SetConfig+0x404>)
 80071e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ea:	461a      	mov	r2, r3
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f2:	005a      	lsls	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	441a      	add	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	fbb2 f3f3 	udiv	r3, r2, r3
 8007204:	b29b      	uxth	r3, r3
 8007206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b0f      	cmp	r3, #15
 800720c:	d916      	bls.n	800723c <UART_SetConfig+0x338>
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007214:	d212      	bcs.n	800723c <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f023 030f 	bic.w	r3, r3, #15
 800721e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	b29b      	uxth	r3, r3
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	b29a      	uxth	r2, r3
 800722c:	89fb      	ldrh	r3, [r7, #14]
 800722e:	4313      	orrs	r3, r2
 8007230:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	89fa      	ldrh	r2, [r7, #14]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	e051      	b.n	80072e0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	76bb      	strb	r3, [r7, #26]
 8007240:	e04e      	b.n	80072e0 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007242:	7efb      	ldrb	r3, [r7, #27]
 8007244:	3b01      	subs	r3, #1
 8007246:	2b07      	cmp	r3, #7
 8007248:	d821      	bhi.n	800728e <UART_SetConfig+0x38a>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x34c>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007271 	.word	0x08007271
 8007254:	08007279 	.word	0x08007279
 8007258:	0800728f 	.word	0x0800728f
 800725c:	0800727f 	.word	0x0800727f
 8007260:	0800728f 	.word	0x0800728f
 8007264:	0800728f 	.word	0x0800728f
 8007268:	0800728f 	.word	0x0800728f
 800726c:	08007287 	.word	0x08007287
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007270:	f7fd ffbe 	bl	80051f0 <HAL_RCC_GetPCLK2Freq>
 8007274:	6178      	str	r0, [r7, #20]
        break;
 8007276:	e00f      	b.n	8007298 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007278:	4b24      	ldr	r3, [pc, #144]	; (800730c <UART_SetConfig+0x408>)
 800727a:	617b      	str	r3, [r7, #20]
        break;
 800727c:	e00c      	b.n	8007298 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727e:	f7fd ff21 	bl	80050c4 <HAL_RCC_GetSysClockFreq>
 8007282:	6178      	str	r0, [r7, #20]
        break;
 8007284:	e008      	b.n	8007298 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800728a:	617b      	str	r3, [r7, #20]
        break;
 800728c:	e004      	b.n	8007298 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	76bb      	strb	r3, [r7, #26]
        break;
 8007296:	bf00      	nop
    }

    if (pclk != 0U)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	4a19      	ldr	r2, [pc, #100]	; (8007308 <UART_SetConfig+0x404>)
 80072a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a8:	461a      	mov	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d908      	bls.n	80072dc <UART_SetConfig+0x3d8>
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d0:	d204      	bcs.n	80072dc <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e001      	b.n	80072e0 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80072fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bdb0      	pop	{r4, r5, r7, pc}
 8007306:	bf00      	nop
 8007308:	0801042c 	.word	0x0801042c
 800730c:	00f42400 	.word	0x00f42400

08007310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01a      	beq.n	8007426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800740e:	d10a      	bne.n	8007426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	605a      	str	r2, [r3, #4]
  }
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af02      	add	r7, sp, #8
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007464:	f7fb fe3a 	bl	80030dc <HAL_GetTick>
 8007468:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b08      	cmp	r3, #8
 8007476:	d10e      	bne.n	8007496 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f82f 	bl	80074ea <UART_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e025      	b.n	80074e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d10e      	bne.n	80074c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f819 	bl	80074ea <UART_WaitOnFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e00f      	b.n	80074e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b09c      	sub	sp, #112	; 0x70
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fa:	e0a9      	b.n	8007650 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	f000 80a5 	beq.w	8007650 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007506:	f7fb fde9 	bl	80030dc <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <UART_WaitOnFlagUntilTimeout+0x32>
 8007516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007518:	2b00      	cmp	r3, #0
 800751a:	d140      	bne.n	800759e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800752a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007530:	667b      	str	r3, [r7, #100]	; 0x64
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800753a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800753c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007540:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	663b      	str	r3, [r7, #96]	; 0x60
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800756e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007570:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800757c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e069      	b.n	8007672 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d051      	beq.n	8007650 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ba:	d149      	bne.n	8007650 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
 80075e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	613b      	str	r3, [r7, #16]
   return(result);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f023 0301 	bic.w	r3, r3, #1
 800760e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007618:	623a      	str	r2, [r7, #32]
 800761a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	69f9      	ldr	r1, [r7, #28]
 800761e:	6a3a      	ldr	r2, [r7, #32]
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	61bb      	str	r3, [r7, #24]
   return(result);
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e5      	bne.n	80075f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e010      	b.n	8007672 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69da      	ldr	r2, [r3, #28]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4013      	ands	r3, r2
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	429a      	cmp	r2, r3
 800765e:	bf0c      	ite	eq
 8007660:	2301      	moveq	r3, #1
 8007662:	2300      	movne	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	429a      	cmp	r2, r3
 800766c:	f43f af46 	beq.w	80074fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3770      	adds	r7, #112	; 0x70
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800767a:	b480      	push	{r7}
 800767c:	b08f      	sub	sp, #60	; 0x3c
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e6      	bne.n	8007682 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076ca:	633b      	str	r3, [r7, #48]	; 0x30
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d4:	61ba      	str	r2, [r7, #24]
 80076d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6979      	ldr	r1, [r7, #20]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	613b      	str	r3, [r7, #16]
   return(result);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e5      	bne.n	80076b4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80076f0:	bf00      	nop
 80076f2:	373c      	adds	r7, #60	; 0x3c
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b095      	sub	sp, #84	; 0x54
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007722:	643b      	str	r3, [r7, #64]	; 0x40
 8007724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e6      	bne.n	8007704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3308      	adds	r3, #8
 800773c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	61fb      	str	r3, [r7, #28]
   return(result);
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	64bb      	str	r3, [r7, #72]	; 0x48
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800775a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800775c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007772:	2b01      	cmp	r3, #1
 8007774:	d118      	bne.n	80077a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	60bb      	str	r3, [r7, #8]
   return(result);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f023 0310 	bic.w	r3, r3, #16
 800778a:	647b      	str	r3, [r7, #68]	; 0x44
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007794:	61bb      	str	r3, [r7, #24]
 8007796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6979      	ldr	r1, [r7, #20]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	613b      	str	r3, [r7, #16]
   return(result);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e6      	bne.n	8007776 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 80077bc:	bf00      	nop
 80077be:	3754      	adds	r7, #84	; 0x54
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b090      	sub	sp, #64	; 0x40
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d137      	bne.n	8007854 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80077e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	623b      	str	r3, [r7, #32]
   return(result);
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007802:	63bb      	str	r3, [r7, #56]	; 0x38
 8007804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800780c:	633a      	str	r2, [r7, #48]	; 0x30
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	60fb      	str	r3, [r7, #12]
   return(result);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007834:	637b      	str	r3, [r7, #52]	; 0x34
 8007836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	69b9      	ldr	r1, [r7, #24]
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	617b      	str	r3, [r7, #20]
   return(result);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e6      	bne.n	8007820 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007852:	e002      	b.n	800785a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007854:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007856:	f7fa f845 	bl	80018e4 <HAL_UART_TxCpltCallback>
}
 800785a:	bf00      	nop
 800785c:	3740      	adds	r7, #64	; 0x40
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fb27 	bl	8006ec4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007892:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a6:	2b80      	cmp	r3, #128	; 0x80
 80078a8:	d109      	bne.n	80078be <UART_DMAError+0x40>
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b21      	cmp	r3, #33	; 0x21
 80078ae:	d106      	bne.n	80078be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	f7ff fede 	bl	800767a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	d109      	bne.n	80078e0 <UART_DMAError+0x62>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b22      	cmp	r3, #34	; 0x22
 80078d0:	d106      	bne.n	80078e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80078da:	6978      	ldr	r0, [r7, #20]
 80078dc:	f7ff ff0e 	bl	80076fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e6:	f043 0210 	orr.w	r2, r3, #16
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f0:	6978      	ldr	r0, [r7, #20]
 80078f2:	f7ff faf1 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f6:	bf00      	nop
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff fadb 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b088      	sub	sp, #32
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	613b      	str	r3, [r7, #16]
   return(result);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7f9 ffb6 	bl	80018e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007978:	bf00      	nop
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e027      	b.n	8007a22 <HAL_UARTEx_DisableFifoMode+0x66>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2224      	movs	r2, #36	; 0x24
 80079de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0201 	bic.w	r2, r2, #1
 80079f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e02d      	b.n	8007aa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2224      	movs	r2, #36	; 0x24
 8007a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f850 	bl	8007b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e02d      	b.n	8007b1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2224      	movs	r2, #36	; 0x24
 8007ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f812 	bl	8007b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d108      	bne.n	8007b4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b48:	e031      	b.n	8007bae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b4e:	2308      	movs	r3, #8
 8007b50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	0e5b      	lsrs	r3, r3, #25
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	0f5b      	lsrs	r3, r3, #29
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	7b3a      	ldrb	r2, [r7, #12]
 8007b76:	4911      	ldr	r1, [pc, #68]	; (8007bbc <UARTEx_SetNbDataToProcess+0x94>)
 8007b78:	5c8a      	ldrb	r2, [r1, r2]
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b7e:	7b3a      	ldrb	r2, [r7, #12]
 8007b80:	490f      	ldr	r1, [pc, #60]	; (8007bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	7b7a      	ldrb	r2, [r7, #13]
 8007b94:	4909      	ldr	r1, [pc, #36]	; (8007bbc <UARTEx_SetNbDataToProcess+0x94>)
 8007b96:	5c8a      	ldrb	r2, [r1, r2]
 8007b98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b9c:	7b7a      	ldrb	r2, [r7, #13]
 8007b9e:	4908      	ldr	r1, [pc, #32]	; (8007bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bae:	bf00      	nop
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	08010444 	.word	0x08010444
 8007bc0:	0801044c 	.word	0x0801044c

08007bc4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bce:	f107 0308 	add.w	r3, r7, #8
 8007bd2:	2218      	movs	r2, #24
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 f83e 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bdc:	233f      	movs	r3, #63	; 0x3f
 8007bde:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007be0:	2381      	movs	r3, #129	; 0x81
 8007be2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007be4:	1dfb      	adds	r3, r7, #7
 8007be6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007be8:	2301      	movs	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bec:	f107 0308 	add.w	r3, r7, #8
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fb06 	bl	8009204 <hci_send_req>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da01      	bge.n	8007c02 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007bfe:	23ff      	movs	r3, #255	; 0xff
 8007c00:	e000      	b.n	8007c04 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007c02:	79fb      	ldrb	r3, [r7, #7]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3720      	adds	r7, #32
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007c0c:	b5b0      	push	{r4, r5, r7, lr}
 8007c0e:	b0ce      	sub	sp, #312	; 0x138
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4605      	mov	r5, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	4610      	mov	r0, r2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	1dfb      	adds	r3, r7, #7
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	1d3b      	adds	r3, r7, #4
 8007c22:	4622      	mov	r2, r4
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	1cbb      	adds	r3, r7, #2
 8007c28:	4602      	mov	r2, r0
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	1dbb      	adds	r3, r7, #6
 8007c2e:	460a      	mov	r2, r1
 8007c30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007c32:	f107 0310 	add.w	r3, r7, #16
 8007c36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007c3a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007c3e:	3308      	adds	r3, #8
 8007c40:	f107 0210 	add.w	r2, r7, #16
 8007c44:	4413      	add	r3, r2
 8007c46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007c4a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007c4e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007c52:	4413      	add	r3, r2
 8007c54:	3309      	adds	r3, #9
 8007c56:	f107 0210 	add.w	r2, r7, #16
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c60:	f107 030f 	add.w	r3, r7, #15
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007c6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c72:	1dfa      	adds	r2, r7, #7
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007c82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c86:	1d3a      	adds	r2, r7, #4
 8007c88:	8812      	ldrh	r2, [r2, #0]
 8007c8a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c92:	3302      	adds	r3, #2
 8007c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c9c:	1cba      	adds	r2, r7, #2
 8007c9e:	8812      	ldrh	r2, [r2, #0]
 8007ca0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ca8:	3302      	adds	r3, #2
 8007caa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007cae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cb2:	1dba      	adds	r2, r7, #6
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007cc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cc6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007cca:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007cd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cda:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007cde:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007cea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007cee:	3308      	adds	r3, #8
 8007cf0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007cf4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 ff9d 	bl	8008c38 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007cfe:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007d02:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007d06:	4413      	add	r3, r2
 8007d08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d10:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007d14:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007d20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d24:	3301      	adds	r3, #1
 8007d26:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007d2a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 ff82 	bl	8008c38 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007d34:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007d38:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d46:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007d4a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d50:	3302      	adds	r3, #2
 8007d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007d5e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d64:	3302      	adds	r3, #2
 8007d66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d6e:	2218      	movs	r2, #24
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 ff70 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d78:	233f      	movs	r3, #63	; 0x3f
 8007d7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007d7e:	2383      	movs	r3, #131	; 0x83
 8007d80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d84:	f107 0310 	add.w	r3, r7, #16
 8007d88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d94:	f107 030f 	add.w	r3, r7, #15
 8007d98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007da6:	2100      	movs	r1, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fa2b 	bl	8009204 <hci_send_req>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	da01      	bge.n	8007db8 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007db4:	23ff      	movs	r3, #255	; 0xff
 8007db6:	e002      	b.n	8007dbe <aci_gap_set_discoverable+0x1b2>
  return status;
 8007db8:	f107 030f 	add.w	r3, r7, #15
 8007dbc:	781b      	ldrb	r3, [r3, #0]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bdb0      	pop	{r4, r5, r7, pc}

08007dc8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b0cc      	sub	sp, #304	; 0x130
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4602      	mov	r2, r0
 8007dd0:	1dfb      	adds	r3, r7, #7
 8007dd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007dd4:	f107 0310 	add.w	r3, r7, #16
 8007dd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ddc:	f107 030f 	add.w	r3, r7, #15
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dee:	1dfa      	adds	r2, r7, #7
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007df4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007df8:	3301      	adds	r3, #1
 8007dfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e02:	2218      	movs	r2, #24
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ff26 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e0c:	233f      	movs	r3, #63	; 0x3f
 8007e0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007e12:	2385      	movs	r3, #133	; 0x85
 8007e14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e18:	f107 0310 	add.w	r3, r7, #16
 8007e1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e28:	f107 030f 	add.w	r3, r7, #15
 8007e2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 f9e1 	bl	8009204 <hci_send_req>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	da01      	bge.n	8007e4c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007e48:	23ff      	movs	r3, #255	; 0xff
 8007e4a:	e002      	b.n	8007e52 <aci_gap_set_io_capability+0x8a>
  return status;
 8007e4c:	f107 030f 	add.w	r3, r7, #15
 8007e50:	781b      	ldrb	r3, [r3, #0]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007e5c:	b5b0      	push	{r4, r5, r7, lr}
 8007e5e:	b0cc      	sub	sp, #304	; 0x130
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4605      	mov	r5, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	4610      	mov	r0, r2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	1dfb      	adds	r3, r7, #7
 8007e6c:	462a      	mov	r2, r5
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	1dbb      	adds	r3, r7, #6
 8007e72:	4622      	mov	r2, r4
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	1d7b      	adds	r3, r7, #5
 8007e78:	4602      	mov	r2, r0
 8007e7a:	701a      	strb	r2, [r3, #0]
 8007e7c:	1d3b      	adds	r3, r7, #4
 8007e7e:	460a      	mov	r2, r1
 8007e80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007e82:	f107 0310 	add.w	r3, r7, #16
 8007e86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e8a:	f107 030f 	add.w	r3, r7, #15
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9c:	1dfa      	adds	r2, r7, #7
 8007e9e:	7812      	ldrb	r2, [r2, #0]
 8007ea0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb0:	1dba      	adds	r2, r7, #6
 8007eb2:	7812      	ldrb	r2, [r2, #0]
 8007eb4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec4:	1d7a      	adds	r2, r7, #5
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed8:	1d3a      	adds	r2, r7, #4
 8007eda:	7812      	ldrb	r2, [r2, #0]
 8007edc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eec:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007ef0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007ef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f00:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007f04:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f14:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007f18:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f1e:	3301      	adds	r3, #1
 8007f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007f2c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f34:	3304      	adds	r3, #4
 8007f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007f42:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f48:	3301      	adds	r3, #1
 8007f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f52:	2218      	movs	r2, #24
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fe7e 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f5c:	233f      	movs	r3, #63	; 0x3f
 8007f5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007f62:	2386      	movs	r3, #134	; 0x86
 8007f64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f78:	f107 030f 	add.w	r3, r7, #15
 8007f7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 f939 	bl	8009204 <hci_send_req>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	da01      	bge.n	8007f9c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007f98:	23ff      	movs	r3, #255	; 0xff
 8007f9a:	e002      	b.n	8007fa2 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007f9c:	f107 030f 	add.w	r3, r7, #15
 8007fa0:	781b      	ldrb	r3, [r3, #0]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bdb0      	pop	{r4, r5, r7, pc}

08007fac <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b0cc      	sub	sp, #304	; 0x130
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	6019      	str	r1, [r3, #0]
 8007fb8:	1dbb      	adds	r3, r7, #6
 8007fba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007fbc:	f107 0310 	add.w	r3, r7, #16
 8007fc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fc4:	f107 030f 	add.w	r3, r7, #15
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd6:	1dba      	adds	r2, r7, #6
 8007fd8:	8812      	ldrh	r2, [r2, #0]
 8007fda:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fea:	463a      	mov	r2, r7
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008000:	2218      	movs	r2, #24
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fe27 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800800a:	233f      	movs	r3, #63	; 0x3f
 800800c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008010:	2388      	movs	r3, #136	; 0x88
 8008012:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008016:	f107 0310 	add.w	r3, r7, #16
 800801a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800801e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008022:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008026:	f107 030f 	add.w	r3, r7, #15
 800802a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800802e:	2301      	movs	r3, #1
 8008030:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008034:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f8e2 	bl	8009204 <hci_send_req>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	da01      	bge.n	800804a <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008046:	23ff      	movs	r3, #255	; 0xff
 8008048:	e002      	b.n	8008050 <aci_gap_pass_key_resp+0xa4>
  return status;
 800804a:	f107 030f 	add.w	r3, r7, #15
 800804e:	781b      	ldrb	r3, [r3, #0]
}
 8008050:	4618      	mov	r0, r3
 8008052:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800805a:	b590      	push	{r4, r7, lr}
 800805c:	b0cd      	sub	sp, #308	; 0x134
 800805e:	af00      	add	r7, sp, #0
 8008060:	4604      	mov	r4, r0
 8008062:	4608      	mov	r0, r1
 8008064:	4611      	mov	r1, r2
 8008066:	463a      	mov	r2, r7
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	1dfb      	adds	r3, r7, #7
 800806c:	4622      	mov	r2, r4
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	1dbb      	adds	r3, r7, #6
 8008072:	4602      	mov	r2, r0
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	1d7b      	adds	r3, r7, #5
 8008078:	460a      	mov	r2, r1
 800807a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800807c:	f107 0310 	add.w	r3, r7, #16
 8008080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008084:	f107 0308 	add.w	r3, r7, #8
 8008088:	2207      	movs	r2, #7
 800808a:	2100      	movs	r1, #0
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fde3 	bl	8008c58 <Osal_MemSet>
  int index_input = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800809c:	1dfa      	adds	r2, r7, #7
 800809e:	7812      	ldrb	r2, [r2, #0]
 80080a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a6:	3301      	adds	r3, #1
 80080a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80080ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b0:	1dba      	adds	r2, r7, #6
 80080b2:	7812      	ldrb	r2, [r2, #0]
 80080b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80080b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080ba:	3301      	adds	r3, #1
 80080bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80080c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c4:	1d7a      	adds	r2, r7, #5
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80080ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080ce:	3301      	adds	r3, #1
 80080d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080d8:	2218      	movs	r2, #24
 80080da:	2100      	movs	r1, #0
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fdbb 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80080e2:	233f      	movs	r3, #63	; 0x3f
 80080e4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80080e8:	238a      	movs	r3, #138	; 0x8a
 80080ea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080ee:	f107 0310 	add.w	r3, r7, #16
 80080f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008106:	2307      	movs	r3, #7
 8008108:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800810c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f001 f876 	bl	8009204 <hci_send_req>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	da01      	bge.n	8008122 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800811e:	23ff      	movs	r3, #255	; 0xff
 8008120:	e021      	b.n	8008166 <aci_gap_init+0x10c>
  if ( resp.Status )
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <aci_gap_init+0xda>
    return resp.Status;
 800812c:	f107 0308 	add.w	r3, r7, #8
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	e018      	b.n	8008166 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8008134:	f107 0308 	add.w	r3, r7, #8
 8008138:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800813c:	b29a      	uxth	r2, r3
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008144:	f107 0308 	add.w	r3, r7, #8
 8008148:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800814c:	b29a      	uxth	r2, r3
 800814e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008152:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008154:	f107 0308 	add.w	r3, r7, #8
 8008158:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800815c:	b29a      	uxth	r2, r3
 800815e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008162:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800816c:	46bd      	mov	sp, r7
 800816e:	bd90      	pop	{r4, r7, pc}

08008170 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b0cc      	sub	sp, #304	; 0x130
 8008174:	af00      	add	r7, sp, #0
 8008176:	4602      	mov	r2, r0
 8008178:	463b      	mov	r3, r7
 800817a:	6019      	str	r1, [r3, #0]
 800817c:	1dfb      	adds	r3, r7, #7
 800817e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008188:	f107 030f 	add.w	r3, r7, #15
 800818c:	2200      	movs	r2, #0
 800818e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819a:	1dfa      	adds	r2, r7, #7
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081a4:	3301      	adds	r3, #1
 80081a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80081aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ae:	1c58      	adds	r0, r3, #1
 80081b0:	1dfb      	adds	r3, r7, #7
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	463b      	mov	r3, r7
 80081b6:	6819      	ldr	r1, [r3, #0]
 80081b8:	f000 fd3e 	bl	8008c38 <Osal_MemCpy>
  index_input += AdvDataLen;
 80081bc:	1dfb      	adds	r3, r7, #7
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80081c4:	4413      	add	r3, r2
 80081c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081ce:	2218      	movs	r2, #24
 80081d0:	2100      	movs	r1, #0
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fd40 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081d8:	233f      	movs	r3, #63	; 0x3f
 80081da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80081de:	238e      	movs	r3, #142	; 0x8e
 80081e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081e4:	f107 0310 	add.w	r3, r7, #16
 80081e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081f4:	f107 030f 	add.w	r3, r7, #15
 80081f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008202:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fffb 	bl	8009204 <hci_send_req>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	da01      	bge.n	8008218 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8008214:	23ff      	movs	r3, #255	; 0xff
 8008216:	e002      	b.n	800821e <aci_gap_update_adv_data+0xae>
  return status;
 8008218:	f107 030f 	add.w	r3, r7, #15
 800821c:	781b      	ldrb	r3, [r3, #0]
}
 800821e:	4618      	mov	r0, r3
 8008220:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008232:	f107 0308 	add.w	r3, r7, #8
 8008236:	2218      	movs	r2, #24
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fd0c 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008240:	233f      	movs	r3, #63	; 0x3f
 8008242:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008244:	2392      	movs	r3, #146	; 0x92
 8008246:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008248:	1dfb      	adds	r3, r7, #7
 800824a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800824c:	2301      	movs	r3, #1
 800824e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008250:	f107 0308 	add.w	r3, r7, #8
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f000 ffd4 	bl	8009204 <hci_send_req>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	da01      	bge.n	8008266 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008262:	23ff      	movs	r3, #255	; 0xff
 8008264:	e000      	b.n	8008268 <aci_gap_configure_whitelist+0x40>
  return status;
 8008266:	79fb      	ldrb	r3, [r7, #7]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b0cc      	sub	sp, #304	; 0x130
 8008274:	af00      	add	r7, sp, #0
 8008276:	4602      	mov	r2, r0
 8008278:	1dbb      	adds	r3, r7, #6
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	1d7b      	adds	r3, r7, #5
 800827e:	460a      	mov	r2, r1
 8008280:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008282:	f107 0310 	add.w	r3, r7, #16
 8008286:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800828a:	f107 030f 	add.w	r3, r7, #15
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829c:	1dba      	adds	r2, r7, #6
 800829e:	8812      	ldrh	r2, [r2, #0]
 80082a0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082a6:	3302      	adds	r3, #2
 80082a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80082ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b0:	1d7a      	adds	r2, r7, #5
 80082b2:	7812      	ldrb	r2, [r2, #0]
 80082b4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80082b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082ba:	3301      	adds	r3, #1
 80082bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082c4:	2218      	movs	r2, #24
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fcc5 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082ce:	233f      	movs	r3, #63	; 0x3f
 80082d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80082d4:	23a5      	movs	r3, #165	; 0xa5
 80082d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082da:	f107 0310 	add.w	r3, r7, #16
 80082de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80082ea:	f107 030f 	add.w	r3, r7, #15
 80082ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082fc:	2100      	movs	r1, #0
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 ff80 	bl	8009204 <hci_send_req>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	da01      	bge.n	800830e <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800830a:	23ff      	movs	r3, #255	; 0xff
 800830c:	e002      	b.n	8008314 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800830e:	f107 030f 	add.w	r3, r7, #15
 8008312:	781b      	ldrb	r3, [r3, #0]
}
 8008314:	4618      	mov	r0, r3
 8008316:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b088      	sub	sp, #32
 8008322:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008328:	f107 0308 	add.w	r3, r7, #8
 800832c:	2218      	movs	r2, #24
 800832e:	2100      	movs	r1, #0
 8008330:	4618      	mov	r0, r3
 8008332:	f000 fc91 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008336:	233f      	movs	r3, #63	; 0x3f
 8008338:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800833a:	f240 1301 	movw	r3, #257	; 0x101
 800833e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008340:	1dfb      	adds	r3, r7, #7
 8008342:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008344:	2301      	movs	r3, #1
 8008346:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008348:	f107 0308 	add.w	r3, r7, #8
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f000 ff58 	bl	8009204 <hci_send_req>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	da01      	bge.n	800835e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800835a:	23ff      	movs	r3, #255	; 0xff
 800835c:	e000      	b.n	8008360 <aci_gatt_init+0x42>
  return status;
 800835e:	79fb      	ldrb	r3, [r7, #7]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008368:	b590      	push	{r4, r7, lr}
 800836a:	b0cf      	sub	sp, #316	; 0x13c
 800836c:	af00      	add	r7, sp, #0
 800836e:	4604      	mov	r4, r0
 8008370:	4638      	mov	r0, r7
 8008372:	6001      	str	r1, [r0, #0]
 8008374:	4610      	mov	r0, r2
 8008376:	4619      	mov	r1, r3
 8008378:	1dfb      	adds	r3, r7, #7
 800837a:	4622      	mov	r2, r4
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	1dbb      	adds	r3, r7, #6
 8008380:	4602      	mov	r2, r0
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	1d7b      	adds	r3, r7, #5
 8008386:	460a      	mov	r2, r1
 8008388:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800838a:	f107 0310 	add.w	r3, r7, #16
 800838e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008392:	1dfb      	adds	r3, r7, #7
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d007      	beq.n	80083aa <aci_gatt_add_service+0x42>
 800839a:	1dfb      	adds	r3, r7, #7
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d101      	bne.n	80083a6 <aci_gatt_add_service+0x3e>
 80083a2:	2311      	movs	r3, #17
 80083a4:	e002      	b.n	80083ac <aci_gatt_add_service+0x44>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <aci_gatt_add_service+0x44>
 80083aa:	2303      	movs	r3, #3
 80083ac:	f107 0210 	add.w	r2, r7, #16
 80083b0:	4413      	add	r3, r2
 80083b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	2203      	movs	r2, #3
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fc4a 	bl	8008c58 <Osal_MemSet>
  int index_input = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80083ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083ce:	1dfa      	adds	r2, r7, #7
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083d8:	3301      	adds	r3, #1
 80083da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80083de:	1dfb      	adds	r3, r7, #7
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d002      	beq.n	80083ec <aci_gatt_add_service+0x84>
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d004      	beq.n	80083f4 <aci_gatt_add_service+0x8c>
 80083ea:	e007      	b.n	80083fc <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80083ec:	2302      	movs	r3, #2
 80083ee:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80083f2:	e005      	b.n	8008400 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80083f4:	2310      	movs	r3, #16
 80083f6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80083fa:	e001      	b.n	8008400 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80083fc:	2347      	movs	r3, #71	; 0x47
 80083fe:	e05d      	b.n	80084bc <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008400:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008404:	1c58      	adds	r0, r3, #1
 8008406:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800840a:	463b      	mov	r3, r7
 800840c:	6819      	ldr	r1, [r3, #0]
 800840e:	f000 fc13 	bl	8008c38 <Osal_MemCpy>
    index_input += size;
 8008412:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008416:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800841a:	4413      	add	r3, r2
 800841c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008424:	1dba      	adds	r2, r7, #6
 8008426:	7812      	ldrb	r2, [r2, #0]
 8008428:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800842a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800842e:	3301      	adds	r3, #1
 8008430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008438:	1d7a      	adds	r2, r7, #5
 800843a:	7812      	ldrb	r2, [r2, #0]
 800843c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800843e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008442:	3301      	adds	r3, #1
 8008444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008448:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800844c:	2218      	movs	r2, #24
 800844e:	2100      	movs	r1, #0
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fc01 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008456:	233f      	movs	r3, #63	; 0x3f
 8008458:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800845c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008460:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008464:	f107 0310 	add.w	r3, r7, #16
 8008468:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800846c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008470:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800847c:	2303      	movs	r3, #3
 800847e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008482:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f000 febb 	bl	8009204 <hci_send_req>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	da01      	bge.n	8008498 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8008494:	23ff      	movs	r3, #255	; 0xff
 8008496:	e011      	b.n	80084bc <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <aci_gatt_add_service+0x142>
    return resp.Status;
 80084a2:	f107 030c 	add.w	r3, r7, #12
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	e008      	b.n	80084bc <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80084aa:	f107 030c 	add.w	r3, r7, #12
 80084ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80084b8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd90      	pop	{r4, r7, pc}

080084c6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80084c6:	b590      	push	{r4, r7, lr}
 80084c8:	b0d1      	sub	sp, #324	; 0x144
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	4604      	mov	r4, r0
 80084ce:	4608      	mov	r0, r1
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	600a      	str	r2, [r1, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	f107 030e 	add.w	r3, r7, #14
 80084dc:	4622      	mov	r2, r4
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	f107 030d 	add.w	r3, r7, #13
 80084e4:	4602      	mov	r2, r0
 80084e6:	701a      	strb	r2, [r3, #0]
 80084e8:	1dbb      	adds	r3, r7, #6
 80084ea:	460a      	mov	r2, r1
 80084ec:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80084ee:	f107 0318 	add.w	r3, r7, #24
 80084f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80084f6:	f107 030d 	add.w	r3, r7, #13
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d008      	beq.n	8008512 <aci_gatt_add_char+0x4c>
 8008500:	f107 030d 	add.w	r3, r7, #13
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d101      	bne.n	800850e <aci_gatt_add_char+0x48>
 800850a:	2313      	movs	r3, #19
 800850c:	e002      	b.n	8008514 <aci_gatt_add_char+0x4e>
 800850e:	2303      	movs	r3, #3
 8008510:	e000      	b.n	8008514 <aci_gatt_add_char+0x4e>
 8008512:	2305      	movs	r3, #5
 8008514:	f107 0218 	add.w	r2, r7, #24
 8008518:	4413      	add	r3, r2
 800851a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800851e:	f107 0314 	add.w	r3, r7, #20
 8008522:	2203      	movs	r2, #3
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fb96 	bl	8008c58 <Osal_MemSet>
  int index_input = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008532:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008536:	f107 020e 	add.w	r2, r7, #14
 800853a:	8812      	ldrh	r2, [r2, #0]
 800853c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800853e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008542:	3302      	adds	r3, #2
 8008544:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008548:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800854c:	f107 020d 	add.w	r2, r7, #13
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008554:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008558:	3301      	adds	r3, #1
 800855a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800855e:	f107 030d 	add.w	r3, r7, #13
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d002      	beq.n	800856e <aci_gatt_add_char+0xa8>
 8008568:	2b02      	cmp	r3, #2
 800856a:	d004      	beq.n	8008576 <aci_gatt_add_char+0xb0>
 800856c:	e007      	b.n	800857e <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800856e:	2302      	movs	r3, #2
 8008570:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008574:	e005      	b.n	8008582 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8008576:	2310      	movs	r3, #16
 8008578:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800857c:	e001      	b.n	8008582 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800857e:	2347      	movs	r3, #71	; 0x47
 8008580:	e086      	b.n	8008690 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008582:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008586:	1cd8      	adds	r0, r3, #3
 8008588:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800858c:	f107 0308 	add.w	r3, r7, #8
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	f000 fb51 	bl	8008c38 <Osal_MemCpy>
    index_input += size;
 8008596:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800859a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800859e:	4413      	add	r3, r2
 80085a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80085a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085a8:	1dba      	adds	r2, r7, #6
 80085aa:	8812      	ldrh	r2, [r2, #0]
 80085ac:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80085ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085b2:	3302      	adds	r3, #2
 80085b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80085b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085bc:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80085c0:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80085c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085c6:	3301      	adds	r3, #1
 80085c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80085cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80085d4:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80085d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085da:	3301      	adds	r3, #1
 80085dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80085e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085e4:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80085e8:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80085ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085ee:	3301      	adds	r3, #1
 80085f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80085f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085f8:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80085fc:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80085fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008602:	3301      	adds	r3, #1
 8008604:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008608:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800860c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008610:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008612:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008616:	3301      	adds	r3, #1
 8008618:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800861c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008620:	2218      	movs	r2, #24
 8008622:	2100      	movs	r1, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fb17 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800862a:	233f      	movs	r3, #63	; 0x3f
 800862c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008630:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008634:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008638:	f107 0318 	add.w	r3, r7, #24
 800863c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008640:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008644:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008648:	f107 0314 	add.w	r3, r7, #20
 800864c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008650:	2303      	movs	r3, #3
 8008652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008656:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800865a:	2100      	movs	r1, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fdd1 	bl	8009204 <hci_send_req>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	da01      	bge.n	800866c <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008668:	23ff      	movs	r3, #255	; 0xff
 800866a:	e011      	b.n	8008690 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800866c:	f107 0314 	add.w	r3, r7, #20
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8008676:	f107 0314 	add.w	r3, r7, #20
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	e008      	b.n	8008690 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800867e:	f107 0314 	add.w	r3, r7, #20
 8008682:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008686:	b29a      	uxth	r2, r3
 8008688:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800868c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008696:	46bd      	mov	sp, r7
 8008698:	bd90      	pop	{r4, r7, pc}

0800869a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800869a:	b5b0      	push	{r4, r5, r7, lr}
 800869c:	b0cc      	sub	sp, #304	; 0x130
 800869e:	af00      	add	r7, sp, #0
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	4610      	mov	r0, r2
 80086a6:	4619      	mov	r1, r3
 80086a8:	1dbb      	adds	r3, r7, #6
 80086aa:	462a      	mov	r2, r5
 80086ac:	801a      	strh	r2, [r3, #0]
 80086ae:	1d3b      	adds	r3, r7, #4
 80086b0:	4622      	mov	r2, r4
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	1cfb      	adds	r3, r7, #3
 80086b6:	4602      	mov	r2, r0
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	1cbb      	adds	r3, r7, #2
 80086bc:	460a      	mov	r2, r1
 80086be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80086c0:	f107 0310 	add.w	r3, r7, #16
 80086c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80086c8:	f107 030f 	add.w	r3, r7, #15
 80086cc:	2200      	movs	r2, #0
 80086ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80086d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086da:	1dba      	adds	r2, r7, #6
 80086dc:	8812      	ldrh	r2, [r2, #0]
 80086de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80086e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086e4:	3302      	adds	r3, #2
 80086e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80086ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ee:	1d3a      	adds	r2, r7, #4
 80086f0:	8812      	ldrh	r2, [r2, #0]
 80086f2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086f8:	3302      	adds	r3, #2
 80086fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80086fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008702:	1cfa      	adds	r2, r7, #3
 8008704:	7812      	ldrb	r2, [r2, #0]
 8008706:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800870c:	3301      	adds	r3, #1
 800870e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008716:	1cba      	adds	r2, r7, #2
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800871c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008720:	3301      	adds	r3, #1
 8008722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872a:	1d98      	adds	r0, r3, #6
 800872c:	1cbb      	adds	r3, r7, #2
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008736:	f000 fa7f 	bl	8008c38 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800873a:	1cbb      	adds	r3, r7, #2
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008742:	4413      	add	r3, r2
 8008744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800874c:	2218      	movs	r2, #24
 800874e:	2100      	movs	r1, #0
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fa81 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008756:	233f      	movs	r3, #63	; 0x3f
 8008758:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800875c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008760:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008764:	f107 0310 	add.w	r3, r7, #16
 8008768:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800876c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008774:	f107 030f 	add.w	r3, r7, #15
 8008778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800877c:	2301      	movs	r3, #1
 800877e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008786:	2100      	movs	r1, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fd3b 	bl	8009204 <hci_send_req>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	da01      	bge.n	8008798 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8008794:	23ff      	movs	r3, #255	; 0xff
 8008796:	e002      	b.n	800879e <aci_gatt_update_char_value+0x104>
  return status;
 8008798:	f107 030f 	add.w	r3, r7, #15
 800879c:	781b      	ldrb	r3, [r3, #0]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bdb0      	pop	{r4, r5, r7, pc}

080087a8 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b0cc      	sub	sp, #304	; 0x130
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4602      	mov	r2, r0
 80087b0:	1dbb      	adds	r3, r7, #6
 80087b2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80087b4:	f107 0310 	add.w	r3, r7, #16
 80087b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087bc:	f107 030f 	add.w	r3, r7, #15
 80087c0:	2200      	movs	r2, #0
 80087c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80087ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ce:	1dba      	adds	r2, r7, #6
 80087d0:	8812      	ldrh	r2, [r2, #0]
 80087d2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087d8:	3302      	adds	r3, #2
 80087da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087e2:	2218      	movs	r2, #24
 80087e4:	2100      	movs	r1, #0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fa36 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087ec:	233f      	movs	r3, #63	; 0x3f
 80087ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 80087f2:	f240 1327 	movw	r3, #295	; 0x127
 80087f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087fa:	f107 0310 	add.w	r3, r7, #16
 80087fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008802:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800880a:	f107 030f 	add.w	r3, r7, #15
 800880e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008812:	2301      	movs	r3, #1
 8008814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fcf0 	bl	8009204 <hci_send_req>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	da01      	bge.n	800882e <aci_gatt_allow_read+0x86>
    return BLE_STATUS_TIMEOUT;
 800882a:	23ff      	movs	r3, #255	; 0xff
 800882c:	e002      	b.n	8008834 <aci_gatt_allow_read+0x8c>
  return status;
 800882e:	f107 030f 	add.w	r3, r7, #15
 8008832:	781b      	ldrb	r3, [r3, #0]
}
 8008834:	4618      	mov	r0, r3
 8008836:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b0cc      	sub	sp, #304	; 0x130
 8008842:	af00      	add	r7, sp, #0
 8008844:	463b      	mov	r3, r7
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	1dfb      	adds	r3, r7, #7
 800884a:	4602      	mov	r2, r0
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	1dbb      	adds	r3, r7, #6
 8008850:	460a      	mov	r2, r1
 8008852:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800885c:	f107 030f 	add.w	r3, r7, #15
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800886a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886e:	1dfa      	adds	r2, r7, #7
 8008870:	7812      	ldrb	r2, [r2, #0]
 8008872:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008874:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008878:	3301      	adds	r3, #1
 800887a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800887e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008882:	1dba      	adds	r2, r7, #6
 8008884:	7812      	ldrb	r2, [r2, #0]
 8008886:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800888c:	3301      	adds	r3, #1
 800888e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008896:	1c98      	adds	r0, r3, #2
 8008898:	1dbb      	adds	r3, r7, #6
 800889a:	781a      	ldrb	r2, [r3, #0]
 800889c:	463b      	mov	r3, r7
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	f000 f9ca 	bl	8008c38 <Osal_MemCpy>
  index_input += Length;
 80088a4:	1dbb      	adds	r3, r7, #6
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80088ac:	4413      	add	r3, r2
 80088ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088b6:	2218      	movs	r2, #24
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f9cc 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088c0:	233f      	movs	r3, #63	; 0x3f
 80088c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80088c6:	230c      	movs	r3, #12
 80088c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088cc:	f107 0310 	add.w	r3, r7, #16
 80088d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088dc:	f107 030f 	add.w	r3, r7, #15
 80088e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088e4:	2301      	movs	r3, #1
 80088e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fc87 	bl	8009204 <hci_send_req>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da01      	bge.n	8008900 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80088fc:	23ff      	movs	r3, #255	; 0xff
 80088fe:	e002      	b.n	8008906 <aci_hal_write_config_data+0xc8>
  return status;
 8008900:	f107 030f 	add.w	r3, r7, #15
 8008904:	781b      	ldrb	r3, [r3, #0]
}
 8008906:	4618      	mov	r0, r3
 8008908:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b0cc      	sub	sp, #304	; 0x130
 8008914:	af00      	add	r7, sp, #0
 8008916:	4602      	mov	r2, r0
 8008918:	1dfb      	adds	r3, r7, #7
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	1dbb      	adds	r3, r7, #6
 800891e:	460a      	mov	r2, r1
 8008920:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008922:	f107 0310 	add.w	r3, r7, #16
 8008926:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800892a:	f107 030f 	add.w	r3, r7, #15
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893c:	1dfa      	adds	r2, r7, #7
 800893e:	7812      	ldrb	r2, [r2, #0]
 8008940:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008946:	3301      	adds	r3, #1
 8008948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800894c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008950:	1dba      	adds	r2, r7, #6
 8008952:	7812      	ldrb	r2, [r2, #0]
 8008954:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008956:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800895a:	3301      	adds	r3, #1
 800895c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008964:	2218      	movs	r2, #24
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f000 f975 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800896e:	233f      	movs	r3, #63	; 0x3f
 8008970:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008974:	230f      	movs	r3, #15
 8008976:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800897a:	f107 0310 	add.w	r3, r7, #16
 800897e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008982:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008986:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800898a:	f107 030f 	add.w	r3, r7, #15
 800898e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008992:	2301      	movs	r3, #1
 8008994:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fc30 	bl	8009204 <hci_send_req>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da01      	bge.n	80089ae <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80089aa:	23ff      	movs	r3, #255	; 0xff
 80089ac:	e002      	b.n	80089b4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80089ae:	f107 030f 	add.w	r3, r7, #15
 80089b2:	781b      	ldrb	r3, [r3, #0]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b0cc      	sub	sp, #304	; 0x130
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	4602      	mov	r2, r0
 80089c6:	1dbb      	adds	r3, r7, #6
 80089c8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80089ca:	f107 0310 	add.w	r3, r7, #16
 80089ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80089d2:	f107 030f 	add.w	r3, r7, #15
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80089e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e4:	1dba      	adds	r2, r7, #6
 80089e6:	8812      	ldrh	r2, [r2, #0]
 80089e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80089ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ee:	3302      	adds	r3, #2
 80089f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089f8:	2218      	movs	r2, #24
 80089fa:	2100      	movs	r1, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 f92b 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a02:	233f      	movs	r3, #63	; 0x3f
 8008a04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008a08:	2318      	movs	r3, #24
 8008a0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a0e:	f107 0310 	add.w	r3, r7, #16
 8008a12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a1e:	f107 030f 	add.w	r3, r7, #15
 8008a22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a26:	2301      	movs	r3, #1
 8008a28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fbe6 	bl	8009204 <hci_send_req>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da01      	bge.n	8008a42 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8008a3e:	23ff      	movs	r3, #255	; 0xff
 8008a40:	e002      	b.n	8008a48 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8008a42:	f107 030f 	add.w	r3, r7, #15
 8008a46:	781b      	ldrb	r3, [r3, #0]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b088      	sub	sp, #32
 8008a56:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a5c:	f107 0308 	add.w	r3, r7, #8
 8008a60:	2218      	movs	r2, #24
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f8f7 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x03;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008a72:	1dfb      	adds	r3, r7, #7
 8008a74:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008a76:	2301      	movs	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fbbf 	bl	8009204 <hci_send_req>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da01      	bge.n	8008a90 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008a8c:	23ff      	movs	r3, #255	; 0xff
 8008a8e:	e000      	b.n	8008a92 <hci_reset+0x40>
  return status;
 8008a90:	79fb      	ldrb	r3, [r7, #7]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b0ce      	sub	sp, #312	; 0x138
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	f107 0308 	add.w	r3, r7, #8
 8008aa4:	6019      	str	r1, [r3, #0]
 8008aa6:	1d3b      	adds	r3, r7, #4
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	f107 030e 	add.w	r3, r7, #14
 8008aae:	4602      	mov	r2, r0
 8008ab0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8008ab2:	f107 0318 	add.w	r3, r7, #24
 8008ab6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008aba:	f107 0310 	add.w	r3, r7, #16
 8008abe:	2205      	movs	r2, #5
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f8c8 	bl	8008c58 <Osal_MemSet>
  int index_input = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008ace:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ad2:	f107 020e 	add.w	r2, r7, #14
 8008ad6:	8812      	ldrh	r2, [r2, #0]
 8008ad8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ada:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ade:	3302      	adds	r3, #2
 8008ae0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ae4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008ae8:	2218      	movs	r2, #24
 8008aea:	2100      	movs	r1, #0
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f8b3 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x08;
 8008af2:	2308      	movs	r3, #8
 8008af4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8008af8:	2330      	movs	r3, #48	; 0x30
 8008afa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008afe:	f107 0318 	add.w	r3, r7, #24
 8008b02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008b06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008b0e:	f107 0310 	add.w	r3, r7, #16
 8008b12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008b16:	2305      	movs	r3, #5
 8008b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fb6e 	bl	8009204 <hci_send_req>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da01      	bge.n	8008b32 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8008b2e:	23ff      	movs	r3, #255	; 0xff
 8008b30:	e016      	b.n	8008b60 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8008b32:	f107 0310 	add.w	r3, r7, #16
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <hci_le_read_phy+0xaa>
    return resp.Status;
 8008b3c:	f107 0310 	add.w	r3, r7, #16
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	e00d      	b.n	8008b60 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8008b44:	f107 0310 	add.w	r3, r7, #16
 8008b48:	78da      	ldrb	r2, [r3, #3]
 8008b4a:	f107 0308 	add.w	r3, r7, #8
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8008b52:	f107 0310 	add.w	r3, r7, #16
 8008b56:	791a      	ldrb	r2, [r3, #4]
 8008b58:	1d3b      	adds	r3, r7, #4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008b6a:	b590      	push	{r4, r7, lr}
 8008b6c:	b0cd      	sub	sp, #308	; 0x134
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	4604      	mov	r4, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	4611      	mov	r1, r2
 8008b76:	1dfb      	adds	r3, r7, #7
 8008b78:	4622      	mov	r2, r4
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	1dbb      	adds	r3, r7, #6
 8008b7e:	4602      	mov	r2, r0
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	1d7b      	adds	r3, r7, #5
 8008b84:	460a      	mov	r2, r1
 8008b86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008b88:	f107 0310 	add.w	r3, r7, #16
 8008b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b90:	f107 030f 	add.w	r3, r7, #15
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ba2:	1dfa      	adds	r2, r7, #7
 8008ba4:	7812      	ldrb	r2, [r2, #0]
 8008ba6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bac:	3301      	adds	r3, #1
 8008bae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb6:	1dba      	adds	r2, r7, #6
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bca:	1d7a      	adds	r2, r7, #5
 8008bcc:	7812      	ldrb	r2, [r2, #0]
 8008bce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bde:	2218      	movs	r2, #24
 8008be0:	2100      	movs	r1, #0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f838 	bl	8008c58 <Osal_MemSet>
  rq.ogf = 0x08;
 8008be8:	2308      	movs	r3, #8
 8008bea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008bee:	2331      	movs	r3, #49	; 0x31
 8008bf0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c04:	f107 030f 	add.w	r3, r7, #15
 8008c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 faf3 	bl	8009204 <hci_send_req>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	da01      	bge.n	8008c28 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008c24:	23ff      	movs	r3, #255	; 0xff
 8008c26:	e002      	b.n	8008c2e <hci_le_set_default_phy+0xc4>
  return status;
 8008c28:	f107 030f 	add.w	r3, r7, #15
 8008c2c:	781b      	ldrb	r3, [r3, #0]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd90      	pop	{r4, r7, pc}

08008c38 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f004 fb97 	bl	800d37c <memcpy>
 8008c4e:	4603      	mov	r3, r0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f004 fb95 	bl	800d398 <memset>
 8008c6e:	4603      	mov	r3, r0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	; 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2bff      	cmp	r3, #255	; 0xff
 8008c92:	d158      	bne.n	8008d46 <PeerToPeer_Event_Handler+0xce>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	3302      	adds	r3, #2
 8008c98:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f640 4301 	movw	r3, #3073	; 0xc01
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d149      	bne.n	8008d3e <PeerToPeer_Event_Handler+0xc6>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	3302      	adds	r3, #2
 8008cae:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	885b      	ldrh	r3, [r3, #2]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	4b26      	ldr	r3, [pc, #152]	; (8008d54 <PeerToPeer_Event_Handler+0xdc>)
 8008cba:	889b      	ldrh	r3, [r3, #4]
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d118      	bne.n	8008cf4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	7a1b      	ldrb	r3, [r3, #8]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008cd8:	f107 0308 	add.w	r3, r7, #8
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f003 fe0f 	bl	800c900 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8008ce2:	e02e      	b.n	8008d42 <PeerToPeer_Event_Handler+0xca>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008ce8:	f107 0308 	add.w	r3, r7, #8
 8008cec:	4618      	mov	r0, r3
 8008cee:	f003 fe07 	bl	800c900 <P2PS_STM_App_Notification>
        break;
 8008cf2:	e026      	b.n	8008d42 <PeerToPeer_Event_Handler+0xca>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <PeerToPeer_Event_Handler+0xdc>)
 8008cfe:	885b      	ldrh	r3, [r3, #2]
 8008d00:	3301      	adds	r3, #1
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d11d      	bne.n	8008d42 <PeerToPeer_Event_Handler+0xca>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8008d06:	4814      	ldr	r0, [pc, #80]	; (8008d58 <PeerToPeer_Event_Handler+0xe0>)
 8008d08:	f000 ff4b 	bl	8009ba2 <DbgTraceGetFileName>
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	2396      	movs	r3, #150	; 0x96
 8008d10:	4a12      	ldr	r2, [pc, #72]	; (8008d5c <PeerToPeer_Event_Handler+0xe4>)
 8008d12:	4813      	ldr	r0, [pc, #76]	; (8008d60 <PeerToPeer_Event_Handler+0xe8>)
 8008d14:	f004 fb48 	bl	800d3a8 <iprintf>
 8008d18:	4812      	ldr	r0, [pc, #72]	; (8008d64 <PeerToPeer_Event_Handler+0xec>)
 8008d1a:	f004 fbcb 	bl	800d4b4 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	88db      	ldrh	r3, [r3, #6]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008d32:	f107 0308 	add.w	r3, r7, #8
 8008d36:	4618      	mov	r0, r3
 8008d38:	f003 fde2 	bl	800c900 <P2PS_STM_App_Notification>
        break;
 8008d3c:	e001      	b.n	8008d42 <PeerToPeer_Event_Handler+0xca>

        default:
          break;
 8008d3e:	bf00      	nop
 8008d40:	e002      	b.n	8008d48 <PeerToPeer_Event_Handler+0xd0>
        break;
 8008d42:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008d44:	e000      	b.n	8008d48 <PeerToPeer_Event_Handler+0xd0>

    default:
      break;
 8008d46:	bf00      	nop
  }

  return(return_value);
 8008d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3728      	adds	r7, #40	; 0x28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000140 	.word	0x20000140
 8008d58:	0800e848 	.word	0x0800e848
 8008d5c:	08010454 	.word	0x08010454
 8008d60:	0800e87c 	.word	0x0800e87c
 8008d64:	0800e890 	.word	0x0800e890

08008d68 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8008d6e:	484a      	ldr	r0, [pc, #296]	; (8008e98 <P2PS_STM_Init+0x130>)
 8008d70:	f000 f942 	bl	8008ff8 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008d74:	238f      	movs	r3, #143	; 0x8f
 8008d76:	703b      	strb	r3, [r7, #0]
 8008d78:	23e5      	movs	r3, #229	; 0xe5
 8008d7a:	707b      	strb	r3, [r7, #1]
 8008d7c:	23b3      	movs	r3, #179	; 0xb3
 8008d7e:	70bb      	strb	r3, [r7, #2]
 8008d80:	23d5      	movs	r3, #213	; 0xd5
 8008d82:	70fb      	strb	r3, [r7, #3]
 8008d84:	232e      	movs	r3, #46	; 0x2e
 8008d86:	713b      	strb	r3, [r7, #4]
 8008d88:	237f      	movs	r3, #127	; 0x7f
 8008d8a:	717b      	strb	r3, [r7, #5]
 8008d8c:	234a      	movs	r3, #74	; 0x4a
 8008d8e:	71bb      	strb	r3, [r7, #6]
 8008d90:	2398      	movs	r3, #152	; 0x98
 8008d92:	71fb      	strb	r3, [r7, #7]
 8008d94:	232a      	movs	r3, #42	; 0x2a
 8008d96:	723b      	strb	r3, [r7, #8]
 8008d98:	2348      	movs	r3, #72	; 0x48
 8008d9a:	727b      	strb	r3, [r7, #9]
 8008d9c:	237a      	movs	r3, #122	; 0x7a
 8008d9e:	72bb      	strb	r3, [r7, #10]
 8008da0:	23cc      	movs	r3, #204	; 0xcc
 8008da2:	72fb      	strb	r3, [r7, #11]
 8008da4:	2340      	movs	r3, #64	; 0x40
 8008da6:	733b      	strb	r3, [r7, #12]
 8008da8:	23fe      	movs	r3, #254	; 0xfe
 8008daa:	737b      	strb	r3, [r7, #13]
 8008dac:	2300      	movs	r3, #0
 8008dae:	73bb      	strb	r3, [r7, #14]
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8008db4:	4639      	mov	r1, r7
 8008db6:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <P2PS_STM_Init+0x134>)
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	2308      	movs	r3, #8
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	2002      	movs	r0, #2
 8008dc0:	f7ff fad2 	bl	8008368 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008dc4:	2319      	movs	r3, #25
 8008dc6:	703b      	strb	r3, [r7, #0]
 8008dc8:	23ed      	movs	r3, #237	; 0xed
 8008dca:	707b      	strb	r3, [r7, #1]
 8008dcc:	2382      	movs	r3, #130	; 0x82
 8008dce:	70bb      	strb	r3, [r7, #2]
 8008dd0:	23ae      	movs	r3, #174	; 0xae
 8008dd2:	70fb      	strb	r3, [r7, #3]
 8008dd4:	23ed      	movs	r3, #237	; 0xed
 8008dd6:	713b      	strb	r3, [r7, #4]
 8008dd8:	2321      	movs	r3, #33	; 0x21
 8008dda:	717b      	strb	r3, [r7, #5]
 8008ddc:	234c      	movs	r3, #76	; 0x4c
 8008dde:	71bb      	strb	r3, [r7, #6]
 8008de0:	239d      	movs	r3, #157	; 0x9d
 8008de2:	71fb      	strb	r3, [r7, #7]
 8008de4:	2341      	movs	r3, #65	; 0x41
 8008de6:	723b      	strb	r3, [r7, #8]
 8008de8:	2345      	movs	r3, #69	; 0x45
 8008dea:	727b      	strb	r3, [r7, #9]
 8008dec:	2322      	movs	r3, #34	; 0x22
 8008dee:	72bb      	strb	r3, [r7, #10]
 8008df0:	238e      	movs	r3, #142	; 0x8e
 8008df2:	72fb      	strb	r3, [r7, #11]
 8008df4:	2341      	movs	r3, #65	; 0x41
 8008df6:	733b      	strb	r3, [r7, #12]
 8008df8:	23fe      	movs	r3, #254	; 0xfe
 8008dfa:	737b      	strb	r3, [r7, #13]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73bb      	strb	r3, [r7, #14]
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008e04:	4b25      	ldr	r3, [pc, #148]	; (8008e9c <P2PS_STM_Init+0x134>)
 8008e06:	8818      	ldrh	r0, [r3, #0]
 8008e08:	463a      	mov	r2, r7
 8008e0a:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <P2PS_STM_Init+0x138>)
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	2301      	movs	r3, #1
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	230a      	movs	r3, #10
 8008e14:	9303      	str	r3, [sp, #12]
 8008e16:	2301      	movs	r3, #1
 8008e18:	9302      	str	r3, [sp, #8]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	2306      	movs	r3, #6
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	2302      	movs	r3, #2
 8008e24:	2102      	movs	r1, #2
 8008e26:	f7ff fb4e 	bl	80084c6 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8008e2a:	2319      	movs	r3, #25
 8008e2c:	703b      	strb	r3, [r7, #0]
 8008e2e:	23ed      	movs	r3, #237	; 0xed
 8008e30:	707b      	strb	r3, [r7, #1]
 8008e32:	2382      	movs	r3, #130	; 0x82
 8008e34:	70bb      	strb	r3, [r7, #2]
 8008e36:	23ae      	movs	r3, #174	; 0xae
 8008e38:	70fb      	strb	r3, [r7, #3]
 8008e3a:	23ed      	movs	r3, #237	; 0xed
 8008e3c:	713b      	strb	r3, [r7, #4]
 8008e3e:	2321      	movs	r3, #33	; 0x21
 8008e40:	717b      	strb	r3, [r7, #5]
 8008e42:	234c      	movs	r3, #76	; 0x4c
 8008e44:	71bb      	strb	r3, [r7, #6]
 8008e46:	239d      	movs	r3, #157	; 0x9d
 8008e48:	71fb      	strb	r3, [r7, #7]
 8008e4a:	2341      	movs	r3, #65	; 0x41
 8008e4c:	723b      	strb	r3, [r7, #8]
 8008e4e:	2345      	movs	r3, #69	; 0x45
 8008e50:	727b      	strb	r3, [r7, #9]
 8008e52:	2322      	movs	r3, #34	; 0x22
 8008e54:	72bb      	strb	r3, [r7, #10]
 8008e56:	238e      	movs	r3, #142	; 0x8e
 8008e58:	72fb      	strb	r3, [r7, #11]
 8008e5a:	2342      	movs	r3, #66	; 0x42
 8008e5c:	733b      	strb	r3, [r7, #12]
 8008e5e:	23fe      	movs	r3, #254	; 0xfe
 8008e60:	737b      	strb	r3, [r7, #13]
 8008e62:	2300      	movs	r3, #0
 8008e64:	73bb      	strb	r3, [r7, #14]
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <P2PS_STM_Init+0x134>)
 8008e6c:	8818      	ldrh	r0, [r3, #0]
 8008e6e:	463a      	mov	r2, r7
 8008e70:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <P2PS_STM_Init+0x13c>)
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	2301      	movs	r3, #1
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	230a      	movs	r3, #10
 8008e7a:	9303      	str	r3, [sp, #12]
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	9302      	str	r3, [sp, #8]
 8008e80:	2300      	movs	r3, #0
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	2310      	movs	r3, #16
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	2302      	movs	r3, #2
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	f7ff fb1b 	bl	80084c6 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8008e90:	bf00      	nop
}
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	08008c79 	.word	0x08008c79
 8008e9c:	20000140 	.word	0x20000140
 8008ea0:	20000142 	.word	0x20000142
 8008ea4:	20000144 	.word	0x20000144

08008ea8 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  return;
 8008eac:	bf00      	nop
}
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <BLS_Init>:

__weak void BLS_Init( void )
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	af00      	add	r7, sp, #0
  return;
 8008eba:	bf00      	nop
}
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
  return;
 8008ec8:	bf00      	nop
}
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <DIS_Init>:
__weak void DIS_Init( void )
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	af00      	add	r7, sp, #0
  return;
 8008ed6:	bf00      	nop
}
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  return;
 8008ee4:	bf00      	nop
}
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008eee:	b480      	push	{r7}
 8008ef0:	af00      	add	r7, sp, #0
  return;
 8008ef2:	bf00      	nop
}
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HRS_Init>:
__weak void HRS_Init( void )
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return;
 8008f00:	bf00      	nop
}
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <HTS_Init>:
__weak void HTS_Init( void )
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	af00      	add	r7, sp, #0
  return;
 8008f0e:	bf00      	nop
}
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  return;
 8008f1c:	bf00      	nop
}
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <LLS_Init>:
__weak void LLS_Init( void )
{
 8008f26:	b480      	push	{r7}
 8008f28:	af00      	add	r7, sp, #0
  return;
 8008f2a:	bf00      	nop
}
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <TPS_Init>:
__weak void TPS_Init( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  return;
 8008f38:	bf00      	nop
}
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8008f42:	b480      	push	{r7}
 8008f44:	af00      	add	r7, sp, #0
  return;
 8008f46:	bf00      	nop
}
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <ZDD_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void ZDD_STM_Init( void )
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  return;
 8008f54:	bf00      	nop
}
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8008f5e:	b480      	push	{r7}
 8008f60:	af00      	add	r7, sp, #0
  return;
 8008f62:	bf00      	nop
}
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <MESH_Init>:
__weak void MESH_Init( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  return;
 8008f70:	bf00      	nop
}
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	af00      	add	r7, sp, #0
  return;
 8008f7e:	bf00      	nop
}
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008f8c:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <SVCCTL_Init+0x18>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008f92:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <SVCCTL_Init+0x1c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008f98:	f000 f806 	bl	8008fa8 <SVCCTL_SvcInit>

  return;
 8008f9c:	bf00      	nop
}
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000148 	.word	0x20000148
 8008fa4:	20000168 	.word	0x20000168

08008fa8 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  BAS_Init();
 8008fac:	f7ff ff7c 	bl	8008ea8 <BAS_Init>

  BLS_Init();
 8008fb0:	f7ff ff81 	bl	8008eb6 <BLS_Init>

  CRS_STM_Init();
 8008fb4:	f7ff ff86 	bl	8008ec4 <CRS_STM_Init>

  DIS_Init();
 8008fb8:	f7ff ff8b 	bl	8008ed2 <DIS_Init>

  EDS_STM_Init();
 8008fbc:	f7ff ff90 	bl	8008ee0 <EDS_STM_Init>

  HIDS_Init();
 8008fc0:	f7ff ff95 	bl	8008eee <HIDS_Init>

  HRS_Init();
 8008fc4:	f7ff ff9a 	bl	8008efc <HRS_Init>

  HTS_Init();
 8008fc8:	f7ff ff9f 	bl	8008f0a <HTS_Init>

  IAS_Init();
 8008fcc:	f7ff ffa4 	bl	8008f18 <IAS_Init>

  LLS_Init();
 8008fd0:	f7ff ffa9 	bl	8008f26 <LLS_Init>

  TPS_Init();
 8008fd4:	f7ff ffae 	bl	8008f34 <TPS_Init>

  MOTENV_STM_Init();
 8008fd8:	f7ff ffb3 	bl	8008f42 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008fdc:	f7ff fec4 	bl	8008d68 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008fe0:	f7ff ffb6 	bl	8008f50 <ZDD_STM_Init>

  OTAS_STM_Init();
 8008fe4:	f7ff ffbb 	bl	8008f5e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008fe8:	f7ff ffc7 	bl	8008f7a <BVOPUS_STM_Init>

  MESH_Init();
 8008fec:	f7ff ffbe 	bl	8008f6c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008ff0:	f003 fa86 	bl	800c500 <SVCCTL_InitCustomSvc>
  
  return;
 8008ff4:	bf00      	nop
}
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <SVCCTL_RegisterSvcHandler+0x30>)
 8009002:	7f1b      	ldrb	r3, [r3, #28]
 8009004:	4619      	mov	r1, r3
 8009006:	4a08      	ldr	r2, [pc, #32]	; (8009028 <SVCCTL_RegisterSvcHandler+0x30>)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <SVCCTL_RegisterSvcHandler+0x30>)
 8009010:	7f1b      	ldrb	r3, [r3, #28]
 8009012:	3301      	adds	r3, #1
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b04      	ldr	r3, [pc, #16]	; (8009028 <SVCCTL_RegisterSvcHandler+0x30>)
 8009018:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800901a:	bf00      	nop
}
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20000148 	.word	0x20000148

0800902c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3301      	adds	r3, #1
 8009038:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2bff      	cmp	r3, #255	; 0xff
 8009044:	d125      	bne.n	8009092 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	3302      	adds	r3, #2
 800904a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800905a:	d118      	bne.n	800908e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800905c:	2300      	movs	r3, #0
 800905e:	757b      	strb	r3, [r7, #21]
 8009060:	e00d      	b.n	800907e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009062:	7d7b      	ldrb	r3, [r7, #21]
 8009064:	4a1a      	ldr	r2, [pc, #104]	; (80090d0 <SVCCTL_UserEvtRx+0xa4>)
 8009066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d108      	bne.n	800908a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009078:	7d7b      	ldrb	r3, [r7, #21]
 800907a:	3301      	adds	r3, #1
 800907c:	757b      	strb	r3, [r7, #21]
 800907e:	4b14      	ldr	r3, [pc, #80]	; (80090d0 <SVCCTL_UserEvtRx+0xa4>)
 8009080:	7f1b      	ldrb	r3, [r3, #28]
 8009082:	7d7a      	ldrb	r2, [r7, #21]
 8009084:	429a      	cmp	r2, r3
 8009086:	d3ec      	bcc.n	8009062 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009088:	e002      	b.n	8009090 <SVCCTL_UserEvtRx+0x64>
              break;
 800908a:	bf00      	nop
          break;
 800908c:	e000      	b.n	8009090 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800908e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009090:	e000      	b.n	8009094 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009092:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d00f      	beq.n	80090ba <SVCCTL_UserEvtRx+0x8e>
 800909a:	2b02      	cmp	r3, #2
 800909c:	dc10      	bgt.n	80090c0 <SVCCTL_UserEvtRx+0x94>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <SVCCTL_UserEvtRx+0x7c>
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d006      	beq.n	80090b4 <SVCCTL_UserEvtRx+0x88>
 80090a6:	e00b      	b.n	80090c0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 fbad 	bl	800a808 <SVCCTL_App_Notification>
 80090ae:	4603      	mov	r3, r0
 80090b0:	75bb      	strb	r3, [r7, #22]
      break;
 80090b2:	e008      	b.n	80090c6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80090b4:	2301      	movs	r3, #1
 80090b6:	75bb      	strb	r3, [r7, #22]
      break;
 80090b8:	e005      	b.n	80090c6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80090ba:	2300      	movs	r3, #0
 80090bc:	75bb      	strb	r3, [r7, #22]
      break;
 80090be:	e002      	b.n	80090c6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80090c0:	2301      	movs	r3, #1
 80090c2:	75bb      	strb	r3, [r7, #22]
      break;
 80090c4:	bf00      	nop
  }

  return (return_status);
 80090c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20000148 	.word	0x20000148

080090d4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80090dc:	f107 030c 	add.w	r3, r7, #12
 80090e0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2124      	movs	r1, #36	; 0x24
 80090ec:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80090f0:	f000 fa1e 	bl	8009530 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	330b      	adds	r3, #11
 80090f8:	78db      	ldrb	r3, [r3, #3]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3720      	adds	r7, #32
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b088      	sub	sp, #32
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800910a:	f107 030c 	add.w	r3, r7, #12
 800910e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	210f      	movs	r1, #15
 800911a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800911e:	f000 fa07 	bl	8009530 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	330b      	adds	r3, #11
 8009126:	78db      	ldrb	r3, [r3, #3]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4a08      	ldr	r2, [pc, #32]	; (8009160 <hci_init+0x30>)
 8009140:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009142:	4a08      	ldr	r2, [pc, #32]	; (8009164 <hci_init+0x34>)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009148:	4806      	ldr	r0, [pc, #24]	; (8009164 <hci_init+0x34>)
 800914a:	f000 f973 	bl	8009434 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f8d4 	bl	8009300 <TlInit>

  return;
 8009158:	bf00      	nop
}
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000288 	.word	0x20000288
 8009164:	20000260 	.word	0x20000260

08009168 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800916e:	4822      	ldr	r0, [pc, #136]	; (80091f8 <hci_user_evt_proc+0x90>)
 8009170:	f000 fe2c 	bl	8009dcc <LST_is_empty>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d12b      	bne.n	80091d2 <hci_user_evt_proc+0x6a>
 800917a:	4b20      	ldr	r3, [pc, #128]	; (80091fc <hci_user_evt_proc+0x94>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d027      	beq.n	80091d2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009182:	f107 030c 	add.w	r3, r7, #12
 8009186:	4619      	mov	r1, r3
 8009188:	481b      	ldr	r0, [pc, #108]	; (80091f8 <hci_user_evt_proc+0x90>)
 800918a:	f000 feae 	bl	8009eea <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800918e:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <hci_user_evt_proc+0x98>)
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00c      	beq.n	80091b0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800919a:	2301      	movs	r3, #1
 800919c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800919e:	4b18      	ldr	r3, [pc, #96]	; (8009200 <hci_user_evt_proc+0x98>)
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	1d3a      	adds	r2, r7, #4
 80091a4:	4610      	mov	r0, r2
 80091a6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80091a8:	793a      	ldrb	r2, [r7, #4]
 80091aa:	4b14      	ldr	r3, [pc, #80]	; (80091fc <hci_user_evt_proc+0x94>)
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	e002      	b.n	80091b6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80091b0:	4b12      	ldr	r3, [pc, #72]	; (80091fc <hci_user_evt_proc+0x94>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80091b6:	4b11      	ldr	r3, [pc, #68]	; (80091fc <hci_user_evt_proc+0x94>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d004      	beq.n	80091c8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fc03 	bl	80099cc <TL_MM_EvtDone>
 80091c6:	e004      	b.n	80091d2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4619      	mov	r1, r3
 80091cc:	480a      	ldr	r0, [pc, #40]	; (80091f8 <hci_user_evt_proc+0x90>)
 80091ce:	f000 fe1f 	bl	8009e10 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80091d2:	4809      	ldr	r0, [pc, #36]	; (80091f8 <hci_user_evt_proc+0x90>)
 80091d4:	f000 fdfa 	bl	8009dcc <LST_is_empty>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d107      	bne.n	80091ee <hci_user_evt_proc+0x86>
 80091de:	4b07      	ldr	r3, [pc, #28]	; (80091fc <hci_user_evt_proc+0x94>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80091e6:	4804      	ldr	r0, [pc, #16]	; (80091f8 <hci_user_evt_proc+0x90>)
 80091e8:	f001 ff5d 	bl	800b0a6 <hci_notify_asynch_evt>
  }


  return;
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
}
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000170 	.word	0x20000170
 80091fc:	2000017c 	.word	0x2000017c
 8009200:	20000260 	.word	0x20000260

08009204 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009210:	2000      	movs	r0, #0
 8009212:	f000 f8cb 	bl	80093ac <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009216:	2300      	movs	r3, #0
 8009218:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	885b      	ldrh	r3, [r3, #2]
 800921e:	b21b      	sxth	r3, r3
 8009220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009224:	b21a      	sxth	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	029b      	lsls	r3, r3, #10
 800922c:	b21b      	sxth	r3, r3
 800922e:	4313      	orrs	r3, r2
 8009230:	b21b      	sxth	r3, r3
 8009232:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	b2d9      	uxtb	r1, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	8bbb      	ldrh	r3, [r7, #28]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f88d 	bl	8009360 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009246:	e04e      	b.n	80092e6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009248:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800924c:	f001 ff42 	bl	800b0d4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009250:	e043      	b.n	80092da <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009252:	f107 030c 	add.w	r3, r7, #12
 8009256:	4619      	mov	r1, r3
 8009258:	4828      	ldr	r0, [pc, #160]	; (80092fc <hci_send_req+0xf8>)
 800925a:	f000 fe46 	bl	8009eea <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	7a5b      	ldrb	r3, [r3, #9]
 8009262:	2b0f      	cmp	r3, #15
 8009264:	d114      	bne.n	8009290 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	330b      	adds	r3, #11
 800926a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	885b      	ldrh	r3, [r3, #2]
 8009270:	b29b      	uxth	r3, r3
 8009272:	8bba      	ldrh	r2, [r7, #28]
 8009274:	429a      	cmp	r2, r3
 8009276:	d104      	bne.n	8009282 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	7812      	ldrb	r2, [r2, #0]
 8009280:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d027      	beq.n	80092da <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800928a:	2301      	movs	r3, #1
 800928c:	77fb      	strb	r3, [r7, #31]
 800928e:	e024      	b.n	80092da <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	330b      	adds	r3, #11
 8009294:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800929c:	b29b      	uxth	r3, r3
 800929e:	8bba      	ldrh	r2, [r7, #28]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d114      	bne.n	80092ce <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	7a9b      	ldrb	r3, [r3, #10]
 80092a8:	3b03      	subs	r3, #3
 80092aa:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	695a      	ldr	r2, [r3, #20]
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	bfa8      	it	ge
 80092b6:	461a      	movge	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6918      	ldr	r0, [r3, #16]
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	1cd9      	adds	r1, r3, #3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	461a      	mov	r2, r3
 80092ca:	f004 f857 	bl	800d37c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80092d6:	2301      	movs	r3, #1
 80092d8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80092da:	4808      	ldr	r0, [pc, #32]	; (80092fc <hci_send_req+0xf8>)
 80092dc:	f000 fd76 	bl	8009dcc <LST_is_empty>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0b5      	beq.n	8009252 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80092e6:	7ffb      	ldrb	r3, [r7, #31]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0ad      	beq.n	8009248 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80092ec:	2001      	movs	r0, #1
 80092ee:	f000 f85d 	bl	80093ac <NotifyCmdStatus>

  return 0;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3720      	adds	r7, #32
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000280 	.word	0x20000280

08009300 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009308:	480f      	ldr	r0, [pc, #60]	; (8009348 <TlInit+0x48>)
 800930a:	f000 fd4f 	bl	8009dac <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800930e:	4a0f      	ldr	r2, [pc, #60]	; (800934c <TlInit+0x4c>)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009314:	480e      	ldr	r0, [pc, #56]	; (8009350 <TlInit+0x50>)
 8009316:	f000 fd49 	bl	8009dac <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800931a:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <TlInit+0x54>)
 800931c:	2201      	movs	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <TlInit+0x58>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <TlInit+0x5c>)
 800932e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009330:	4b09      	ldr	r3, [pc, #36]	; (8009358 <TlInit+0x58>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f107 0208 	add.w	r2, r7, #8
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
  }

  return;
 800933c:	bf00      	nop
 800933e:	bf00      	nop
}
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000280 	.word	0x20000280
 800934c:	20000178 	.word	0x20000178
 8009350:	20000170 	.word	0x20000170
 8009354:	2000017c 	.word	0x2000017c
 8009358:	20000260 	.word	0x20000260
 800935c:	080093ed 	.word	0x080093ed

08009360 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	603a      	str	r2, [r7, #0]
 800936a:	80fb      	strh	r3, [r7, #6]
 800936c:	460b      	mov	r3, r1
 800936e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009370:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <SendCmd+0x44>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <SendCmd+0x44>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	797a      	ldrb	r2, [r7, #5]
 8009380:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009382:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <SendCmd+0x44>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	330c      	adds	r3, #12
 8009388:	797a      	ldrb	r2, [r7, #5]
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	4618      	mov	r0, r3
 800938e:	f003 fff5 	bl	800d37c <memcpy>

  hciContext.io.Send(0,0);
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <SendCmd+0x48>)
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2100      	movs	r1, #0
 8009398:	2000      	movs	r0, #0
 800939a:	4798      	blx	r3

  return;
 800939c:	bf00      	nop
}
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000178 	.word	0x20000178
 80093a8:	20000260 	.word	0x20000260

080093ac <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d108      	bne.n	80093ce <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <NotifyCmdStatus+0x3c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00d      	beq.n	80093e0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80093c4:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <NotifyCmdStatus+0x3c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2000      	movs	r0, #0
 80093ca:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80093cc:	e008      	b.n	80093e0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80093ce:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <NotifyCmdStatus+0x3c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80093d6:	4b04      	ldr	r3, [pc, #16]	; (80093e8 <NotifyCmdStatus+0x3c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2001      	movs	r0, #1
 80093dc:	4798      	blx	r3
  return;
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
}
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000288 	.word	0x20000288

080093ec <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7a5b      	ldrb	r3, [r3, #9]
 80093f8:	2b0f      	cmp	r3, #15
 80093fa:	d003      	beq.n	8009404 <TlEvtReceived+0x18>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7a5b      	ldrb	r3, [r3, #9]
 8009400:	2b0e      	cmp	r3, #14
 8009402:	d107      	bne.n	8009414 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	4809      	ldr	r0, [pc, #36]	; (800942c <TlEvtReceived+0x40>)
 8009408:	f000 fd28 	bl	8009e5c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800940c:	2000      	movs	r0, #0
 800940e:	f001 fe56 	bl	800b0be <hci_cmd_resp_release>
 8009412:	e006      	b.n	8009422 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	4806      	ldr	r0, [pc, #24]	; (8009430 <TlEvtReceived+0x44>)
 8009418:	f000 fd20 	bl	8009e5c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800941c:	4804      	ldr	r0, [pc, #16]	; (8009430 <TlEvtReceived+0x44>)
 800941e:	f001 fe42 	bl	800b0a6 <hci_notify_asynch_evt>
  }

  return;
 8009422:	bf00      	nop
}
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20000280 	.word	0x20000280
 8009430:	20000170 	.word	0x20000170

08009434 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a05      	ldr	r2, [pc, #20]	; (8009454 <hci_register_io_bus+0x20>)
 8009440:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a04      	ldr	r2, [pc, #16]	; (8009458 <hci_register_io_bus+0x24>)
 8009446:	611a      	str	r2, [r3, #16]

  return;
 8009448:	bf00      	nop
}
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	08009745 	.word	0x08009745
 8009458:	080097ad 	.word	0x080097ad

0800945c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	4a08      	ldr	r2, [pc, #32]	; (800948c <shci_init+0x30>)
 800946c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800946e:	4a08      	ldr	r2, [pc, #32]	; (8009490 <shci_init+0x34>)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009474:	4806      	ldr	r0, [pc, #24]	; (8009490 <shci_init+0x34>)
 8009476:	f000 f911 	bl	800969c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f000 f894 	bl	80095ac <TlInit>

  return;
 8009484:	bf00      	nop
}
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	200002ac 	.word	0x200002ac
 8009490:	2000028c 	.word	0x2000028c

08009494 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800949a:	4822      	ldr	r0, [pc, #136]	; (8009524 <shci_user_evt_proc+0x90>)
 800949c:	f000 fc96 	bl	8009dcc <LST_is_empty>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d12b      	bne.n	80094fe <shci_user_evt_proc+0x6a>
 80094a6:	4b20      	ldr	r3, [pc, #128]	; (8009528 <shci_user_evt_proc+0x94>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d027      	beq.n	80094fe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80094ae:	f107 030c 	add.w	r3, r7, #12
 80094b2:	4619      	mov	r1, r3
 80094b4:	481b      	ldr	r0, [pc, #108]	; (8009524 <shci_user_evt_proc+0x90>)
 80094b6:	f000 fd18 	bl	8009eea <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80094ba:	4b1c      	ldr	r3, [pc, #112]	; (800952c <shci_user_evt_proc+0x98>)
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00c      	beq.n	80094dc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80094c6:	2301      	movs	r3, #1
 80094c8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80094ca:	4b18      	ldr	r3, [pc, #96]	; (800952c <shci_user_evt_proc+0x98>)
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	1d3a      	adds	r2, r7, #4
 80094d0:	4610      	mov	r0, r2
 80094d2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80094d4:	793a      	ldrb	r2, [r7, #4]
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <shci_user_evt_proc+0x94>)
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	e002      	b.n	80094e2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80094dc:	4b12      	ldr	r3, [pc, #72]	; (8009528 <shci_user_evt_proc+0x94>)
 80094de:	2201      	movs	r2, #1
 80094e0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80094e2:	4b11      	ldr	r3, [pc, #68]	; (8009528 <shci_user_evt_proc+0x94>)
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fa6d 	bl	80099cc <TL_MM_EvtDone>
 80094f2:	e004      	b.n	80094fe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4619      	mov	r1, r3
 80094f8:	480a      	ldr	r0, [pc, #40]	; (8009524 <shci_user_evt_proc+0x90>)
 80094fa:	f000 fc89 	bl	8009e10 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80094fe:	4809      	ldr	r0, [pc, #36]	; (8009524 <shci_user_evt_proc+0x90>)
 8009500:	f000 fc64 	bl	8009dcc <LST_is_empty>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d107      	bne.n	800951a <shci_user_evt_proc+0x86>
 800950a:	4b07      	ldr	r3, [pc, #28]	; (8009528 <shci_user_evt_proc+0x94>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009512:	4804      	ldr	r0, [pc, #16]	; (8009524 <shci_user_evt_proc+0x90>)
 8009514:	f7f7 fab9 	bl	8000a8a <shci_notify_asynch_evt>
  }


  return;
 8009518:	bf00      	nop
 800951a:	bf00      	nop
}
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20000198 	.word	0x20000198
 8009528:	200001a8 	.word	0x200001a8
 800952c:	2000028c 	.word	0x2000028c

08009530 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60ba      	str	r2, [r7, #8]
 8009538:	607b      	str	r3, [r7, #4]
 800953a:	4603      	mov	r3, r0
 800953c:	81fb      	strh	r3, [r7, #14]
 800953e:	460b      	mov	r3, r1
 8009540:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009542:	2000      	movs	r0, #0
 8009544:	f000 f864 	bl	8009610 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009548:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <shci_send+0x74>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	89fa      	ldrh	r2, [r7, #14]
 800954e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009552:	4b14      	ldr	r3, [pc, #80]	; (80095a4 <shci_send+0x74>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	7b7a      	ldrb	r2, [r7, #13]
 8009558:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <shci_send+0x74>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	330c      	adds	r3, #12
 8009560:	7b7a      	ldrb	r2, [r7, #13]
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	4618      	mov	r0, r3
 8009566:	f003 ff09 	bl	800d37c <memcpy>

  shciContext.io.Send(0,0);
 800956a:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <shci_send+0x78>)
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2100      	movs	r1, #0
 8009570:	2000      	movs	r0, #0
 8009572:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009574:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009578:	f7f7 fa9e 	bl	8000ab8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f103 0008 	add.w	r0, r3, #8
 8009582:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <shci_send+0x74>)
 8009584:	6819      	ldr	r1, [r3, #0]
 8009586:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <shci_send+0x74>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	789b      	ldrb	r3, [r3, #2]
 800958c:	3303      	adds	r3, #3
 800958e:	461a      	mov	r2, r3
 8009590:	f003 fef4 	bl	800d37c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009594:	2001      	movs	r0, #1
 8009596:	f000 f83b 	bl	8009610 <Cmd_SetStatus>

  return;
 800959a:	bf00      	nop
}
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	200001a4 	.word	0x200001a4
 80095a8:	2000028c 	.word	0x2000028c

080095ac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80095b4:	4a10      	ldr	r2, [pc, #64]	; (80095f8 <TlInit+0x4c>)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80095ba:	4810      	ldr	r0, [pc, #64]	; (80095fc <TlInit+0x50>)
 80095bc:	f000 fbf6 	bl	8009dac <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80095c0:	2001      	movs	r0, #1
 80095c2:	f000 f825 	bl	8009610 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80095c6:	4b0e      	ldr	r3, [pc, #56]	; (8009600 <TlInit+0x54>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80095cc:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <TlInit+0x58>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00c      	beq.n	80095ee <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80095d8:	4b0b      	ldr	r3, [pc, #44]	; (8009608 <TlInit+0x5c>)
 80095da:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80095dc:	4b0b      	ldr	r3, [pc, #44]	; (800960c <TlInit+0x60>)
 80095de:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80095e0:	4b08      	ldr	r3, [pc, #32]	; (8009604 <TlInit+0x58>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f107 020c 	add.w	r2, r7, #12
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
  }

  return;
 80095ec:	bf00      	nop
 80095ee:	bf00      	nop
}
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200001a4 	.word	0x200001a4
 80095fc:	20000198 	.word	0x20000198
 8009600:	200001a8 	.word	0x200001a8
 8009604:	2000028c 	.word	0x2000028c
 8009608:	08009661 	.word	0x08009661
 800960c:	08009679 	.word	0x08009679

08009610 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009620:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <Cmd_SetStatus+0x48>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009628:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <Cmd_SetStatus+0x48>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2000      	movs	r0, #0
 800962e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009630:	4b0a      	ldr	r3, [pc, #40]	; (800965c <Cmd_SetStatus+0x4c>)
 8009632:	2200      	movs	r2, #0
 8009634:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009636:	e00b      	b.n	8009650 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009638:	4b08      	ldr	r3, [pc, #32]	; (800965c <Cmd_SetStatus+0x4c>)
 800963a:	2201      	movs	r2, #1
 800963c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800963e:	4b06      	ldr	r3, [pc, #24]	; (8009658 <Cmd_SetStatus+0x48>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009646:	4b04      	ldr	r3, [pc, #16]	; (8009658 <Cmd_SetStatus+0x48>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2001      	movs	r0, #1
 800964c:	4798      	blx	r3
  return;
 800964e:	bf00      	nop
 8009650:	bf00      	nop
}
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	200002ac 	.word	0x200002ac
 800965c:	200001a0 	.word	0x200001a0

08009660 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009668:	2000      	movs	r0, #0
 800966a:	f7f7 fa1a 	bl	8000aa2 <shci_cmd_resp_release>

  return;
 800966e:	bf00      	nop
}
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4805      	ldr	r0, [pc, #20]	; (8009698 <TlUserEvtReceived+0x20>)
 8009684:	f000 fbea 	bl	8009e5c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009688:	4803      	ldr	r0, [pc, #12]	; (8009698 <TlUserEvtReceived+0x20>)
 800968a:	f7f7 f9fe 	bl	8000a8a <shci_notify_asynch_evt>

  return;
 800968e:	bf00      	nop
}
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20000198 	.word	0x20000198

0800969c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a05      	ldr	r2, [pc, #20]	; (80096bc <shci_register_io_bus+0x20>)
 80096a8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a04      	ldr	r2, [pc, #16]	; (80096c0 <shci_register_io_bus+0x24>)
 80096ae:	611a      	str	r2, [r3, #16]

  return;
 80096b0:	bf00      	nop
}
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	08009859 	.word	0x08009859
 80096c0:	080098ad 	.word	0x080098ad

080096c4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80096c8:	f003 faec 	bl	800cca4 <HW_IPCC_Enable>

  return;
 80096cc:	bf00      	nop
}
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <TL_Init>:


void TL_Init( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80096d4:	4b10      	ldr	r3, [pc, #64]	; (8009718 <TL_Init+0x48>)
 80096d6:	4a11      	ldr	r2, [pc, #68]	; (800971c <TL_Init+0x4c>)
 80096d8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80096da:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <TL_Init+0x48>)
 80096dc:	4a10      	ldr	r2, [pc, #64]	; (8009720 <TL_Init+0x50>)
 80096de:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80096e0:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <TL_Init+0x48>)
 80096e2:	4a10      	ldr	r2, [pc, #64]	; (8009724 <TL_Init+0x54>)
 80096e4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80096e6:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <TL_Init+0x48>)
 80096e8:	4a0f      	ldr	r2, [pc, #60]	; (8009728 <TL_Init+0x58>)
 80096ea:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80096ec:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <TL_Init+0x48>)
 80096ee:	4a0f      	ldr	r2, [pc, #60]	; (800972c <TL_Init+0x5c>)
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <TL_Init+0x48>)
 80096f4:	4a0e      	ldr	r2, [pc, #56]	; (8009730 <TL_Init+0x60>)
 80096f6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80096f8:	4b07      	ldr	r3, [pc, #28]	; (8009718 <TL_Init+0x48>)
 80096fa:	4a0e      	ldr	r2, [pc, #56]	; (8009734 <TL_Init+0x64>)
 80096fc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80096fe:	4b06      	ldr	r3, [pc, #24]	; (8009718 <TL_Init+0x48>)
 8009700:	4a0d      	ldr	r2, [pc, #52]	; (8009738 <TL_Init+0x68>)
 8009702:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009704:	4b04      	ldr	r3, [pc, #16]	; (8009718 <TL_Init+0x48>)
 8009706:	4a0d      	ldr	r2, [pc, #52]	; (800973c <TL_Init+0x6c>)
 8009708:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800970a:	4b03      	ldr	r3, [pc, #12]	; (8009718 <TL_Init+0x48>)
 800970c:	4a0c      	ldr	r2, [pc, #48]	; (8009740 <TL_Init+0x70>)
 800970e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009710:	f003 fadc 	bl	800cccc <HW_IPCC_Init>

  return;
 8009714:	bf00      	nop
}
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20030000 	.word	0x20030000
 800971c:	20030028 	.word	0x20030028
 8009720:	20030048 	.word	0x20030048
 8009724:	20030058 	.word	0x20030058
 8009728:	20030064 	.word	0x20030064
 800972c:	2003006c 	.word	0x2003006c
 8009730:	20030074 	.word	0x20030074
 8009734:	2003007c 	.word	0x2003007c
 8009738:	20030098 	.word	0x20030098
 800973c:	2003009c 	.word	0x2003009c
 8009740:	200300a8 	.word	0x200300a8

08009744 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009750:	4811      	ldr	r0, [pc, #68]	; (8009798 <TL_BLE_Init+0x54>)
 8009752:	f000 fb2b 	bl	8009dac <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009756:	4b11      	ldr	r3, [pc, #68]	; (800979c <TL_BLE_Init+0x58>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4a0c      	ldr	r2, [pc, #48]	; (80097a0 <TL_BLE_Init+0x5c>)
 8009770:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4a08      	ldr	r2, [pc, #32]	; (8009798 <TL_BLE_Init+0x54>)
 8009776:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009778:	f003 fabe 	bl	800ccf8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a08      	ldr	r2, [pc, #32]	; (80097a4 <TL_BLE_Init+0x60>)
 8009782:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	4a07      	ldr	r2, [pc, #28]	; (80097a8 <TL_BLE_Init+0x64>)
 800978a:	6013      	str	r3, [r2, #0]

  return 0;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200300c4 	.word	0x200300c4
 800979c:	20030000 	.word	0x20030000
 80097a0:	20030a48 	.word	0x20030a48
 80097a4:	200002b8 	.word	0x200002b8
 80097a8:	200002bc 	.word	0x200002bc

080097ac <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80097b8:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <TL_BLE_SendCmd+0x34>)
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2201      	movs	r2, #1
 80097c0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <TL_BLE_SendCmd+0x34>)
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	2001      	movs	r0, #1
 80097cc:	f000 f96c 	bl	8009aa8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80097d0:	f003 fa9c 	bl	800cd0c <HW_IPCC_BLE_SendCmd>

  return 0;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20030000 	.word	0x20030000

080097e4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80097ea:	e01c      	b.n	8009826 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80097ec:	1d3b      	adds	r3, r7, #4
 80097ee:	4619      	mov	r1, r3
 80097f0:	4812      	ldr	r0, [pc, #72]	; (800983c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80097f2:	f000 fb7a 	bl	8009eea <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	7a5b      	ldrb	r3, [r3, #9]
 80097fa:	2b0f      	cmp	r3, #15
 80097fc:	d003      	beq.n	8009806 <HW_IPCC_BLE_RxEvtNot+0x22>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7a5b      	ldrb	r3, [r3, #9]
 8009802:	2b0e      	cmp	r3, #14
 8009804:	d105      	bne.n	8009812 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4619      	mov	r1, r3
 800980a:	2002      	movs	r0, #2
 800980c:	f000 f94c 	bl	8009aa8 <OutputDbgTrace>
 8009810:	e004      	b.n	800981c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4619      	mov	r1, r3
 8009816:	2003      	movs	r0, #3
 8009818:	f000 f946 	bl	8009aa8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800981c:	4b08      	ldr	r3, [pc, #32]	; (8009840 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	4610      	mov	r0, r2
 8009824:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009826:	4805      	ldr	r0, [pc, #20]	; (800983c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009828:	f000 fad0 	bl	8009dcc <LST_is_empty>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d0dc      	beq.n	80097ec <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009832:	bf00      	nop
}
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200300c4 	.word	0x200300c4
 8009840:	200002b8 	.word	0x200002b8

08009844 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009848:	4b02      	ldr	r3, [pc, #8]	; (8009854 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4798      	blx	r3

  return;
 800984e:	bf00      	nop
}
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200002bc 	.word	0x200002bc

08009858 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009864:	480d      	ldr	r0, [pc, #52]	; (800989c <TL_SYS_Init+0x44>)
 8009866:	f000 faa1 	bl	8009dac <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800986a:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <TL_SYS_Init+0x48>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	4a08      	ldr	r2, [pc, #32]	; (800989c <TL_SYS_Init+0x44>)
 800987c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800987e:	f003 fa67 	bl	800cd50 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a07      	ldr	r2, [pc, #28]	; (80098a4 <TL_SYS_Init+0x4c>)
 8009888:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	4a06      	ldr	r2, [pc, #24]	; (80098a8 <TL_SYS_Init+0x50>)
 8009890:	6013      	str	r3, [r2, #0]

  return 0;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	200300cc 	.word	0x200300cc
 80098a0:	20030000 	.word	0x20030000
 80098a4:	200002c0 	.word	0x200002c0
 80098a8:	200002c4 	.word	0x200002c4

080098ac <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80098b8:	4b09      	ldr	r3, [pc, #36]	; (80098e0 <TL_SYS_SendCmd+0x34>)
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2210      	movs	r2, #16
 80098c0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80098c2:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <TL_SYS_SendCmd+0x34>)
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4619      	mov	r1, r3
 80098ca:	2004      	movs	r0, #4
 80098cc:	f000 f8ec 	bl	8009aa8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80098d0:	f003 fa48 	bl	800cd64 <HW_IPCC_SYS_SendCmd>

  return 0;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20030000 	.word	0x20030000

080098e4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4619      	mov	r1, r3
 80098f0:	2005      	movs	r0, #5
 80098f2:	f000 f8d9 	bl	8009aa8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80098f6:	4b05      	ldr	r3, [pc, #20]	; (800990c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a03      	ldr	r2, [pc, #12]	; (8009908 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80098fc:	68d2      	ldr	r2, [r2, #12]
 80098fe:	6812      	ldr	r2, [r2, #0]
 8009900:	4610      	mov	r0, r2
 8009902:	4798      	blx	r3

  return;
 8009904:	bf00      	nop
}
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20030000 	.word	0x20030000
 800990c:	200002c0 	.word	0x200002c0

08009910 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009916:	e00e      	b.n	8009936 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009918:	1d3b      	adds	r3, r7, #4
 800991a:	4619      	mov	r1, r3
 800991c:	480b      	ldr	r0, [pc, #44]	; (800994c <HW_IPCC_SYS_EvtNot+0x3c>)
 800991e:	f000 fae4 	bl	8009eea <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4619      	mov	r1, r3
 8009926:	2006      	movs	r0, #6
 8009928:	f000 f8be 	bl	8009aa8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800992c:	4b08      	ldr	r3, [pc, #32]	; (8009950 <HW_IPCC_SYS_EvtNot+0x40>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4610      	mov	r0, r2
 8009934:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009936:	4805      	ldr	r0, [pc, #20]	; (800994c <HW_IPCC_SYS_EvtNot+0x3c>)
 8009938:	f000 fa48 	bl	8009dcc <LST_is_empty>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0ea      	beq.n	8009918 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009942:	bf00      	nop
}
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200300cc 	.word	0x200300cc
 8009950:	200002c4 	.word	0x200002c4

08009954 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800995c:	4817      	ldr	r0, [pc, #92]	; (80099bc <TL_MM_Init+0x68>)
 800995e:	f000 fa25 	bl	8009dac <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009962:	4817      	ldr	r0, [pc, #92]	; (80099c0 <TL_MM_Init+0x6c>)
 8009964:	f000 fa22 	bl	8009dac <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009968:	4b16      	ldr	r3, [pc, #88]	; (80099c4 <TL_MM_Init+0x70>)
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	4a16      	ldr	r2, [pc, #88]	; (80099c8 <TL_MM_Init+0x74>)
 800996e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009970:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <TL_MM_Init+0x74>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	6892      	ldr	r2, [r2, #8]
 8009978:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800997a:	4b13      	ldr	r3, [pc, #76]	; (80099c8 <TL_MM_Init+0x74>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	68d2      	ldr	r2, [r2, #12]
 8009982:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009984:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <TL_MM_Init+0x74>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a0c      	ldr	r2, [pc, #48]	; (80099bc <TL_MM_Init+0x68>)
 800998a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800998c:	4b0e      	ldr	r3, [pc, #56]	; (80099c8 <TL_MM_Init+0x74>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009996:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <TL_MM_Init+0x74>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6852      	ldr	r2, [r2, #4]
 800999e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80099a0:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <TL_MM_Init+0x74>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6912      	ldr	r2, [r2, #16]
 80099a8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80099aa:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <TL_MM_Init+0x74>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6952      	ldr	r2, [r2, #20]
 80099b2:	619a      	str	r2, [r3, #24]

  return;
 80099b4:	bf00      	nop
}
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	200300b4 	.word	0x200300b4
 80099c0:	200002b0 	.word	0x200002b0
 80099c4:	20030000 	.word	0x20030000
 80099c8:	200002c8 	.word	0x200002c8

080099cc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	4807      	ldr	r0, [pc, #28]	; (80099f4 <TL_MM_EvtDone+0x28>)
 80099d8:	f000 fa40 	bl	8009e5c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	2000      	movs	r0, #0
 80099e0:	f000 f862 	bl	8009aa8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80099e4:	4804      	ldr	r0, [pc, #16]	; (80099f8 <TL_MM_EvtDone+0x2c>)
 80099e6:	f003 f9e3 	bl	800cdb0 <HW_IPCC_MM_SendFreeBuf>

  return;
 80099ea:	bf00      	nop
}
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	200002b0 	.word	0x200002b0
 80099f8:	080099fd 	.word	0x080099fd

080099fc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009a02:	e00c      	b.n	8009a1e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009a04:	1d3b      	adds	r3, r7, #4
 8009a06:	4619      	mov	r1, r3
 8009a08:	480a      	ldr	r0, [pc, #40]	; (8009a34 <SendFreeBuf+0x38>)
 8009a0a:	f000 fa6e 	bl	8009eea <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009a0e:	4b0a      	ldr	r3, [pc, #40]	; (8009a38 <SendFreeBuf+0x3c>)
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 fa1f 	bl	8009e5c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009a1e:	4805      	ldr	r0, [pc, #20]	; (8009a34 <SendFreeBuf+0x38>)
 8009a20:	f000 f9d4 	bl	8009dcc <LST_is_empty>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0ec      	beq.n	8009a04 <SendFreeBuf+0x8>
  }

  return;
 8009a2a:	bf00      	nop
}
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	200002b0 	.word	0x200002b0
 8009a38:	20030000 	.word	0x20030000

08009a3c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009a40:	4805      	ldr	r0, [pc, #20]	; (8009a58 <TL_TRACES_Init+0x1c>)
 8009a42:	f000 f9b3 	bl	8009dac <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009a46:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <TL_TRACES_Init+0x20>)
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	4a03      	ldr	r2, [pc, #12]	; (8009a58 <TL_TRACES_Init+0x1c>)
 8009a4c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009a4e:	f003 f9e5 	bl	800ce1c <HW_IPCC_TRACES_Init>

  return;
 8009a52:	bf00      	nop
}
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	200300bc 	.word	0x200300bc
 8009a5c:	20030000 	.word	0x20030000

08009a60 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009a66:	e008      	b.n	8009a7a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009a68:	1d3b      	adds	r3, r7, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4808      	ldr	r0, [pc, #32]	; (8009a90 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009a6e:	f000 fa3c 	bl	8009eea <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f80d 	bl	8009a94 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009a7c:	f000 f9a6 	bl	8009dcc <LST_is_empty>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0f0      	beq.n	8009a68 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009a86:	bf00      	nop
}
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	200300bc 	.word	0x200300bc

08009a94 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	6039      	str	r1, [r7, #0]
 8009ab2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b06      	cmp	r3, #6
 8009ab8:	d845      	bhi.n	8009b46 <OutputDbgTrace+0x9e>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <OutputDbgTrace+0x18>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	08009b01 	.word	0x08009b01
 8009ac8:	08009b07 	.word	0x08009b07
 8009acc:	08009b1b 	.word	0x08009b1b
 8009ad0:	08009b27 	.word	0x08009b27
 8009ad4:	08009b2d 	.word	0x08009b2d
 8009ad8:	08009b3b 	.word	0x08009b3b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	7a5b      	ldrb	r3, [r3, #9]
 8009ae4:	2bff      	cmp	r3, #255	; 0xff
 8009ae6:	d005      	beq.n	8009af4 <OutputDbgTrace+0x4c>
 8009ae8:	2bff      	cmp	r3, #255	; 0xff
 8009aea:	dc05      	bgt.n	8009af8 <OutputDbgTrace+0x50>
 8009aec:	2b0e      	cmp	r3, #14
 8009aee:	d005      	beq.n	8009afc <OutputDbgTrace+0x54>
 8009af0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009af2:	e001      	b.n	8009af8 <OutputDbgTrace+0x50>
          break;
 8009af4:	bf00      	nop
 8009af6:	e027      	b.n	8009b48 <OutputDbgTrace+0xa0>
          break;
 8009af8:	bf00      	nop
 8009afa:	e025      	b.n	8009b48 <OutputDbgTrace+0xa0>
          break;
 8009afc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009afe:	e023      	b.n	8009b48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009b04:	e020      	b.n	8009b48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	7a5b      	ldrb	r3, [r3, #9]
 8009b0e:	2b0e      	cmp	r3, #14
 8009b10:	d001      	beq.n	8009b16 <OutputDbgTrace+0x6e>
 8009b12:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009b14:	e000      	b.n	8009b18 <OutputDbgTrace+0x70>
          break;
 8009b16:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009b18:	e016      	b.n	8009b48 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	7a5b      	ldrb	r3, [r3, #9]
 8009b22:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009b24:	e010      	b.n	8009b48 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009b2a:	e00d      	b.n	8009b48 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	7a5b      	ldrb	r3, [r3, #9]
 8009b34:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009b36:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009b38:	e006      	b.n	8009b48 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	7a5b      	ldrb	r3, [r3, #9]
 8009b42:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009b44:	e000      	b.n	8009b48 <OutputDbgTrace+0xa0>

    default:
      break;
 8009b46:	bf00      	nop
  }

  return;
 8009b48:	bf00      	nop
}
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009b5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009b60:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d013      	beq.n	8009b94 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8009b6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009b70:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8009b74:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8009b7c:	e000      	b.n	8009b80 <ITM_SendChar+0x2c>
    {
      __NOP();
 8009b7e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8009b80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0f9      	beq.n	8009b7e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8009b8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	b2d2      	uxtb	r2, r2
 8009b92:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8009b94:	687b      	ldr	r3, [r7, #4]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8009bae:	215c      	movs	r1, #92	; 0x5c
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f003 fc87 	bl	800d4c4 <strrchr>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d007      	beq.n	8009bcc <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8009bbc:	215c      	movs	r1, #92	; 0x5c
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f003 fc80 	bl	800d4c4 <strrchr>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	e00d      	b.n	8009be8 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8009bcc:	212f      	movs	r1, #47	; 0x2f
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f003 fc78 	bl	800d4c4 <strrchr>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d006      	beq.n	8009be8 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8009bda:	212f      	movs	r1, #47	; 0x2f
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f003 fc71 	bl	800d4c4 <strrchr>
 8009be2:	4603      	mov	r3, r0
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009be8:	68fb      	ldr	r3, [r7, #12]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009bfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c00:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c04:	b672      	cpsid	i
}
 8009c06:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009c08:	1cbb      	adds	r3, r7, #2
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4812      	ldr	r0, [pc, #72]	; (8009c58 <DbgTrace_TxCpltCallback+0x64>)
 8009c0e:	f000 fbb2 	bl	800a376 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009c12:	1cbb      	adds	r3, r7, #2
 8009c14:	4619      	mov	r1, r3
 8009c16:	4810      	ldr	r0, [pc, #64]	; (8009c58 <DbgTrace_TxCpltCallback+0x64>)
 8009c18:	f000 fc9e 	bl	800a558 <CircularQueue_Sense>
 8009c1c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00c      	beq.n	8009c3e <DbgTrace_TxCpltCallback+0x4a>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009c30:	887b      	ldrh	r3, [r7, #2]
 8009c32:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <DbgTrace_TxCpltCallback+0x68>)
 8009c34:	4619      	mov	r1, r3
 8009c36:	6938      	ldr	r0, [r7, #16]
 8009c38:	f7f6 fc92 	bl	8000560 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009c3c:	e008      	b.n	8009c50 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009c3e:	4b08      	ldr	r3, [pc, #32]	; (8009c60 <DbgTrace_TxCpltCallback+0x6c>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f383 8810 	msr	PRIMASK, r3
}
 8009c4e:	bf00      	nop
}
 8009c50:	bf00      	nop
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	200002cc 	.word	0x200002cc
 8009c5c:	08009bf5 	.word	0x08009bf5
 8009c60:	2000000d 	.word	0x2000000d

08009c64 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f805 	bl	8009c84 <DbgTraceWrite>
 8009c7a:	4603      	mov	r3, r0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08c      	sub	sp, #48	; 0x30
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c94:	f3ef 8310 	mrs	r3, PRIMASK
 8009c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c9a:	69fb      	ldr	r3, [r7, #28]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24


    //int _write(int file, char *ptr, int len)
     //{
     	int DataIdx;
     	SendUART(buf, bufSize);
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	68b8      	ldr	r0, [r7, #8]
 8009ca2:	f7f8 f927 	bl	8001ef4 <SendUART>
     	for (DataIdx = 0; DataIdx < bufSize; DataIdx++)
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009caa:	e009      	b.n	8009cc0 <DbgTraceWrite+0x3c>
     	{
     		//__io_putchar(*ptr++);
     		ITM_SendChar(*buf++);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	60ba      	str	r2, [r7, #8]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ff4d 	bl	8009b54 <ITM_SendChar>
     	for (DataIdx = 0; DataIdx < bufSize; DataIdx++)
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d8f1      	bhi.n	8009cac <DbgTraceWrite+0x28>
     //}



  /* Ignore flushes */
  if ( handle == -1 )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cce:	d102      	bne.n	8009cd6 <DbgTraceWrite+0x52>
  {
    chars_written = ( size_t ) 0;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd4:	e037      	b.n	8009d46 <DbgTraceWrite+0xc2>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d006      	beq.n	8009cea <DbgTraceWrite+0x66>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d003      	beq.n	8009cea <DbgTraceWrite+0x66>
  {
    chars_written = ( size_t ) - 1;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ce8:	e02d      	b.n	8009d46 <DbgTraceWrite+0xc2>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d02a      	beq.n	8009d46 <DbgTraceWrite+0xc2>
  {
    chars_written = bufSize;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8009cf4:	b672      	cpsid	i
}
 8009cf6:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	4813      	ldr	r0, [pc, #76]	; (8009d50 <DbgTraceWrite+0xcc>)
 8009d02:	f000 f911 	bl	8009f28 <CircularQueue_Add>
 8009d06:	6238      	str	r0, [r7, #32]
    if (buffer && DbgTracePeripheralReady)
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d015      	beq.n	8009d3a <DbgTraceWrite+0xb6>
 8009d0e:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <DbgTraceWrite+0xd0>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d010      	beq.n	8009d3a <DbgTraceWrite+0xb6>
    {
      DbgTracePeripheralReady = RESET;
 8009d18:	4b0e      	ldr	r3, [pc, #56]	; (8009d54 <DbgTraceWrite+0xd0>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f383 8810 	msr	PRIMASK, r3
}
 8009d28:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	4a0a      	ldr	r2, [pc, #40]	; (8009d58 <DbgTraceWrite+0xd4>)
 8009d30:	4619      	mov	r1, r3
 8009d32:	6a38      	ldr	r0, [r7, #32]
 8009d34:	f7f6 fc14 	bl	8000560 <DbgOutputTraces>
 8009d38:	e005      	b.n	8009d46 <DbgTraceWrite+0xc2>
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f383 8810 	msr	PRIMASK, r3
}
 8009d44:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3730      	adds	r7, #48	; 0x30
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	200002cc 	.word	0x200002cc
 8009d54:	2000000d 	.word	0x2000000d
 8009d58:	08009bf5 	.word	0x08009bf5

08009d5c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009d66:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <OTP_Read+0x48>)
 8009d68:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009d6a:	e002      	b.n	8009d72 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3b08      	subs	r3, #8
 8009d70:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3307      	adds	r3, #7
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	79fa      	ldrb	r2, [r7, #7]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d003      	beq.n	8009d86 <OTP_Read+0x2a>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4a09      	ldr	r2, [pc, #36]	; (8009da8 <OTP_Read+0x4c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d1f2      	bne.n	8009d6c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3307      	adds	r3, #7
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	79fa      	ldrb	r2, [r7, #7]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d001      	beq.n	8009d96 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009d96:	68fb      	ldr	r3, [r7, #12]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	1fff73f8 	.word	0x1fff73f8
 8009da8:	1fff7000 	.word	0x1fff7000

08009dac <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	605a      	str	r2, [r3, #4]
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dda:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dde:	b672      	cpsid	i
}
 8009de0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d102      	bne.n	8009df2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
 8009df0:	e001      	b.n	8009df6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75fb      	strb	r3, [r7, #23]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	f383 8810 	msr	PRIMASK, r3
}
 8009e00:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	371c      	adds	r7, #28
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e20:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009e22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e24:	b672      	cpsid	i
}
 8009e26:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	605a      	str	r2, [r3, #4]
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f383 8810 	msr	PRIMASK, r3
}
 8009e4e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009e50:	bf00      	nop
 8009e52:	371c      	adds	r7, #28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e66:	f3ef 8310 	mrs	r3, PRIMASK
 8009e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009e6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e70:	b672      	cpsid	i
}
 8009e72:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f383 8810 	msr	PRIMASK, r3
}
 8009e9a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009e9c:	bf00      	nop
 8009e9e:	371c      	adds	r7, #28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eba:	b672      	cpsid	i
}
 8009ebc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	6852      	ldr	r2, [r2, #4]
 8009ed0:	605a      	str	r2, [r3, #4]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f383 8810 	msr	PRIMASK, r3
}
 8009edc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b086      	sub	sp, #24
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009efe:	b672      	cpsid	i
}
 8009f00:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff ffca 	bl	8009ea8 <LST_remove_node>
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f383 8810 	msr	PRIMASK, r3
}
 8009f1e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009f20:	bf00      	nop
 8009f22:	3718      	adds	r7, #24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08e      	sub	sp, #56	; 0x38
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	4613      	mov	r3, r2
 8009f36:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009f38:	2300      	movs	r3, #0
 8009f3a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009f40:	2300      	movs	r3, #0
 8009f42:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009f44:	2300      	movs	r3, #0
 8009f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f48:	2300      	movs	r3, #0
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009f50:	2300      	movs	r3, #0
 8009f52:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	891b      	ldrh	r3, [r3, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <CircularQueue_Add+0x38>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e000      	b.n	8009f62 <CircularQueue_Add+0x3a>
 8009f60:	2300      	movs	r3, #0
 8009f62:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d02a      	beq.n	8009fc2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	891b      	ldrh	r3, [r3, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d123      	bne.n	8009fbc <CircularQueue_Add+0x94>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6819      	ldr	r1, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	1c58      	adds	r0, r3, #1
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4298      	cmp	r0, r3
 8009f92:	d306      	bcc.n	8009fa2 <CircularQueue_Add+0x7a>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6918      	ldr	r0, [r3, #16]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	1ac3      	subs	r3, r0, r3
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	e002      	b.n	8009fa8 <CircularQueue_Add+0x80>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	440b      	add	r3, r1
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	3302      	adds	r3, #2
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	e001      	b.n	8009fc0 <CircularQueue_Add+0x98>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	891b      	ldrh	r3, [r3, #8]
 8009fc0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	891b      	ldrh	r3, [r3, #8]
 8009fce:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d307      	bcc.n	8009fec <CircularQueue_Add+0xc4>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6919      	ldr	r1, [r3, #16]
 8009fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fe6:	440b      	add	r3, r1
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	e000      	b.n	8009fee <CircularQueue_Add+0xc6>
 8009fec:	2300      	movs	r3, #0
 8009fee:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009ff0:	88fa      	ldrh	r2, [r7, #6]
 8009ff2:	7ffb      	ldrb	r3, [r7, #31]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	fb03 f302 	mul.w	r3, r3, r2
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	429a      	cmp	r2, r3
 800a002:	d80b      	bhi.n	800a01c <CircularQueue_Add+0xf4>
 800a004:	88fa      	ldrh	r2, [r7, #6]
 800a006:	7ffb      	ldrb	r3, [r7, #31]
 800a008:	4413      	add	r3, r2
 800a00a:	461a      	mov	r2, r3
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a012:	fb02 f201 	mul.w	r2, r2, r1
 800a016:	1a9b      	subs	r3, r3, r2
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	e000      	b.n	800a01e <CircularQueue_Add+0xf6>
 800a01c:	2300      	movs	r3, #0
 800a01e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a020:	7dfa      	ldrb	r2, [r7, #23]
 800a022:	7ffb      	ldrb	r3, [r7, #31]
 800a024:	429a      	cmp	r2, r3
 800a026:	bf8c      	ite	hi
 800a028:	2301      	movhi	r3, #1
 800a02a:	2300      	movls	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a030:	7fbb      	ldrb	r3, [r7, #30]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d008      	beq.n	800a048 <CircularQueue_Add+0x120>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	7f1b      	ldrb	r3, [r3, #28]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <CircularQueue_Add+0x120>
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	b29b      	uxth	r3, r3
 800a046:	e000      	b.n	800a04a <CircularQueue_Add+0x122>
 800a048:	8bbb      	ldrh	r3, [r7, #28]
 800a04a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a04c:	7fbb      	ldrb	r3, [r7, #30]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d008      	beq.n	800a064 <CircularQueue_Add+0x13c>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	7f1b      	ldrb	r3, [r3, #28]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <CircularQueue_Add+0x13c>
 800a05e:	7ffb      	ldrb	r3, [r7, #31]
 800a060:	b29b      	uxth	r3, r3
 800a062:	e000      	b.n	800a066 <CircularQueue_Add+0x13e>
 800a064:	8bbb      	ldrh	r3, [r7, #28]
 800a066:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 817e 	beq.w	800a36c <CircularQueue_Add+0x444>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	695a      	ldr	r2, [r3, #20]
 800a074:	88f9      	ldrh	r1, [r7, #6]
 800a076:	7ffb      	ldrb	r3, [r7, #31]
 800a078:	440b      	add	r3, r1
 800a07a:	4619      	mov	r1, r3
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	fb03 f301 	mul.w	r3, r3, r1
 800a082:	441a      	add	r2, r3
 800a084:	8bbb      	ldrh	r3, [r7, #28]
 800a086:	441a      	add	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	f200 816d 	bhi.w	800a36c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a092:	2300      	movs	r3, #0
 800a094:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a096:	e14a      	b.n	800a32e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	691a      	ldr	r2, [r3, #16]
 800a09c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a09e:	441a      	add	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d307      	bcc.n	800a0b8 <CircularQueue_Add+0x190>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a0ae:	441a      	add	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	e003      	b.n	800a0c0 <CircularQueue_Add+0x198>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a0be:	4413      	add	r3, r2
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	891b      	ldrh	r3, [r3, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d130      	bne.n	800a134 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	1c59      	adds	r1, r3, #1
 800a0da:	6339      	str	r1, [r7, #48]	; 0x30
 800a0dc:	4413      	add	r3, r2
 800a0de:	88fa      	ldrh	r2, [r7, #6]
 800a0e0:	b2d2      	uxtb	r2, r2
 800a0e2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d304      	bcc.n	800a0f8 <CircularQueue_Add+0x1d0>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	e000      	b.n	800a0fa <CircularQueue_Add+0x1d2>
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fa:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	0a1b      	lsrs	r3, r3, #8
 800a100:	b298      	uxth	r0, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	1c59      	adds	r1, r3, #1
 800a10a:	6339      	str	r1, [r7, #48]	; 0x30
 800a10c:	4413      	add	r3, r2
 800a10e:	b2c2      	uxtb	r2, r0
 800a110:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a118:	429a      	cmp	r2, r3
 800a11a:	d304      	bcc.n	800a126 <CircularQueue_Add+0x1fe>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	e000      	b.n	800a128 <CircularQueue_Add+0x200>
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	1c9a      	adds	r2, r3, #2
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a134:	88fa      	ldrh	r2, [r7, #6]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6859      	ldr	r1, [r3, #4]
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	1acb      	subs	r3, r1, r3
 800a13e:	4293      	cmp	r3, r2
 800a140:	bf28      	it	cs
 800a142:	4613      	movcs	r3, r2
 800a144:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d007      	beq.n	800a15e <CircularQueue_Add+0x236>
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a152:	429a      	cmp	r2, r3
 800a154:	d225      	bcs.n	800a1a2 <CircularQueue_Add+0x27a>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	7f1b      	ldrb	r3, [r3, #28]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d121      	bne.n	800a1a2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	18d0      	adds	r0, r2, r3
 800a166:	88fb      	ldrh	r3, [r7, #6]
 800a168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a16a:	fb02 f303 	mul.w	r3, r2, r3
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	4413      	add	r3, r2
 800a172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a174:	4619      	mov	r1, r3
 800a176:	f003 f901 	bl	800d37c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	695a      	ldr	r2, [r3, #20]
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	441a      	add	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a186:	2300      	movs	r3, #0
 800a188:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a18e:	88fa      	ldrh	r2, [r7, #6]
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a196:	7ffb      	ldrb	r3, [r7, #31]
 800a198:	b29a      	uxth	r2, r3
 800a19a:	88fb      	ldrh	r3, [r7, #6]
 800a19c:	4413      	add	r3, r2
 800a19e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a1a0:	e0a4      	b.n	800a2ec <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80a1 	beq.w	800a2ec <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	7f1b      	ldrb	r3, [r3, #28]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d03a      	beq.n	800a22c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	891b      	ldrh	r3, [r3, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10d      	bne.n	800a1da <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	3b02      	subs	r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	22ff      	movs	r2, #255	; 0xff
 800a1ca:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	22ff      	movs	r2, #255	; 0xff
 800a1d8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	695a      	ldr	r2, [r3, #20]
 800a1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e0:	441a      	add	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a1ea:	88fb      	ldrh	r3, [r7, #6]
 800a1ec:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	891b      	ldrh	r3, [r3, #8]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d16f      	bne.n	800a2da <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	1c59      	adds	r1, r3, #1
 800a202:	6339      	str	r1, [r7, #48]	; 0x30
 800a204:	4413      	add	r3, r2
 800a206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	0a18      	lsrs	r0, r3, #8
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a216:	1c59      	adds	r1, r3, #1
 800a218:	6339      	str	r1, [r7, #48]	; 0x30
 800a21a:	4413      	add	r3, r2
 800a21c:	b2c2      	uxtb	r2, r0
 800a21e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	1c9a      	adds	r2, r3, #2
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	615a      	str	r2, [r3, #20]
 800a22a:	e056      	b.n	800a2da <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	7f1b      	ldrb	r3, [r3, #28]
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d050      	beq.n	800a2da <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	891b      	ldrh	r3, [r3, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d14a      	bne.n	800a2d6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	3b02      	subs	r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a24c:	b2d2      	uxtb	r2, r2
 800a24e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	0a19      	lsrs	r1, r3, #8
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25a:	3b01      	subs	r3, #1
 800a25c:	4413      	add	r3, r2
 800a25e:	b2ca      	uxtb	r2, r1
 800a260:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	18d0      	adds	r0, r2, r3
 800a26a:	88fb      	ldrh	r3, [r7, #6]
 800a26c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a26e:	fb02 f303 	mul.w	r3, r2, r3
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	4413      	add	r3, r2
 800a276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a278:	4619      	mov	r1, r3
 800a27a:	f003 f87f 	bl	800d37c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	695a      	ldr	r2, [r3, #20]
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	441a      	add	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a28e:	88fa      	ldrh	r2, [r7, #6]
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	1c59      	adds	r1, r3, #1
 800a2ac:	6339      	str	r1, [r7, #48]	; 0x30
 800a2ae:	4413      	add	r3, r2
 800a2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	0a18      	lsrs	r0, r3, #8
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	1c59      	adds	r1, r3, #1
 800a2c2:	6339      	str	r1, [r7, #48]	; 0x30
 800a2c4:	4413      	add	r3, r2
 800a2c6:	b2c2      	uxtb	r2, r0
 800a2c8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	1c9a      	adds	r2, r3, #2
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	615a      	str	r2, [r3, #20]
 800a2d4:	e001      	b.n	800a2da <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e049      	b.n	800a36e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	4413      	add	r3, r2
 800a2e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d015      	beq.n	800a31e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	18d0      	adds	r0, r2, r3
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2fe:	fb02 f203 	mul.w	r2, r2, r3
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	4413      	add	r3, r2
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	4413      	add	r3, r2
 800a30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a30c:	4619      	mov	r1, r3
 800a30e:	f003 f835 	bl	800d37c <memcpy>
        q->byteCount += NbBytesToCopy;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	695a      	ldr	r2, [r3, #20]
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	441a      	add	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	3301      	adds	r3, #1
 800a32c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a32e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	429a      	cmp	r2, r3
 800a334:	f4ff aeb0 	bcc.w	800a098 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6919      	ldr	r1, [r3, #16]
 800a340:	7ffb      	ldrb	r3, [r7, #31]
 800a342:	4419      	add	r1, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	4299      	cmp	r1, r3
 800a34a:	d307      	bcc.n	800a35c <CircularQueue_Add+0x434>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6919      	ldr	r1, [r3, #16]
 800a350:	7ffb      	ldrb	r3, [r7, #31]
 800a352:	4419      	add	r1, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	1acb      	subs	r3, r1, r3
 800a35a:	e003      	b.n	800a364 <CircularQueue_Add+0x43c>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6919      	ldr	r1, [r3, #16]
 800a360:	7ffb      	ldrb	r3, [r7, #31]
 800a362:	440b      	add	r3, r1
 800a364:	4413      	add	r3, r2
 800a366:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	e000      	b.n	800a36e <CircularQueue_Add+0x446>
    return NULL;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3738      	adds	r7, #56	; 0x38
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a376:	b480      	push	{r7}
 800a378:	b085      	sub	sp, #20
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	891b      	ldrh	r3, [r3, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <CircularQueue_Remove+0x1e>
 800a390:	2302      	movs	r3, #2
 800a392:	e000      	b.n	800a396 <CircularQueue_Remove+0x20>
 800a394:	2300      	movs	r3, #0
 800a396:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 80cc 	beq.w	800a53e <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	891b      	ldrh	r3, [r3, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d121      	bne.n	800a3f2 <CircularQueue_Remove+0x7c>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6819      	ldr	r1, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	1c58      	adds	r0, r3, #1
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	4298      	cmp	r0, r3
 800a3cc:	d306      	bcc.n	800a3dc <CircularQueue_Remove+0x66>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68d8      	ldr	r0, [r3, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	1ac3      	subs	r3, r0, r3
 800a3d8:	3301      	adds	r3, #1
 800a3da:	e002      	b.n	800a3e2 <CircularQueue_Remove+0x6c>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	440b      	add	r3, r1
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	021b      	lsls	r3, r3, #8
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	4413      	add	r3, r2
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	e001      	b.n	800a3f6 <CircularQueue_Remove+0x80>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	891b      	ldrh	r3, [r3, #8]
 800a3f6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7f1b      	ldrb	r3, [r3, #28]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d057      	beq.n	800a4b4 <CircularQueue_Remove+0x13e>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	7f1b      	ldrb	r3, [r3, #28]
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d151      	bne.n	800a4b4 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a410:	897b      	ldrh	r3, [r7, #10]
 800a412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a416:	4293      	cmp	r3, r2
 800a418:	d103      	bne.n	800a422 <CircularQueue_Remove+0xac>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	891b      	ldrh	r3, [r3, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d012      	beq.n	800a448 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d942      	bls.n	800a4b4 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	891b      	ldrh	r3, [r3, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d03e      	beq.n	800a4b4 <CircularQueue_Remove+0x13e>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	8912      	ldrh	r2, [r2, #8]
 800a444:	4293      	cmp	r3, r2
 800a446:	d235      	bcs.n	800a4b4 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	695a      	ldr	r2, [r3, #20]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68d9      	ldr	r1, [r3, #12]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	1acb      	subs	r3, r1, r3
 800a456:	441a      	add	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	891b      	ldrh	r3, [r3, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d121      	bne.n	800a4ae <CircularQueue_Remove+0x138>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	4413      	add	r3, r2
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	b29a      	uxth	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6819      	ldr	r1, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	1c58      	adds	r0, r3, #1
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	4298      	cmp	r0, r3
 800a488:	d306      	bcc.n	800a498 <CircularQueue_Remove+0x122>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68d8      	ldr	r0, [r3, #12]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	1ac3      	subs	r3, r0, r3
 800a494:	3301      	adds	r3, #1
 800a496:	e002      	b.n	800a49e <CircularQueue_Remove+0x128>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	440b      	add	r3, r1
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	021b      	lsls	r3, r3, #8
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	e001      	b.n	800a4b2 <CircularQueue_Remove+0x13c>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	891b      	ldrh	r3, [r3, #8]
 800a4b2:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68d9      	ldr	r1, [r3, #12]
 800a4bc:	7a7b      	ldrb	r3, [r7, #9]
 800a4be:	4419      	add	r1, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4299      	cmp	r1, r3
 800a4c6:	d307      	bcc.n	800a4d8 <CircularQueue_Remove+0x162>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68d9      	ldr	r1, [r3, #12]
 800a4cc:	7a7b      	ldrb	r3, [r7, #9]
 800a4ce:	4419      	add	r1, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	1acb      	subs	r3, r1, r3
 800a4d6:	e003      	b.n	800a4e0 <CircularQueue_Remove+0x16a>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68d9      	ldr	r1, [r3, #12]
 800a4dc:	7a7b      	ldrb	r3, [r7, #9]
 800a4de:	440b      	add	r3, r1
 800a4e0:	4413      	add	r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	8979      	ldrh	r1, [r7, #10]
 800a4ea:	7a7a      	ldrb	r2, [r7, #9]
 800a4ec:	440a      	add	r2, r1
 800a4ee:	1a9a      	subs	r2, r3, r2
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	897b      	ldrh	r3, [r7, #10]
 800a502:	441a      	add	r2, r3
 800a504:	7a7b      	ldrb	r3, [r7, #9]
 800a506:	441a      	add	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d309      	bcc.n	800a524 <CircularQueue_Remove+0x1ae>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	897b      	ldrh	r3, [r7, #10]
 800a516:	441a      	add	r2, r3
 800a518:	7a7b      	ldrb	r3, [r7, #9]
 800a51a:	441a      	add	r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	e005      	b.n	800a530 <CircularQueue_Remove+0x1ba>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68da      	ldr	r2, [r3, #12]
 800a528:	897b      	ldrh	r3, [r7, #10]
 800a52a:	441a      	add	r2, r3
 800a52c:	7a7b      	ldrb	r3, [r7, #9]
 800a52e:	4413      	add	r3, r2
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	1e5a      	subs	r2, r3, #1
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	897a      	ldrh	r2, [r7, #10]
 800a548:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a54a:	68fb      	ldr	r3, [r7, #12]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	891b      	ldrh	r3, [r3, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <CircularQueue_Sense+0x1e>
 800a572:	2302      	movs	r3, #2
 800a574:	e000      	b.n	800a578 <CircularQueue_Sense+0x20>
 800a576:	2300      	movs	r3, #0
 800a578:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 8090 	beq.w	800a6ac <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	891b      	ldrh	r3, [r3, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d121      	bne.n	800a5de <CircularQueue_Sense+0x86>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6819      	ldr	r1, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	1c58      	adds	r0, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	4298      	cmp	r0, r3
 800a5b8:	d306      	bcc.n	800a5c8 <CircularQueue_Sense+0x70>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68d8      	ldr	r0, [r3, #12]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	1ac3      	subs	r3, r0, r3
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	e002      	b.n	800a5ce <CircularQueue_Sense+0x76>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	440b      	add	r3, r1
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	4413      	add	r3, r2
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	e001      	b.n	800a5e2 <CircularQueue_Sense+0x8a>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	891b      	ldrh	r3, [r3, #8]
 800a5e2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7f1b      	ldrb	r3, [r3, #28]
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d048      	beq.n	800a682 <CircularQueue_Sense+0x12a>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	7f1b      	ldrb	r3, [r3, #28]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d142      	bne.n	800a682 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a5fc:	8a7b      	ldrh	r3, [r7, #18]
 800a5fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a602:	4293      	cmp	r3, r2
 800a604:	d103      	bne.n	800a60e <CircularQueue_Sense+0xb6>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	891b      	ldrh	r3, [r3, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d012      	beq.n	800a634 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68da      	ldr	r2, [r3, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a616:	429a      	cmp	r2, r3
 800a618:	d933      	bls.n	800a682 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	891b      	ldrh	r3, [r3, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d02f      	beq.n	800a682 <CircularQueue_Sense+0x12a>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	8912      	ldrh	r2, [r2, #8]
 800a630:	4293      	cmp	r3, r2
 800a632:	d226      	bcs.n	800a682 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	891b      	ldrh	r3, [r3, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d11d      	bne.n	800a67c <CircularQueue_Sense+0x124>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6819      	ldr	r1, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	1c58      	adds	r0, r3, #1
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	4298      	cmp	r0, r3
 800a65a:	d305      	bcc.n	800a668 <CircularQueue_Sense+0x110>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	1ac3      	subs	r3, r0, r3
 800a664:	3301      	adds	r3, #1
 800a666:	e001      	b.n	800a66c <CircularQueue_Sense+0x114>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	440b      	add	r3, r1
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	b29b      	uxth	r3, r3
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	b29b      	uxth	r3, r3
 800a676:	4413      	add	r3, r2
 800a678:	b29b      	uxth	r3, r3
 800a67a:	e001      	b.n	800a680 <CircularQueue_Sense+0x128>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	891b      	ldrh	r3, [r3, #8]
 800a680:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	7af9      	ldrb	r1, [r7, #11]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4419      	add	r1, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	4299      	cmp	r1, r3
 800a692:	d306      	bcc.n	800a6a2 <CircularQueue_Sense+0x14a>
 800a694:	7af9      	ldrb	r1, [r7, #11]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4419      	add	r1, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	1acb      	subs	r3, r1, r3
 800a6a0:	e002      	b.n	800a6a8 <CircularQueue_Sense+0x150>
 800a6a2:	7af9      	ldrb	r1, [r7, #11]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	440b      	add	r3, r1
 800a6a8:	4413      	add	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	8a7a      	ldrh	r2, [r7, #18]
 800a6b6:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a6b8:	697b      	ldr	r3, [r7, #20]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	371c      	adds	r7, #28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
	...

0800a6c8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a6cc:	4b03      	ldr	r3, [pc, #12]	; (800a6dc <LL_FLASH_GetUDN+0x14>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	1fff7580 	.word	0x1fff7580

0800a6e0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a6e4:	4b03      	ldr	r3, [pc, #12]	; (800a6f4 <LL_FLASH_GetDeviceID+0x14>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	b2db      	uxtb	r3, r3
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	1fff7584 	.word	0x1fff7584

0800a6f8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800a6fc:	4b03      	ldr	r3, [pc, #12]	; (800a70c <LL_FLASH_GetSTCompanyID+0x14>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	0a1b      	lsrs	r3, r3, #8
}
 800a702:	4618      	mov	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	1fff7584 	.word	0x1fff7584

0800a710 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800a710:	b5b0      	push	{r4, r5, r7, lr}
 800a712:	b08c      	sub	sp, #48	; 0x30
 800a714:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a716:	4b32      	ldr	r3, [pc, #200]	; (800a7e0 <APP_BLE_Init+0xd0>)
 800a718:	463c      	mov	r4, r7
 800a71a:	461d      	mov	r5, r3
 800a71c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a71e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800a72c:	f000 fa62 	bl	800abf4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a730:	2101      	movs	r1, #1
 800a732:	2002      	movs	r0, #2
 800a734:	f002 fb9a 	bl	800ce6c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a738:	4a2a      	ldr	r2, [pc, #168]	; (800a7e4 <APP_BLE_Init+0xd4>)
 800a73a:	2100      	movs	r1, #0
 800a73c:	2002      	movs	r0, #2
 800a73e:	f002 fcaf 	bl	800d0a0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800a742:	463b      	mov	r3, r7
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe fcc5 	bl	80090d4 <SHCI_C2_BLE_Init>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800a750:	f7f8 f89c 	bl	800288c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a754:	f000 fa64 	bl	800ac20 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a758:	f7fe fc16 	bl	8008f88 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a75c:	4b22      	ldr	r3, [pc, #136]	; (800a7e8 <APP_BLE_Init+0xd8>)
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a764:	4b20      	ldr	r3, [pc, #128]	; (800a7e8 <APP_BLE_Init+0xd8>)
 800a766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a76a:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a76c:	4a1f      	ldr	r2, [pc, #124]	; (800a7ec <APP_BLE_Init+0xdc>)
 800a76e:	2100      	movs	r1, #0
 800a770:	2001      	movs	r0, #1
 800a772:	f002 fc95 	bl	800d0a0 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800a776:	2006      	movs	r0, #6
 800a778:	f7fe f921 	bl	80089be <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800a77c:	f002 f8fe 	bl	800c97c <P2PS_APP_Init>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a780:	4a1a      	ldr	r2, [pc, #104]	; (800a7ec <APP_BLE_Init+0xdc>)
 800a782:	2100      	movs	r1, #0
 800a784:	2001      	movs	r0, #1
 800a786:	f002 fc8b 	bl	800d0a0 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800a78a:	2006      	movs	r0, #6
 800a78c:	f7fe f917 	bl	80089be <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a790:	f000 ff66 	bl	800b660 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800a794:	4b16      	ldr	r3, [pc, #88]	; (800a7f0 <APP_BLE_Init+0xe0>)
 800a796:	2200      	movs	r2, #0
 800a798:	4916      	ldr	r1, [pc, #88]	; (800a7f4 <APP_BLE_Init+0xe4>)
 800a79a:	2000      	movs	r0, #0
 800a79c:	f7f6 fea8 	bl	80014f0 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800a7a0:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <APP_BLE_Init+0xe8>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4915      	ldr	r1, [pc, #84]	; (800a7fc <APP_BLE_Init+0xec>)
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	f7f6 fea2 	bl	80014f0 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <APP_BLE_Init+0xd8>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a7b2:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <APP_BLE_Init+0xd8>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800a7b8:	4b11      	ldr	r3, [pc, #68]	; (800a800 <APP_BLE_Init+0xf0>)
 800a7ba:	2280      	movs	r2, #128	; 0x80
 800a7bc:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800a7be:	4b11      	ldr	r3, [pc, #68]	; (800a804 <APP_BLE_Init+0xf4>)
 800a7c0:	22a0      	movs	r2, #160	; 0xa0
 800a7c2:	801a      	strh	r2, [r3, #0]
   * Start to Advertise to be connected by P2P Client
   */
  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	f000 fadf 	bl	800ad88 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   Clear_LED('A');
 800a7ca:	2041      	movs	r0, #65	; 0x41
 800a7cc:	f7f7 fba8 	bl	8001f20 <Clear_LED>
   Set_LED('G'); //Start Advertizing
 800a7d0:	2047      	movs	r0, #71	; 0x47
 800a7d2:	f7f7 fbff 	bl	8001fd4 <Set_LED>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800a7d6:	bf00      	nop
}
 800a7d8:	3730      	adds	r7, #48	; 0x30
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	0800e8b8 	.word	0x0800e8b8
 800a7e4:	08009169 	.word	0x08009169
 800a7e8:	200001ac 	.word	0x200001ac
 800a7ec:	0800afe9 	.word	0x0800afe9
 800a7f0:	0800b089 	.word	0x0800b089
 800a7f4:	2000022d 	.word	0x2000022d
 800a7f8:	0800b099 	.word	0x0800b099
 800a7fc:	2000022e 	.word	0x2000022e
 800a800:	20000230 	.word	0x20000230
 800a804:	20000232 	.word	0x20000232

0800a808 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08e      	sub	sp, #56	; 0x38
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a810:	2342      	movs	r3, #66	; 0x42
 800a812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3301      	adds	r3, #1
 800a81a:	633b      	str	r3, [r7, #48]	; 0x30

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2bff      	cmp	r3, #255	; 0xff
 800a822:	f000 811f 	beq.w	800aa64 <SVCCTL_App_Notification+0x25c>
 800a826:	2bff      	cmp	r3, #255	; 0xff
 800a828:	f300 81d0 	bgt.w	800abcc <SVCCTL_App_Notification+0x3c4>
 800a82c:	2b05      	cmp	r3, #5
 800a82e:	d002      	beq.n	800a836 <SVCCTL_App_Notification+0x2e>
 800a830:	2b3e      	cmp	r3, #62	; 0x3e
 800a832:	d033      	beq.n	800a89c <SVCCTL_App_Notification+0x94>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a834:	e1ca      	b.n	800abcc <SVCCTL_App_Notification+0x3c4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	3302      	adds	r3, #2
 800a83a:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a842:	b29a      	uxth	r2, r3
 800a844:	4bb6      	ldr	r3, [pc, #728]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800a846:	8adb      	ldrh	r3, [r3, #22]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d113      	bne.n	800a874 <SVCCTL_App_Notification+0x6c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a84c:	4bb4      	ldr	r3, [pc, #720]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800a84e:	2200      	movs	r2, #0
 800a850:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a852:	4bb3      	ldr	r3, [pc, #716]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800a85a:	48b2      	ldr	r0, [pc, #712]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a85c:	f7ff f9a1 	bl	8009ba2 <DbgTraceGetFileName>
 800a860:	4601      	mov	r1, r0
 800a862:	f240 2339 	movw	r3, #569	; 0x239
 800a866:	4ab0      	ldr	r2, [pc, #704]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a868:	48b0      	ldr	r0, [pc, #704]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a86a:	f002 fd9d 	bl	800d3a8 <iprintf>
 800a86e:	48b0      	ldr	r0, [pc, #704]	; (800ab30 <SVCCTL_App_Notification+0x328>)
 800a870:	f002 fe20 	bl	800d4b4 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 800a874:	2001      	movs	r0, #1
 800a876:	f000 fa87 	bl	800ad88 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800a87a:	4bae      	ldr	r3, [pc, #696]	; (800ab34 <SVCCTL_App_Notification+0x32c>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a880:	4ba7      	ldr	r3, [pc, #668]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800a882:	8ada      	ldrh	r2, [r3, #22]
 800a884:	4bab      	ldr	r3, [pc, #684]	; (800ab34 <SVCCTL_App_Notification+0x32c>)
 800a886:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800a888:	48aa      	ldr	r0, [pc, #680]	; (800ab34 <SVCCTL_App_Notification+0x32c>)
 800a88a:	f000 fe85 	bl	800b598 <Custom_APP_Notification>
      Clear_LED('A');
 800a88e:	2041      	movs	r0, #65	; 0x41
 800a890:	f7f7 fb46 	bl	8001f20 <Clear_LED>
      Set_LED('G'); //Start Advertizing
 800a894:	2047      	movs	r0, #71	; 0x47
 800a896:	f7f7 fb9d 	bl	8001fd4 <Set_LED>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a89a:	e19a      	b.n	800abd2 <SVCCTL_App_Notification+0x3ca>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	3302      	adds	r3, #2
 800a8a0:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	2b0c      	cmp	r3, #12
 800a8a8:	d016      	beq.n	800a8d8 <SVCCTL_App_Notification+0xd0>
 800a8aa:	2b0c      	cmp	r3, #12
 800a8ac:	f300 80d8 	bgt.w	800aa60 <SVCCTL_App_Notification+0x258>
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	f000 8095 	beq.w	800a9e0 <SVCCTL_App_Notification+0x1d8>
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	f040 80d2 	bne.w	800aa60 <SVCCTL_App_Notification+0x258>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800a8bc:	4899      	ldr	r0, [pc, #612]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a8be:	f7ff f970 	bl	8009ba2 <DbgTraceGetFileName>
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	f240 2356 	movw	r3, #598	; 0x256
 800a8c8:	4a97      	ldr	r2, [pc, #604]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a8ca:	4898      	ldr	r0, [pc, #608]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a8cc:	f002 fd6c 	bl	800d3a8 <iprintf>
 800a8d0:	4899      	ldr	r0, [pc, #612]	; (800ab38 <SVCCTL_App_Notification+0x330>)
 800a8d2:	f002 fdef 	bl	800d4b4 <puts>
          break;
 800a8d6:	e0c4      	b.n	800aa62 <SVCCTL_App_Notification+0x25a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800a8d8:	4892      	ldr	r0, [pc, #584]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a8da:	f7ff f962 	bl	8009ba2 <DbgTraceGetFileName>
 800a8de:	4601      	mov	r1, r0
 800a8e0:	f240 235d 	movw	r3, #605	; 0x25d
 800a8e4:	4a90      	ldr	r2, [pc, #576]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a8e6:	4891      	ldr	r0, [pc, #580]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a8e8:	f002 fd5e 	bl	800d3a8 <iprintf>
 800a8ec:	4893      	ldr	r0, [pc, #588]	; (800ab3c <SVCCTL_App_Notification+0x334>)
 800a8ee:	f002 fde1 	bl	800d4b4 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10d      	bne.n	800a91c <SVCCTL_App_Notification+0x114>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800a900:	4888      	ldr	r0, [pc, #544]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a902:	f7ff f94e 	bl	8009ba2 <DbgTraceGetFileName>
 800a906:	4601      	mov	r1, r0
 800a908:	f240 2361 	movw	r3, #609	; 0x261
 800a90c:	4a86      	ldr	r2, [pc, #536]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a90e:	4887      	ldr	r0, [pc, #540]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a910:	f002 fd4a 	bl	800d3a8 <iprintf>
 800a914:	488a      	ldr	r0, [pc, #552]	; (800ab40 <SVCCTL_App_Notification+0x338>)
 800a916:	f002 fdcd 	bl	800d4b4 <puts>
 800a91a:	e00c      	b.n	800a936 <SVCCTL_App_Notification+0x12e>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 800a91c:	4881      	ldr	r0, [pc, #516]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a91e:	f7ff f940 	bl	8009ba2 <DbgTraceGetFileName>
 800a922:	4601      	mov	r1, r0
 800a924:	f240 2365 	movw	r3, #613	; 0x265
 800a928:	4a7f      	ldr	r2, [pc, #508]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a92a:	4880      	ldr	r0, [pc, #512]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a92c:	f002 fd3c 	bl	800d3a8 <iprintf>
 800a930:	4884      	ldr	r0, [pc, #528]	; (800ab44 <SVCCTL_App_Notification+0x33c>)
 800a932:	f002 fdbf 	bl	800d4b4 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800a936:	4b7a      	ldr	r3, [pc, #488]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800a938:	8adb      	ldrh	r3, [r3, #22]
 800a93a:	f107 020e 	add.w	r2, r7, #14
 800a93e:	f107 010f 	add.w	r1, r7, #15
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe f8a9 	bl	8008a9a <hci_le_read_phy>
 800a948:	4603      	mov	r3, r0
 800a94a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          if (ret == BLE_STATUS_SUCCESS)
 800a94e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a952:	2b00      	cmp	r3, #0
 800a954:	d136      	bne.n	800a9c4 <SVCCTL_App_Notification+0x1bc>
            APP_DBG_MSG("Read_PHY success \n");
 800a956:	4873      	ldr	r0, [pc, #460]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a958:	f7ff f923 	bl	8009ba2 <DbgTraceGetFileName>
 800a95c:	4601      	mov	r1, r0
 800a95e:	f240 236b 	movw	r3, #619	; 0x26b
 800a962:	4a71      	ldr	r2, [pc, #452]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a964:	4871      	ldr	r0, [pc, #452]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a966:	f002 fd1f 	bl	800d3a8 <iprintf>
 800a96a:	4877      	ldr	r0, [pc, #476]	; (800ab48 <SVCCTL_App_Notification+0x340>)
 800a96c:	f002 fda2 	bl	800d4b4 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d114      	bne.n	800a9a0 <SVCCTL_App_Notification+0x198>
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d111      	bne.n	800a9a0 <SVCCTL_App_Notification+0x198>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800a97c:	4869      	ldr	r0, [pc, #420]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a97e:	f7ff f910 	bl	8009ba2 <DbgTraceGetFileName>
 800a982:	4601      	mov	r1, r0
 800a984:	f240 236f 	movw	r3, #623	; 0x26f
 800a988:	4a67      	ldr	r2, [pc, #412]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a98a:	4868      	ldr	r0, [pc, #416]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a98c:	f002 fd0c 	bl	800d3a8 <iprintf>
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4619      	mov	r1, r3
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	461a      	mov	r2, r3
 800a998:	486c      	ldr	r0, [pc, #432]	; (800ab4c <SVCCTL_App_Notification+0x344>)
 800a99a:	f002 fd05 	bl	800d3a8 <iprintf>
          break;
 800a99e:	e060      	b.n	800aa62 <SVCCTL_App_Notification+0x25a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 800a9a0:	4860      	ldr	r0, [pc, #384]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a9a2:	f7ff f8fe 	bl	8009ba2 <DbgTraceGetFileName>
 800a9a6:	4601      	mov	r1, r0
 800a9a8:	f240 2373 	movw	r3, #627	; 0x273
 800a9ac:	4a5e      	ldr	r2, [pc, #376]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a9ae:	485f      	ldr	r0, [pc, #380]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a9b0:	f002 fcfa 	bl	800d3a8 <iprintf>
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	4863      	ldr	r0, [pc, #396]	; (800ab4c <SVCCTL_App_Notification+0x344>)
 800a9be:	f002 fcf3 	bl	800d3a8 <iprintf>
          break;
 800a9c2:	e04e      	b.n	800aa62 <SVCCTL_App_Notification+0x25a>
            APP_DBG_MSG("Read conf not succeess \n");
 800a9c4:	4857      	ldr	r0, [pc, #348]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a9c6:	f7ff f8ec 	bl	8009ba2 <DbgTraceGetFileName>
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	f44f 731e 	mov.w	r3, #632	; 0x278
 800a9d0:	4a55      	ldr	r2, [pc, #340]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800a9d2:	4856      	ldr	r0, [pc, #344]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800a9d4:	f002 fce8 	bl	800d3a8 <iprintf>
 800a9d8:	485d      	ldr	r0, [pc, #372]	; (800ab50 <SVCCTL_App_Notification+0x348>)
 800a9da:	f002 fd6b 	bl	800d4b4 <puts>
          break;
 800a9de:	e040      	b.n	800aa62 <SVCCTL_App_Notification+0x25a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800a9e6:	4b4e      	ldr	r3, [pc, #312]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800a9e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f6 fdf9 	bl	80015e4 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 800a9f2:	484c      	ldr	r0, [pc, #304]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800a9f4:	f7ff f8d5 	bl	8009ba2 <DbgTraceGetFileName>
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	f240 2389 	movw	r3, #649	; 0x289
 800a9fe:	4a4a      	ldr	r2, [pc, #296]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800aa00:	484a      	ldr	r0, [pc, #296]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800aa02:	f002 fcd1 	bl	800d3a8 <iprintf>
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4850      	ldr	r0, [pc, #320]	; (800ab54 <SVCCTL_App_Notification+0x34c>)
 800aa12:	f002 fcc9 	bl	800d3a8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800aa16:	4b42      	ldr	r3, [pc, #264]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800aa18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d104      	bne.n	800aa2a <SVCCTL_App_Notification+0x222>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800aa20:	4b3f      	ldr	r3, [pc, #252]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800aa22:	2206      	movs	r2, #6
 800aa24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800aa28:	e003      	b.n	800aa32 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800aa2a:	4b3d      	ldr	r3, [pc, #244]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800aa2c:	2205      	movs	r2, #5
 800aa2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	4b39      	ldr	r3, [pc, #228]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800aa3c:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800aa3e:	4b3d      	ldr	r3, [pc, #244]	; (800ab34 <SVCCTL_App_Notification+0x32c>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aa44:	4b36      	ldr	r3, [pc, #216]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800aa46:	8ada      	ldrh	r2, [r3, #22]
 800aa48:	4b3a      	ldr	r3, [pc, #232]	; (800ab34 <SVCCTL_App_Notification+0x32c>)
 800aa4a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 800aa4c:	4839      	ldr	r0, [pc, #228]	; (800ab34 <SVCCTL_App_Notification+0x32c>)
 800aa4e:	f000 fda3 	bl	800b598 <Custom_APP_Notification>
          Clear_LED('A');
 800aa52:	2041      	movs	r0, #65	; 0x41
 800aa54:	f7f7 fa64 	bl	8001f20 <Clear_LED>
          Set_LED('B');
 800aa58:	2042      	movs	r0, #66	; 0x42
 800aa5a:	f7f7 fabb 	bl	8001fd4 <Set_LED>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800aa5e:	e000      	b.n	800aa62 <SVCCTL_App_Notification+0x25a>
          break;
 800aa60:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800aa62:	e0b6      	b.n	800abd2 <SVCCTL_App_Notification+0x3ca>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	3302      	adds	r3, #2
 800aa68:	62fb      	str	r3, [r7, #44]	; 0x2c
      switch (blecore_evt->ecode)
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa74:	f000 80a6 	beq.w	800abc4 <SVCCTL_App_Notification+0x3bc>
 800aa78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa7c:	f300 80a8 	bgt.w	800abd0 <SVCCTL_App_Notification+0x3c8>
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	f000 80a1 	beq.w	800abc8 <SVCCTL_App_Notification+0x3c0>
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	f2c0 80a2 	blt.w	800abd0 <SVCCTL_App_Notification+0x3c8>
 800aa8c:	f240 420a 	movw	r2, #1034	; 0x40a
 800aa90:	4293      	cmp	r3, r2
 800aa92:	f300 809d 	bgt.w	800abd0 <SVCCTL_App_Notification+0x3c8>
 800aa96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa9a:	f340 8099 	ble.w	800abd0 <SVCCTL_App_Notification+0x3c8>
 800aa9e:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800aaa2:	2b09      	cmp	r3, #9
 800aaa4:	f200 8094 	bhi.w	800abd0 <SVCCTL_App_Notification+0x3c8>
 800aaa8:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <SVCCTL_App_Notification+0x2a8>)
 800aaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaae:	bf00      	nop
 800aab0:	0800ab9d 	.word	0x0800ab9d
 800aab4:	0800ab11 	.word	0x0800ab11
 800aab8:	0800abd1 	.word	0x0800abd1
 800aabc:	0800abd1 	.word	0x0800abd1
 800aac0:	0800abd1 	.word	0x0800abd1
 800aac4:	0800abd1 	.word	0x0800abd1
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800abd1 	.word	0x0800abd1
 800aad0:	0800ab65 	.word	0x0800ab65
 800aad4:	0800aaf5 	.word	0x0800aaf5
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 800aad8:	4812      	ldr	r0, [pc, #72]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800aada:	f7ff f862 	bl	8009ba2 <DbgTraceGetFileName>
 800aade:	4601      	mov	r1, r0
 800aae0:	f240 23ca 	movw	r3, #714	; 0x2ca
 800aae4:	4a10      	ldr	r2, [pc, #64]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800aae6:	4811      	ldr	r0, [pc, #68]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800aae8:	f002 fc5e 	bl	800d3a8 <iprintf>
 800aaec:	481a      	ldr	r0, [pc, #104]	; (800ab58 <SVCCTL_App_Notification+0x350>)
 800aaee:	f002 fce1 	bl	800d4b4 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800aaf2:	e06a      	b.n	800abca <SVCCTL_App_Notification+0x3c2>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 800aaf4:	480b      	ldr	r0, [pc, #44]	; (800ab24 <SVCCTL_App_Notification+0x31c>)
 800aaf6:	f7ff f854 	bl	8009ba2 <DbgTraceGetFileName>
 800aafa:	4601      	mov	r1, r0
 800aafc:	f240 23d9 	movw	r3, #729	; 0x2d9
 800ab00:	4a09      	ldr	r2, [pc, #36]	; (800ab28 <SVCCTL_App_Notification+0x320>)
 800ab02:	480a      	ldr	r0, [pc, #40]	; (800ab2c <SVCCTL_App_Notification+0x324>)
 800ab04:	f002 fc50 	bl	800d3a8 <iprintf>
 800ab08:	4814      	ldr	r0, [pc, #80]	; (800ab5c <SVCCTL_App_Notification+0x354>)
 800ab0a:	f002 fcd3 	bl	800d4b4 <puts>
        break;
 800ab0e:	e05c      	b.n	800abca <SVCCTL_App_Notification+0x3c2>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ab10:	4b03      	ldr	r3, [pc, #12]	; (800ab20 <SVCCTL_App_Notification+0x318>)
 800ab12:	8adb      	ldrh	r3, [r3, #22]
 800ab14:	4912      	ldr	r1, [pc, #72]	; (800ab60 <SVCCTL_App_Notification+0x358>)
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fd fa48 	bl	8007fac <aci_gap_pass_key_resp>
        break;
 800ab1c:	e055      	b.n	800abca <SVCCTL_App_Notification+0x3c2>
 800ab1e:	bf00      	nop
 800ab20:	200001ac 	.word	0x200001ac
 800ab24:	0800e8e8 	.word	0x0800e8e8
 800ab28:	08010498 	.word	0x08010498
 800ab2c:	0800e904 	.word	0x0800e904
 800ab30:	0800e918 	.word	0x0800e918
 800ab34:	20000704 	.word	0x20000704
 800ab38:	0800e940 	.word	0x0800e940
 800ab3c:	0800e96c 	.word	0x0800e96c
 800ab40:	0800e988 	.word	0x0800e988
 800ab44:	0800e9ac 	.word	0x0800e9ac
 800ab48:	0800e9d4 	.word	0x0800e9d4
 800ab4c:	0800e9e8 	.word	0x0800e9e8
 800ab50:	0800ea04 	.word	0x0800ea04
 800ab54:	0800ea1c 	.word	0x0800ea1c
 800ab58:	0800ea60 	.word	0x0800ea60
 800ab5c:	0800ea88 	.word	0x0800ea88
 800ab60:	0001b207 	.word	0x0001b207
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	3302      	adds	r3, #2
 800ab68:	62bb      	str	r3, [r7, #40]	; 0x28
            numeric_value = evt_numeric_value->Numeric_Value;
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ab70:	627b      	str	r3, [r7, #36]	; 0x24
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 800ab72:	481a      	ldr	r0, [pc, #104]	; (800abdc <SVCCTL_App_Notification+0x3d4>)
 800ab74:	f7ff f815 	bl	8009ba2 <DbgTraceGetFileName>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	f240 23e3 	movw	r3, #739	; 0x2e3
 800ab7e:	4a18      	ldr	r2, [pc, #96]	; (800abe0 <SVCCTL_App_Notification+0x3d8>)
 800ab80:	4818      	ldr	r0, [pc, #96]	; (800abe4 <SVCCTL_App_Notification+0x3dc>)
 800ab82:	f002 fc11 	bl	800d3a8 <iprintf>
 800ab86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab88:	4817      	ldr	r0, [pc, #92]	; (800abe8 <SVCCTL_App_Notification+0x3e0>)
 800ab8a:	f002 fc0d 	bl	800d3a8 <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800ab8e:	4b17      	ldr	r3, [pc, #92]	; (800abec <SVCCTL_App_Notification+0x3e4>)
 800ab90:	8adb      	ldrh	r3, [r3, #22]
 800ab92:	2101      	movs	r1, #1
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fd fb6b 	bl	8008270 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 800ab9a:	e016      	b.n	800abca <SVCCTL_App_Notification+0x3c2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	3302      	adds	r3, #2
 800aba0:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 800aba2:	480e      	ldr	r0, [pc, #56]	; (800abdc <SVCCTL_App_Notification+0x3d4>)
 800aba4:	f7fe fffd 	bl	8009ba2 <DbgTraceGetFileName>
 800aba8:	4601      	mov	r1, r0
 800abaa:	f240 23e9 	movw	r3, #745	; 0x2e9
 800abae:	4a0c      	ldr	r2, [pc, #48]	; (800abe0 <SVCCTL_App_Notification+0x3d8>)
 800abb0:	480c      	ldr	r0, [pc, #48]	; (800abe4 <SVCCTL_App_Notification+0x3dc>)
 800abb2:	f002 fbf9 	bl	800d3a8 <iprintf>
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	789b      	ldrb	r3, [r3, #2]
 800abba:	4619      	mov	r1, r3
 800abbc:	480c      	ldr	r0, [pc, #48]	; (800abf0 <SVCCTL_App_Notification+0x3e8>)
 800abbe:	f002 fbf3 	bl	800d3a8 <iprintf>
        break;
 800abc2:	e002      	b.n	800abca <SVCCTL_App_Notification+0x3c2>
      break;
 800abc4:	bf00      	nop
 800abc6:	e003      	b.n	800abd0 <SVCCTL_App_Notification+0x3c8>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800abc8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800abca:	e001      	b.n	800abd0 <SVCCTL_App_Notification+0x3c8>
      break;
 800abcc:	bf00      	nop
 800abce:	e000      	b.n	800abd2 <SVCCTL_App_Notification+0x3ca>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800abd0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800abd2:	2301      	movs	r3, #1
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3738      	adds	r7, #56	; 0x38
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	0800e8e8 	.word	0x0800e8e8
 800abe0:	08010498 	.word	0x08010498
 800abe4:	0800e904 	.word	0x0800e904
 800abe8:	0800eab8 	.word	0x0800eab8
 800abec:	200001ac 	.word	0x200001ac
 800abf0:	0800ead0 	.word	0x0800ead0

0800abf4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800abfa:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <Ble_Tl_Init+0x20>)
 800abfc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800abfe:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <Ble_Tl_Init+0x24>)
 800ac00:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ac02:	463b      	mov	r3, r7
 800ac04:	4619      	mov	r1, r3
 800ac06:	4805      	ldr	r0, [pc, #20]	; (800ac1c <Ble_Tl_Init+0x28>)
 800ac08:	f7fe fa92 	bl	8009130 <hci_init>

  return;
 800ac0c:	bf00      	nop
}
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	200300d4 	.word	0x200300d4
 800ac18:	0800b123 	.word	0x0800b123
 800ac1c:	0800b0eb 	.word	0x0800b0eb

0800ac20 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac22:	b08d      	sub	sp, #52	; 0x34
 800ac24:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800ac26:	2300      	movs	r3, #0
 800ac28:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800ac2a:	f7fd ff12 	bl	8008a52 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ac2e:	f000 f997 	bl	800af60 <BleGetBdAddress>
 800ac32:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	2106      	movs	r1, #6
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f7fd fe00 	bl	800883e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	795a      	ldrb	r2, [r3, #5]
 800ac42:	4b4b      	ldr	r3, [pc, #300]	; (800ad70 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800ac44:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	791a      	ldrb	r2, [r3, #4]
 800ac4a:	4b49      	ldr	r3, [pc, #292]	; (800ad70 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800ac4c:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	78da      	ldrb	r2, [r3, #3]
 800ac52:	4b47      	ldr	r3, [pc, #284]	; (800ad70 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800ac54:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	789a      	ldrb	r2, [r3, #2]
 800ac5a:	4b45      	ldr	r3, [pc, #276]	; (800ad70 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800ac5c:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	785a      	ldrb	r2, [r3, #1]
 800ac62:	4b43      	ldr	r3, [pc, #268]	; (800ad70 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800ac64:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	4b41      	ldr	r3, [pc, #260]	; (800ad70 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800ac6c:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800ac6e:	4a41      	ldr	r2, [pc, #260]	; (800ad74 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800ac70:	2110      	movs	r1, #16
 800ac72:	2018      	movs	r0, #24
 800ac74:	f7fd fde3 	bl	800883e <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800ac78:	4a3f      	ldr	r2, [pc, #252]	; (800ad78 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800ac7a:	2110      	movs	r1, #16
 800ac7c:	2008      	movs	r0, #8
 800ac7e:	f7fd fdde 	bl	800883e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ac82:	2119      	movs	r1, #25
 800ac84:	2001      	movs	r0, #1
 800ac86:	f7fd fe43 	bl	8008910 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800ac8a:	f7fd fb48 	bl	800831e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ac92:	7cfb      	ldrb	r3, [r7, #19]
 800ac94:	f043 0301 	orr.w	r3, r3, #1
 800ac98:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800ac9a:	7cfb      	ldrb	r3, [r7, #19]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d01d      	beq.n	800acdc <Ble_Hci_Gap_Gatt_Init+0xbc>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800aca0:	4b36      	ldr	r3, [pc, #216]	; (800ad7c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800aca2:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 800aca4:	f107 020a 	add.w	r2, r7, #10
 800aca8:	7cf8      	ldrb	r0, [r7, #19]
 800acaa:	1dbb      	adds	r3, r7, #6
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	4613      	mov	r3, r2
 800acb6:	2206      	movs	r2, #6
 800acb8:	2100      	movs	r1, #0
 800acba:	f7fd f9ce 	bl	800805a <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800acbe:	897c      	ldrh	r4, [r7, #10]
 800acc0:	893d      	ldrh	r5, [r7, #8]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7f5 fa5c 	bl	8000180 <strlen>
 800acc8:	4603      	mov	r3, r0
 800acca:	b2da      	uxtb	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	4613      	mov	r3, r2
 800acd2:	2200      	movs	r2, #0
 800acd4:	4629      	mov	r1, r5
 800acd6:	4620      	mov	r0, r4
 800acd8:	f7fd fcdf 	bl	800869a <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800acdc:	8978      	ldrh	r0, [r7, #10]
 800acde:	88f9      	ldrh	r1, [r7, #6]
 800ace0:	1d3b      	adds	r3, r7, #4
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	2302      	movs	r3, #2
 800ace6:	2200      	movs	r2, #0
 800ace8:	f7fd fcd7 	bl	800869a <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800acec:	2202      	movs	r2, #2
 800acee:	2102      	movs	r1, #2
 800acf0:	2000      	movs	r0, #0
 800acf2:	f7fd ff3a 	bl	8008b6a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800acf6:	4b22      	ldr	r3, [pc, #136]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acf8:	2201      	movs	r2, #1
 800acfa:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800acfc:	4b20      	ldr	r3, [pc, #128]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd f861 	bl	8007dc8 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ad06:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad08:	2201      	movs	r2, #1
 800ad0a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800ad0c:	4b1c      	ldr	r3, [pc, #112]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad0e:	2208      	movs	r2, #8
 800ad10:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ad12:	4b1b      	ldr	r3, [pc, #108]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad14:	2210      	movs	r2, #16
 800ad16:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ad18:	4b19      	ldr	r3, [pc, #100]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ad1e:	4b18      	ldr	r3, [pc, #96]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad20:	4a18      	ldr	r2, [pc, #96]	; (800ad84 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800ad22:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ad24:	4b16      	ldr	r3, [pc, #88]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ad2a:	4b15      	ldr	r3, [pc, #84]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad2c:	789c      	ldrb	r4, [r3, #2]
 800ad2e:	4b14      	ldr	r3, [pc, #80]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad30:	785d      	ldrb	r5, [r3, #1]
 800ad32:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad34:	791b      	ldrb	r3, [r3, #4]
 800ad36:	4a12      	ldr	r2, [pc, #72]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad38:	7952      	ldrb	r2, [r2, #5]
 800ad3a:	4911      	ldr	r1, [pc, #68]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad3c:	78c9      	ldrb	r1, [r1, #3]
 800ad3e:	4810      	ldr	r0, [pc, #64]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad40:	6880      	ldr	r0, [r0, #8]
 800ad42:	2600      	movs	r6, #0
 800ad44:	9604      	str	r6, [sp, #16]
 800ad46:	9003      	str	r0, [sp, #12]
 800ad48:	9102      	str	r1, [sp, #8]
 800ad4a:	9201      	str	r2, [sp, #4]
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	2201      	movs	r2, #1
 800ad52:	4629      	mov	r1, r5
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7fd f881 	bl	8007e5c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ad5a:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad5c:	789b      	ldrb	r3, [r3, #2]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <Ble_Hci_Gap_Gatt_Init+0x146>
   {
     aci_gap_configure_whitelist();
 800ad62:	f7fd fa61 	bl	8008228 <aci_gap_configure_whitelist>
   }
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000028 	.word	0x20000028
 800ad74:	08010478 	.word	0x08010478
 800ad78:	08010488 	.word	0x08010488
 800ad7c:	0800eb30 	.word	0x0800eb30
 800ad80:	200001ac 	.word	0x200001ac
 800ad84:	0001b207 	.word	0x0001b207

0800ad88 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08c      	sub	sp, #48	; 0x30
 800ad8c:	af08      	add	r7, sp, #32
 800ad8e:	4603      	mov	r3, r0
 800ad90:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ad92:	2342      	movs	r3, #66	; 0x42
 800ad94:	73fb      	strb	r3, [r7, #15]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d106      	bne.n	800adaa <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800ad9c:	4b61      	ldr	r3, [pc, #388]	; (800af24 <Adv_Request+0x19c>)
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	81bb      	strh	r3, [r7, #12]
    Max_Inter = AdvIntervalMax;
 800ada2:	4b61      	ldr	r3, [pc, #388]	; (800af28 <Adv_Request+0x1a0>)
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	817b      	strh	r3, [r7, #10]
 800ada8:	e005      	b.n	800adb6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800adaa:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800adae:	81bb      	strh	r3, [r7, #12]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800adb0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800adb4:	817b      	strh	r3, [r7, #10]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800adb6:	4b5d      	ldr	r3, [pc, #372]	; (800af2c <Adv_Request+0x1a4>)
 800adb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7f6 fc11 	bl	80015e4 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800adc2:	485b      	ldr	r0, [pc, #364]	; (800af30 <Adv_Request+0x1a8>)
 800adc4:	f7fe feed 	bl	8009ba2 <DbgTraceGetFileName>
 800adc8:	4601      	mov	r1, r0
 800adca:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800adce:	4a59      	ldr	r2, [pc, #356]	; (800af34 <Adv_Request+0x1ac>)
 800add0:	4859      	ldr	r0, [pc, #356]	; (800af38 <Adv_Request+0x1b0>)
 800add2:	f002 fae9 	bl	800d3a8 <iprintf>
 800add6:	4b55      	ldr	r3, [pc, #340]	; (800af2c <Adv_Request+0x1a4>)
 800add8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800addc:	4619      	mov	r1, r3
 800adde:	4857      	ldr	r0, [pc, #348]	; (800af3c <Adv_Request+0x1b4>)
 800ade0:	f002 fae2 	bl	800d3a8 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d12d      	bne.n	800ae46 <Adv_Request+0xbe>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800adea:	4b50      	ldr	r3, [pc, #320]	; (800af2c <Adv_Request+0x1a4>)
 800adec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d004      	beq.n	800adfe <Adv_Request+0x76>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800adf4:	4b4d      	ldr	r3, [pc, #308]	; (800af2c <Adv_Request+0x1a4>)
 800adf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d123      	bne.n	800ae46 <Adv_Request+0xbe>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800adfe:	f7fc fee1 	bl	8007bc4 <aci_gap_set_non_discoverable>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
      if (ret == BLE_STATUS_SUCCESS)
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10d      	bne.n	800ae28 <Adv_Request+0xa0>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 800ae0c:	4848      	ldr	r0, [pc, #288]	; (800af30 <Adv_Request+0x1a8>)
 800ae0e:	f7fe fec8 	bl	8009ba2 <DbgTraceGetFileName>
 800ae12:	4601      	mov	r1, r0
 800ae14:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800ae18:	4a46      	ldr	r2, [pc, #280]	; (800af34 <Adv_Request+0x1ac>)
 800ae1a:	4847      	ldr	r0, [pc, #284]	; (800af38 <Adv_Request+0x1b0>)
 800ae1c:	f002 fac4 	bl	800d3a8 <iprintf>
 800ae20:	4847      	ldr	r0, [pc, #284]	; (800af40 <Adv_Request+0x1b8>)
 800ae22:	f002 fb47 	bl	800d4b4 <puts>
 800ae26:	e00e      	b.n	800ae46 <Adv_Request+0xbe>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 800ae28:	4841      	ldr	r0, [pc, #260]	; (800af30 <Adv_Request+0x1a8>)
 800ae2a:	f7fe feba 	bl	8009ba2 <DbgTraceGetFileName>
 800ae2e:	4601      	mov	r1, r0
 800ae30:	f240 33fd 	movw	r3, #1021	; 0x3fd
 800ae34:	4a3f      	ldr	r2, [pc, #252]	; (800af34 <Adv_Request+0x1ac>)
 800ae36:	4840      	ldr	r0, [pc, #256]	; (800af38 <Adv_Request+0x1b0>)
 800ae38:	f002 fab6 	bl	800d3a8 <iprintf>
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4840      	ldr	r0, [pc, #256]	; (800af44 <Adv_Request+0x1bc>)
 800ae42:	f002 fab1 	bl	800d3a8 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800ae46:	4a39      	ldr	r2, [pc, #228]	; (800af2c <Adv_Request+0x1a4>)
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9306      	str	r3, [sp, #24]
 800ae52:	2300      	movs	r3, #0
 800ae54:	9305      	str	r3, [sp, #20]
 800ae56:	2300      	movs	r3, #0
 800ae58:	9304      	str	r3, [sp, #16]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9302      	str	r3, [sp, #8]
 800ae62:	2300      	movs	r3, #0
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	2300      	movs	r3, #0
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	22a0      	movs	r2, #160	; 0xa0
 800ae6e:	2180      	movs	r1, #128	; 0x80
 800ae70:	2000      	movs	r0, #0
 800ae72:	f7fc fecb 	bl	8007c0c <aci_gap_set_discoverable>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 800ae7a:	4933      	ldr	r1, [pc, #204]	; (800af48 <Adv_Request+0x1c0>)
 800ae7c:	2016      	movs	r0, #22
 800ae7e:	f7fd f977 	bl	8008170 <aci_gap_update_adv_data>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73fb      	strb	r3, [r7, #15]

    if (ret == BLE_STATUS_SUCCESS)
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d125      	bne.n	800aed8 <Adv_Request+0x150>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d114      	bne.n	800aebc <Adv_Request+0x134>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800ae92:	4827      	ldr	r0, [pc, #156]	; (800af30 <Adv_Request+0x1a8>)
 800ae94:	f7fe fe85 	bl	8009ba2 <DbgTraceGetFileName>
 800ae98:	4601      	mov	r1, r0
 800ae9a:	f240 4317 	movw	r3, #1047	; 0x417
 800ae9e:	4a25      	ldr	r2, [pc, #148]	; (800af34 <Adv_Request+0x1ac>)
 800aea0:	4825      	ldr	r0, [pc, #148]	; (800af38 <Adv_Request+0x1b0>)
 800aea2:	f002 fa81 	bl	800d3a8 <iprintf>
 800aea6:	4829      	ldr	r0, [pc, #164]	; (800af4c <Adv_Request+0x1c4>)
 800aea8:	f002 fb04 	bl	800d4b4 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800aeac:	4b1f      	ldr	r3, [pc, #124]	; (800af2c <Adv_Request+0x1a4>)
 800aeae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aeb2:	4927      	ldr	r1, [pc, #156]	; (800af50 <Adv_Request+0x1c8>)
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7f6 fc21 	bl	80016fc <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800aeba:	e030      	b.n	800af1e <Adv_Request+0x196>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800aebc:	481c      	ldr	r0, [pc, #112]	; (800af30 <Adv_Request+0x1a8>)
 800aebe:	f7fe fe70 	bl	8009ba2 <DbgTraceGetFileName>
 800aec2:	4601      	mov	r1, r0
 800aec4:	f240 431d 	movw	r3, #1053	; 0x41d
 800aec8:	4a1a      	ldr	r2, [pc, #104]	; (800af34 <Adv_Request+0x1ac>)
 800aeca:	481b      	ldr	r0, [pc, #108]	; (800af38 <Adv_Request+0x1b0>)
 800aecc:	f002 fa6c 	bl	800d3a8 <iprintf>
 800aed0:	4820      	ldr	r0, [pc, #128]	; (800af54 <Adv_Request+0x1cc>)
 800aed2:	f002 faef 	bl	800d4b4 <puts>
  return;
 800aed6:	e022      	b.n	800af1e <Adv_Request+0x196>
      if (New_Status == APP_BLE_FAST_ADV)
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d10f      	bne.n	800aefe <Adv_Request+0x176>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800aede:	4814      	ldr	r0, [pc, #80]	; (800af30 <Adv_Request+0x1a8>)
 800aee0:	f7fe fe5f 	bl	8009ba2 <DbgTraceGetFileName>
 800aee4:	4601      	mov	r1, r0
 800aee6:	f240 4324 	movw	r3, #1060	; 0x424
 800aeea:	4a12      	ldr	r2, [pc, #72]	; (800af34 <Adv_Request+0x1ac>)
 800aeec:	4812      	ldr	r0, [pc, #72]	; (800af38 <Adv_Request+0x1b0>)
 800aeee:	f002 fa5b 	bl	800d3a8 <iprintf>
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	4619      	mov	r1, r3
 800aef6:	4818      	ldr	r0, [pc, #96]	; (800af58 <Adv_Request+0x1d0>)
 800aef8:	f002 fa56 	bl	800d3a8 <iprintf>
  return;
 800aefc:	e00f      	b.n	800af1e <Adv_Request+0x196>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 800aefe:	480c      	ldr	r0, [pc, #48]	; (800af30 <Adv_Request+0x1a8>)
 800af00:	f7fe fe4f 	bl	8009ba2 <DbgTraceGetFileName>
 800af04:	4601      	mov	r1, r0
 800af06:	f44f 6385 	mov.w	r3, #1064	; 0x428
 800af0a:	4a0a      	ldr	r2, [pc, #40]	; (800af34 <Adv_Request+0x1ac>)
 800af0c:	480a      	ldr	r0, [pc, #40]	; (800af38 <Adv_Request+0x1b0>)
 800af0e:	f002 fa4b 	bl	800d3a8 <iprintf>
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	4619      	mov	r1, r3
 800af16:	4811      	ldr	r0, [pc, #68]	; (800af5c <Adv_Request+0x1d4>)
 800af18:	f002 fa46 	bl	800d3a8 <iprintf>
  return;
 800af1c:	bf00      	nop
}
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20000230 	.word	0x20000230
 800af28:	20000232 	.word	0x20000232
 800af2c:	200001ac 	.word	0x200001ac
 800af30:	0800e8e8 	.word	0x0800e8e8
 800af34:	080104b0 	.word	0x080104b0
 800af38:	0800e904 	.word	0x0800e904
 800af3c:	0800eb38 	.word	0x0800eb38
 800af40:	0800eb54 	.word	0x0800eb54
 800af44:	0800eb78 	.word	0x0800eb78
 800af48:	20000010 	.word	0x20000010
 800af4c:	0800eba0 	.word	0x0800eba0
 800af50:	0001e046 	.word	0x0001e046
 800af54:	0800ebc8 	.word	0x0800ebc8
 800af58:	0800ebf4 	.word	0x0800ebf4
 800af5c:	0800ec24 	.word	0x0800ec24

0800af60 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800af66:	f7ff fbaf 	bl	800a6c8 <LL_FLASH_GetUDN>
 800af6a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	d023      	beq.n	800afbc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800af74:	f7ff fbc0 	bl	800a6f8 <LL_FLASH_GetSTCompanyID>
 800af78:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800af7a:	f7ff fbb1 	bl	800a6e0 <LL_FLASH_GetDeviceID>
 800af7e:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	b2da      	uxtb	r2, r3
 800af84:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <BleGetBdAddress+0x80>)
 800af86:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <BleGetBdAddress+0x80>)
 800af90:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	b2da      	uxtb	r2, r3
 800af96:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <BleGetBdAddress+0x80>)
 800af98:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <BleGetBdAddress+0x80>)
 800afa0:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	0a1b      	lsrs	r3, r3, #8
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <BleGetBdAddress+0x80>)
 800afaa:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	0c1b      	lsrs	r3, r3, #16
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <BleGetBdAddress+0x80>)
 800afb4:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800afb6:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <BleGetBdAddress+0x80>)
 800afb8:	617b      	str	r3, [r7, #20]
 800afba:	e00b      	b.n	800afd4 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800afbc:	2000      	movs	r0, #0
 800afbe:	f7fe fecd 	bl	8009d5c <OTP_Read>
 800afc2:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	617b      	str	r3, [r7, #20]
 800afce:	e001      	b.n	800afd4 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800afd0:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <BleGetBdAddress+0x84>)
 800afd2:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800afd4:	697b      	ldr	r3, [r7, #20]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200002ec 	.word	0x200002ec
 800afe4:	08010470 	.word	0x08010470

0800afe8 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM & P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800afee:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <Adv_Cancel+0x84>)
 800aff0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aff4:	2b05      	cmp	r3, #5
 800aff6:	d035      	beq.n	800b064 <Adv_Cancel+0x7c>

  {

    tBleStatus result = 0x00;
 800aff8:	2300      	movs	r3, #0
 800affa:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800affc:	f7fc fde2 	bl	8007bc4 <aci_gap_set_non_discoverable>
 800b000:	4603      	mov	r3, r0
 800b002:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b004:	4b19      	ldr	r3, [pc, #100]	; (800b06c <Adv_Cancel+0x84>)
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d11a      	bne.n	800b048 <Adv_Cancel+0x60>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800b012:	4817      	ldr	r0, [pc, #92]	; (800b070 <Adv_Cancel+0x88>)
 800b014:	f7fe fdc5 	bl	8009ba2 <DbgTraceGetFileName>
 800b018:	4601      	mov	r1, r0
 800b01a:	f240 4379 	movw	r3, #1145	; 0x479
 800b01e:	4a15      	ldr	r2, [pc, #84]	; (800b074 <Adv_Cancel+0x8c>)
 800b020:	4815      	ldr	r0, [pc, #84]	; (800b078 <Adv_Cancel+0x90>)
 800b022:	f002 f9c1 	bl	800d3a8 <iprintf>
 800b026:	4815      	ldr	r0, [pc, #84]	; (800b07c <Adv_Cancel+0x94>)
 800b028:	f002 f9be 	bl	800d3a8 <iprintf>
 800b02c:	4810      	ldr	r0, [pc, #64]	; (800b070 <Adv_Cancel+0x88>)
 800b02e:	f7fe fdb8 	bl	8009ba2 <DbgTraceGetFileName>
 800b032:	4601      	mov	r1, r0
 800b034:	f240 4379 	movw	r3, #1145	; 0x479
 800b038:	4a0e      	ldr	r2, [pc, #56]	; (800b074 <Adv_Cancel+0x8c>)
 800b03a:	480f      	ldr	r0, [pc, #60]	; (800b078 <Adv_Cancel+0x90>)
 800b03c:	f002 f9b4 	bl	800d3a8 <iprintf>
 800b040:	480f      	ldr	r0, [pc, #60]	; (800b080 <Adv_Cancel+0x98>)
 800b042:	f002 f9b1 	bl	800d3a8 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800b046:	e00d      	b.n	800b064 <Adv_Cancel+0x7c>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b048:	4809      	ldr	r0, [pc, #36]	; (800b070 <Adv_Cancel+0x88>)
 800b04a:	f7fe fdaa 	bl	8009ba2 <DbgTraceGetFileName>
 800b04e:	4601      	mov	r1, r0
 800b050:	f240 437d 	movw	r3, #1149	; 0x47d
 800b054:	4a07      	ldr	r2, [pc, #28]	; (800b074 <Adv_Cancel+0x8c>)
 800b056:	4808      	ldr	r0, [pc, #32]	; (800b078 <Adv_Cancel+0x90>)
 800b058:	f002 f9a6 	bl	800d3a8 <iprintf>
 800b05c:	4809      	ldr	r0, [pc, #36]	; (800b084 <Adv_Cancel+0x9c>)
 800b05e:	f002 f9a3 	bl	800d3a8 <iprintf>
  return;
 800b062:	bf00      	nop
 800b064:	bf00      	nop
}
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	200001ac 	.word	0x200001ac
 800b070:	0800e8e8 	.word	0x0800e8e8
 800b074:	080104bc 	.word	0x080104bc
 800b078:	0800e904 	.word	0x0800e904
 800b07c:	0800ec58 	.word	0x0800ec58
 800b080:	0800ec60 	.word	0x0800ec60
 800b084:	0800ec7c 	.word	0x0800ec7c

0800b088 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800b08c:	2100      	movs	r1, #0
 800b08e:	2001      	movs	r0, #1
 800b090:	f002 f828 	bl	800d0e4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800b094:	bf00      	nop
}
 800b096:	bd80      	pop	{r7, pc}

0800b098 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800b09c:	bf00      	nop
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b082      	sub	sp, #8
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	2002      	movs	r0, #2
 800b0b2:	f002 f817 	bl	800d0e4 <UTIL_SEQ_SetTask>
  return;
 800b0b6:	bf00      	nop
}
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	f002 f878 	bl	800d1bc <UTIL_SEQ_SetEvt>
  return;
 800b0cc:	bf00      	nop
}
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b0dc:	2001      	movs	r0, #1
 800b0de:	f002 f88d 	bl	800d1fc <UTIL_SEQ_WaitEvt>
  return;
 800b0e2:	bf00      	nop
}
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fd ff95 	bl	800902c <SVCCTL_UserEvtRx>
 800b102:	4603      	mov	r3, r0
 800b104:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b106:	7afb      	ldrb	r3, [r7, #11]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2201      	movs	r2, #1
 800b110:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800b112:	e002      	b.n	800b11a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	701a      	strb	r2, [r3, #0]
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	4603      	mov	r3, r0
 800b12a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <BLE_StatusNot+0x16>
 800b132:	2b01      	cmp	r3, #1
 800b134:	d006      	beq.n	800b144 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800b136:	e00b      	b.n	800b150 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b138:	2307      	movs	r3, #7
 800b13a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f001 fffd 	bl	800d13c <UTIL_SEQ_PauseTask>
      break;
 800b142:	e005      	b.n	800b150 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b144:	2307      	movs	r3, #7
 800b146:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f002 f817 	bl	800d17c <UTIL_SEQ_ResumeTask>
      break;
 800b14e:	bf00      	nop
  }
  return;
 800b150:	bf00      	nop
}
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_App_Notification_1\n");
 800b160:	48bb      	ldr	r0, [pc, #748]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b162:	f7fe fd1e 	bl	8009ba2 <DbgTraceGetFileName>
 800b166:	4601      	mov	r1, r0
 800b168:	2371      	movs	r3, #113	; 0x71
 800b16a:	4aba      	ldr	r2, [pc, #744]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b16c:	48ba      	ldr	r0, [pc, #744]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b16e:	f002 f91b 	bl	800d3a8 <iprintf>
 800b172:	48ba      	ldr	r0, [pc, #744]	; (800b45c <Custom_STM_App_Notification+0x304>)
 800b174:	f002 f99e 	bl	800d4b4 <puts>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b19      	cmp	r3, #25
 800b17e:	f200 81d9 	bhi.w	800b534 <Custom_STM_App_Notification+0x3dc>
 800b182:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <Custom_STM_App_Notification+0x30>)
 800b184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b188:	0800b1f1 	.word	0x0800b1f1
 800b18c:	0800b20b 	.word	0x0800b20b
 800b190:	0800b225 	.word	0x0800b225
 800b194:	0800b23f 	.word	0x0800b23f
 800b198:	0800b259 	.word	0x0800b259
 800b19c:	0800b273 	.word	0x0800b273
 800b1a0:	0800b28d 	.word	0x0800b28d
 800b1a4:	0800b2a7 	.word	0x0800b2a7
 800b1a8:	0800b2c1 	.word	0x0800b2c1
 800b1ac:	0800b2db 	.word	0x0800b2db
 800b1b0:	0800b2f5 	.word	0x0800b2f5
 800b1b4:	0800b30f 	.word	0x0800b30f
 800b1b8:	0800b329 	.word	0x0800b329
 800b1bc:	0800b343 	.word	0x0800b343
 800b1c0:	0800b35d 	.word	0x0800b35d
 800b1c4:	0800b37d 	.word	0x0800b37d
 800b1c8:	0800b39d 	.word	0x0800b39d
 800b1cc:	0800b3bb 	.word	0x0800b3bb
 800b1d0:	0800b3d9 	.word	0x0800b3d9
 800b1d4:	0800b3f9 	.word	0x0800b3f9
 800b1d8:	0800b413 	.word	0x0800b413
 800b1dc:	0800b433 	.word	0x0800b433
 800b1e0:	0800b4b9 	.word	0x0800b4b9
 800b1e4:	0800b4db 	.word	0x0800b4db
 800b1e8:	0800b4fd 	.word	0x0800b4fd
 800b1ec:	0800b519 	.word	0x0800b519
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

  /* My_P2P_Server */
    case CUSTOM_STM_LED_C_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_READ_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_LED_C_READ_EVT\n");
 800b1f0:	4897      	ldr	r0, [pc, #604]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b1f2:	f7fe fcd6 	bl	8009ba2 <DbgTraceGetFileName>
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	237c      	movs	r3, #124	; 0x7c
 800b1fa:	4a96      	ldr	r2, [pc, #600]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b1fc:	4896      	ldr	r0, [pc, #600]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b1fe:	f002 f8d3 	bl	800d3a8 <iprintf>
 800b202:	4897      	ldr	r0, [pc, #604]	; (800b460 <Custom_STM_App_Notification+0x308>)
 800b204:	f002 f956 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;
 800b208:	e1a2      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT\n");
 800b20a:	4891      	ldr	r0, [pc, #580]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b20c:	f7fe fcc9 	bl	8009ba2 <DbgTraceGetFileName>
 800b210:	4601      	mov	r1, r0
 800b212:	2382      	movs	r3, #130	; 0x82
 800b214:	4a8f      	ldr	r2, [pc, #572]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b216:	4890      	ldr	r0, [pc, #576]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b218:	f002 f8c6 	bl	800d3a8 <iprintf>
 800b21c:	4891      	ldr	r0, [pc, #580]	; (800b464 <Custom_STM_App_Notification+0x30c>)
 800b21e:	f002 f949 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 800b222:	e195      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT\n");
 800b224:	488a      	ldr	r0, [pc, #552]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b226:	f7fe fcbc 	bl	8009ba2 <DbgTraceGetFileName>
 800b22a:	4601      	mov	r1, r0
 800b22c:	2388      	movs	r3, #136	; 0x88
 800b22e:	4a89      	ldr	r2, [pc, #548]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b230:	4889      	ldr	r0, [pc, #548]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b232:	f002 f8b9 	bl	800d3a8 <iprintf>
 800b236:	488c      	ldr	r0, [pc, #560]	; (800b468 <Custom_STM_App_Notification+0x310>)
 800b238:	f002 f93c 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 800b23c:	e188      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT\n");
 800b23e:	4884      	ldr	r0, [pc, #528]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b240:	f7fe fcaf 	bl	8009ba2 <DbgTraceGetFileName>
 800b244:	4601      	mov	r1, r0
 800b246:	238e      	movs	r3, #142	; 0x8e
 800b248:	4a82      	ldr	r2, [pc, #520]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b24a:	4883      	ldr	r0, [pc, #524]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b24c:	f002 f8ac 	bl	800d3a8 <iprintf>
 800b250:	4886      	ldr	r0, [pc, #536]	; (800b46c <Custom_STM_App_Notification+0x314>)
 800b252:	f002 f92f 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 800b256:	e17b      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_MOC_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_READ_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_READ_EVT\n");
 800b258:	487d      	ldr	r0, [pc, #500]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b25a:	f7fe fca2 	bl	8009ba2 <DbgTraceGetFileName>
 800b25e:	4601      	mov	r1, r0
 800b260:	2394      	movs	r3, #148	; 0x94
 800b262:	4a7c      	ldr	r2, [pc, #496]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b264:	487c      	ldr	r0, [pc, #496]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b266:	f002 f89f 	bl	800d3a8 <iprintf>
 800b26a:	4881      	ldr	r0, [pc, #516]	; (800b470 <Custom_STM_App_Notification+0x318>)
 800b26c:	f002 f922 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_MOC_READ_EVT */
      break;
 800b270:	e16e      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_MOC_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_WRITE_NO_RESP_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_WRITE_NO_RESP_EVT\n");
 800b272:	4877      	ldr	r0, [pc, #476]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b274:	f7fe fc95 	bl	8009ba2 <DbgTraceGetFileName>
 800b278:	4601      	mov	r1, r0
 800b27a:	239a      	movs	r3, #154	; 0x9a
 800b27c:	4a75      	ldr	r2, [pc, #468]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b27e:	4876      	ldr	r0, [pc, #472]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b280:	f002 f892 	bl	800d3a8 <iprintf>
 800b284:	487b      	ldr	r0, [pc, #492]	; (800b474 <Custom_STM_App_Notification+0x31c>)
 800b286:	f002 f915 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_MOC_WRITE_NO_RESP_EVT */
      break;
 800b28a:	e161      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT\n");
 800b28c:	4870      	ldr	r0, [pc, #448]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b28e:	f7fe fc88 	bl	8009ba2 <DbgTraceGetFileName>
 800b292:	4601      	mov	r1, r0
 800b294:	23a0      	movs	r3, #160	; 0xa0
 800b296:	4a6f      	ldr	r2, [pc, #444]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b298:	486f      	ldr	r0, [pc, #444]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b29a:	f002 f885 	bl	800d3a8 <iprintf>
 800b29e:	4876      	ldr	r0, [pc, #472]	; (800b478 <Custom_STM_App_Notification+0x320>)
 800b2a0:	f002 f908 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT */
      break;
 800b2a4:	e154      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT\n");
 800b2a6:	486a      	ldr	r0, [pc, #424]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b2a8:	f7fe fc7b 	bl	8009ba2 <DbgTraceGetFileName>
 800b2ac:	4601      	mov	r1, r0
 800b2ae:	23a6      	movs	r3, #166	; 0xa6
 800b2b0:	4a68      	ldr	r2, [pc, #416]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b2b2:	4869      	ldr	r0, [pc, #420]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b2b4:	f002 f878 	bl	800d3a8 <iprintf>
 800b2b8:	4870      	ldr	r0, [pc, #448]	; (800b47c <Custom_STM_App_Notification+0x324>)
 800b2ba:	f002 f8fb 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT */
      break;
 800b2be:	e147      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_MOC_INDICATE_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_INDICATE_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_INDICATE_ENABLED_EVT\n");
 800b2c0:	4863      	ldr	r0, [pc, #396]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b2c2:	f7fe fc6e 	bl	8009ba2 <DbgTraceGetFileName>
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	23ac      	movs	r3, #172	; 0xac
 800b2ca:	4a62      	ldr	r2, [pc, #392]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b2cc:	4862      	ldr	r0, [pc, #392]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b2ce:	f002 f86b 	bl	800d3a8 <iprintf>
 800b2d2:	486b      	ldr	r0, [pc, #428]	; (800b480 <Custom_STM_App_Notification+0x328>)
 800b2d4:	f002 f8ee 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_MOC_INDICATE_ENABLED_EVT */
      break;
 800b2d8:	e13a      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_MOC_INDICATE_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MOC_INDICATE_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_MOC_INDICATE_DISABLED_EVT\n");
 800b2da:	485d      	ldr	r0, [pc, #372]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b2dc:	f7fe fc61 	bl	8009ba2 <DbgTraceGetFileName>
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	23b2      	movs	r3, #178	; 0xb2
 800b2e4:	4a5b      	ldr	r2, [pc, #364]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b2e6:	485c      	ldr	r0, [pc, #368]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b2e8:	f002 f85e 	bl	800d3a8 <iprintf>
 800b2ec:	4865      	ldr	r0, [pc, #404]	; (800b484 <Custom_STM_App_Notification+0x32c>)
 800b2ee:	f002 f8e1 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_MOC_INDICATE_DISABLED_EVT */
      break;
 800b2f2:	e12d      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

  /* My_Heart_Rate */
    case CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT\n");
 800b2f4:	4856      	ldr	r0, [pc, #344]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b2f6:	f7fe fc54 	bl	8009ba2 <DbgTraceGetFileName>
 800b2fa:	4601      	mov	r1, r0
 800b2fc:	23b9      	movs	r3, #185	; 0xb9
 800b2fe:	4a55      	ldr	r2, [pc, #340]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b300:	4855      	ldr	r0, [pc, #340]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b302:	f002 f851 	bl	800d3a8 <iprintf>
 800b306:	4860      	ldr	r0, [pc, #384]	; (800b488 <Custom_STM_App_Notification+0x330>)
 800b308:	f002 f8d4 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT */
      break;
 800b30c:	e120      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT\n");
 800b30e:	4850      	ldr	r0, [pc, #320]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b310:	f7fe fc47 	bl	8009ba2 <DbgTraceGetFileName>
 800b314:	4601      	mov	r1, r0
 800b316:	23bf      	movs	r3, #191	; 0xbf
 800b318:	4a4e      	ldr	r2, [pc, #312]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b31a:	484f      	ldr	r0, [pc, #316]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b31c:	f002 f844 	bl	800d3a8 <iprintf>
 800b320:	485a      	ldr	r0, [pc, #360]	; (800b48c <Custom_STM_App_Notification+0x334>)
 800b322:	f002 f8c7 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT */
      break;
 800b326:	e113      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_HRS_SL_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_SL_READ_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_SL_READ_EVT\n");
 800b328:	4849      	ldr	r0, [pc, #292]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b32a:	f7fe fc3a 	bl	8009ba2 <DbgTraceGetFileName>
 800b32e:	4601      	mov	r1, r0
 800b330:	23c5      	movs	r3, #197	; 0xc5
 800b332:	4a48      	ldr	r2, [pc, #288]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b334:	4848      	ldr	r0, [pc, #288]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b336:	f002 f837 	bl	800d3a8 <iprintf>
 800b33a:	4855      	ldr	r0, [pc, #340]	; (800b490 <Custom_STM_App_Notification+0x338>)
 800b33c:	f002 f8ba 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_HRS_SL_READ_EVT */
      break;
 800b340:	e106      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_HRS_CTRLP_WRITE_EVT:
      /* USER CODE BEGIN CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_HRS_CTRLP_WRITE_EVT\n");
 800b342:	4843      	ldr	r0, [pc, #268]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b344:	f7fe fc2d 	bl	8009ba2 <DbgTraceGetFileName>
 800b348:	4601      	mov	r1, r0
 800b34a:	23cb      	movs	r3, #203	; 0xcb
 800b34c:	4a41      	ldr	r2, [pc, #260]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b34e:	4842      	ldr	r0, [pc, #264]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b350:	f002 f82a 	bl	800d3a8 <iprintf>
 800b354:	484f      	ldr	r0, [pc, #316]	; (800b494 <Custom_STM_App_Notification+0x33c>)
 800b356:	f002 f8ad 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_HRS_CTRLP_WRITE_EVT */
      break;
 800b35a:	e0f9      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

  /* TDE_Custom_Service */
    case CUSTOM_STM_C1_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C1_READ_EVT */
    	 Toggle_LED('R');
 800b35c:	2052      	movs	r0, #82	; 0x52
 800b35e:	f7f6 fe93 	bl	8002088 <Toggle_LED>
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C1_READ_EVT\n");
 800b362:	483b      	ldr	r0, [pc, #236]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b364:	f7fe fc1d 	bl	8009ba2 <DbgTraceGetFileName>
 800b368:	4601      	mov	r1, r0
 800b36a:	23d3      	movs	r3, #211	; 0xd3
 800b36c:	4a39      	ldr	r2, [pc, #228]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b36e:	483a      	ldr	r0, [pc, #232]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b370:	f002 f81a 	bl	800d3a8 <iprintf>
 800b374:	4848      	ldr	r0, [pc, #288]	; (800b498 <Custom_STM_App_Notification+0x340>)
 800b376:	f002 f89d 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C1_READ_EVT */
      break;
 800b37a:	e0e9      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C1_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C1_WRITE_NO_RESP_EVT */
    	Toggle_LED('B');
 800b37c:	2042      	movs	r0, #66	; 0x42
 800b37e:	f7f6 fe83 	bl	8002088 <Toggle_LED>
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C1_WRITE_NO_RESP_EVT\n");
 800b382:	4833      	ldr	r0, [pc, #204]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b384:	f7fe fc0d 	bl	8009ba2 <DbgTraceGetFileName>
 800b388:	4601      	mov	r1, r0
 800b38a:	23da      	movs	r3, #218	; 0xda
 800b38c:	4a31      	ldr	r2, [pc, #196]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b38e:	4832      	ldr	r0, [pc, #200]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b390:	f002 f80a 	bl	800d3a8 <iprintf>
 800b394:	4841      	ldr	r0, [pc, #260]	; (800b49c <Custom_STM_App_Notification+0x344>)
 800b396:	f002 f88d 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C1_WRITE_NO_RESP_EVT */
      break;
 800b39a:	e0d9      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C1_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C1_NOTIFY_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C1_NOTIFY_ENABLED_EVT\n");
 800b39c:	482c      	ldr	r0, [pc, #176]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b39e:	f7fe fc00 	bl	8009ba2 <DbgTraceGetFileName>
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	23e0      	movs	r3, #224	; 0xe0
 800b3a6:	4a2b      	ldr	r2, [pc, #172]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b3a8:	482b      	ldr	r0, [pc, #172]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b3aa:	f001 fffd 	bl	800d3a8 <iprintf>
 800b3ae:	483c      	ldr	r0, [pc, #240]	; (800b4a0 <Custom_STM_App_Notification+0x348>)
 800b3b0:	f002 f880 	bl	800d4b4 <puts>
    	  BeginNotification();
 800b3b4:	f7f6 fd34 	bl	8001e20 <BeginNotification>
      /* USER CODE END CUSTOM_STM_C1_NOTIFY_ENABLED_EVT */
      break;
 800b3b8:	e0ca      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C1_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C1_NOTIFY_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C1_NOTIFY_DISABLED_EVT\n");
 800b3ba:	4825      	ldr	r0, [pc, #148]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b3bc:	f7fe fbf1 	bl	8009ba2 <DbgTraceGetFileName>
 800b3c0:	4601      	mov	r1, r0
 800b3c2:	23e7      	movs	r3, #231	; 0xe7
 800b3c4:	4a23      	ldr	r2, [pc, #140]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b3c6:	4824      	ldr	r0, [pc, #144]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b3c8:	f001 ffee 	bl	800d3a8 <iprintf>
 800b3cc:	4835      	ldr	r0, [pc, #212]	; (800b4a4 <Custom_STM_App_Notification+0x34c>)
 800b3ce:	f002 f871 	bl	800d4b4 <puts>
    	  FinishNotification();
 800b3d2:	f7f6 fd49 	bl	8001e68 <FinishNotification>
      /* USER CODE END CUSTOM_STM_C1_NOTIFY_DISABLED_EVT */
      break;
 800b3d6:	e0bb      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C2_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C2_READ_EVT */
    	Toggle_LED('R');
 800b3d8:	2052      	movs	r0, #82	; 0x52
 800b3da:	f7f6 fe55 	bl	8002088 <Toggle_LED>
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C2_READ_EVT\n");
 800b3de:	481c      	ldr	r0, [pc, #112]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b3e0:	f7fe fbdf 	bl	8009ba2 <DbgTraceGetFileName>
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	23ef      	movs	r3, #239	; 0xef
 800b3e8:	4a1a      	ldr	r2, [pc, #104]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b3ea:	481b      	ldr	r0, [pc, #108]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b3ec:	f001 ffdc 	bl	800d3a8 <iprintf>
 800b3f0:	482d      	ldr	r0, [pc, #180]	; (800b4a8 <Custom_STM_App_Notification+0x350>)
 800b3f2:	f002 f85f 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C2_READ_EVT */
      break;
 800b3f6:	e0ab      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C2_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C2_WRITE_NO_RESP_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C2_WRITE_NO_RESP_EVT\n");
 800b3f8:	4815      	ldr	r0, [pc, #84]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b3fa:	f7fe fbd2 	bl	8009ba2 <DbgTraceGetFileName>
 800b3fe:	4601      	mov	r1, r0
 800b400:	23f5      	movs	r3, #245	; 0xf5
 800b402:	4a14      	ldr	r2, [pc, #80]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b404:	4814      	ldr	r0, [pc, #80]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b406:	f001 ffcf 	bl	800d3a8 <iprintf>
 800b40a:	4828      	ldr	r0, [pc, #160]	; (800b4ac <Custom_STM_App_Notification+0x354>)
 800b40c:	f002 f852 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C2_WRITE_NO_RESP_EVT */
      break;
 800b410:	e09e      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C3_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C3_READ_EVT */
    	 Toggle_LED('R');
 800b412:	2052      	movs	r0, #82	; 0x52
 800b414:	f7f6 fe38 	bl	8002088 <Toggle_LED>
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C3_READ_EVT\n");
 800b418:	480d      	ldr	r0, [pc, #52]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b41a:	f7fe fbc2 	bl	8009ba2 <DbgTraceGetFileName>
 800b41e:	4601      	mov	r1, r0
 800b420:	23fc      	movs	r3, #252	; 0xfc
 800b422:	4a0c      	ldr	r2, [pc, #48]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b424:	480c      	ldr	r0, [pc, #48]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b426:	f001 ffbf 	bl	800d3a8 <iprintf>
 800b42a:	4821      	ldr	r0, [pc, #132]	; (800b4b0 <Custom_STM_App_Notification+0x358>)
 800b42c:	f002 f842 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C3_READ_EVT */
      break;
 800b430:	e08e      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C3_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C3_WRITE_NO_RESP_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C3_WRITE_NO_RESP_EVT\n");
 800b432:	4807      	ldr	r0, [pc, #28]	; (800b450 <Custom_STM_App_Notification+0x2f8>)
 800b434:	f7fe fbb5 	bl	8009ba2 <DbgTraceGetFileName>
 800b438:	4601      	mov	r1, r0
 800b43a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b43e:	4a05      	ldr	r2, [pc, #20]	; (800b454 <Custom_STM_App_Notification+0x2fc>)
 800b440:	4805      	ldr	r0, [pc, #20]	; (800b458 <Custom_STM_App_Notification+0x300>)
 800b442:	f001 ffb1 	bl	800d3a8 <iprintf>
 800b446:	481b      	ldr	r0, [pc, #108]	; (800b4b4 <Custom_STM_App_Notification+0x35c>)
 800b448:	f002 f834 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C3_WRITE_NO_RESP_EVT */
      break;
 800b44c:	e080      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>
 800b44e:	bf00      	nop
 800b450:	0800eca0 	.word	0x0800eca0
 800b454:	080104c8 	.word	0x080104c8
 800b458:	0800ecc0 	.word	0x0800ecc0
 800b45c:	0800ecd4 	.word	0x0800ecd4
 800b460:	0800ecfc 	.word	0x0800ecfc
 800b464:	0800ed20 	.word	0x0800ed20
 800b468:	0800ed50 	.word	0x0800ed50
 800b46c:	0800ed84 	.word	0x0800ed84
 800b470:	0800edb8 	.word	0x0800edb8
 800b474:	0800eddc 	.word	0x0800eddc
 800b478:	0800ee08 	.word	0x0800ee08
 800b47c:	0800ee34 	.word	0x0800ee34
 800b480:	0800ee64 	.word	0x0800ee64
 800b484:	0800ee94 	.word	0x0800ee94
 800b488:	0800eec4 	.word	0x0800eec4
 800b48c:	0800eef4 	.word	0x0800eef4
 800b490:	0800ef24 	.word	0x0800ef24
 800b494:	0800ef4c 	.word	0x0800ef4c
 800b498:	0800ef78 	.word	0x0800ef78
 800b49c:	0800ef9c 	.word	0x0800ef9c
 800b4a0:	0800efc8 	.word	0x0800efc8
 800b4a4:	0800eff4 	.word	0x0800eff4
 800b4a8:	0800f020 	.word	0x0800f020
 800b4ac:	0800f044 	.word	0x0800f044
 800b4b0:	0800f070 	.word	0x0800f070
 800b4b4:	0800f094 	.word	0x0800f094

    case CUSTOM_STM_C3_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C3_NOTIFY_ENABLED_EVT */
    	 Toggle_LED('R');
 800b4b8:	2052      	movs	r0, #82	; 0x52
 800b4ba:	f7f6 fde5 	bl	8002088 <Toggle_LED>
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C3_NOTIFY_ENABLED_EVT\n");
 800b4be:	482d      	ldr	r0, [pc, #180]	; (800b574 <Custom_STM_App_Notification+0x41c>)
 800b4c0:	f7fe fb6f 	bl	8009ba2 <DbgTraceGetFileName>
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	f240 1309 	movw	r3, #265	; 0x109
 800b4ca:	4a2b      	ldr	r2, [pc, #172]	; (800b578 <Custom_STM_App_Notification+0x420>)
 800b4cc:	482b      	ldr	r0, [pc, #172]	; (800b57c <Custom_STM_App_Notification+0x424>)
 800b4ce:	f001 ff6b 	bl	800d3a8 <iprintf>
 800b4d2:	482b      	ldr	r0, [pc, #172]	; (800b580 <Custom_STM_App_Notification+0x428>)
 800b4d4:	f001 ffee 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C3_NOTIFY_ENABLED_EVT */
      break;
 800b4d8:	e03a      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C3_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C3_NOTIFY_DISABLED_EVT */
    	 Toggle_LED('R');
 800b4da:	2052      	movs	r0, #82	; 0x52
 800b4dc:	f7f6 fdd4 	bl	8002088 <Toggle_LED>
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C3_NOTIFY_DISABLED_EVT\n");
 800b4e0:	4824      	ldr	r0, [pc, #144]	; (800b574 <Custom_STM_App_Notification+0x41c>)
 800b4e2:	f7fe fb5e 	bl	8009ba2 <DbgTraceGetFileName>
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b4ec:	4a22      	ldr	r2, [pc, #136]	; (800b578 <Custom_STM_App_Notification+0x420>)
 800b4ee:	4823      	ldr	r0, [pc, #140]	; (800b57c <Custom_STM_App_Notification+0x424>)
 800b4f0:	f001 ff5a 	bl	800d3a8 <iprintf>
 800b4f4:	4823      	ldr	r0, [pc, #140]	; (800b584 <Custom_STM_App_Notification+0x42c>)
 800b4f6:	f001 ffdd 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C3_NOTIFY_DISABLED_EVT */
      break;
 800b4fa:	e029      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C3_INDICATE_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C3_INDICATE_ENABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C3_INDICATE_ENABLED_EVT\n");
 800b4fc:	481d      	ldr	r0, [pc, #116]	; (800b574 <Custom_STM_App_Notification+0x41c>)
 800b4fe:	f7fe fb50 	bl	8009ba2 <DbgTraceGetFileName>
 800b502:	4601      	mov	r1, r0
 800b504:	f44f 738b 	mov.w	r3, #278	; 0x116
 800b508:	4a1b      	ldr	r2, [pc, #108]	; (800b578 <Custom_STM_App_Notification+0x420>)
 800b50a:	481c      	ldr	r0, [pc, #112]	; (800b57c <Custom_STM_App_Notification+0x424>)
 800b50c:	f001 ff4c 	bl	800d3a8 <iprintf>
 800b510:	481d      	ldr	r0, [pc, #116]	; (800b588 <Custom_STM_App_Notification+0x430>)
 800b512:	f001 ffcf 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C3_INDICATE_ENABLED_EVT */
      break;
 800b516:	e01b      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    case CUSTOM_STM_C3_INDICATE_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_C3_INDICATE_DISABLED_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_C3_INDICATE_DISABLED_EVT\n");
 800b518:	4816      	ldr	r0, [pc, #88]	; (800b574 <Custom_STM_App_Notification+0x41c>)
 800b51a:	f7fe fb42 	bl	8009ba2 <DbgTraceGetFileName>
 800b51e:	4601      	mov	r1, r0
 800b520:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800b524:	4a14      	ldr	r2, [pc, #80]	; (800b578 <Custom_STM_App_Notification+0x420>)
 800b526:	4815      	ldr	r0, [pc, #84]	; (800b57c <Custom_STM_App_Notification+0x424>)
 800b528:	f001 ff3e 	bl	800d3a8 <iprintf>
 800b52c:	4817      	ldr	r0, [pc, #92]	; (800b58c <Custom_STM_App_Notification+0x434>)
 800b52e:	f001 ffc1 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_C3_INDICATE_DISABLED_EVT */
      break;
 800b532:	e00d      	b.n	800b550 <Custom_STM_App_Notification+0x3f8>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_App_Notification_default\n");
 800b534:	480f      	ldr	r0, [pc, #60]	; (800b574 <Custom_STM_App_Notification+0x41c>)
 800b536:	f7fe fb34 	bl	8009ba2 <DbgTraceGetFileName>
 800b53a:	4601      	mov	r1, r0
 800b53c:	f44f 7391 	mov.w	r3, #290	; 0x122
 800b540:	4a0d      	ldr	r2, [pc, #52]	; (800b578 <Custom_STM_App_Notification+0x420>)
 800b542:	480e      	ldr	r0, [pc, #56]	; (800b57c <Custom_STM_App_Notification+0x424>)
 800b544:	f001 ff30 	bl	800d3a8 <iprintf>
 800b548:	4811      	ldr	r0, [pc, #68]	; (800b590 <Custom_STM_App_Notification+0x438>)
 800b54a:	f001 ffb3 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800b54e:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */
  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_App_Notification_2\n");
 800b550:	4808      	ldr	r0, [pc, #32]	; (800b574 <Custom_STM_App_Notification+0x41c>)
 800b552:	f7fe fb26 	bl	8009ba2 <DbgTraceGetFileName>
 800b556:	4601      	mov	r1, r0
 800b558:	f240 1327 	movw	r3, #295	; 0x127
 800b55c:	4a06      	ldr	r2, [pc, #24]	; (800b578 <Custom_STM_App_Notification+0x420>)
 800b55e:	4807      	ldr	r0, [pc, #28]	; (800b57c <Custom_STM_App_Notification+0x424>)
 800b560:	f001 ff22 	bl	800d3a8 <iprintf>
 800b564:	480b      	ldr	r0, [pc, #44]	; (800b594 <Custom_STM_App_Notification+0x43c>)
 800b566:	f001 ffa5 	bl	800d4b4 <puts>
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800b56a:	bf00      	nop
}
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	0800eca0 	.word	0x0800eca0
 800b578:	080104c8 	.word	0x080104c8
 800b57c:	0800ecc0 	.word	0x0800ecc0
 800b580:	0800f0c0 	.word	0x0800f0c0
 800b584:	0800f0ec 	.word	0x0800f0ec
 800b588:	0800f118 	.word	0x0800f118
 800b58c:	0800f148 	.word	0x0800f148
 800b590:	0800f178 	.word	0x0800f178
 800b594:	0800f1a8 	.word	0x0800f1a8

0800b598 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */
	  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Notification_1\n");
 800b5a0:	4827      	ldr	r0, [pc, #156]	; (800b640 <Custom_APP_Notification+0xa8>)
 800b5a2:	f7fe fafe 	bl	8009ba2 <DbgTraceGetFileName>
 800b5a6:	4601      	mov	r1, r0
 800b5a8:	f240 132f 	movw	r3, #303	; 0x12f
 800b5ac:	4a25      	ldr	r2, [pc, #148]	; (800b644 <Custom_APP_Notification+0xac>)
 800b5ae:	4826      	ldr	r0, [pc, #152]	; (800b648 <Custom_APP_Notification+0xb0>)
 800b5b0:	f001 fefa 	bl	800d3a8 <iprintf>
 800b5b4:	4825      	ldr	r0, [pc, #148]	; (800b64c <Custom_APP_Notification+0xb4>)
 800b5b6:	f001 ff7d 	bl	800d4b4 <puts>
  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <Custom_APP_Notification+0x30>
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d00e      	beq.n	800b5e4 <Custom_APP_Notification+0x4c>
 800b5c6:	e01b      	b.n	800b600 <Custom_APP_Notification+0x68>
    /* USER CODE BEGIN CUSTOM_APP_Notification_Custom_Evt_Opcode */

    /* USER CODE END P2PS_CUSTOM_Notification_Custom_Evt_Opcode */
    case CUSTOM_CONN_HANDLE_EVT :
      /* USER CODE BEGIN CUSTOM_CONN_HANDLE_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_CONN_HANDLE_EVT\n");
 800b5c8:	481d      	ldr	r0, [pc, #116]	; (800b640 <Custom_APP_Notification+0xa8>)
 800b5ca:	f7fe faea 	bl	8009ba2 <DbgTraceGetFileName>
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	f240 1339 	movw	r3, #313	; 0x139
 800b5d4:	4a1b      	ldr	r2, [pc, #108]	; (800b644 <Custom_APP_Notification+0xac>)
 800b5d6:	481c      	ldr	r0, [pc, #112]	; (800b648 <Custom_APP_Notification+0xb0>)
 800b5d8:	f001 fee6 	bl	800d3a8 <iprintf>
 800b5dc:	481c      	ldr	r0, [pc, #112]	; (800b650 <Custom_APP_Notification+0xb8>)
 800b5de:	f001 ff69 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_CONN_HANDLE_EVT */
      break;
 800b5e2:	e01b      	b.n	800b61c <Custom_APP_Notification+0x84>

    case CUSTOM_DISCON_HANDLE_EVT :
      /* USER CODE BEGIN CUSTOM_DISCON_HANDLE_EVT */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_DISCON_HANDLE_EVT\n");
 800b5e4:	4816      	ldr	r0, [pc, #88]	; (800b640 <Custom_APP_Notification+0xa8>)
 800b5e6:	f7fe fadc 	bl	8009ba2 <DbgTraceGetFileName>
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	f240 133f 	movw	r3, #319	; 0x13f
 800b5f0:	4a14      	ldr	r2, [pc, #80]	; (800b644 <Custom_APP_Notification+0xac>)
 800b5f2:	4815      	ldr	r0, [pc, #84]	; (800b648 <Custom_APP_Notification+0xb0>)
 800b5f4:	f001 fed8 	bl	800d3a8 <iprintf>
 800b5f8:	4816      	ldr	r0, [pc, #88]	; (800b654 <Custom_APP_Notification+0xbc>)
 800b5fa:	f001 ff5b 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_DISCON_HANDLE_EVT */
      break;
 800b5fe:	e00d      	b.n	800b61c <Custom_APP_Notification+0x84>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */
    	  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Notification_default\n");
 800b600:	480f      	ldr	r0, [pc, #60]	; (800b640 <Custom_APP_Notification+0xa8>)
 800b602:	f7fe face 	bl	8009ba2 <DbgTraceGetFileName>
 800b606:	4601      	mov	r1, r0
 800b608:	f240 1345 	movw	r3, #325	; 0x145
 800b60c:	4a0d      	ldr	r2, [pc, #52]	; (800b644 <Custom_APP_Notification+0xac>)
 800b60e:	480e      	ldr	r0, [pc, #56]	; (800b648 <Custom_APP_Notification+0xb0>)
 800b610:	f001 feca 	bl	800d3a8 <iprintf>
 800b614:	4810      	ldr	r0, [pc, #64]	; (800b658 <Custom_APP_Notification+0xc0>)
 800b616:	f001 ff4d 	bl	800d4b4 <puts>
      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b61a:	bf00      	nop
  }

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */
  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Notification_2\n");
 800b61c:	4808      	ldr	r0, [pc, #32]	; (800b640 <Custom_APP_Notification+0xa8>)
 800b61e:	f7fe fac0 	bl	8009ba2 <DbgTraceGetFileName>
 800b622:	4601      	mov	r1, r0
 800b624:	f240 134b 	movw	r3, #331	; 0x14b
 800b628:	4a06      	ldr	r2, [pc, #24]	; (800b644 <Custom_APP_Notification+0xac>)
 800b62a:	4807      	ldr	r0, [pc, #28]	; (800b648 <Custom_APP_Notification+0xb0>)
 800b62c:	f001 febc 	bl	800d3a8 <iprintf>
 800b630:	480a      	ldr	r0, [pc, #40]	; (800b65c <Custom_APP_Notification+0xc4>)
 800b632:	f001 ff3f 	bl	800d4b4 <puts>
  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b636:	bf00      	nop
}
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	0800eca0 	.word	0x0800eca0
 800b644:	080104e4 	.word	0x080104e4
 800b648:	0800ecc0 	.word	0x0800ecc0
 800b64c:	0800f1d0 	.word	0x0800f1d0
 800b650:	0800f1f4 	.word	0x0800f1f4
 800b654:	0800f218 	.word	0x0800f218
 800b658:	0800f23c 	.word	0x0800f23c
 800b65c:	0800f268 	.word	0x0800f268

0800b660 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  APP_DBG_MSG("\r\n\r Entry CUSTOM_APP_Init\n");
 800b664:	480e      	ldr	r0, [pc, #56]	; (800b6a0 <Custom_APP_Init+0x40>)
 800b666:	f7fe fa9c 	bl	8009ba2 <DbgTraceGetFileName>
 800b66a:	4601      	mov	r1, r0
 800b66c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800b670:	4a0c      	ldr	r2, [pc, #48]	; (800b6a4 <Custom_APP_Init+0x44>)
 800b672:	480d      	ldr	r0, [pc, #52]	; (800b6a8 <Custom_APP_Init+0x48>)
 800b674:	f001 fe98 	bl	800d3a8 <iprintf>
 800b678:	480c      	ldr	r0, [pc, #48]	; (800b6ac <Custom_APP_Init+0x4c>)
 800b67a:	f001 ff1b 	bl	800d4b4 <puts>
	  Custom_Updated_Characteristic1=0;
 800b67e:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <Custom_APP_Init+0x50>)
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
	  Custom_Updated_Characteristic2=0;
 800b684:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <Custom_APP_Init+0x54>)
 800b686:	2200      	movs	r2, #0
 800b688:	601a      	str	r2, [r3, #0]
	  Custom_Updated_Characteristic3=0;
 800b68a:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <Custom_APP_Init+0x58>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
	  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_ACTION, UTIL_SEQ_RFU, My_Action);
 800b690:	4a0a      	ldr	r2, [pc, #40]	; (800b6bc <Custom_APP_Init+0x5c>)
 800b692:	2100      	movs	r1, #0
 800b694:	2004      	movs	r0, #4
 800b696:	f001 fd03 	bl	800d0a0 <UTIL_SEQ_RegTask>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b69a:	bf00      	nop
}
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	0800eca0 	.word	0x0800eca0
 800b6a4:	080104fc 	.word	0x080104fc
 800b6a8:	0800ecc0 	.word	0x0800ecc0
 800b6ac:	0800f28c 	.word	0x0800f28c
 800b6b0:	200003c8 	.word	0x200003c8
 800b6b4:	200003c4 	.word	0x200003c4
 800b6b8:	200003b0 	.word	0x200003b0
 800b6bc:	0800b6c1 	.word	0x0800b6c1

0800b6c0 <My_Action>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void My_Action(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
	  APP_DBG_MSG("Welcome to My action\n");
 800b6c4:	4835      	ldr	r0, [pc, #212]	; (800b79c <My_Action+0xdc>)
 800b6c6:	f7fe fa6c 	bl	8009ba2 <DbgTraceGetFileName>
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	f240 230a 	movw	r3, #522	; 0x20a
 800b6d0:	4a33      	ldr	r2, [pc, #204]	; (800b7a0 <My_Action+0xe0>)
 800b6d2:	4834      	ldr	r0, [pc, #208]	; (800b7a4 <My_Action+0xe4>)
 800b6d4:	f001 fe68 	bl	800d3a8 <iprintf>
 800b6d8:	4833      	ldr	r0, [pc, #204]	; (800b7a8 <My_Action+0xe8>)
 800b6da:	f001 feeb 	bl	800d4b4 <puts>
	  if(Custom_Updated_Characteristic1==1)
 800b6de:	4b33      	ldr	r3, [pc, #204]	; (800b7ac <My_Action+0xec>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d11a      	bne.n	800b71c <My_Action+0x5c>
	  	  {
		  APP_DBG_MSG("Custom_Characteristic 1 legnth : %d\n",Custom_Characteristic1.Length);
 800b6e6:	482d      	ldr	r0, [pc, #180]	; (800b79c <My_Action+0xdc>)
 800b6e8:	f7fe fa5b 	bl	8009ba2 <DbgTraceGetFileName>
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	f240 230d 	movw	r3, #525	; 0x20d
 800b6f2:	4a2b      	ldr	r2, [pc, #172]	; (800b7a0 <My_Action+0xe0>)
 800b6f4:	482b      	ldr	r0, [pc, #172]	; (800b7a4 <My_Action+0xe4>)
 800b6f6:	f001 fe57 	bl	800d3a8 <iprintf>
 800b6fa:	4b2d      	ldr	r3, [pc, #180]	; (800b7b0 <My_Action+0xf0>)
 800b6fc:	791b      	ldrb	r3, [r3, #4]
 800b6fe:	4619      	mov	r1, r3
 800b700:	482c      	ldr	r0, [pc, #176]	; (800b7b4 <My_Action+0xf4>)
 800b702:	f001 fe51 	bl	800d3a8 <iprintf>
		  //Custom_STM_App_Update_Char(CUSTOM_STM_C1, Custom_Characteristic1.pPayload);
		  Custom_Characteristic_Send(CUSTOM_STM_C1, Custom_Characteristic1.pPayload,Custom_Characteristic1.Length,0);
 800b706:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <My_Action+0xf0>)
 800b708:	6819      	ldr	r1, [r3, #0]
 800b70a:	4b29      	ldr	r3, [pc, #164]	; (800b7b0 <My_Action+0xf0>)
 800b70c:	791a      	ldrb	r2, [r3, #4]
 800b70e:	2300      	movs	r3, #0
 800b710:	2006      	movs	r0, #6
 800b712:	f000 f8d1 	bl	800b8b8 <Custom_Characteristic_Send>
		  Custom_Updated_Characteristic1=0;
 800b716:	4b25      	ldr	r3, [pc, #148]	; (800b7ac <My_Action+0xec>)
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
	  	  }
	  if(Custom_Updated_Characteristic2==1)
 800b71c:	4b26      	ldr	r3, [pc, #152]	; (800b7b8 <My_Action+0xf8>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d11a      	bne.n	800b75a <My_Action+0x9a>
	 	  {
	 		  APP_DBG_MSG("Custom_Characteristic 2 legnth : %d\n",Custom_Characteristic2.Length);
 800b724:	481d      	ldr	r0, [pc, #116]	; (800b79c <My_Action+0xdc>)
 800b726:	f7fe fa3c 	bl	8009ba2 <DbgTraceGetFileName>
 800b72a:	4601      	mov	r1, r0
 800b72c:	f44f 7305 	mov.w	r3, #532	; 0x214
 800b730:	4a1b      	ldr	r2, [pc, #108]	; (800b7a0 <My_Action+0xe0>)
 800b732:	481c      	ldr	r0, [pc, #112]	; (800b7a4 <My_Action+0xe4>)
 800b734:	f001 fe38 	bl	800d3a8 <iprintf>
 800b738:	4b20      	ldr	r3, [pc, #128]	; (800b7bc <My_Action+0xfc>)
 800b73a:	791b      	ldrb	r3, [r3, #4]
 800b73c:	4619      	mov	r1, r3
 800b73e:	4820      	ldr	r0, [pc, #128]	; (800b7c0 <My_Action+0x100>)
 800b740:	f001 fe32 	bl	800d3a8 <iprintf>
	 		 Custom_Characteristic_Send(CUSTOM_STM_C2, Custom_Characteristic2.pPayload,Custom_Characteristic2.Length,0);
 800b744:	4b1d      	ldr	r3, [pc, #116]	; (800b7bc <My_Action+0xfc>)
 800b746:	6819      	ldr	r1, [r3, #0]
 800b748:	4b1c      	ldr	r3, [pc, #112]	; (800b7bc <My_Action+0xfc>)
 800b74a:	791a      	ldrb	r2, [r3, #4]
 800b74c:	2300      	movs	r3, #0
 800b74e:	2007      	movs	r0, #7
 800b750:	f000 f8b2 	bl	800b8b8 <Custom_Characteristic_Send>
	 		 Custom_Updated_Characteristic2=0;
 800b754:	4b18      	ldr	r3, [pc, #96]	; (800b7b8 <My_Action+0xf8>)
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
	 	  }
	  if(Custom_Updated_Characteristic3==1)
 800b75a:	4b1a      	ldr	r3, [pc, #104]	; (800b7c4 <My_Action+0x104>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d11a      	bne.n	800b798 <My_Action+0xd8>
	 	  {
	 		  APP_DBG_MSG("Custom_Characteristic 3 legnth : %d\n",Custom_Characteristic3.Length);
 800b762:	480e      	ldr	r0, [pc, #56]	; (800b79c <My_Action+0xdc>)
 800b764:	f7fe fa1d 	bl	8009ba2 <DbgTraceGetFileName>
 800b768:	4601      	mov	r1, r0
 800b76a:	f240 231a 	movw	r3, #538	; 0x21a
 800b76e:	4a0c      	ldr	r2, [pc, #48]	; (800b7a0 <My_Action+0xe0>)
 800b770:	480c      	ldr	r0, [pc, #48]	; (800b7a4 <My_Action+0xe4>)
 800b772:	f001 fe19 	bl	800d3a8 <iprintf>
 800b776:	4b14      	ldr	r3, [pc, #80]	; (800b7c8 <My_Action+0x108>)
 800b778:	791b      	ldrb	r3, [r3, #4]
 800b77a:	4619      	mov	r1, r3
 800b77c:	4813      	ldr	r0, [pc, #76]	; (800b7cc <My_Action+0x10c>)
 800b77e:	f001 fe13 	bl	800d3a8 <iprintf>
	 		  Custom_Characteristic_Send(CUSTOM_STM_C3, Custom_Characteristic3.pPayload,Custom_Characteristic3.Length,0);
 800b782:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <My_Action+0x108>)
 800b784:	6819      	ldr	r1, [r3, #0]
 800b786:	4b10      	ldr	r3, [pc, #64]	; (800b7c8 <My_Action+0x108>)
 800b788:	791a      	ldrb	r2, [r3, #4]
 800b78a:	2300      	movs	r3, #0
 800b78c:	2008      	movs	r0, #8
 800b78e:	f000 f893 	bl	800b8b8 <Custom_Characteristic_Send>
	 		  Custom_Updated_Characteristic3=0;
 800b792:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <My_Action+0x104>)
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
	 	  }

}
 800b798:	bf00      	nop
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	0800eca0 	.word	0x0800eca0
 800b7a0:	0801050c 	.word	0x0801050c
 800b7a4:	0800ecc0 	.word	0x0800ecc0
 800b7a8:	0800f3a8 	.word	0x0800f3a8
 800b7ac:	200003c8 	.word	0x200003c8
 800b7b0:	200003b4 	.word	0x200003b4
 800b7b4:	0800f3c0 	.word	0x0800f3c0
 800b7b8:	200003c4 	.word	0x200003c4
 800b7bc:	200003bc 	.word	0x200003bc
 800b7c0:	0800f3e8 	.word	0x0800f3e8
 800b7c4:	200003b0 	.word	0x200003b0
 800b7c8:	200003a8 	.word	0x200003a8
 800b7cc:	0800f410 	.word	0x0800f410

0800b7d0 <Ask_My_Action>:
void Ask_My_Action(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
	  APP_DBG_MSG("Ask for My action/n");
 800b7d4:	4809      	ldr	r0, [pc, #36]	; (800b7fc <Ask_My_Action+0x2c>)
 800b7d6:	f7fe f9e4 	bl	8009ba2 <DbgTraceGetFileName>
 800b7da:	4601      	mov	r1, r0
 800b7dc:	f240 2322 	movw	r3, #546	; 0x222
 800b7e0:	4a07      	ldr	r2, [pc, #28]	; (800b800 <Ask_My_Action+0x30>)
 800b7e2:	4808      	ldr	r0, [pc, #32]	; (800b804 <Ask_My_Action+0x34>)
 800b7e4:	f001 fde0 	bl	800d3a8 <iprintf>
 800b7e8:	4807      	ldr	r0, [pc, #28]	; (800b808 <Ask_My_Action+0x38>)
 800b7ea:	f001 fddd 	bl	800d3a8 <iprintf>
	  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_ACTION,CFG_SCH_PRIO_0);//HW semaphore
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	2004      	movs	r0, #4
 800b7f2:	f001 fc77 	bl	800d0e4 <UTIL_SEQ_SetTask>
}
 800b7f6:	bf00      	nop
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	0800eca0 	.word	0x0800eca0
 800b800:	08010518 	.word	0x08010518
 800b804:	0800ecc0 	.word	0x0800ecc0
 800b808:	0800f438 	.word	0x0800f438

0800b80c <Mirror>:
#define COPY_CHARACTERISTIC3_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xfe,0xed,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)

/* USER CODE BEGIN PF */

void Mirror(uint8_t *pPayload,uint8_t Length)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	460b      	mov	r3, r1
 800b816:	70fb      	strb	r3, [r7, #3]
	//mirror function
	pPayload[Length-1]++;//increase last byte as use case specified
 800b818:	78fb      	ldrb	r3, [r7, #3]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4413      	add	r3, r2
 800b820:	781a      	ldrb	r2, [r3, #0]
 800b822:	3201      	adds	r2, #1
 800b824:	b2d2      	uxtb	r2, r2
 800b826:	701a      	strb	r2, [r3, #0]
	Custom_Characteristic2.pPayload=pPayload;
 800b828:	4a07      	ldr	r2, [pc, #28]	; (800b848 <Mirror+0x3c>)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6013      	str	r3, [r2, #0]
	Custom_Characteristic2.Length=Length;
 800b82e:	4a06      	ldr	r2, [pc, #24]	; (800b848 <Mirror+0x3c>)
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	7113      	strb	r3, [r2, #4]
	Custom_Updated_Characteristic2=1;
 800b834:	4b05      	ldr	r3, [pc, #20]	; (800b84c <Mirror+0x40>)
 800b836:	2201      	movs	r2, #1
 800b838:	601a      	str	r2, [r3, #0]
	Ask_My_Action();
 800b83a:	f7ff ffc9 	bl	800b7d0 <Ask_My_Action>
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	200003bc 	.word	0x200003bc
 800b84c:	200003c4 	.word	0x200003c4

0800b850 <C3_NOTIFICATION>:
void C3_NOTIFICATION(uint8_t *pPayload,uint8_t Size)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	70fb      	strb	r3, [r7, #3]
	 tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b85c:	2342      	movs	r3, #66	; 0x42
 800b85e:	73fb      	strb	r3, [r7, #15]
//    result = aci_gatt_update_char_value(CustomContext.CustomTde_CsHdle,
//                                        CustomContext.CustomC3Hdle,
//                                        0, /* charValOffset */
//										Size, /* charValueLen */
//										Data);
	 APP_DBG_MSG("\r\n\r C3_NOTIFICATION : update char\n");
 800b860:	480f      	ldr	r0, [pc, #60]	; (800b8a0 <C3_NOTIFICATION+0x50>)
 800b862:	f7fe f99e 	bl	8009ba2 <DbgTraceGetFileName>
 800b866:	4601      	mov	r1, r0
 800b868:	2399      	movs	r3, #153	; 0x99
 800b86a:	4a0e      	ldr	r2, [pc, #56]	; (800b8a4 <C3_NOTIFICATION+0x54>)
 800b86c:	480e      	ldr	r0, [pc, #56]	; (800b8a8 <C3_NOTIFICATION+0x58>)
 800b86e:	f001 fd9b 	bl	800d3a8 <iprintf>
 800b872:	480e      	ldr	r0, [pc, #56]	; (800b8ac <C3_NOTIFICATION+0x5c>)
 800b874:	f001 fe1e 	bl	800d4b4 <puts>
//		while(result != BLE_STATUS_SUCCESS)
//			{
			Custom_Characteristic1.pPayload=pPayload;
 800b878:	4a0d      	ldr	r2, [pc, #52]	; (800b8b0 <C3_NOTIFICATION+0x60>)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6013      	str	r3, [r2, #0]
			Custom_Characteristic1.Length=Size;
 800b87e:	4a0c      	ldr	r2, [pc, #48]	; (800b8b0 <C3_NOTIFICATION+0x60>)
 800b880:	78fb      	ldrb	r3, [r7, #3]
 800b882:	7113      	strb	r3, [r2, #4]
			Custom_Updated_Characteristic1=1;
 800b884:	4b0b      	ldr	r3, [pc, #44]	; (800b8b4 <C3_NOTIFICATION+0x64>)
 800b886:	2201      	movs	r2, #1
 800b888:	601a      	str	r2, [r3, #0]
//                                         0, /* charValOffset */
//                                         Size, /* charValueLen */
//                                         (uint8_t *)  pPayload);

    //result=Custom_STM_App_Update_Char(CUSTOM_STM_C1,Data);
    SEND_MES_BLESTATUS(result);
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f6 fc4f 	bl	8002130 <SEND_MES_BLESTATUS>
    Ask_My_Action();
 800b892:	f7ff ff9d 	bl	800b7d0 <Ask_My_Action>
//			}
}
 800b896:	bf00      	nop
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	0800f44c 	.word	0x0800f44c
 800b8a4:	08010528 	.word	0x08010528
 800b8a8:	0800f46c 	.word	0x0800f46c
 800b8ac:	0800f480 	.word	0x0800f480
 800b8b0:	200003b4 	.word	0x200003b4
 800b8b4:	200003c8 	.word	0x200003c8

0800b8b8 <Custom_Characteristic_Send>:
tBleStatus Custom_Characteristic_Send(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload,uint8_t Length,uint8_t Offset)
{
 800b8b8:	b590      	push	{r4, r7, lr}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	6039      	str	r1, [r7, #0]
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	71fb      	strb	r3, [r7, #7]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	71bb      	strb	r3, [r7, #6]
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b8d0:	2342      	movs	r3, #66	; 0x42
 800b8d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */
  APP_DBG_MSG("\r\n\r Welcome to Custom_Characteristic_Send \n");
 800b8d4:	4834      	ldr	r0, [pc, #208]	; (800b9a8 <Custom_Characteristic_Send+0xf0>)
 800b8d6:	f7fe f964 	bl	8009ba2 <DbgTraceGetFileName>
 800b8da:	4601      	mov	r1, r0
 800b8dc:	23ae      	movs	r3, #174	; 0xae
 800b8de:	4a33      	ldr	r2, [pc, #204]	; (800b9ac <Custom_Characteristic_Send+0xf4>)
 800b8e0:	4833      	ldr	r0, [pc, #204]	; (800b9b0 <Custom_Characteristic_Send+0xf8>)
 800b8e2:	f001 fd61 	bl	800d3a8 <iprintf>
 800b8e6:	4833      	ldr	r0, [pc, #204]	; (800b9b4 <Custom_Characteristic_Send+0xfc>)
 800b8e8:	f001 fde4 	bl	800d4b4 <puts>
  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	2b08      	cmp	r3, #8
 800b8f0:	d036      	beq.n	800b960 <Custom_Characteristic_Send+0xa8>
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	dc52      	bgt.n	800b99c <Custom_Characteristic_Send+0xe4>
 800b8f6:	2b06      	cmp	r3, #6
 800b8f8:	d002      	beq.n	800b900 <Custom_Characteristic_Send+0x48>
 800b8fa:	2b07      	cmp	r3, #7
 800b8fc:	d012      	beq.n	800b924 <Custom_Characteristic_Send+0x6c>
	            SEND_MES_BLESTATUS(result);
      /* USER CODE END CUSTOM_STM_Service_3_Char_3*/
      break;

    default:
      break;
 800b8fe:	e04d      	b.n	800b99c <Custom_Characteristic_Send+0xe4>
      result = aci_gatt_update_char_value(CustomContext.CustomTde_CsHdle,
 800b900:	4b2d      	ldr	r3, [pc, #180]	; (800b9b8 <Custom_Characteristic_Send+0x100>)
 800b902:	8a18      	ldrh	r0, [r3, #16]
 800b904:	4b2c      	ldr	r3, [pc, #176]	; (800b9b8 <Custom_Characteristic_Send+0x100>)
 800b906:	8a59      	ldrh	r1, [r3, #18]
 800b908:	79bc      	ldrb	r4, [r7, #6]
 800b90a:	797a      	ldrb	r2, [r7, #5]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	4623      	mov	r3, r4
 800b912:	f7fc fec2 	bl	800869a <aci_gatt_update_char_value>
 800b916:	4603      	mov	r3, r0
 800b918:	73fb      	strb	r3, [r7, #15]
      SEND_MES_BLESTATUS(result);
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7f6 fc07 	bl	8002130 <SEND_MES_BLESTATUS>
      break;
 800b922:	e03c      	b.n	800b99e <Custom_Characteristic_Send+0xe6>
      result = aci_gatt_update_char_value(CustomContext.CustomTde_CsHdle,
 800b924:	4b24      	ldr	r3, [pc, #144]	; (800b9b8 <Custom_Characteristic_Send+0x100>)
 800b926:	8a18      	ldrh	r0, [r3, #16]
 800b928:	4b23      	ldr	r3, [pc, #140]	; (800b9b8 <Custom_Characteristic_Send+0x100>)
 800b92a:	8a99      	ldrh	r1, [r3, #20]
 800b92c:	79bc      	ldrb	r4, [r7, #6]
 800b92e:	797a      	ldrb	r2, [r7, #5]
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	4623      	mov	r3, r4
 800b936:	f7fc feb0 	bl	800869a <aci_gatt_update_char_value>
 800b93a:	4603      	mov	r3, r0
 800b93c:	73fb      	strb	r3, [r7, #15]
      APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_2\n");
 800b93e:	481a      	ldr	r0, [pc, #104]	; (800b9a8 <Custom_Characteristic_Send+0xf0>)
 800b940:	f7fe f92f 	bl	8009ba2 <DbgTraceGetFileName>
 800b944:	4601      	mov	r1, r0
 800b946:	23c8      	movs	r3, #200	; 0xc8
 800b948:	4a18      	ldr	r2, [pc, #96]	; (800b9ac <Custom_Characteristic_Send+0xf4>)
 800b94a:	4819      	ldr	r0, [pc, #100]	; (800b9b0 <Custom_Characteristic_Send+0xf8>)
 800b94c:	f001 fd2c 	bl	800d3a8 <iprintf>
 800b950:	481a      	ldr	r0, [pc, #104]	; (800b9bc <Custom_Characteristic_Send+0x104>)
 800b952:	f001 fdaf 	bl	800d4b4 <puts>
      SEND_MES_BLESTATUS(result);
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7f6 fbe9 	bl	8002130 <SEND_MES_BLESTATUS>
      break;
 800b95e:	e01e      	b.n	800b99e <Custom_Characteristic_Send+0xe6>
      result = aci_gatt_update_char_value(CustomContext.CustomTde_CsHdle,
 800b960:	4b15      	ldr	r3, [pc, #84]	; (800b9b8 <Custom_Characteristic_Send+0x100>)
 800b962:	8a18      	ldrh	r0, [r3, #16]
 800b964:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <Custom_Characteristic_Send+0x100>)
 800b966:	8ad9      	ldrh	r1, [r3, #22]
 800b968:	79bc      	ldrb	r4, [r7, #6]
 800b96a:	797a      	ldrb	r2, [r7, #5]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4623      	mov	r3, r4
 800b972:	f7fc fe92 	bl	800869a <aci_gatt_update_char_value>
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3\n");
 800b97a:	480b      	ldr	r0, [pc, #44]	; (800b9a8 <Custom_Characteristic_Send+0xf0>)
 800b97c:	f7fe f911 	bl	8009ba2 <DbgTraceGetFileName>
 800b980:	4601      	mov	r1, r0
 800b982:	23d4      	movs	r3, #212	; 0xd4
 800b984:	4a09      	ldr	r2, [pc, #36]	; (800b9ac <Custom_Characteristic_Send+0xf4>)
 800b986:	480a      	ldr	r0, [pc, #40]	; (800b9b0 <Custom_Characteristic_Send+0xf8>)
 800b988:	f001 fd0e 	bl	800d3a8 <iprintf>
 800b98c:	480c      	ldr	r0, [pc, #48]	; (800b9c0 <Custom_Characteristic_Send+0x108>)
 800b98e:	f001 fd91 	bl	800d4b4 <puts>
	            SEND_MES_BLESTATUS(result);
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	4618      	mov	r0, r3
 800b996:	f7f6 fbcb 	bl	8002130 <SEND_MES_BLESTATUS>
      break;
 800b99a:	e000      	b.n	800b99e <Custom_Characteristic_Send+0xe6>
      break;
 800b99c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd90      	pop	{r4, r7, pc}
 800b9a8:	0800f44c 	.word	0x0800f44c
 800b9ac:	08010538 	.word	0x08010538
 800b9b0:	0800f46c 	.word	0x0800f46c
 800b9b4:	0800f4a4 	.word	0x0800f4a4
 800b9b8:	20000180 	.word	0x20000180
 800b9bc:	0800f4d0 	.word	0x0800f4d0
 800b9c0:	0800f4f8 	.word	0x0800f4f8

0800b9c4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b09e      	sub	sp, #120	; 0x78
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  aci_gatt_attribute_modified_event_rp0 *attribute_modified;
  aci_gatt_write_permit_req_event_rp0   *write_perm_req;
  aci_gatt_read_permit_req_event_rp0    *read_req;
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */
	  APP_DBG_MSG("\r\n\r Entry Custom_STM_Event_Handler\n");
 800b9cc:	48bd      	ldr	r0, [pc, #756]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800b9ce:	f7fe f8e8 	bl	8009ba2 <DbgTraceGetFileName>
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	23f4      	movs	r3, #244	; 0xf4
 800b9d6:	4abc      	ldr	r2, [pc, #752]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800b9d8:	48bc      	ldr	r0, [pc, #752]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800b9da:	f001 fce5 	bl	800d3a8 <iprintf>
 800b9de:	48bc      	ldr	r0, [pc, #752]	; (800bcd0 <Custom_STM_Event_Handler+0x30c>)
 800b9e0:	f001 fd68 	bl	800d4b4 <puts>
	  uint8_t My_Data_Written_Lenght;
	  uint8_t My_Data_Readen_Lenght;
	  int i;
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  switch(event_pckt->evt)
 800b9f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	2bff      	cmp	r3, #255	; 0xff
 800b9f6:	f040 8547 	bne.w	800c488 <Custom_STM_Event_Handler+0xac4>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b9fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	66bb      	str	r3, [r7, #104]	; 0x68
      switch(blecore_evt->ecode)
 800ba00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	f640 4214 	movw	r2, #3092	; 0xc14
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	f000 834b 	beq.w	800c0a6 <Custom_STM_Event_Handler+0x6e2>
 800ba10:	f640 4214 	movw	r2, #3092	; 0xc14
 800ba14:	4293      	cmp	r3, r2
 800ba16:	f300 851b 	bgt.w	800c450 <Custom_STM_Event_Handler+0xa8c>
 800ba1a:	f640 4201 	movw	r2, #3073	; 0xc01
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d006      	beq.n	800ba30 <Custom_STM_Event_Handler+0x6c>
 800ba22:	f640 4213 	movw	r2, #3091	; 0xc13
 800ba26:	4293      	cmp	r3, r2
 800ba28:	f000 840e 	beq.w	800c248 <Custom_STM_Event_Handler+0x884>
 800ba2c:	f000 bd10 	b.w	800c450 <Custom_STM_Event_Handler+0xa8c>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
	        	  APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN\n");
 800ba30:	48a4      	ldr	r0, [pc, #656]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800ba32:	f7fe f8b6 	bl	8009ba2 <DbgTraceGetFileName>
 800ba36:	4601      	mov	r1, r0
 800ba38:	f44f 7384 	mov.w	r3, #264	; 0x108
 800ba3c:	4aa2      	ldr	r2, [pc, #648]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800ba3e:	48a3      	ldr	r0, [pc, #652]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800ba40:	f001 fcb2 	bl	800d3a8 <iprintf>
 800ba44:	48a3      	ldr	r0, [pc, #652]	; (800bcd4 <Custom_STM_Event_Handler+0x310>)
 800ba46:	f001 fd35 	bl	800d4b4 <puts>
          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ba4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba4c:	3302      	adds	r3, #2
 800ba4e:	65bb      	str	r3, [r7, #88]	; 0x58
          if(attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ba50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba52:	885b      	ldrh	r3, [r3, #2]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	461a      	mov	r2, r3
 800ba58:	4b9f      	ldr	r3, [pc, #636]	; (800bcd8 <Custom_STM_Event_Handler+0x314>)
 800ba5a:	889b      	ldrh	r3, [r3, #4]
 800ba5c:	3302      	adds	r3, #2
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d16a      	bne.n	800bb38 <Custom_STM_Event_Handler+0x174>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800ba62:	2301      	movs	r3, #1
 800ba64:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2\n");
 800ba68:	4896      	ldr	r0, [pc, #600]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800ba6a:	f7fe f89a 	bl	8009ba2 <DbgTraceGetFileName>
 800ba6e:	4601      	mov	r1, r0
 800ba70:	f240 130f 	movw	r3, #271	; 0x10f
 800ba74:	4a94      	ldr	r2, [pc, #592]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800ba76:	4895      	ldr	r0, [pc, #596]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800ba78:	f001 fc96 	bl	800d3a8 <iprintf>
 800ba7c:	4897      	ldr	r0, [pc, #604]	; (800bcdc <Custom_STM_Event_Handler+0x318>)
 800ba7e:	f001 fd19 	bl	800d4b4 <puts>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch(attribute_modified->Attr_Data[0])
 800ba82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba84:	7a1b      	ldrb	r3, [r3, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <Custom_STM_Event_Handler+0xcc>
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d023      	beq.n	800bad6 <Custom_STM_Event_Handler+0x112>
 800ba8e:	e045      	b.n	800bb1c <Custom_STM_Event_Handler+0x158>
              /* USER CODE END CUSTOM_STM_Service_1_Char_2_attribute_modified */

              /* Disabled Notification management */
              case (!(COMSVC_Notification)):
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_Disabled_BEGIN */
					 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_Disabled_BEGIN\n");
 800ba90:	488c      	ldr	r0, [pc, #560]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800ba92:	f7fe f886 	bl	8009ba2 <DbgTraceGetFileName>
 800ba96:	4601      	mov	r1, r0
 800ba98:	f44f 738d 	mov.w	r3, #282	; 0x11a
 800ba9c:	4a8a      	ldr	r2, [pc, #552]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800ba9e:	488b      	ldr	r0, [pc, #556]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800baa0:	f001 fc82 	bl	800d3a8 <iprintf>
 800baa4:	488e      	ldr	r0, [pc, #568]	; (800bce0 <Custom_STM_Event_Handler+0x31c>)
 800baa6:	f001 fd05 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_Disabled_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800baaa:	2303      	movs	r3, #3
 800baac:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff fb4f 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_Disabled_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_Disabled_END\n");
 800baba:	4882      	ldr	r0, [pc, #520]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800babc:	f7fe f871 	bl	8009ba2 <DbgTraceGetFileName>
 800bac0:	4601      	mov	r1, r0
 800bac2:	f240 131f 	movw	r3, #287	; 0x11f
 800bac6:	4a80      	ldr	r2, [pc, #512]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bac8:	4880      	ldr	r0, [pc, #512]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800baca:	f001 fc6d 	bl	800d3a8 <iprintf>
 800bace:	4885      	ldr	r0, [pc, #532]	; (800bce4 <Custom_STM_Event_Handler+0x320>)
 800bad0:	f001 fcf0 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_Disabled_END */
                break;
 800bad4:	e2d9      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              /* Enabled Notification management */
              case COMSVC_Notification:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_BEGIN\n");
 800bad6:	487b      	ldr	r0, [pc, #492]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bad8:	f7fe f863 	bl	8009ba2 <DbgTraceGetFileName>
 800badc:	4601      	mov	r1, r0
 800bade:	f44f 7393 	mov.w	r3, #294	; 0x126
 800bae2:	4a79      	ldr	r2, [pc, #484]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bae4:	4879      	ldr	r0, [pc, #484]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bae6:	f001 fc5f 	bl	800d3a8 <iprintf>
 800baea:	487f      	ldr	r0, [pc, #508]	; (800bce8 <Custom_STM_Event_Handler+0x324>)
 800baec:	f001 fce2 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800baf0:	2302      	movs	r3, #2
 800baf2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800baf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fb2c 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_END\n");
 800bb00:	4870      	ldr	r0, [pc, #448]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bb02:	f7fe f84e 	bl	8009ba2 <DbgTraceGetFileName>
 800bb06:	4601      	mov	r1, r0
 800bb08:	f240 132b 	movw	r3, #299	; 0x12b
 800bb0c:	4a6e      	ldr	r2, [pc, #440]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bb0e:	486f      	ldr	r0, [pc, #444]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bb10:	f001 fc4a 	bl	800d3a8 <iprintf>
 800bb14:	4875      	ldr	r0, [pc, #468]	; (800bcec <Custom_STM_Event_Handler+0x328>)
 800bb16:	f001 fccd 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_COMSVC_Notification_END */
                break;
 800bb1a:	e2b6      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_2_default\n");
 800bb1c:	4869      	ldr	r0, [pc, #420]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bb1e:	f7fe f840 	bl	8009ba2 <DbgTraceGetFileName>
 800bb22:	4601      	mov	r1, r0
 800bb24:	f240 1331 	movw	r3, #305	; 0x131
 800bb28:	4a67      	ldr	r2, [pc, #412]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bb2a:	4868      	ldr	r0, [pc, #416]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bb2c:	f001 fc3c 	bl	800d3a8 <iprintf>
 800bb30:	486f      	ldr	r0, [pc, #444]	; (800bcf0 <Custom_STM_Event_Handler+0x32c>)
 800bb32:	f001 fcbf 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800bb36:	e2a8      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800bb38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb3a:	885b      	ldrh	r3, [r3, #2]
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	461a      	mov	r2, r3
 800bb40:	4b65      	ldr	r3, [pc, #404]	; (800bcd8 <Custom_STM_Event_Handler+0x314>)
 800bb42:	88db      	ldrh	r3, [r3, #6]
 800bb44:	3302      	adds	r3, #2
 800bb46:	429a      	cmp	r2, r3
 800bb48:	f040 809a 	bne.w	800bc80 <Custom_STM_Event_Handler+0x2bc>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3\n");
 800bb52:	485c      	ldr	r0, [pc, #368]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bb54:	f7fe f825 	bl	8009ba2 <DbgTraceGetFileName>
 800bb58:	4601      	mov	r1, r0
 800bb5a:	f240 133b 	movw	r3, #315	; 0x13b
 800bb5e:	4a5a      	ldr	r2, [pc, #360]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bb60:	485a      	ldr	r0, [pc, #360]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bb62:	f001 fc21 	bl	800d3a8 <iprintf>
 800bb66:	4863      	ldr	r0, [pc, #396]	; (800bcf4 <Custom_STM_Event_Handler+0x330>)
 800bb68:	f001 fca4 	bl	800d4b4 <puts>

            /* USER CODE END CUSTOM_STM_Service_1_Char_3 */

            switch(attribute_modified->Attr_Data[0])
 800bb6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb6e:	7a1b      	ldrb	r3, [r3, #8]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d054      	beq.n	800bc1e <Custom_STM_Event_Handler+0x25a>
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	dc75      	bgt.n	800bc64 <Custom_STM_Event_Handler+0x2a0>
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <Custom_STM_Event_Handler+0x1be>
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d02b      	beq.n	800bbd8 <Custom_STM_Event_Handler+0x214>
 800bb80:	e070      	b.n	800bc64 <Custom_STM_Event_Handler+0x2a0>
              /* USER CODE END CUSTOM_STM_Service_1_Char_3_attribute_modified  */

              /* Disabled Notification and Indication management */
              case (!(COMSVC_Notification) | !(COMSVC_Indication)):
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_Disabled_BEGIN  */
			 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_Disabled_BEGIN\n");
 800bb82:	4850      	ldr	r0, [pc, #320]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bb84:	f7fe f80d 	bl	8009ba2 <DbgTraceGetFileName>
 800bb88:	4601      	mov	r1, r0
 800bb8a:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800bb8e:	4a4e      	ldr	r2, [pc, #312]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bb90:	484e      	ldr	r0, [pc, #312]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bb92:	f001 fc09 	bl	800d3a8 <iprintf>
 800bb96:	4858      	ldr	r0, [pc, #352]	; (800bcf8 <Custom_STM_Event_Handler+0x334>)
 800bb98:	f001 fc8c 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_Disabled_BEGIN  */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_NOTIFY_DISABLED_EVT;
 800bb9c:	2307      	movs	r3, #7
 800bb9e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fad6 	bl	800b158 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_INDICATE_DISABLED_EVT;
 800bbac:	2309      	movs	r3, #9
 800bbae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bbb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff face 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_Disabled_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_Disabled_END\n");
 800bbbc:	4841      	ldr	r0, [pc, #260]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bbbe:	f7fd fff0 	bl	8009ba2 <DbgTraceGetFileName>
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	f240 134f 	movw	r3, #335	; 0x14f
 800bbc8:	4a3f      	ldr	r2, [pc, #252]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bbca:	4840      	ldr	r0, [pc, #256]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bbcc:	f001 fbec 	bl	800d3a8 <iprintf>
 800bbd0:	484a      	ldr	r0, [pc, #296]	; (800bcfc <Custom_STM_Event_Handler+0x338>)
 800bbd2:	f001 fc6f 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_Disabled_END */
                break;
 800bbd6:	e258      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              /* Enabled Notification management */
              case COMSVC_Notification:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_BEGIN\n");
 800bbd8:	483a      	ldr	r0, [pc, #232]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bbda:	f7fd ffe2 	bl	8009ba2 <DbgTraceGetFileName>
 800bbde:	4601      	mov	r1, r0
 800bbe0:	f44f 73ab 	mov.w	r3, #342	; 0x156
 800bbe4:	4a38      	ldr	r2, [pc, #224]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bbe6:	4839      	ldr	r0, [pc, #228]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bbe8:	f001 fbde 	bl	800d3a8 <iprintf>
 800bbec:	4844      	ldr	r0, [pc, #272]	; (800bd00 <Custom_STM_Event_Handler+0x33c>)
 800bbee:	f001 fc61 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_NOTIFY_ENABLED_EVT;
 800bbf2:	2306      	movs	r3, #6
 800bbf4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bbf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff faab 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_END\n");
 800bc02:	4830      	ldr	r0, [pc, #192]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bc04:	f7fd ffcd 	bl	8009ba2 <DbgTraceGetFileName>
 800bc08:	4601      	mov	r1, r0
 800bc0a:	f240 135b 	movw	r3, #347	; 0x15b
 800bc0e:	4a2e      	ldr	r2, [pc, #184]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bc10:	482e      	ldr	r0, [pc, #184]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bc12:	f001 fbc9 	bl	800d3a8 <iprintf>
 800bc16:	483b      	ldr	r0, [pc, #236]	; (800bd04 <Custom_STM_Event_Handler+0x340>)
 800bc18:	f001 fc4c 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Notification_END */
                break;
 800bc1c:	e235      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              /* Enabled Indication management */
              case COMSVC_Indication:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_BEGIN\n");
 800bc1e:	4829      	ldr	r0, [pc, #164]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bc20:	f7fd ffbf 	bl	8009ba2 <DbgTraceGetFileName>
 800bc24:	4601      	mov	r1, r0
 800bc26:	f44f 73b1 	mov.w	r3, #354	; 0x162
 800bc2a:	4a27      	ldr	r2, [pc, #156]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bc2c:	4827      	ldr	r0, [pc, #156]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bc2e:	f001 fbbb 	bl	800d3a8 <iprintf>
 800bc32:	4835      	ldr	r0, [pc, #212]	; (800bd08 <Custom_STM_Event_Handler+0x344>)
 800bc34:	f001 fc3e 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MOC_INDICATE_ENABLED_EVT;
 800bc38:	2308      	movs	r3, #8
 800bc3a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bc3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff fa88 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_END\n");
 800bc48:	481e      	ldr	r0, [pc, #120]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bc4a:	f7fd ffaa 	bl	8009ba2 <DbgTraceGetFileName>
 800bc4e:	4601      	mov	r1, r0
 800bc50:	f240 1367 	movw	r3, #359	; 0x167
 800bc54:	4a1c      	ldr	r2, [pc, #112]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bc56:	481d      	ldr	r0, [pc, #116]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bc58:	f001 fba6 	bl	800d3a8 <iprintf>
 800bc5c:	482b      	ldr	r0, [pc, #172]	; (800bd0c <Custom_STM_Event_Handler+0x348>)
 800bc5e:	f001 fc29 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_COMSVC_Indication_END */
                break;
 800bc62:	e212      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_default */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_default\n");
 800bc64:	4817      	ldr	r0, [pc, #92]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bc66:	f7fd ff9c 	bl	8009ba2 <DbgTraceGetFileName>
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	f240 136d 	movw	r3, #365	; 0x16d
 800bc70:	4a15      	ldr	r2, [pc, #84]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bc72:	4816      	ldr	r0, [pc, #88]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bc74:	f001 fb98 	bl	800d3a8 <iprintf>
 800bc78:	4825      	ldr	r0, [pc, #148]	; (800bd10 <Custom_STM_Event_Handler+0x34c>)
 800bc7a:	f001 fc1b 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_1_Char_3_default */
                break;
 800bc7e:	e204      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800bc80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc82:	885b      	ldrh	r3, [r3, #2]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	461a      	mov	r2, r3
 800bc88:	4b13      	ldr	r3, [pc, #76]	; (800bcd8 <Custom_STM_Event_Handler+0x314>)
 800bc8a:	895b      	ldrh	r3, [r3, #10]
 800bc8c:	3302      	adds	r3, #2
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	f040 8096 	bne.w	800bdc0 <Custom_STM_Event_Handler+0x3fc>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1\n");
 800bc9a:	480a      	ldr	r0, [pc, #40]	; (800bcc4 <Custom_STM_Event_Handler+0x300>)
 800bc9c:	f7fd ff81 	bl	8009ba2 <DbgTraceGetFileName>
 800bca0:	4601      	mov	r1, r0
 800bca2:	f240 1377 	movw	r3, #375	; 0x177
 800bca6:	4a08      	ldr	r2, [pc, #32]	; (800bcc8 <Custom_STM_Event_Handler+0x304>)
 800bca8:	4808      	ldr	r0, [pc, #32]	; (800bccc <Custom_STM_Event_Handler+0x308>)
 800bcaa:	f001 fb7d 	bl	800d3a8 <iprintf>
 800bcae:	4819      	ldr	r0, [pc, #100]	; (800bd14 <Custom_STM_Event_Handler+0x350>)
 800bcb0:	f001 fc00 	bl	800d4b4 <puts>
            /* USER CODE END CUSTOM_STM_Service_2_Char_1 */
            switch(attribute_modified->Attr_Data[0])
 800bcb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcb6:	7a1b      	ldrb	r3, [r3, #8]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d02d      	beq.n	800bd18 <Custom_STM_Event_Handler+0x354>
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d04e      	beq.n	800bd5e <Custom_STM_Event_Handler+0x39a>
 800bcc0:	e070      	b.n	800bda4 <Custom_STM_Event_Handler+0x3e0>
 800bcc2:	bf00      	nop
 800bcc4:	0800f44c 	.word	0x0800f44c
 800bcc8:	08010554 	.word	0x08010554
 800bccc:	0800f46c 	.word	0x0800f46c
 800bcd0:	0800f520 	.word	0x0800f520
 800bcd4:	0800f544 	.word	0x0800f544
 800bcd8:	20000180 	.word	0x20000180
 800bcdc:	0800f578 	.word	0x0800f578
 800bce0:	0800f5a0 	.word	0x0800f5a0
 800bce4:	0800f5d8 	.word	0x0800f5d8
 800bce8:	0800f60c 	.word	0x0800f60c
 800bcec:	0800f64c 	.word	0x0800f64c
 800bcf0:	0800f68c 	.word	0x0800f68c
 800bcf4:	0800f6bc 	.word	0x0800f6bc
 800bcf8:	0800f6e4 	.word	0x0800f6e4
 800bcfc:	0800f71c 	.word	0x0800f71c
 800bd00:	0800f750 	.word	0x0800f750
 800bd04:	0800f790 	.word	0x0800f790
 800bd08:	0800f7d0 	.word	0x0800f7d0
 800bd0c:	0800f810 	.word	0x0800f810
 800bd10:	0800f84c 	.word	0x0800f84c
 800bd14:	0800f87c 	.word	0x0800f87c
              /* USER CODE END CUSTOM_STM_Service_2_Char_1_attribute_modified */

              /* Disabled Notification management */
              case (!(COMSVC_Notification)):
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_Disabled_BEGIN */
					 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_Disabled_BEGIN\n");
 800bd18:	48bb      	ldr	r0, [pc, #748]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bd1a:	f7fd ff42 	bl	8009ba2 <DbgTraceGetFileName>
 800bd1e:	4601      	mov	r1, r0
 800bd20:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800bd24:	4ab9      	ldr	r2, [pc, #740]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bd26:	48ba      	ldr	r0, [pc, #744]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bd28:	f001 fb3e 	bl	800d3a8 <iprintf>
 800bd2c:	48b9      	ldr	r0, [pc, #740]	; (800c014 <Custom_STM_Event_Handler+0x650>)
 800bd2e:	f001 fbc1 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_Disabled_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT;
 800bd32:	230b      	movs	r3, #11
 800bd34:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bd38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff fa0b 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_Disabled_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_Disabled_END\n");
 800bd42:	48b1      	ldr	r0, [pc, #708]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bd44:	f7fd ff2d 	bl	8009ba2 <DbgTraceGetFileName>
 800bd48:	4601      	mov	r1, r0
 800bd4a:	f240 1387 	movw	r3, #391	; 0x187
 800bd4e:	4aaf      	ldr	r2, [pc, #700]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bd50:	48af      	ldr	r0, [pc, #700]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bd52:	f001 fb29 	bl	800d3a8 <iprintf>
 800bd56:	48b0      	ldr	r0, [pc, #704]	; (800c018 <Custom_STM_Event_Handler+0x654>)
 800bd58:	f001 fbac 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_Disabled_END */
                break;
 800bd5c:	e195      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              /* Enabled Notification management */
              case COMSVC_Notification:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_BEGIN\n");
 800bd5e:	48aa      	ldr	r0, [pc, #680]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bd60:	f7fd ff1f 	bl	8009ba2 <DbgTraceGetFileName>
 800bd64:	4601      	mov	r1, r0
 800bd66:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 800bd6a:	4aa8      	ldr	r2, [pc, #672]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bd6c:	48a8      	ldr	r0, [pc, #672]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bd6e:	f001 fb1b 	bl	800d3a8 <iprintf>
 800bd72:	48aa      	ldr	r0, [pc, #680]	; (800c01c <Custom_STM_Event_Handler+0x658>)
 800bd74:	f001 fb9e 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT;
 800bd78:	230a      	movs	r3, #10
 800bd7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bd7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff f9e8 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_END\n");
 800bd88:	489f      	ldr	r0, [pc, #636]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bd8a:	f7fd ff0a 	bl	8009ba2 <DbgTraceGetFileName>
 800bd8e:	4601      	mov	r1, r0
 800bd90:	f240 1393 	movw	r3, #403	; 0x193
 800bd94:	4a9d      	ldr	r2, [pc, #628]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bd96:	489e      	ldr	r0, [pc, #632]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bd98:	f001 fb06 	bl	800d3a8 <iprintf>
 800bd9c:	48a0      	ldr	r0, [pc, #640]	; (800c020 <Custom_STM_Event_Handler+0x65c>)
 800bd9e:	f001 fb89 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_COMSVC_Notification_END */
                break;
 800bda2:	e172      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_default */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_1_default\n");
 800bda4:	4898      	ldr	r0, [pc, #608]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bda6:	f7fd fefc 	bl	8009ba2 <DbgTraceGetFileName>
 800bdaa:	4601      	mov	r1, r0
 800bdac:	f240 1399 	movw	r3, #409	; 0x199
 800bdb0:	4a96      	ldr	r2, [pc, #600]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bdb2:	4897      	ldr	r0, [pc, #604]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bdb4:	f001 faf8 	bl	800d3a8 <iprintf>
 800bdb8:	489a      	ldr	r0, [pc, #616]	; (800c024 <Custom_STM_Event_Handler+0x660>)
 800bdba:	f001 fb7b 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_2_Char_1_default */
              break;
 800bdbe:	e164      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800bdc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdc2:	885b      	ldrh	r3, [r3, #2]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	4b97      	ldr	r3, [pc, #604]	; (800c028 <Custom_STM_Event_Handler+0x664>)
 800bdca:	8a5b      	ldrh	r3, [r3, #18]
 800bdcc:	3302      	adds	r3, #2
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d11b      	bne.n	800be0a <Custom_STM_Event_Handler+0x446>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_3_Char_1 */
            switch(attribute_modified->Attr_Data[0])
 800bdd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdda:	7a1b      	ldrb	r3, [r3, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <Custom_STM_Event_Handler+0x422>
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d009      	beq.n	800bdf8 <Custom_STM_Event_Handler+0x434>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_3_Char_1_default */
              break;
 800bde4:	e151      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C1_NOTIFY_DISABLED_EVT;
 800bde6:	2311      	movs	r3, #17
 800bde8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bdec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff f9b1 	bl	800b158 <Custom_STM_App_Notification>
                break;
 800bdf6:	e148      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C1_NOTIFY_ENABLED_EVT;
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bdfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff f9a8 	bl	800b158 <Custom_STM_App_Notification>
                break;
 800be08:	e13f      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800be0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be0c:	885b      	ldrh	r3, [r3, #2]
 800be0e:	b29b      	uxth	r3, r3
 800be10:	461a      	mov	r2, r3
 800be12:	4b85      	ldr	r3, [pc, #532]	; (800c028 <Custom_STM_Event_Handler+0x664>)
 800be14:	8adb      	ldrh	r3, [r3, #22]
 800be16:	3302      	adds	r3, #2
 800be18:	429a      	cmp	r2, r3
 800be1a:	f040 809a 	bne.w	800bf52 <Custom_STM_Event_Handler+0x58e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800be1e:	2301      	movs	r3, #1
 800be20:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3\n");
 800be24:	4878      	ldr	r0, [pc, #480]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800be26:	f7fd febc 	bl	8009ba2 <DbgTraceGetFileName>
 800be2a:	4601      	mov	r1, r0
 800be2c:	f240 13cf 	movw	r3, #463	; 0x1cf
 800be30:	4a76      	ldr	r2, [pc, #472]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800be32:	4877      	ldr	r0, [pc, #476]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800be34:	f001 fab8 	bl	800d3a8 <iprintf>
 800be38:	487c      	ldr	r0, [pc, #496]	; (800c02c <Custom_STM_Event_Handler+0x668>)
 800be3a:	f001 fb3b 	bl	800d4b4 <puts>
            /* USER CODE END CUSTOM_STM_Service_3_Char_3 */

            switch(attribute_modified->Attr_Data[0])
 800be3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be40:	7a1b      	ldrb	r3, [r3, #8]
 800be42:	2b02      	cmp	r3, #2
 800be44:	d054      	beq.n	800bef0 <Custom_STM_Event_Handler+0x52c>
 800be46:	2b02      	cmp	r3, #2
 800be48:	dc75      	bgt.n	800bf36 <Custom_STM_Event_Handler+0x572>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <Custom_STM_Event_Handler+0x490>
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d02b      	beq.n	800beaa <Custom_STM_Event_Handler+0x4e6>
 800be52:	e070      	b.n	800bf36 <Custom_STM_Event_Handler+0x572>
              /* USER CODE END CUSTOM_STM_Service_3_Char_3_attribute_modified  */

              /* Disabled Notification and Indication management */
              case (!(COMSVC_Notification) | !(COMSVC_Indication)):
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_Disabled_BEGIN  */
			 APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_Disabled_BEGIN\n");
 800be54:	486c      	ldr	r0, [pc, #432]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800be56:	f7fd fea4 	bl	8009ba2 <DbgTraceGetFileName>
 800be5a:	4601      	mov	r1, r0
 800be5c:	f240 13db 	movw	r3, #475	; 0x1db
 800be60:	4a6a      	ldr	r2, [pc, #424]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800be62:	486b      	ldr	r0, [pc, #428]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800be64:	f001 faa0 	bl	800d3a8 <iprintf>
 800be68:	4871      	ldr	r0, [pc, #452]	; (800c030 <Custom_STM_Event_Handler+0x66c>)
 800be6a:	f001 fb23 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_3_Char_3_Disabled_BEGIN  */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C3_NOTIFY_DISABLED_EVT;
 800be6e:	2317      	movs	r3, #23
 800be70:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800be74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff f96d 	bl	800b158 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C3_INDICATE_DISABLED_EVT;
 800be7e:	2319      	movs	r3, #25
 800be80:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800be84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800be88:	4618      	mov	r0, r3
 800be8a:	f7ff f965 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_Disabled_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_Disabled_END\n");
 800be8e:	485e      	ldr	r0, [pc, #376]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800be90:	f7fd fe87 	bl	8009ba2 <DbgTraceGetFileName>
 800be94:	4601      	mov	r1, r0
 800be96:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800be9a:	4a5c      	ldr	r2, [pc, #368]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800be9c:	485c      	ldr	r0, [pc, #368]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800be9e:	f001 fa83 	bl	800d3a8 <iprintf>
 800bea2:	4864      	ldr	r0, [pc, #400]	; (800c034 <Custom_STM_Event_Handler+0x670>)
 800bea4:	f001 fb06 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_3_Char_3_Disabled_END */
                break;
 800bea8:	e0ef      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              /* Enabled Notification management */
              case COMSVC_Notification:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_COMSVC_Notification_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_COMSVC_Notification_BEGIN\n");
 800beaa:	4857      	ldr	r0, [pc, #348]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800beac:	f7fd fe79 	bl	8009ba2 <DbgTraceGetFileName>
 800beb0:	4601      	mov	r1, r0
 800beb2:	f240 13e9 	movw	r3, #489	; 0x1e9
 800beb6:	4a55      	ldr	r2, [pc, #340]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800beb8:	4855      	ldr	r0, [pc, #340]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800beba:	f001 fa75 	bl	800d3a8 <iprintf>
 800bebe:	485e      	ldr	r0, [pc, #376]	; (800c038 <Custom_STM_Event_Handler+0x674>)
 800bec0:	f001 faf8 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_3_Char_3_COMSVC_Notification_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C3_NOTIFY_ENABLED_EVT;
 800bec4:	2316      	movs	r3, #22
 800bec6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800beca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff f942 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_COMSVC_Notification_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_COMSVC_Notification_END\n");
 800bed4:	484c      	ldr	r0, [pc, #304]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bed6:	f7fd fe64 	bl	8009ba2 <DbgTraceGetFileName>
 800beda:	4601      	mov	r1, r0
 800bedc:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 800bee0:	4a4a      	ldr	r2, [pc, #296]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bee2:	484b      	ldr	r0, [pc, #300]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bee4:	f001 fa60 	bl	800d3a8 <iprintf>
 800bee8:	4854      	ldr	r0, [pc, #336]	; (800c03c <Custom_STM_Event_Handler+0x678>)
 800beea:	f001 fae3 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_3_Char_3_COMSVC_Notification_END */
                break;
 800beee:	e0cc      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              /* Enabled Indication management */
              case COMSVC_Indication:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_COMSVC_Indication_BEGIN */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_COMSVC_Indication_BEGIN\n");
 800bef0:	4845      	ldr	r0, [pc, #276]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bef2:	f7fd fe56 	bl	8009ba2 <DbgTraceGetFileName>
 800bef6:	4601      	mov	r1, r0
 800bef8:	f240 13f5 	movw	r3, #501	; 0x1f5
 800befc:	4a43      	ldr	r2, [pc, #268]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800befe:	4844      	ldr	r0, [pc, #272]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bf00:	f001 fa52 	bl	800d3a8 <iprintf>
 800bf04:	484e      	ldr	r0, [pc, #312]	; (800c040 <Custom_STM_Event_Handler+0x67c>)
 800bf06:	f001 fad5 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_3_Char_3_COMSVC_Indication_BEGIN */
                Notification.Custom_Evt_Opcode = CUSTOM_STM_C3_INDICATE_ENABLED_EVT;
 800bf0a:	2318      	movs	r3, #24
 800bf0c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                Custom_STM_App_Notification(&Notification);
 800bf10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff f91f 	bl	800b158 <Custom_STM_App_Notification>
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_COMSVC_Indication_END */
	                APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_COMSVC_Indication_END\n");
 800bf1a:	483b      	ldr	r0, [pc, #236]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bf1c:	f7fd fe41 	bl	8009ba2 <DbgTraceGetFileName>
 800bf20:	4601      	mov	r1, r0
 800bf22:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 800bf26:	4a39      	ldr	r2, [pc, #228]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bf28:	4839      	ldr	r0, [pc, #228]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bf2a:	f001 fa3d 	bl	800d3a8 <iprintf>
 800bf2e:	4845      	ldr	r0, [pc, #276]	; (800c044 <Custom_STM_Event_Handler+0x680>)
 800bf30:	f001 fac0 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_3_Char_3_COMSVC_Indication_END */
                break;
 800bf34:	e0a9      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_default */
	            	  APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_default\n");
 800bf36:	4834      	ldr	r0, [pc, #208]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bf38:	f7fd fe33 	bl	8009ba2 <DbgTraceGetFileName>
 800bf3c:	4601      	mov	r1, r0
 800bf3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf42:	4a32      	ldr	r2, [pc, #200]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bf44:	4832      	ldr	r0, [pc, #200]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bf46:	f001 fa2f 	bl	800d3a8 <iprintf>
 800bf4a:	483f      	ldr	r0, [pc, #252]	; (800c048 <Custom_STM_Event_Handler+0x684>)
 800bf4c:	f001 fab2 	bl	800d4b4 <puts>
                /* USER CODE END CUSTOM_STM_Service_3_Char_3_default */
                break;
 800bf50:	e09b      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            }
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bf52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4b33      	ldr	r3, [pc, #204]	; (800c028 <Custom_STM_Event_Handler+0x664>)
 800bf5c:	885b      	ldrh	r3, [r3, #2]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d110      	bne.n	800bf86 <Custom_STM_Event_Handler+0x5c2>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bf64:	2301      	movs	r3, #1
 800bf66:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE\n");
 800bf6a:	4827      	ldr	r0, [pc, #156]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bf6c:	f7fd fe19 	bl	8009ba2 <DbgTraceGetFileName>
 800bf70:	4601      	mov	r1, r0
 800bf72:	f240 230a 	movw	r3, #522	; 0x20a
 800bf76:	4a25      	ldr	r2, [pc, #148]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bf78:	4825      	ldr	r0, [pc, #148]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bf7a:	f001 fa15 	bl	800d3a8 <iprintf>
 800bf7e:	4833      	ldr	r0, [pc, #204]	; (800c04c <Custom_STM_Event_Handler+0x688>)
 800bf80:	f001 fa98 	bl	800d4b4 <puts>
 800bf84:	e081      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bf86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf88:	885b      	ldrh	r3, [r3, #2]
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4b26      	ldr	r3, [pc, #152]	; (800c028 <Custom_STM_Event_Handler+0x664>)
 800bf90:	88db      	ldrh	r3, [r3, #6]
 800bf92:	3301      	adds	r3, #1
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d110      	bne.n	800bfba <Custom_STM_Event_Handler+0x5f6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE\n");
 800bf9e:	481a      	ldr	r0, [pc, #104]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bfa0:	f7fd fdff 	bl	8009ba2 <DbgTraceGetFileName>
 800bfa4:	4601      	mov	r1, r0
 800bfa6:	f240 2311 	movw	r3, #529	; 0x211
 800bfaa:	4a18      	ldr	r2, [pc, #96]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bfac:	4818      	ldr	r0, [pc, #96]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bfae:	f001 f9fb 	bl	800d3a8 <iprintf>
 800bfb2:	4827      	ldr	r0, [pc, #156]	; (800c050 <Custom_STM_Event_Handler+0x68c>)
 800bfb4:	f001 fa7e 	bl	800d4b4 <puts>
 800bfb8:	e067      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bfba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfbc:	885b      	ldrh	r3, [r3, #2]
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	4b19      	ldr	r3, [pc, #100]	; (800c028 <Custom_STM_Event_Handler+0x664>)
 800bfc4:	8a5b      	ldrh	r3, [r3, #18]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d110      	bne.n	800bfee <Custom_STM_Event_Handler+0x62a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE\n");
 800bfd2:	480d      	ldr	r0, [pc, #52]	; (800c008 <Custom_STM_Event_Handler+0x644>)
 800bfd4:	f7fd fde5 	bl	8009ba2 <DbgTraceGetFileName>
 800bfd8:	4601      	mov	r1, r0
 800bfda:	f44f 7306 	mov.w	r3, #536	; 0x218
 800bfde:	4a0b      	ldr	r2, [pc, #44]	; (800c00c <Custom_STM_Event_Handler+0x648>)
 800bfe0:	480b      	ldr	r0, [pc, #44]	; (800c010 <Custom_STM_Event_Handler+0x64c>)
 800bfe2:	f001 f9e1 	bl	800d3a8 <iprintf>
 800bfe6:	481b      	ldr	r0, [pc, #108]	; (800c054 <Custom_STM_Event_Handler+0x690>)
 800bfe8:	f001 fa64 	bl	800d4b4 <puts>
 800bfec:	e04d      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
            /* USER CODE END CUSTOM_STM_Service_3_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomC2Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bfee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bff0:	885b      	ldrh	r3, [r3, #2]
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	461a      	mov	r2, r3
 800bff6:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <Custom_STM_Event_Handler+0x664>)
 800bff8:	8a9b      	ldrh	r3, [r3, #20]
 800bffa:	3301      	adds	r3, #1
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d12b      	bne.n	800c058 <Custom_STM_Event_Handler+0x694>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800c006:	e040      	b.n	800c08a <Custom_STM_Event_Handler+0x6c6>
 800c008:	0800f44c 	.word	0x0800f44c
 800c00c:	08010554 	.word	0x08010554
 800c010:	0800f46c 	.word	0x0800f46c
 800c014:	0800f8a4 	.word	0x0800f8a4
 800c018:	0800f8dc 	.word	0x0800f8dc
 800c01c:	0800f910 	.word	0x0800f910
 800c020:	0800f950 	.word	0x0800f950
 800c024:	0800f990 	.word	0x0800f990
 800c028:	20000180 	.word	0x20000180
 800c02c:	0800f4f8 	.word	0x0800f4f8
 800c030:	0800f9c0 	.word	0x0800f9c0
 800c034:	0800f9f8 	.word	0x0800f9f8
 800c038:	0800fa2c 	.word	0x0800fa2c
 800c03c:	0800fa6c 	.word	0x0800fa6c
 800c040:	0800faac 	.word	0x0800faac
 800c044:	0800faec 	.word	0x0800faec
 800c048:	0800fb28 	.word	0x0800fb28
 800c04c:	0800fb58 	.word	0x0800fb58
 800c050:	0800fba8 	.word	0x0800fba8
 800c054:	0800fbf8 	.word	0x0800fbf8
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

            /* USER CODE END CUSTOM_STM_Service_3_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomC2Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c05a:	885b      	ldrh	r3, [r3, #2]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	461a      	mov	r2, r3
 800c060:	4bb2      	ldr	r3, [pc, #712]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c062:	8adb      	ldrh	r3, [r3, #22]
 800c064:	3301      	adds	r3, #1
 800c066:	429a      	cmp	r2, r3
 800c068:	d10f      	bne.n	800c08a <Custom_STM_Event_Handler+0x6c6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c06a:	2301      	movs	r3, #1
 800c06c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE\n");
 800c070:	48af      	ldr	r0, [pc, #700]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c072:	f7fd fd96 	bl	8009ba2 <DbgTraceGetFileName>
 800c076:	4601      	mov	r1, r0
 800c078:	f240 2326 	movw	r3, #550	; 0x226
 800c07c:	4aad      	ldr	r2, [pc, #692]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c07e:	48ae      	ldr	r0, [pc, #696]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c080:	f001 f992 	bl	800d3a8 <iprintf>
 800c084:	48ad      	ldr	r0, [pc, #692]	; (800c33c <Custom_STM_Event_Handler+0x978>)
 800c086:	f001 fa15 	bl	800d4b4 <puts>
            /* USER CODE END CUSTOM_STM_Service_3_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if(attribute_modified->Attr_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
	          APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END\n");
 800c08a:	48a9      	ldr	r0, [pc, #676]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c08c:	f7fd fd89 	bl	8009ba2 <DbgTraceGetFileName>
 800c090:	4601      	mov	r1, r0
 800c092:	f240 232a 	movw	r3, #554	; 0x22a
 800c096:	4aa7      	ldr	r2, [pc, #668]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c098:	48a7      	ldr	r0, [pc, #668]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c09a:	f001 f985 	bl	800d3a8 <iprintf>
 800c09e:	48a8      	ldr	r0, [pc, #672]	; (800c340 <Custom_STM_Event_Handler+0x97c>)
 800c0a0:	f001 fa08 	bl	800d4b4 <puts>
          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800c0a4:	e1e2      	b.n	800c46c <Custom_STM_Event_Handler+0xaa8>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
	        	 APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN\n");
 800c0a6:	48a2      	ldr	r0, [pc, #648]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c0a8:	f7fd fd7b 	bl	8009ba2 <DbgTraceGetFileName>
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	f44f 730c 	mov.w	r3, #560	; 0x230
 800c0b2:	4aa0      	ldr	r2, [pc, #640]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c0b4:	48a0      	ldr	r0, [pc, #640]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c0b6:	f001 f977 	bl	800d3a8 <iprintf>
 800c0ba:	48a2      	ldr	r0, [pc, #648]	; (800c344 <Custom_STM_Event_Handler+0x980>)
 800c0bc:	f001 f9fa 	bl	800d4b4 <puts>
          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800c0c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0c2:	3302      	adds	r3, #2
 800c0c4:	667b      	str	r3, [r7, #100]	; 0x64
          if(read_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c0c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0c8:	885b      	ldrh	r3, [r3, #2]
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4b97      	ldr	r3, [pc, #604]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c0d0:	88db      	ldrh	r3, [r3, #6]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d123      	bne.n	800c120 <Custom_STM_Event_Handler+0x75c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1\n");
 800c0de:	4894      	ldr	r0, [pc, #592]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c0e0:	f7fd fd5f 	bl	8009ba2 <DbgTraceGetFileName>
 800c0e4:	4601      	mov	r1, r0
 800c0e6:	f240 2337 	movw	r3, #567	; 0x237
 800c0ea:	4a92      	ldr	r2, [pc, #584]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c0ec:	4892      	ldr	r0, [pc, #584]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c0ee:	f001 f95b 	bl	800d3a8 <iprintf>
 800c0f2:	4895      	ldr	r0, [pc, #596]	; (800c348 <Custom_STM_Event_Handler+0x984>)
 800c0f4:	f001 f9de 	bl	800d4b4 <puts>
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800c0f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fc fb52 	bl	80087a8 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2\n");
 800c104:	488a      	ldr	r0, [pc, #552]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c106:	f7fd fd4c 	bl	8009ba2 <DbgTraceGetFileName>
 800c10a:	4601      	mov	r1, r0
 800c10c:	f240 233b 	movw	r3, #571	; 0x23b
 800c110:	4a88      	ldr	r2, [pc, #544]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c112:	4889      	ldr	r0, [pc, #548]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c114:	f001 f948 	bl	800d3a8 <iprintf>
 800c118:	488c      	ldr	r0, [pc, #560]	; (800c34c <Custom_STM_Event_Handler+0x988>)
 800c11a:	f001 f9cb 	bl	800d4b4 <puts>
 800c11e:	e085      	b.n	800c22c <Custom_STM_Event_Handler+0x868>
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if(read_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(read_req->Attribute_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c122:	885b      	ldrh	r3, [r3, #2]
 800c124:	b29b      	uxth	r3, r3
 800c126:	461a      	mov	r2, r3
 800c128:	4b80      	ldr	r3, [pc, #512]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c12a:	8a5b      	ldrh	r3, [r3, #18]
 800c12c:	3301      	adds	r3, #1
 800c12e:	429a      	cmp	r2, r3
 800c130:	d123      	bne.n	800c17a <Custom_STM_Event_Handler+0x7b6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c132:	2301      	movs	r3, #1
 800c134:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1\n");
 800c138:	487d      	ldr	r0, [pc, #500]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c13a:	f7fd fd32 	bl	8009ba2 <DbgTraceGetFileName>
 800c13e:	4601      	mov	r1, r0
 800c140:	f240 2342 	movw	r3, #578	; 0x242
 800c144:	4a7b      	ldr	r2, [pc, #492]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c146:	487c      	ldr	r0, [pc, #496]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c148:	f001 f92e 	bl	800d3a8 <iprintf>
 800c14c:	4880      	ldr	r0, [pc, #512]	; (800c350 <Custom_STM_Event_Handler+0x98c>)
 800c14e:	f001 f9b1 	bl	800d4b4 <puts>
            /*USER CODE END CUSTOM_STM_Service_3_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800c152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	b29b      	uxth	r3, r3
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fc fb25 	bl	80087a8 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2\n");
 800c15e:	4874      	ldr	r0, [pc, #464]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c160:	f7fd fd1f 	bl	8009ba2 <DbgTraceGetFileName>
 800c164:	4601      	mov	r1, r0
 800c166:	f240 2346 	movw	r3, #582	; 0x246
 800c16a:	4a72      	ldr	r2, [pc, #456]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c16c:	4872      	ldr	r0, [pc, #456]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c16e:	f001 f91b 	bl	800d3a8 <iprintf>
 800c172:	4878      	ldr	r0, [pc, #480]	; (800c354 <Custom_STM_Event_Handler+0x990>)
 800c174:	f001 f99e 	bl	800d4b4 <puts>
 800c178:	e058      	b.n	800c22c <Custom_STM_Event_Handler+0x868>
            /*USER CODE END CUSTOM_STM_Service_3_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if(read_req->Attribute_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(read_req->Attribute_Handle == (CustomContext.CustomC2Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c17a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c17c:	885b      	ldrh	r3, [r3, #2]
 800c17e:	b29b      	uxth	r3, r3
 800c180:	461a      	mov	r2, r3
 800c182:	4b6a      	ldr	r3, [pc, #424]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c184:	8a9b      	ldrh	r3, [r3, #20]
 800c186:	3301      	adds	r3, #1
 800c188:	429a      	cmp	r2, r3
 800c18a:	d123      	bne.n	800c1d4 <Custom_STM_Event_Handler+0x810>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c18c:	2301      	movs	r3, #1
 800c18e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1\n");
 800c192:	4867      	ldr	r0, [pc, #412]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c194:	f7fd fd05 	bl	8009ba2 <DbgTraceGetFileName>
 800c198:	4601      	mov	r1, r0
 800c19a:	f240 234d 	movw	r3, #589	; 0x24d
 800c19e:	4a65      	ldr	r2, [pc, #404]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c1a0:	4865      	ldr	r0, [pc, #404]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c1a2:	f001 f901 	bl	800d3a8 <iprintf>
 800c1a6:	486c      	ldr	r0, [pc, #432]	; (800c358 <Custom_STM_Event_Handler+0x994>)
 800c1a8:	f001 f984 	bl	800d4b4 <puts>
            /*USER CODE END CUSTOM_STM_Service_3_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800c1ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fc faf8 	bl	80087a8 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2\n");
 800c1b8:	485d      	ldr	r0, [pc, #372]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c1ba:	f7fd fcf2 	bl	8009ba2 <DbgTraceGetFileName>
 800c1be:	4601      	mov	r1, r0
 800c1c0:	f240 2351 	movw	r3, #593	; 0x251
 800c1c4:	4a5b      	ldr	r2, [pc, #364]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c1c6:	485c      	ldr	r0, [pc, #368]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c1c8:	f001 f8ee 	bl	800d3a8 <iprintf>
 800c1cc:	4863      	ldr	r0, [pc, #396]	; (800c35c <Custom_STM_Event_Handler+0x998>)
 800c1ce:	f001 f971 	bl	800d4b4 <puts>
 800c1d2:	e02b      	b.n	800c22c <Custom_STM_Event_Handler+0x868>
            /*USER CODE END CUSTOM_STM_Service_3_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if(read_req->Attribute_Handle == (CustomContext.CustomC2Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if(read_req->Attribute_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1d6:	885b      	ldrh	r3, [r3, #2]
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	461a      	mov	r2, r3
 800c1dc:	4b53      	ldr	r3, [pc, #332]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c1de:	8adb      	ldrh	r3, [r3, #22]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d122      	bne.n	800c22c <Custom_STM_Event_Handler+0x868>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1\n");
 800c1ec:	4850      	ldr	r0, [pc, #320]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c1ee:	f7fd fcd8 	bl	8009ba2 <DbgTraceGetFileName>
 800c1f2:	4601      	mov	r1, r0
 800c1f4:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c1f8:	4a4e      	ldr	r2, [pc, #312]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c1fa:	484f      	ldr	r0, [pc, #316]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c1fc:	f001 f8d4 	bl	800d3a8 <iprintf>
 800c200:	4857      	ldr	r0, [pc, #348]	; (800c360 <Custom_STM_Event_Handler+0x99c>)
 800c202:	f001 f957 	bl	800d4b4 <puts>
            /*USER CODE END CUSTOM_STM_Service_3_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800c206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fc facb 	bl	80087a8 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2\n");
 800c212:	4847      	ldr	r0, [pc, #284]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c214:	f7fd fcc5 	bl	8009ba2 <DbgTraceGetFileName>
 800c218:	4601      	mov	r1, r0
 800c21a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 800c21e:	4a45      	ldr	r2, [pc, #276]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c220:	4845      	ldr	r0, [pc, #276]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c222:	f001 f8c1 	bl	800d3a8 <iprintf>
 800c226:	484f      	ldr	r0, [pc, #316]	; (800c364 <Custom_STM_Event_Handler+0x9a0>)
 800c228:	f001 f944 	bl	800d4b4 <puts>
            /*USER CODE END CUSTOM_STM_Service_3_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if(read_req->Attribute_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */
	          APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_READ_PERMIT_REQ_END\n");
 800c22c:	4840      	ldr	r0, [pc, #256]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c22e:	f7fd fcb8 	bl	8009ba2 <DbgTraceGetFileName>
 800c232:	4601      	mov	r1, r0
 800c234:	f44f 7318 	mov.w	r3, #608	; 0x260
 800c238:	4a3e      	ldr	r2, [pc, #248]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c23a:	483f      	ldr	r0, [pc, #252]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c23c:	f001 f8b4 	bl	800d3a8 <iprintf>
 800c240:	4849      	ldr	r0, [pc, #292]	; (800c368 <Custom_STM_Event_Handler+0x9a4>)
 800c242:	f001 f937 	bl	800d4b4 <puts>
          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 800c246:	e111      	b.n	800c46c <Custom_STM_Event_Handler+0xaa8>

        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
	        	 APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN\n");
 800c248:	4839      	ldr	r0, [pc, #228]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c24a:	f7fd fcaa 	bl	8009ba2 <DbgTraceGetFileName>
 800c24e:	4601      	mov	r1, r0
 800c250:	f240 2366 	movw	r3, #614	; 0x266
 800c254:	4a37      	ldr	r2, [pc, #220]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c256:	4838      	ldr	r0, [pc, #224]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c258:	f001 f8a6 	bl	800d3a8 <iprintf>
 800c25c:	4843      	ldr	r0, [pc, #268]	; (800c36c <Custom_STM_Event_Handler+0x9a8>)
 800c25e:	f001 f929 	bl	800d4b4 <puts>
          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800c262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c264:	3302      	adds	r3, #2
 800c266:	663b      	str	r3, [r7, #96]	; 0x60
          if(write_perm_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c26a:	885b      	ldrh	r3, [r3, #2]
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	461a      	mov	r2, r3
 800c270:	4b2e      	ldr	r3, [pc, #184]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c272:	88db      	ldrh	r3, [r3, #6]
 800c274:	3301      	adds	r3, #1
 800c276:	429a      	cmp	r2, r3
 800c278:	d110      	bne.n	800c29c <Custom_STM_Event_Handler+0x8d8>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c27a:	2301      	movs	r3, #1
 800c27c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* Allow or reject a write request from a client using aci_gatt_write_resp(...) function */
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_1_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800c280:	482b      	ldr	r0, [pc, #172]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c282:	f7fd fc8e 	bl	8009ba2 <DbgTraceGetFileName>
 800c286:	4601      	mov	r1, r0
 800c288:	f240 236e 	movw	r3, #622	; 0x26e
 800c28c:	4a29      	ldr	r2, [pc, #164]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c28e:	482a      	ldr	r0, [pc, #168]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c290:	f001 f88a 	bl	800d3a8 <iprintf>
 800c294:	4836      	ldr	r0, [pc, #216]	; (800c370 <Custom_STM_Event_Handler+0x9ac>)
 800c296:	f001 f90d 	bl	800d4b4 <puts>
 800c29a:	e0cb      	b.n	800c434 <Custom_STM_Event_Handler+0xa70>
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomMocHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          else if(write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlpHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c29c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c29e:	885b      	ldrh	r3, [r3, #2]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4b21      	ldr	r3, [pc, #132]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c2a6:	89db      	ldrh	r3, [r3, #14]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d110      	bne.n	800c2d0 <Custom_STM_Event_Handler+0x90c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* Allow or reject a write request from a client using aci_gatt_write_resp(...) function */
            /*USER CODE BEGIN CUSTOM_STM_Service_2_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_2_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800c2b4:	481e      	ldr	r0, [pc, #120]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c2b6:	f7fd fc74 	bl	8009ba2 <DbgTraceGetFileName>
 800c2ba:	4601      	mov	r1, r0
 800c2bc:	f240 2377 	movw	r3, #631	; 0x277
 800c2c0:	4a1c      	ldr	r2, [pc, #112]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c2c2:	481d      	ldr	r0, [pc, #116]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c2c4:	f001 f870 	bl	800d3a8 <iprintf>
 800c2c8:	482a      	ldr	r0, [pc, #168]	; (800c374 <Custom_STM_Event_Handler+0x9b0>)
 800c2ca:	f001 f8f3 	bl	800d4b4 <puts>
 800c2ce:	e0b1      	b.n	800c434 <Custom_STM_Event_Handler+0xa70>
            /*USER CODE END CUSTOM_STM_Service_2_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlpHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          else if(write_perm_req->Attribute_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c2d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d2:	885b      	ldrh	r3, [r3, #2]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4b14      	ldr	r3, [pc, #80]	; (800c32c <Custom_STM_Event_Handler+0x968>)
 800c2da:	8a5b      	ldrh	r3, [r3, #18]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	f040 8082 	bne.w	800c3e8 <Custom_STM_Event_Handler+0xa24>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* Allow or reject a write request from a client using aci_gatt_write_resp(...) function */
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_1_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800c2ea:	4811      	ldr	r0, [pc, #68]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c2ec:	f7fd fc59 	bl	8009ba2 <DbgTraceGetFileName>
 800c2f0:	4601      	mov	r1, r0
 800c2f2:	f44f 7320 	mov.w	r3, #640	; 0x280
 800c2f6:	4a0f      	ldr	r2, [pc, #60]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c2f8:	480f      	ldr	r0, [pc, #60]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c2fa:	f001 f855 	bl	800d3a8 <iprintf>
 800c2fe:	481e      	ldr	r0, [pc, #120]	; (800c378 <Custom_STM_Event_Handler+0x9b4>)
 800c300:	f001 f8d8 	bl	800d4b4 <puts>
	            APP_DBG_MSG("\r\n\r Message :");
 800c304:	480a      	ldr	r0, [pc, #40]	; (800c330 <Custom_STM_Event_Handler+0x96c>)
 800c306:	f7fd fc4c 	bl	8009ba2 <DbgTraceGetFileName>
 800c30a:	4601      	mov	r1, r0
 800c30c:	f240 2381 	movw	r3, #641	; 0x281
 800c310:	4a08      	ldr	r2, [pc, #32]	; (800c334 <Custom_STM_Event_Handler+0x970>)
 800c312:	4809      	ldr	r0, [pc, #36]	; (800c338 <Custom_STM_Event_Handler+0x974>)
 800c314:	f001 f848 	bl	800d3a8 <iprintf>
 800c318:	4818      	ldr	r0, [pc, #96]	; (800c37c <Custom_STM_Event_Handler+0x9b8>)
 800c31a:	f001 f845 	bl	800d3a8 <iprintf>
	            			My_Data_Written_Lenght=write_perm_req->Data_Length;
 800c31e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c320:	791b      	ldrb	r3, [r3, #4]
 800c322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	            			i=0;
 800c326:	2300      	movs	r3, #0
 800c328:	677b      	str	r3, [r7, #116]	; 0x74
	            			while(i<My_Data_Written_Lenght)
 800c32a:	e04a      	b.n	800c3c2 <Custom_STM_Event_Handler+0x9fe>
 800c32c:	20000180 	.word	0x20000180
 800c330:	0800f44c 	.word	0x0800f44c
 800c334:	08010554 	.word	0x08010554
 800c338:	0800f46c 	.word	0x0800f46c
 800c33c:	0800fc48 	.word	0x0800fc48
 800c340:	0800fc98 	.word	0x0800fc98
 800c344:	0800fcc8 	.word	0x0800fcc8
 800c348:	0800fcf8 	.word	0x0800fcf8
 800c34c:	0800fd44 	.word	0x0800fd44
 800c350:	0800fd90 	.word	0x0800fd90
 800c354:	0800fddc 	.word	0x0800fddc
 800c358:	0800fe28 	.word	0x0800fe28
 800c35c:	0800fe74 	.word	0x0800fe74
 800c360:	0800fec0 	.word	0x0800fec0
 800c364:	0800ff0c 	.word	0x0800ff0c
 800c368:	0800ff58 	.word	0x0800ff58
 800c36c:	0800ff84 	.word	0x0800ff84
 800c370:	0800ffb4 	.word	0x0800ffb4
 800c374:	08010000 	.word	0x08010000
 800c378:	0801004c 	.word	0x0801004c
 800c37c:	08010098 	.word	0x08010098
	            			{
	            				My_Data_Written[i]=write_perm_req->Data[i];
 800c380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c384:	4413      	add	r3, r2
 800c386:	3305      	adds	r3, #5
 800c388:	7819      	ldrb	r1, [r3, #0]
 800c38a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c390:	4413      	add	r3, r2
 800c392:	460a      	mov	r2, r1
 800c394:	701a      	strb	r2, [r3, #0]
	            				APP_DBG_MSG("%d",My_Data_Written[i++]);
 800c396:	484d      	ldr	r0, [pc, #308]	; (800c4cc <Custom_STM_Event_Handler+0xb08>)
 800c398:	f7fd fc03 	bl	8009ba2 <DbgTraceGetFileName>
 800c39c:	4601      	mov	r1, r0
 800c39e:	f240 2387 	movw	r3, #647	; 0x287
 800c3a2:	4a4b      	ldr	r2, [pc, #300]	; (800c4d0 <Custom_STM_Event_Handler+0xb0c>)
 800c3a4:	484b      	ldr	r0, [pc, #300]	; (800c4d4 <Custom_STM_Event_Handler+0xb10>)
 800c3a6:	f000 ffff 	bl	800d3a8 <iprintf>
 800c3aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3ac:	1c5a      	adds	r2, r3, #1
 800c3ae:	677a      	str	r2, [r7, #116]	; 0x74
 800c3b0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4846      	ldr	r0, [pc, #280]	; (800c4d8 <Custom_STM_Event_Handler+0xb14>)
 800c3be:	f000 fff3 	bl	800d3a8 <iprintf>
	            			while(i<My_Data_Written_Lenght)
 800c3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	dbd9      	blt.n	800c380 <Custom_STM_Event_Handler+0x9bc>
	            			}
	            			Custom_Characteristic1.pPayload=write_perm_req->Data;
 800c3cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ce:	3305      	adds	r3, #5
 800c3d0:	4a42      	ldr	r2, [pc, #264]	; (800c4dc <Custom_STM_Event_Handler+0xb18>)
 800c3d2:	6013      	str	r3, [r2, #0]
	            			Custom_Characteristic1.Length=write_perm_req->Data_Length;
 800c3d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3d6:	791a      	ldrb	r2, [r3, #4]
 800c3d8:	4b40      	ldr	r3, [pc, #256]	; (800c4dc <Custom_STM_Event_Handler+0xb18>)
 800c3da:	711a      	strb	r2, [r3, #4]
	            			Custom_Updated_Characteristic1=1;
 800c3dc:	4b40      	ldr	r3, [pc, #256]	; (800c4e0 <Custom_STM_Event_Handler+0xb1c>)
 800c3de:	2201      	movs	r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]
	            			Ask_My_Action();
 800c3e2:	f7ff f9f5 	bl	800b7d0 <Ask_My_Action>
 800c3e6:	e025      	b.n	800c434 <Custom_STM_Event_Handler+0xa70>
	            			//Custom_STM_App_Update_Char(CustomContext.CustomC1Hdle,write_perm_req->Data);
	            			//C3_NOTIFICATION(write_perm_req->Data,write_perm_req->Data_Length);
            /*USER CODE END CUSTOM_STM_Service_3_Char_1_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomC1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          else if(write_perm_req->Attribute_Handle == (CustomContext.CustomC2Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c3e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ea:	885b      	ldrh	r3, [r3, #2]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	4b3c      	ldr	r3, [pc, #240]	; (800c4e4 <Custom_STM_Event_Handler+0xb20>)
 800c3f2:	8a9b      	ldrh	r3, [r3, #20]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d103      	bne.n	800c402 <Custom_STM_Event_Handler+0xa3e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800c400:	e018      	b.n	800c434 <Custom_STM_Event_Handler+0xa70>
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_2_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */

            /*USER CODE END CUSTOM_STM_Service_3_Char_2_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomC2Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          else if(write_perm_req->Attribute_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c404:	885b      	ldrh	r3, [r3, #2]
 800c406:	b29b      	uxth	r3, r3
 800c408:	461a      	mov	r2, r3
 800c40a:	4b36      	ldr	r3, [pc, #216]	; (800c4e4 <Custom_STM_Event_Handler+0xb20>)
 800c40c:	8adb      	ldrh	r3, [r3, #22]
 800c40e:	3301      	adds	r3, #1
 800c410:	429a      	cmp	r2, r3
 800c412:	d10f      	bne.n	800c434 <Custom_STM_Event_Handler+0xa70>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c414:	2301      	movs	r3, #1
 800c416:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            /* Allow or reject a write request from a client using aci_gatt_write_resp(...) function */
            /*USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE */
	            APP_DBG_MSG("\r\n\r Entry CUSTOM_STM_Service_3_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800c41a:	482c      	ldr	r0, [pc, #176]	; (800c4cc <Custom_STM_Event_Handler+0xb08>)
 800c41c:	f7fd fbc1 	bl	8009ba2 <DbgTraceGetFileName>
 800c420:	4601      	mov	r1, r0
 800c422:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800c426:	4a2a      	ldr	r2, [pc, #168]	; (800c4d0 <Custom_STM_Event_Handler+0xb0c>)
 800c428:	482a      	ldr	r0, [pc, #168]	; (800c4d4 <Custom_STM_Event_Handler+0xb10>)
 800c42a:	f000 ffbd 	bl	800d3a8 <iprintf>
 800c42e:	482e      	ldr	r0, [pc, #184]	; (800c4e8 <Custom_STM_Event_Handler+0xb24>)
 800c430:	f001 f840 	bl	800d4b4 <puts>
            /*USER CODE END CUSTOM_STM_Service_3_Char_3_ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE*/
          } /*if(write_perm_req->Attribute_Handle == (CustomContext.CustomC3Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
	          APP_DBG_MSG("\r\n\r Entry EVT_BLUE_GATT_WRITE_PERMIT_REQ_END\n");
 800c434:	4825      	ldr	r0, [pc, #148]	; (800c4cc <Custom_STM_Event_Handler+0xb08>)
 800c436:	f7fd fbb4 	bl	8009ba2 <DbgTraceGetFileName>
 800c43a:	4601      	mov	r1, r0
 800c43c:	f240 23a5 	movw	r3, #677	; 0x2a5
 800c440:	4a23      	ldr	r2, [pc, #140]	; (800c4d0 <Custom_STM_Event_Handler+0xb0c>)
 800c442:	4824      	ldr	r0, [pc, #144]	; (800c4d4 <Custom_STM_Event_Handler+0xb10>)
 800c444:	f000 ffb0 	bl	800d3a8 <iprintf>
 800c448:	4828      	ldr	r0, [pc, #160]	; (800c4ec <Custom_STM_Event_Handler+0xb28>)
 800c44a:	f001 f833 	bl	800d4b4 <puts>
          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800c44e:	e00d      	b.n	800c46c <Custom_STM_Event_Handler+0xaa8>
        /* USER CODE BEGIN BLECORE_EVT */
	          APP_DBG_MSG("\r\n\r Entry BLECORE_EVT\n");
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */
	        	 APP_DBG_MSG("\r\n\r Entry EVT_DEFAULT\n");
 800c450:	481e      	ldr	r0, [pc, #120]	; (800c4cc <Custom_STM_Event_Handler+0xb08>)
 800c452:	f7fd fba6 	bl	8009ba2 <DbgTraceGetFileName>
 800c456:	4601      	mov	r1, r0
 800c458:	f240 23ad 	movw	r3, #685	; 0x2ad
 800c45c:	4a1c      	ldr	r2, [pc, #112]	; (800c4d0 <Custom_STM_Event_Handler+0xb0c>)
 800c45e:	481d      	ldr	r0, [pc, #116]	; (800c4d4 <Custom_STM_Event_Handler+0xb10>)
 800c460:	f000 ffa2 	bl	800d3a8 <iprintf>
 800c464:	4822      	ldr	r0, [pc, #136]	; (800c4f0 <Custom_STM_Event_Handler+0xb2c>)
 800c466:	f001 f825 	bl	800d4b4 <puts>
          /* USER CODE END EVT_DEFAULT */
          break;
 800c46a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/
	      APP_DBG_MSG("\r\n\r Entry EVT_VENDOR\n");
 800c46c:	4817      	ldr	r0, [pc, #92]	; (800c4cc <Custom_STM_Event_Handler+0xb08>)
 800c46e:	f7fd fb98 	bl	8009ba2 <DbgTraceGetFileName>
 800c472:	4601      	mov	r1, r0
 800c474:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c478:	4a15      	ldr	r2, [pc, #84]	; (800c4d0 <Custom_STM_Event_Handler+0xb0c>)
 800c47a:	4816      	ldr	r0, [pc, #88]	; (800c4d4 <Custom_STM_Event_Handler+0xb10>)
 800c47c:	f000 ff94 	bl	800d3a8 <iprintf>
 800c480:	481c      	ldr	r0, [pc, #112]	; (800c4f4 <Custom_STM_Event_Handler+0xb30>)
 800c482:	f001 f817 	bl	800d4b4 <puts>
      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c486:	e00d      	b.n	800c4a4 <Custom_STM_Event_Handler+0xae0>
	      APP_DBG_MSG("\r\n\r Entry EVENT_PCKT_CASES\n");
      /* USER CODE END EVENT_PCKT_CASES*/

    default:
      /* USER CODE BEGIN EVENT_PCKT*/
	    	 APP_DBG_MSG("\r\n\r Entry EVENT_PCKT\n");
 800c488:	4810      	ldr	r0, [pc, #64]	; (800c4cc <Custom_STM_Event_Handler+0xb08>)
 800c48a:	f7fd fb8a 	bl	8009ba2 <DbgTraceGetFileName>
 800c48e:	4601      	mov	r1, r0
 800c490:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800c494:	4a0e      	ldr	r2, [pc, #56]	; (800c4d0 <Custom_STM_Event_Handler+0xb0c>)
 800c496:	480f      	ldr	r0, [pc, #60]	; (800c4d4 <Custom_STM_Event_Handler+0xb10>)
 800c498:	f000 ff86 	bl	800d3a8 <iprintf>
 800c49c:	4816      	ldr	r0, [pc, #88]	; (800c4f8 <Custom_STM_Event_Handler+0xb34>)
 800c49e:	f001 f809 	bl	800d4b4 <puts>
      /* USER CODE END EVENT_PCKT*/
      break;
 800c4a2:	bf00      	nop
  }

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */
	  APP_DBG_MSG("\r\n\r Entry Custom_STM_Event_Handler_2\n");
 800c4a4:	4809      	ldr	r0, [pc, #36]	; (800c4cc <Custom_STM_Event_Handler+0xb08>)
 800c4a6:	f7fd fb7c 	bl	8009ba2 <DbgTraceGetFileName>
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	f240 23c2 	movw	r3, #706	; 0x2c2
 800c4b0:	4a07      	ldr	r2, [pc, #28]	; (800c4d0 <Custom_STM_Event_Handler+0xb0c>)
 800c4b2:	4808      	ldr	r0, [pc, #32]	; (800c4d4 <Custom_STM_Event_Handler+0xb10>)
 800c4b4:	f000 ff78 	bl	800d3a8 <iprintf>
 800c4b8:	4810      	ldr	r0, [pc, #64]	; (800c4fc <Custom_STM_Event_Handler+0xb38>)
 800c4ba:	f000 fffb 	bl	800d4b4 <puts>
  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800c4be:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}/* end Custom_STM_Event_Handler */
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3778      	adds	r7, #120	; 0x78
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	0800f44c 	.word	0x0800f44c
 800c4d0:	08010554 	.word	0x08010554
 800c4d4:	0800f46c 	.word	0x0800f46c
 800c4d8:	080100a8 	.word	0x080100a8
 800c4dc:	200003b4 	.word	0x200003b4
 800c4e0:	200003c8 	.word	0x200003c8
 800c4e4:	20000180 	.word	0x20000180
 800c4e8:	080100ac 	.word	0x080100ac
 800c4ec:	080100f8 	.word	0x080100f8
 800c4f0:	08010128 	.word	0x08010128
 800c4f4:	08010140 	.word	0x08010140
 800c4f8:	08010158 	.word	0x08010158
 800c4fc:	08010170 	.word	0x08010170

0800c500 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08a      	sub	sp, #40	; 0x28
 800c504:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c506:	48d1      	ldr	r0, [pc, #836]	; (800c84c <SVCCTL_InitCustomSvc+0x34c>)
 800c508:	f7fc fd76 	bl	8008ff8 <SVCCTL_RegisterSvcHandler>
   *                                1 for My_Own_Characteristic configuration descriptor +
   *                                1 for My_Own_Characteristic broadcast property +
   *                              = 10
   */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 800c50c:	238f      	movs	r3, #143	; 0x8f
 800c50e:	703b      	strb	r3, [r7, #0]
 800c510:	23e5      	movs	r3, #229	; 0xe5
 800c512:	707b      	strb	r3, [r7, #1]
 800c514:	23b3      	movs	r3, #179	; 0xb3
 800c516:	70bb      	strb	r3, [r7, #2]
 800c518:	23d5      	movs	r3, #213	; 0xd5
 800c51a:	70fb      	strb	r3, [r7, #3]
 800c51c:	232e      	movs	r3, #46	; 0x2e
 800c51e:	713b      	strb	r3, [r7, #4]
 800c520:	237f      	movs	r3, #127	; 0x7f
 800c522:	717b      	strb	r3, [r7, #5]
 800c524:	234a      	movs	r3, #74	; 0x4a
 800c526:	71bb      	strb	r3, [r7, #6]
 800c528:	2398      	movs	r3, #152	; 0x98
 800c52a:	71fb      	strb	r3, [r7, #7]
 800c52c:	232a      	movs	r3, #42	; 0x2a
 800c52e:	723b      	strb	r3, [r7, #8]
 800c530:	2348      	movs	r3, #72	; 0x48
 800c532:	727b      	strb	r3, [r7, #9]
 800c534:	237a      	movs	r3, #122	; 0x7a
 800c536:	72bb      	strb	r3, [r7, #10]
 800c538:	23cc      	movs	r3, #204	; 0xcc
 800c53a:	72fb      	strb	r3, [r7, #11]
 800c53c:	2340      	movs	r3, #64	; 0x40
 800c53e:	733b      	strb	r3, [r7, #12]
 800c540:	23fe      	movs	r3, #254	; 0xfe
 800c542:	737b      	strb	r3, [r7, #13]
 800c544:	2300      	movs	r3, #0
 800c546:	73bb      	strb	r3, [r7, #14]
 800c548:	2300      	movs	r3, #0
 800c54a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 800c54c:	4639      	mov	r1, r7
 800c54e:	4bc0      	ldr	r3, [pc, #768]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	230a      	movs	r3, #10
 800c554:	2201      	movs	r2, #1
 800c556:	2002      	movs	r0, #2
 800c558:	f7fb ff06 	bl	8008368 <aci_gatt_add_service>
                       &(CustomContext.CustomMy_P2PsHdle));

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800c55c:	2319      	movs	r3, #25
 800c55e:	703b      	strb	r3, [r7, #0]
 800c560:	23ed      	movs	r3, #237	; 0xed
 800c562:	707b      	strb	r3, [r7, #1]
 800c564:	2382      	movs	r3, #130	; 0x82
 800c566:	70bb      	strb	r3, [r7, #2]
 800c568:	23ae      	movs	r3, #174	; 0xae
 800c56a:	70fb      	strb	r3, [r7, #3]
 800c56c:	23ed      	movs	r3, #237	; 0xed
 800c56e:	713b      	strb	r3, [r7, #4]
 800c570:	2321      	movs	r3, #33	; 0x21
 800c572:	717b      	strb	r3, [r7, #5]
 800c574:	234c      	movs	r3, #76	; 0x4c
 800c576:	71bb      	strb	r3, [r7, #6]
 800c578:	239d      	movs	r3, #157	; 0x9d
 800c57a:	71fb      	strb	r3, [r7, #7]
 800c57c:	2341      	movs	r3, #65	; 0x41
 800c57e:	723b      	strb	r3, [r7, #8]
 800c580:	2345      	movs	r3, #69	; 0x45
 800c582:	727b      	strb	r3, [r7, #9]
 800c584:	2322      	movs	r3, #34	; 0x22
 800c586:	72bb      	strb	r3, [r7, #10]
 800c588:	238e      	movs	r3, #142	; 0x8e
 800c58a:	72fb      	strb	r3, [r7, #11]
 800c58c:	2341      	movs	r3, #65	; 0x41
 800c58e:	733b      	strb	r3, [r7, #12]
 800c590:	23fe      	movs	r3, #254	; 0xfe
 800c592:	737b      	strb	r3, [r7, #13]
 800c594:	2300      	movs	r3, #0
 800c596:	73bb      	strb	r3, [r7, #14]
 800c598:	2300      	movs	r3, #0
 800c59a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800c59c:	4bac      	ldr	r3, [pc, #688]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c59e:	8818      	ldrh	r0, [r3, #0]
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	463a      	mov	r2, r7
 800c5a6:	49ab      	ldr	r1, [pc, #684]	; (800c854 <SVCCTL_InitCustomSvc+0x354>)
 800c5a8:	9105      	str	r1, [sp, #20]
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	9104      	str	r1, [sp, #16]
 800c5ae:	2110      	movs	r1, #16
 800c5b0:	9103      	str	r1, [sp, #12]
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	9102      	str	r1, [sp, #8]
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	9101      	str	r1, [sp, #4]
 800c5ba:	2106      	movs	r1, #6
 800c5bc:	9100      	str	r1, [sp, #0]
 800c5be:	2102      	movs	r1, #2
 800c5c0:	f7fb ff81 	bl	80084c6 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomLed_CHdle));
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 800c5c4:	2319      	movs	r3, #25
 800c5c6:	703b      	strb	r3, [r7, #0]
 800c5c8:	23ed      	movs	r3, #237	; 0xed
 800c5ca:	707b      	strb	r3, [r7, #1]
 800c5cc:	2382      	movs	r3, #130	; 0x82
 800c5ce:	70bb      	strb	r3, [r7, #2]
 800c5d0:	23ae      	movs	r3, #174	; 0xae
 800c5d2:	70fb      	strb	r3, [r7, #3]
 800c5d4:	23ed      	movs	r3, #237	; 0xed
 800c5d6:	713b      	strb	r3, [r7, #4]
 800c5d8:	2321      	movs	r3, #33	; 0x21
 800c5da:	717b      	strb	r3, [r7, #5]
 800c5dc:	234c      	movs	r3, #76	; 0x4c
 800c5de:	71bb      	strb	r3, [r7, #6]
 800c5e0:	239d      	movs	r3, #157	; 0x9d
 800c5e2:	71fb      	strb	r3, [r7, #7]
 800c5e4:	2341      	movs	r3, #65	; 0x41
 800c5e6:	723b      	strb	r3, [r7, #8]
 800c5e8:	2345      	movs	r3, #69	; 0x45
 800c5ea:	727b      	strb	r3, [r7, #9]
 800c5ec:	2322      	movs	r3, #34	; 0x22
 800c5ee:	72bb      	strb	r3, [r7, #10]
 800c5f0:	238e      	movs	r3, #142	; 0x8e
 800c5f2:	72fb      	strb	r3, [r7, #11]
 800c5f4:	2342      	movs	r3, #66	; 0x42
 800c5f6:	733b      	strb	r3, [r7, #12]
 800c5f8:	23fe      	movs	r3, #254	; 0xfe
 800c5fa:	737b      	strb	r3, [r7, #13]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	73bb      	strb	r3, [r7, #14]
 800c600:	2300      	movs	r3, #0
 800c602:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800c604:	4b92      	ldr	r3, [pc, #584]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c606:	8818      	ldrh	r0, [r3, #0]
 800c608:	2302      	movs	r3, #2
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	463a      	mov	r2, r7
 800c60e:	4992      	ldr	r1, [pc, #584]	; (800c858 <SVCCTL_InitCustomSvc+0x358>)
 800c610:	9105      	str	r1, [sp, #20]
 800c612:	2101      	movs	r1, #1
 800c614:	9104      	str	r1, [sp, #16]
 800c616:	2110      	movs	r1, #16
 800c618:	9103      	str	r1, [sp, #12]
 800c61a:	2107      	movs	r1, #7
 800c61c:	9102      	str	r1, [sp, #8]
 800c61e:	2100      	movs	r1, #0
 800c620:	9101      	str	r1, [sp, #4]
 800c622:	2110      	movs	r1, #16
 800c624:	9100      	str	r1, [sp, #0]
 800c626:	2102      	movs	r1, #2
 800c628:	f7fb ff4d 	bl	80084c6 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomSwitch_CHdle));
  /**
   *  My_Own_Characteristic
   */
  COPY_MY_OWN_CHARACTERISTIC_UUID(uuid.Char_UUID_128);
 800c62c:	2319      	movs	r3, #25
 800c62e:	703b      	strb	r3, [r7, #0]
 800c630:	23ed      	movs	r3, #237	; 0xed
 800c632:	707b      	strb	r3, [r7, #1]
 800c634:	2382      	movs	r3, #130	; 0x82
 800c636:	70bb      	strb	r3, [r7, #2]
 800c638:	23ae      	movs	r3, #174	; 0xae
 800c63a:	70fb      	strb	r3, [r7, #3]
 800c63c:	23ed      	movs	r3, #237	; 0xed
 800c63e:	713b      	strb	r3, [r7, #4]
 800c640:	2321      	movs	r3, #33	; 0x21
 800c642:	717b      	strb	r3, [r7, #5]
 800c644:	234c      	movs	r3, #76	; 0x4c
 800c646:	71bb      	strb	r3, [r7, #6]
 800c648:	239d      	movs	r3, #157	; 0x9d
 800c64a:	71fb      	strb	r3, [r7, #7]
 800c64c:	2341      	movs	r3, #65	; 0x41
 800c64e:	723b      	strb	r3, [r7, #8]
 800c650:	2345      	movs	r3, #69	; 0x45
 800c652:	727b      	strb	r3, [r7, #9]
 800c654:	2322      	movs	r3, #34	; 0x22
 800c656:	72bb      	strb	r3, [r7, #10]
 800c658:	238e      	movs	r3, #142	; 0x8e
 800c65a:	72fb      	strb	r3, [r7, #11]
 800c65c:	23cd      	movs	r3, #205	; 0xcd
 800c65e:	733b      	strb	r3, [r7, #12]
 800c660:	23ab      	movs	r3, #171	; 0xab
 800c662:	737b      	strb	r3, [r7, #13]
 800c664:	2300      	movs	r3, #0
 800c666:	73bb      	strb	r3, [r7, #14]
 800c668:	2300      	movs	r3, #0
 800c66a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800c66c:	4b78      	ldr	r3, [pc, #480]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c66e:	8818      	ldrh	r0, [r3, #0]
 800c670:	2314      	movs	r3, #20
 800c672:	b29b      	uxth	r3, r3
 800c674:	463a      	mov	r2, r7
 800c676:	4979      	ldr	r1, [pc, #484]	; (800c85c <SVCCTL_InitCustomSvc+0x35c>)
 800c678:	9105      	str	r1, [sp, #20]
 800c67a:	2101      	movs	r1, #1
 800c67c:	9104      	str	r1, [sp, #16]
 800c67e:	2110      	movs	r1, #16
 800c680:	9103      	str	r1, [sp, #12]
 800c682:	2107      	movs	r1, #7
 800c684:	9102      	str	r1, [sp, #8]
 800c686:	2100      	movs	r1, #0
 800c688:	9101      	str	r1, [sp, #4]
 800c68a:	2137      	movs	r1, #55	; 0x37
 800c68c:	9100      	str	r1, [sp, #0]
 800c68e:	2102      	movs	r1, #2
 800c690:	f7fb ff19 	bl	80084c6 <aci_gatt_add_char>
   *                                2 for My_HRS_CTRL_Point +
   *                                1 for My_HRS_Meas configuration descriptor +
   *                              = 8
   */

  uuid.Char_UUID_16 = 0x180d;
 800c694:	f641 030d 	movw	r3, #6157	; 0x180d
 800c698:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_service(UUID_TYPE_16,
 800c69a:	4639      	mov	r1, r7
 800c69c:	4b70      	ldr	r3, [pc, #448]	; (800c860 <SVCCTL_InitCustomSvc+0x360>)
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	2308      	movs	r3, #8
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	2001      	movs	r0, #1
 800c6a6:	f7fb fe5f 	bl	8008368 <aci_gatt_add_service>
                       &(CustomContext.CustomMy_HrsHdle));

  /**
   *  My_HRS_Meas
   */
  uuid.Char_UUID_16 = 0x2a37;
 800c6aa:	f642 2337 	movw	r3, #10807	; 0x2a37
 800c6ae:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800c6b0:	4b67      	ldr	r3, [pc, #412]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c6b2:	8918      	ldrh	r0, [r3, #8]
 800c6b4:	2305      	movs	r3, #5
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	463a      	mov	r2, r7
 800c6ba:	496a      	ldr	r1, [pc, #424]	; (800c864 <SVCCTL_InitCustomSvc+0x364>)
 800c6bc:	9105      	str	r1, [sp, #20]
 800c6be:	2101      	movs	r1, #1
 800c6c0:	9104      	str	r1, [sp, #16]
 800c6c2:	2110      	movs	r1, #16
 800c6c4:	9103      	str	r1, [sp, #12]
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	9102      	str	r1, [sp, #8]
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	9101      	str	r1, [sp, #4]
 800c6ce:	2110      	movs	r1, #16
 800c6d0:	9100      	str	r1, [sp, #0]
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	f7fb fef7 	bl	80084c6 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomHrs_MHdle));
  /**
   *  My_Sensor_Loc
   */
  uuid.Char_UUID_16 = 0x2a38;
 800c6d8:	f642 2338 	movw	r3, #10808	; 0x2a38
 800c6dc:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800c6de:	4b5c      	ldr	r3, [pc, #368]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c6e0:	8918      	ldrh	r0, [r3, #8]
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	463a      	mov	r2, r7
 800c6e8:	495f      	ldr	r1, [pc, #380]	; (800c868 <SVCCTL_InitCustomSvc+0x368>)
 800c6ea:	9105      	str	r1, [sp, #20]
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	9104      	str	r1, [sp, #16]
 800c6f0:	2110      	movs	r1, #16
 800c6f2:	9103      	str	r1, [sp, #12]
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	9102      	str	r1, [sp, #8]
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	9101      	str	r1, [sp, #4]
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	9100      	str	r1, [sp, #0]
 800c700:	2101      	movs	r1, #1
 800c702:	f7fb fee0 	bl	80084c6 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomHrs_SlHdle));
  /**
   *  My_HRS_CTRL_Point
   */
  uuid.Char_UUID_16 = 0x2a39;
 800c706:	f642 2339 	movw	r3, #10809	; 0x2a39
 800c70a:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800c70c:	4b50      	ldr	r3, [pc, #320]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c70e:	8918      	ldrh	r0, [r3, #8]
 800c710:	2301      	movs	r3, #1
 800c712:	b29b      	uxth	r3, r3
 800c714:	463a      	mov	r2, r7
 800c716:	4955      	ldr	r1, [pc, #340]	; (800c86c <SVCCTL_InitCustomSvc+0x36c>)
 800c718:	9105      	str	r1, [sp, #20]
 800c71a:	2100      	movs	r1, #0
 800c71c:	9104      	str	r1, [sp, #16]
 800c71e:	2110      	movs	r1, #16
 800c720:	9103      	str	r1, [sp, #12]
 800c722:	2102      	movs	r1, #2
 800c724:	9102      	str	r1, [sp, #8]
 800c726:	2100      	movs	r1, #0
 800c728:	9101      	str	r1, [sp, #4]
 800c72a:	2108      	movs	r1, #8
 800c72c:	9100      	str	r1, [sp, #0]
 800c72e:	2101      	movs	r1, #1
 800c730:	f7fb fec9 	bl	80084c6 <aci_gatt_add_char>
   *                                1 for Characteristic3 configuration descriptor +
   *                                1 for Characteristic2 broadcast property +
   *                              = 10
   */

  COPY_TDE_CUSTOM_SERVICE_UUID(uuid.Char_UUID_128);
 800c734:	238f      	movs	r3, #143	; 0x8f
 800c736:	703b      	strb	r3, [r7, #0]
 800c738:	23e5      	movs	r3, #229	; 0xe5
 800c73a:	707b      	strb	r3, [r7, #1]
 800c73c:	23b3      	movs	r3, #179	; 0xb3
 800c73e:	70bb      	strb	r3, [r7, #2]
 800c740:	23d5      	movs	r3, #213	; 0xd5
 800c742:	70fb      	strb	r3, [r7, #3]
 800c744:	232e      	movs	r3, #46	; 0x2e
 800c746:	713b      	strb	r3, [r7, #4]
 800c748:	237f      	movs	r3, #127	; 0x7f
 800c74a:	717b      	strb	r3, [r7, #5]
 800c74c:	234a      	movs	r3, #74	; 0x4a
 800c74e:	71bb      	strb	r3, [r7, #6]
 800c750:	2398      	movs	r3, #152	; 0x98
 800c752:	71fb      	strb	r3, [r7, #7]
 800c754:	232a      	movs	r3, #42	; 0x2a
 800c756:	723b      	strb	r3, [r7, #8]
 800c758:	2348      	movs	r3, #72	; 0x48
 800c75a:	727b      	strb	r3, [r7, #9]
 800c75c:	237a      	movs	r3, #122	; 0x7a
 800c75e:	72bb      	strb	r3, [r7, #10]
 800c760:	23cc      	movs	r3, #204	; 0xcc
 800c762:	72fb      	strb	r3, [r7, #11]
 800c764:	2334      	movs	r3, #52	; 0x34
 800c766:	733b      	strb	r3, [r7, #12]
 800c768:	2312      	movs	r3, #18
 800c76a:	737b      	strb	r3, [r7, #13]
 800c76c:	2300      	movs	r3, #0
 800c76e:	73bb      	strb	r3, [r7, #14]
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 800c774:	4639      	mov	r1, r7
 800c776:	4b3e      	ldr	r3, [pc, #248]	; (800c870 <SVCCTL_InitCustomSvc+0x370>)
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	230a      	movs	r3, #10
 800c77c:	2201      	movs	r2, #1
 800c77e:	2002      	movs	r0, #2
 800c780:	f7fb fdf2 	bl	8008368 <aci_gatt_add_service>
                       &(CustomContext.CustomTde_CsHdle));

  /**
   *  Characteristic1
   */
  COPY_CHARACTERISTIC1_UUID(uuid.Char_UUID_128);
 800c784:	2319      	movs	r3, #25
 800c786:	703b      	strb	r3, [r7, #0]
 800c788:	23ed      	movs	r3, #237	; 0xed
 800c78a:	707b      	strb	r3, [r7, #1]
 800c78c:	2382      	movs	r3, #130	; 0x82
 800c78e:	70bb      	strb	r3, [r7, #2]
 800c790:	23ae      	movs	r3, #174	; 0xae
 800c792:	70fb      	strb	r3, [r7, #3]
 800c794:	23ed      	movs	r3, #237	; 0xed
 800c796:	713b      	strb	r3, [r7, #4]
 800c798:	2321      	movs	r3, #33	; 0x21
 800c79a:	717b      	strb	r3, [r7, #5]
 800c79c:	234c      	movs	r3, #76	; 0x4c
 800c79e:	71bb      	strb	r3, [r7, #6]
 800c7a0:	239d      	movs	r3, #157	; 0x9d
 800c7a2:	71fb      	strb	r3, [r7, #7]
 800c7a4:	2341      	movs	r3, #65	; 0x41
 800c7a6:	723b      	strb	r3, [r7, #8]
 800c7a8:	2345      	movs	r3, #69	; 0x45
 800c7aa:	727b      	strb	r3, [r7, #9]
 800c7ac:	2322      	movs	r3, #34	; 0x22
 800c7ae:	72bb      	strb	r3, [r7, #10]
 800c7b0:	238e      	movs	r3, #142	; 0x8e
 800c7b2:	72fb      	strb	r3, [r7, #11]
 800c7b4:	23ad      	movs	r3, #173	; 0xad
 800c7b6:	733b      	strb	r3, [r7, #12]
 800c7b8:	23de      	movs	r3, #222	; 0xde
 800c7ba:	737b      	strb	r3, [r7, #13]
 800c7bc:	2300      	movs	r3, #0
 800c7be:	73bb      	strb	r3, [r7, #14]
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomTde_CsHdle,
 800c7c4:	4b22      	ldr	r3, [pc, #136]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c7c6:	8a18      	ldrh	r0, [r3, #16]
 800c7c8:	2314      	movs	r3, #20
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	463a      	mov	r2, r7
 800c7ce:	4929      	ldr	r1, [pc, #164]	; (800c874 <SVCCTL_InitCustomSvc+0x374>)
 800c7d0:	9105      	str	r1, [sp, #20]
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	9104      	str	r1, [sp, #16]
 800c7d6:	2110      	movs	r1, #16
 800c7d8:	9103      	str	r1, [sp, #12]
 800c7da:	2107      	movs	r1, #7
 800c7dc:	9102      	str	r1, [sp, #8]
 800c7de:	2100      	movs	r1, #0
 800c7e0:	9101      	str	r1, [sp, #4]
 800c7e2:	2116      	movs	r1, #22
 800c7e4:	9100      	str	r1, [sp, #0]
 800c7e6:	2102      	movs	r1, #2
 800c7e8:	f7fb fe6d 	bl	80084c6 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomC1Hdle));
  /**
   *  Characteristic2
   */
  COPY_CHARACTERISTIC2_UUID(uuid.Char_UUID_128);
 800c7ec:	2319      	movs	r3, #25
 800c7ee:	703b      	strb	r3, [r7, #0]
 800c7f0:	23ed      	movs	r3, #237	; 0xed
 800c7f2:	707b      	strb	r3, [r7, #1]
 800c7f4:	2382      	movs	r3, #130	; 0x82
 800c7f6:	70bb      	strb	r3, [r7, #2]
 800c7f8:	23ae      	movs	r3, #174	; 0xae
 800c7fa:	70fb      	strb	r3, [r7, #3]
 800c7fc:	23ed      	movs	r3, #237	; 0xed
 800c7fe:	713b      	strb	r3, [r7, #4]
 800c800:	2321      	movs	r3, #33	; 0x21
 800c802:	717b      	strb	r3, [r7, #5]
 800c804:	234c      	movs	r3, #76	; 0x4c
 800c806:	71bb      	strb	r3, [r7, #6]
 800c808:	239d      	movs	r3, #157	; 0x9d
 800c80a:	71fb      	strb	r3, [r7, #7]
 800c80c:	2341      	movs	r3, #65	; 0x41
 800c80e:	723b      	strb	r3, [r7, #8]
 800c810:	2345      	movs	r3, #69	; 0x45
 800c812:	727b      	strb	r3, [r7, #9]
 800c814:	2322      	movs	r3, #34	; 0x22
 800c816:	72bb      	strb	r3, [r7, #10]
 800c818:	238e      	movs	r3, #142	; 0x8e
 800c81a:	72fb      	strb	r3, [r7, #11]
 800c81c:	23ef      	movs	r3, #239	; 0xef
 800c81e:	733b      	strb	r3, [r7, #12]
 800c820:	23be      	movs	r3, #190	; 0xbe
 800c822:	737b      	strb	r3, [r7, #13]
 800c824:	2300      	movs	r3, #0
 800c826:	73bb      	strb	r3, [r7, #14]
 800c828:	2300      	movs	r3, #0
 800c82a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomTde_CsHdle,
 800c82c:	4b08      	ldr	r3, [pc, #32]	; (800c850 <SVCCTL_InitCustomSvc+0x350>)
 800c82e:	8a18      	ldrh	r0, [r3, #16]
 800c830:	2314      	movs	r3, #20
 800c832:	b29b      	uxth	r3, r3
 800c834:	463a      	mov	r2, r7
 800c836:	4910      	ldr	r1, [pc, #64]	; (800c878 <SVCCTL_InitCustomSvc+0x378>)
 800c838:	9105      	str	r1, [sp, #20]
 800c83a:	2101      	movs	r1, #1
 800c83c:	9104      	str	r1, [sp, #16]
 800c83e:	2110      	movs	r1, #16
 800c840:	9103      	str	r1, [sp, #12]
 800c842:	2107      	movs	r1, #7
 800c844:	9102      	str	r1, [sp, #8]
 800c846:	2100      	movs	r1, #0
 800c848:	9101      	str	r1, [sp, #4]
 800c84a:	e017      	b.n	800c87c <SVCCTL_InitCustomSvc+0x37c>
 800c84c:	0800b9c5 	.word	0x0800b9c5
 800c850:	20000180 	.word	0x20000180
 800c854:	20000182 	.word	0x20000182
 800c858:	20000184 	.word	0x20000184
 800c85c:	20000186 	.word	0x20000186
 800c860:	20000188 	.word	0x20000188
 800c864:	2000018a 	.word	0x2000018a
 800c868:	2000018c 	.word	0x2000018c
 800c86c:	2000018e 	.word	0x2000018e
 800c870:	20000190 	.word	0x20000190
 800c874:	20000192 	.word	0x20000192
 800c878:	20000194 	.word	0x20000194
 800c87c:	2107      	movs	r1, #7
 800c87e:	9100      	str	r1, [sp, #0]
 800c880:	2102      	movs	r1, #2
 800c882:	f7fb fe20 	bl	80084c6 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomC2Hdle));
  /**
   *  Characteristic3
   */
  COPY_CHARACTERISTIC3_UUID(uuid.Char_UUID_128);
 800c886:	2319      	movs	r3, #25
 800c888:	703b      	strb	r3, [r7, #0]
 800c88a:	23ed      	movs	r3, #237	; 0xed
 800c88c:	707b      	strb	r3, [r7, #1]
 800c88e:	2382      	movs	r3, #130	; 0x82
 800c890:	70bb      	strb	r3, [r7, #2]
 800c892:	23ae      	movs	r3, #174	; 0xae
 800c894:	70fb      	strb	r3, [r7, #3]
 800c896:	23ed      	movs	r3, #237	; 0xed
 800c898:	713b      	strb	r3, [r7, #4]
 800c89a:	2321      	movs	r3, #33	; 0x21
 800c89c:	717b      	strb	r3, [r7, #5]
 800c89e:	234c      	movs	r3, #76	; 0x4c
 800c8a0:	71bb      	strb	r3, [r7, #6]
 800c8a2:	239d      	movs	r3, #157	; 0x9d
 800c8a4:	71fb      	strb	r3, [r7, #7]
 800c8a6:	2341      	movs	r3, #65	; 0x41
 800c8a8:	723b      	strb	r3, [r7, #8]
 800c8aa:	2345      	movs	r3, #69	; 0x45
 800c8ac:	727b      	strb	r3, [r7, #9]
 800c8ae:	2322      	movs	r3, #34	; 0x22
 800c8b0:	72bb      	strb	r3, [r7, #10]
 800c8b2:	238e      	movs	r3, #142	; 0x8e
 800c8b4:	72fb      	strb	r3, [r7, #11]
 800c8b6:	23ed      	movs	r3, #237	; 0xed
 800c8b8:	733b      	strb	r3, [r7, #12]
 800c8ba:	23fe      	movs	r3, #254	; 0xfe
 800c8bc:	737b      	strb	r3, [r7, #13]
 800c8be:	2300      	movs	r3, #0
 800c8c0:	73bb      	strb	r3, [r7, #14]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomTde_CsHdle,
 800c8c6:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <SVCCTL_InitCustomSvc+0x3f8>)
 800c8c8:	8a18      	ldrh	r0, [r3, #16]
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	463a      	mov	r2, r7
 800c8d0:	490a      	ldr	r1, [pc, #40]	; (800c8fc <SVCCTL_InitCustomSvc+0x3fc>)
 800c8d2:	9105      	str	r1, [sp, #20]
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	9104      	str	r1, [sp, #16]
 800c8d8:	2110      	movs	r1, #16
 800c8da:	9103      	str	r1, [sp, #12]
 800c8dc:	2107      	movs	r1, #7
 800c8de:	9102      	str	r1, [sp, #8]
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	9101      	str	r1, [sp, #4]
 800c8e4:	2136      	movs	r1, #54	; 0x36
 800c8e6:	9100      	str	r1, [sp, #0]
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	f7fb fdec 	bl	80084c6 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c8ee:	bf00      	nop
}
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20000180 	.word	0x20000180
 800c8fc:	20000196 	.word	0x20000196

0800c900 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	d006      	beq.n	800c91e <P2PS_STM_App_Notification+0x1e>
 800c910:	2b03      	cmp	r3, #3
 800c912:	dc22      	bgt.n	800c95a <P2PS_STM_App_Notification+0x5a>
 800c914:	2b00      	cmp	r3, #0
 800c916:	d022      	beq.n	800c95e <P2PS_STM_App_Notification+0x5e>
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d022      	beq.n	800c962 <P2PS_STM_App_Notification+0x62>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800c91c:	e01d      	b.n	800c95a <P2PS_STM_App_Notification+0x5a>
    	APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n",pNotification->DataTransfered.pPayload[0],pNotification->DataTransfered.pPayload[1]);
 800c91e:	4813      	ldr	r0, [pc, #76]	; (800c96c <P2PS_STM_App_Notification+0x6c>)
 800c920:	f7fd f93f 	bl	8009ba2 <DbgTraceGetFileName>
 800c924:	4601      	mov	r1, r0
 800c926:	2355      	movs	r3, #85	; 0x55
 800c928:	4a11      	ldr	r2, [pc, #68]	; (800c970 <P2PS_STM_App_Notification+0x70>)
 800c92a:	4812      	ldr	r0, [pc, #72]	; (800c974 <P2PS_STM_App_Notification+0x74>)
 800c92c:	f000 fd3c 	bl	800d3a8 <iprintf>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	4619      	mov	r1, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	3301      	adds	r3, #1
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	461a      	mov	r2, r3
 800c942:	480d      	ldr	r0, [pc, #52]	; (800c978 <P2PS_STM_App_Notification+0x78>)
 800c944:	f000 fd30 	bl	800d3a8 <iprintf>
    	Mirror(pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7a1b      	ldrb	r3, [r3, #8]
 800c950:	4619      	mov	r1, r3
 800c952:	4610      	mov	r0, r2
 800c954:	f7fe ff5a 	bl	800b80c <Mirror>
      break;
 800c958:	e004      	b.n	800c964 <P2PS_STM_App_Notification+0x64>
      break;
 800c95a:	bf00      	nop
 800c95c:	e002      	b.n	800c964 <P2PS_STM_App_Notification+0x64>
      break;
 800c95e:	bf00      	nop
 800c960:	e000      	b.n	800c964 <P2PS_STM_App_Notification+0x64>
      break;
 800c962:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800c964:	bf00      	nop
}
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	08010210 	.word	0x08010210
 800c970:	08010570 	.word	0x08010570
 800c974:	08010234 	.word	0x08010234
 800c978:	08010248 	.word	0x08010248

0800c97c <P2PS_APP_Init>:
/* USER CODE END P2PS_APP_Notification_2 */
  return;
}

void P2PS_APP_Init(void)
{
 800c97c:	b480      	push	{r7}
 800c97e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800c980:	bf00      	nop
}
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
	...

0800c98c <LL_PWR_EnableBootC2>:
{
 800c98c:	b480      	push	{r7}
 800c98e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c990:	4b05      	ldr	r3, [pc, #20]	; (800c9a8 <LL_PWR_EnableBootC2+0x1c>)
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	4a04      	ldr	r2, [pc, #16]	; (800c9a8 <LL_PWR_EnableBootC2+0x1c>)
 800c996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c99a:	60d3      	str	r3, [r2, #12]
}
 800c99c:	bf00      	nop
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	58000400 	.word	0x58000400

0800c9ac <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c9b4:	4b06      	ldr	r3, [pc, #24]	; (800c9d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c9b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c9ba:	4905      	ldr	r1, [pc, #20]	; (800c9d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	58000800 	.word	0x58000800

0800c9d4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c9dc:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c9de:	6a1a      	ldr	r2, [r3, #32]
 800c9e0:	4904      	ldr	r1, [pc, #16]	; (800c9f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	620b      	str	r3, [r1, #32]
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	58000800 	.word	0x58000800

0800c9f8 <LL_AHB3_GRP1_EnableClock>:
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800ca00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ca10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
}
 800ca1e:	bf00      	nop
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b085      	sub	sp, #20
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ca32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca36:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ca3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ca46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca4a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4013      	ands	r3, r2
 800ca52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ca54:	68fb      	ldr	r3, [r7, #12]
}
 800ca56:	bf00      	nop
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <LL_C1_IPCC_EnableIT_TXF>:
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	601a      	str	r2, [r3, #0]
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <LL_C1_IPCC_EnableIT_RXO>:
{
 800ca82:	b480      	push	{r7}
 800ca84:	b083      	sub	sp, #12
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f043 0201 	orr.w	r2, r3, #1
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
}
 800ca96:	bf00      	nop
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	041b      	lsls	r3, r3, #16
 800cab4:	43db      	mvns	r3, r3
 800cab6:	401a      	ands	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	605a      	str	r2, [r3, #4]
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	041b      	lsls	r3, r3, #16
 800cada:	431a      	orrs	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	605a      	str	r2, [r3, #4]
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <LL_C1_IPCC_EnableReceiveChannel>:
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	43db      	mvns	r3, r3
 800cafe:	401a      	ands	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	605a      	str	r2, [r3, #4]
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	609a      	str	r2, [r3, #8]
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <LL_C1_IPCC_SetFlag_CHx>:
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	041a      	lsls	r2, r3, #16
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	609a      	str	r2, [r3, #8]
}
 800cb3e:	bf00      	nop
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800cb4a:	b480      	push	{r7}
 800cb4c:	b083      	sub	sp, #12
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	68da      	ldr	r2, [r3, #12]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d101      	bne.n	800cb66 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800cb62:	2301      	movs	r3, #1
 800cb64:	e000      	b.n	800cb68 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	69da      	ldr	r2, [r3, #28]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	4013      	ands	r3, r2
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d101      	bne.n	800cb90 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e000      	b.n	800cb92 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	370c      	adds	r7, #12
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
	...

0800cba0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800cba4:	2102      	movs	r1, #2
 800cba6:	4819      	ldr	r0, [pc, #100]	; (800cc0c <HW_IPCC_Rx_Handler+0x6c>)
 800cba8:	f7ff ffe4 	bl	800cb74 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d009      	beq.n	800cbc6 <HW_IPCC_Rx_Handler+0x26>
 800cbb2:	4b16      	ldr	r3, [pc, #88]	; (800cc0c <HW_IPCC_Rx_Handler+0x6c>)
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	43db      	mvns	r3, r3
 800cbb8:	f003 0302 	and.w	r3, r3, #2
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800cbc0:	f000 f8ea 	bl	800cd98 <HW_IPCC_SYS_EvtHandler>
 800cbc4:	e01f      	b.n	800cc06 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	4810      	ldr	r0, [pc, #64]	; (800cc0c <HW_IPCC_Rx_Handler+0x6c>)
 800cbca:	f7ff ffd3 	bl	800cb74 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d008      	beq.n	800cbe6 <HW_IPCC_Rx_Handler+0x46>
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <HW_IPCC_Rx_Handler+0x6c>)
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	f003 0301 	and.w	r3, r3, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800cbe0:	f000 f89e 	bl	800cd20 <HW_IPCC_BLE_EvtHandler>
 800cbe4:	e00f      	b.n	800cc06 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800cbe6:	2108      	movs	r1, #8
 800cbe8:	4808      	ldr	r0, [pc, #32]	; (800cc0c <HW_IPCC_Rx_Handler+0x6c>)
 800cbea:	f7ff ffc3 	bl	800cb74 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d009      	beq.n	800cc08 <HW_IPCC_Rx_Handler+0x68>
 800cbf4:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <HW_IPCC_Rx_Handler+0x6c>)
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	43db      	mvns	r3, r3
 800cbfa:	f003 0308 	and.w	r3, r3, #8
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d002      	beq.n	800cc08 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800cc02:	f000 f915 	bl	800ce30 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800cc06:	bf00      	nop
 800cc08:	bf00      	nop
}
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	58000c00 	.word	0x58000c00

0800cc10 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800cc14:	2102      	movs	r1, #2
 800cc16:	4822      	ldr	r0, [pc, #136]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc18:	f7ff ff97 	bl	800cb4a <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d109      	bne.n	800cc36 <HW_IPCC_Tx_Handler+0x26>
 800cc22:	4b1f      	ldr	r3, [pc, #124]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	43db      	mvns	r3, r3
 800cc28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800cc30:	f000 f8a6 	bl	800cd80 <HW_IPCC_SYS_CmdEvtHandler>
 800cc34:	e031      	b.n	800cc9a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800cc36:	2102      	movs	r1, #2
 800cc38:	4819      	ldr	r0, [pc, #100]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc3a:	f7ff ff86 	bl	800cb4a <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d109      	bne.n	800cc58 <HW_IPCC_Tx_Handler+0x48>
 800cc44:	4b16      	ldr	r3, [pc, #88]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800cc52:	f000 f895 	bl	800cd80 <HW_IPCC_SYS_CmdEvtHandler>
 800cc56:	e020      	b.n	800cc9a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800cc58:	2108      	movs	r1, #8
 800cc5a:	4811      	ldr	r0, [pc, #68]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc5c:	f7ff ff75 	bl	800cb4a <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d109      	bne.n	800cc7a <HW_IPCC_Tx_Handler+0x6a>
 800cc66:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	43db      	mvns	r3, r3
 800cc6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d002      	beq.n	800cc7a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800cc74:	f000 f8be 	bl	800cdf4 <HW_IPCC_MM_FreeBufHandler>
 800cc78:	e00f      	b.n	800cc9a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800cc7a:	2120      	movs	r1, #32
 800cc7c:	4808      	ldr	r0, [pc, #32]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc7e:	f7ff ff64 	bl	800cb4a <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d109      	bne.n	800cc9c <HW_IPCC_Tx_Handler+0x8c>
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <HW_IPCC_Tx_Handler+0x90>)
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	43db      	mvns	r3, r3
 800cc8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d002      	beq.n	800cc9c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800cc96:	f000 f84f 	bl	800cd38 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800cc9a:	bf00      	nop
 800cc9c:	bf00      	nop
}
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	58000c00 	.word	0x58000c00

0800cca4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800cca8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ccac:	f7ff febd 	bl	800ca2a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ccb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ccb4:	f7ff fe7a 	bl	800c9ac <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ccb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ccbc:	f7ff fe8a 	bl	800c9d4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ccc0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ccc2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ccc4:	f7ff fe62 	bl	800c98c <LL_PWR_EnableBootC2>

  return;
 800ccc8:	bf00      	nop
}
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800ccd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ccd4:	f7ff fe90 	bl	800c9f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800ccd8:	4806      	ldr	r0, [pc, #24]	; (800ccf4 <HW_IPCC_Init+0x28>)
 800ccda:	f7ff fed2 	bl	800ca82 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ccde:	4805      	ldr	r0, [pc, #20]	; (800ccf4 <HW_IPCC_Init+0x28>)
 800cce0:	f7ff febf 	bl	800ca62 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800cce4:	202c      	movs	r0, #44	; 0x2c
 800cce6:	f7f6 fb66 	bl	80033b6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800ccea:	202d      	movs	r0, #45	; 0x2d
 800ccec:	f7f6 fb63 	bl	80033b6 <HAL_NVIC_EnableIRQ>

  return;
 800ccf0:	bf00      	nop
}
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	58000c00 	.word	0x58000c00

0800ccf8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	4802      	ldr	r0, [pc, #8]	; (800cd08 <HW_IPCC_BLE_Init+0x10>)
 800cd00:	f7ff fef4 	bl	800caec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cd04:	bf00      	nop
}
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	58000c00 	.word	0x58000c00

0800cd0c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800cd10:	2101      	movs	r1, #1
 800cd12:	4802      	ldr	r0, [pc, #8]	; (800cd1c <HW_IPCC_BLE_SendCmd+0x10>)
 800cd14:	f7ff ff0a 	bl	800cb2c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800cd18:	bf00      	nop
}
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	58000c00 	.word	0x58000c00

0800cd20 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800cd24:	f7fc fd5e 	bl	80097e4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cd28:	2101      	movs	r1, #1
 800cd2a:	4802      	ldr	r0, [pc, #8]	; (800cd34 <HW_IPCC_BLE_EvtHandler+0x14>)
 800cd2c:	f7ff fef0 	bl	800cb10 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cd30:	bf00      	nop
}
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	58000c00 	.word	0x58000c00

0800cd38 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800cd3c:	2120      	movs	r1, #32
 800cd3e:	4803      	ldr	r0, [pc, #12]	; (800cd4c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800cd40:	f7ff fec2 	bl	800cac8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800cd44:	f7fc fd7e 	bl	8009844 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800cd48:	bf00      	nop
}
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	58000c00 	.word	0x58000c00

0800cd50 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cd54:	2102      	movs	r1, #2
 800cd56:	4802      	ldr	r0, [pc, #8]	; (800cd60 <HW_IPCC_SYS_Init+0x10>)
 800cd58:	f7ff fec8 	bl	800caec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cd5c:	bf00      	nop
}
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	58000c00 	.word	0x58000c00

0800cd64 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cd68:	2102      	movs	r1, #2
 800cd6a:	4804      	ldr	r0, [pc, #16]	; (800cd7c <HW_IPCC_SYS_SendCmd+0x18>)
 800cd6c:	f7ff fede 	bl	800cb2c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cd70:	2102      	movs	r1, #2
 800cd72:	4802      	ldr	r0, [pc, #8]	; (800cd7c <HW_IPCC_SYS_SendCmd+0x18>)
 800cd74:	f7ff fe95 	bl	800caa2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cd78:	bf00      	nop
}
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	58000c00 	.word	0x58000c00

0800cd80 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cd84:	2102      	movs	r1, #2
 800cd86:	4803      	ldr	r0, [pc, #12]	; (800cd94 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800cd88:	f7ff fe9e 	bl	800cac8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800cd8c:	f7fc fdaa 	bl	80098e4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800cd90:	bf00      	nop
}
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	58000c00 	.word	0x58000c00

0800cd98 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800cd9c:	f7fc fdb8 	bl	8009910 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cda0:	2102      	movs	r1, #2
 800cda2:	4802      	ldr	r0, [pc, #8]	; (800cdac <HW_IPCC_SYS_EvtHandler+0x14>)
 800cda4:	f7ff feb4 	bl	800cb10 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cda8:	bf00      	nop
}
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	58000c00 	.word	0x58000c00

0800cdb0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800cdb8:	2108      	movs	r1, #8
 800cdba:	480c      	ldr	r0, [pc, #48]	; (800cdec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cdbc:	f7ff fec5 	bl	800cb4a <LL_C1_IPCC_IsActiveFlag_CHx>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d007      	beq.n	800cdd6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800cdc6:	4a0a      	ldr	r2, [pc, #40]	; (800cdf0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cdcc:	2108      	movs	r1, #8
 800cdce:	4807      	ldr	r0, [pc, #28]	; (800cdec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cdd0:	f7ff fe67 	bl	800caa2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800cdd4:	e006      	b.n	800cde4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cdda:	2108      	movs	r1, #8
 800cddc:	4803      	ldr	r0, [pc, #12]	; (800cdec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cdde:	f7ff fea5 	bl	800cb2c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800cde2:	bf00      	nop
}
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	58000c00 	.word	0x58000c00
 800cdf0:	200002f4 	.word	0x200002f4

0800cdf4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cdf8:	2108      	movs	r1, #8
 800cdfa:	4806      	ldr	r0, [pc, #24]	; (800ce14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800cdfc:	f7ff fe64 	bl	800cac8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ce06:	2108      	movs	r1, #8
 800ce08:	4802      	ldr	r0, [pc, #8]	; (800ce14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ce0a:	f7ff fe8f 	bl	800cb2c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ce0e:	bf00      	nop
}
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	58000c00 	.word	0x58000c00
 800ce18:	200002f4 	.word	0x200002f4

0800ce1c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ce20:	2108      	movs	r1, #8
 800ce22:	4802      	ldr	r0, [pc, #8]	; (800ce2c <HW_IPCC_TRACES_Init+0x10>)
 800ce24:	f7ff fe62 	bl	800caec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ce28:	bf00      	nop
}
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	58000c00 	.word	0x58000c00

0800ce30 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ce34:	f7fc fe14 	bl	8009a60 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ce38:	2108      	movs	r1, #8
 800ce3a:	4802      	ldr	r0, [pc, #8]	; (800ce44 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ce3c:	f7ff fe68 	bl	800cb10 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ce40:	bf00      	nop
}
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	58000c00 	.word	0x58000c00

0800ce48 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ce4c:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <UTIL_LPM_Init+0x1c>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ce52:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <UTIL_LPM_Init+0x20>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ce58:	bf00      	nop
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	200002f8 	.word	0x200002f8
 800ce68:	200002fc 	.word	0x200002fc

0800ce6c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce78:	f3ef 8310 	mrs	r3, PRIMASK
 800ce7c:	613b      	str	r3, [r7, #16]
  return(result);
 800ce7e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ce80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce82:	b672      	cpsid	i
}
 800ce84:	bf00      	nop
  
  switch(state)
 800ce86:	78fb      	ldrb	r3, [r7, #3]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d008      	beq.n	800ce9e <UTIL_LPM_SetOffMode+0x32>
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d10e      	bne.n	800ceae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ce90:	4b0d      	ldr	r3, [pc, #52]	; (800cec8 <UTIL_LPM_SetOffMode+0x5c>)
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	4a0b      	ldr	r2, [pc, #44]	; (800cec8 <UTIL_LPM_SetOffMode+0x5c>)
 800ce9a:	6013      	str	r3, [r2, #0]
      break;
 800ce9c:	e008      	b.n	800ceb0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	43da      	mvns	r2, r3
 800cea2:	4b09      	ldr	r3, [pc, #36]	; (800cec8 <UTIL_LPM_SetOffMode+0x5c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4013      	ands	r3, r2
 800cea8:	4a07      	ldr	r2, [pc, #28]	; (800cec8 <UTIL_LPM_SetOffMode+0x5c>)
 800ceaa:	6013      	str	r3, [r2, #0]
      break;
 800ceac:	e000      	b.n	800ceb0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ceae:	bf00      	nop
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f383 8810 	msr	PRIMASK, r3
}
 800ceba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cebc:	bf00      	nop
 800cebe:	371c      	adds	r7, #28
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr
 800cec8:	200002fc 	.word	0x200002fc

0800cecc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b08c      	sub	sp, #48	; 0x30
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ced4:	4b6a      	ldr	r3, [pc, #424]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800ceda:	4b69      	ldr	r3, [pc, #420]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4013      	ands	r3, r2
 800cee2:	4a67      	ldr	r2, [pc, #412]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800cee4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cee6:	4b67      	ldr	r3, [pc, #412]	; (800d084 <UTIL_SEQ_Run+0x1b8>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800ceec:	e086      	b.n	800cffc <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800ceee:	2300      	movs	r3, #0
 800cef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800cef2:	e002      	b.n	800cefa <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800cef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef6:	3301      	adds	r3, #1
 800cef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800cefa:	4a63      	ldr	r2, [pc, #396]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cf02:	4b62      	ldr	r3, [pc, #392]	; (800d08c <UTIL_SEQ_Run+0x1c0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	401a      	ands	r2, r3
 800cf08:	4b5d      	ldr	r3, [pc, #372]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0f0      	beq.n	800cef4 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800cf12:	4a5d      	ldr	r2, [pc, #372]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cf1a:	4b5c      	ldr	r3, [pc, #368]	; (800d08c <UTIL_SEQ_Run+0x1c0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	401a      	ands	r2, r3
 800cf20:	4b57      	ldr	r3, [pc, #348]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4013      	ands	r3, r2
 800cf26:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cf28:	4a57      	ldr	r2, [pc, #348]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	4413      	add	r3, r2
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	4013      	ands	r3, r2
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cf3a:	4a53      	ldr	r2, [pc, #332]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	4413      	add	r3, r2
 800cf42:	f04f 32ff 	mov.w	r2, #4294967295
 800cf46:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cf48:	4a4f      	ldr	r2, [pc, #316]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	4413      	add	r3, r2
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	6a3b      	ldr	r3, [r7, #32]
 800cf54:	4013      	ands	r3, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 f9ac 	bl	800d2b4 <SEQ_BitPosition>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
 800cf60:	4b4b      	ldr	r3, [pc, #300]	; (800d090 <UTIL_SEQ_Run+0x1c4>)
 800cf62:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cf64:	4a48      	ldr	r2, [pc, #288]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	4413      	add	r3, r2
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	4b48      	ldr	r3, [pc, #288]	; (800d090 <UTIL_SEQ_Run+0x1c4>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2101      	movs	r1, #1
 800cf74:	fa01 f303 	lsl.w	r3, r1, r3
 800cf78:	43db      	mvns	r3, r3
 800cf7a:	401a      	ands	r2, r3
 800cf7c:	4942      	ldr	r1, [pc, #264]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	440b      	add	r3, r1
 800cf84:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf86:	f3ef 8310 	mrs	r3, PRIMASK
 800cf8a:	617b      	str	r3, [r7, #20]
  return(result);
 800cf8c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cf8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf90:	b672      	cpsid	i
}
 800cf92:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800cf94:	4b3e      	ldr	r3, [pc, #248]	; (800d090 <UTIL_SEQ_Run+0x1c4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf9e:	43da      	mvns	r2, r3
 800cfa0:	4b38      	ldr	r3, [pc, #224]	; (800d084 <UTIL_SEQ_Run+0x1b8>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	4a37      	ldr	r2, [pc, #220]	; (800d084 <UTIL_SEQ_Run+0x1b8>)
 800cfa8:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cfaa:	2302      	movs	r3, #2
 800cfac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfae:	e013      	b.n	800cfd8 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	4a34      	ldr	r2, [pc, #208]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cfb6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cfba:	4b35      	ldr	r3, [pc, #212]	; (800d090 <UTIL_SEQ_Run+0x1c4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc4:	43da      	mvns	r2, r3
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	400a      	ands	r2, r1
 800cfcc:	492e      	ldr	r1, [pc, #184]	; (800d088 <UTIL_SEQ_Run+0x1bc>)
 800cfce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1e8      	bne.n	800cfb0 <UTIL_SEQ_Run+0xe4>
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	f383 8810 	msr	PRIMASK, r3
}
 800cfe8:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cfea:	4b29      	ldr	r3, [pc, #164]	; (800d090 <UTIL_SEQ_Run+0x1c4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a29      	ldr	r2, [pc, #164]	; (800d094 <UTIL_SEQ_Run+0x1c8>)
 800cff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff4:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800cff6:	4b23      	ldr	r3, [pc, #140]	; (800d084 <UTIL_SEQ_Run+0x1b8>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800cffc:	4b23      	ldr	r3, [pc, #140]	; (800d08c <UTIL_SEQ_Run+0x1c0>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d002:	401a      	ands	r2, r3
 800d004:	4b1e      	ldr	r3, [pc, #120]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4013      	ands	r3, r2
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d007      	beq.n	800d01e <UTIL_SEQ_Run+0x152>
 800d00e:	4b22      	ldr	r3, [pc, #136]	; (800d098 <UTIL_SEQ_Run+0x1cc>)
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	4b22      	ldr	r3, [pc, #136]	; (800d09c <UTIL_SEQ_Run+0x1d0>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4013      	ands	r3, r2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f43f af68 	beq.w	800ceee <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d01e:	4b1c      	ldr	r3, [pc, #112]	; (800d090 <UTIL_SEQ_Run+0x1c4>)
 800d020:	f04f 32ff 	mov.w	r2, #4294967295
 800d024:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d026:	f000 f937 	bl	800d298 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d02a:	f3ef 8310 	mrs	r3, PRIMASK
 800d02e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d030:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d032:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800d034:	b672      	cpsid	i
}
 800d036:	bf00      	nop
  local_taskset = TaskSet;
 800d038:	4b12      	ldr	r3, [pc, #72]	; (800d084 <UTIL_SEQ_Run+0x1b8>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800d03e:	4b13      	ldr	r3, [pc, #76]	; (800d08c <UTIL_SEQ_Run+0x1c0>)
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	401a      	ands	r2, r3
 800d046:	4b0e      	ldr	r3, [pc, #56]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4013      	ands	r3, r2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d108      	bne.n	800d062 <UTIL_SEQ_Run+0x196>
 800d050:	4b11      	ldr	r3, [pc, #68]	; (800d098 <UTIL_SEQ_Run+0x1cc>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	4b11      	ldr	r3, [pc, #68]	; (800d09c <UTIL_SEQ_Run+0x1d0>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4013      	ands	r3, r2
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800d05e:	f7f3 fd00 	bl	8000a62 <UTIL_SEQ_Idle>
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	f383 8810 	msr	PRIMASK, r3
}
 800d06c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800d06e:	f000 f91a 	bl	800d2a6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d072:	4a03      	ldr	r2, [pc, #12]	; (800d080 <UTIL_SEQ_Run+0x1b4>)
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	6013      	str	r3, [r2, #0]

  return;
 800d078:	bf00      	nop
}
 800d07a:	3730      	adds	r7, #48	; 0x30
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	2000003c 	.word	0x2000003c
 800d084:	20000300 	.word	0x20000300
 800d088:	20000390 	.word	0x20000390
 800d08c:	20000038 	.word	0x20000038
 800d090:	2000030c 	.word	0x2000030c
 800d094:	20000310 	.word	0x20000310
 800d098:	20000304 	.word	0x20000304
 800d09c:	20000308 	.word	0x20000308

0800d0a0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b0:	617b      	str	r3, [r7, #20]
  return(result);
 800d0b2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d0b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0b6:	b672      	cpsid	i
}
 800d0b8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f000 f8fa 	bl	800d2b4 <SEQ_BitPosition>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4a06      	ldr	r2, [pc, #24]	; (800d0e0 <UTIL_SEQ_RegTask+0x40>)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	f383 8810 	msr	PRIMASK, r3
}
 800d0d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d0d8:	bf00      	nop
}
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	20000310 	.word	0x20000310

0800d0e4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d0f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d0f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0f8:	b672      	cpsid	i
}
 800d0fa:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <UTIL_SEQ_SetTask+0x50>)
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4313      	orrs	r3, r2
 800d104:	4a0b      	ldr	r2, [pc, #44]	; (800d134 <UTIL_SEQ_SetTask+0x50>)
 800d106:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d108:	4a0b      	ldr	r2, [pc, #44]	; (800d138 <UTIL_SEQ_SetTask+0x54>)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	431a      	orrs	r2, r3
 800d114:	4908      	ldr	r1, [pc, #32]	; (800d138 <UTIL_SEQ_SetTask+0x54>)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	f383 8810 	msr	PRIMASK, r3
}
 800d126:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d128:	bf00      	nop
}
 800d12a:	371c      	adds	r7, #28
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	20000300 	.word	0x20000300
 800d138:	20000390 	.word	0x20000390

0800d13c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d13c:	b480      	push	{r7}
 800d13e:	b087      	sub	sp, #28
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d144:	f3ef 8310 	mrs	r3, PRIMASK
 800d148:	60fb      	str	r3, [r7, #12]
  return(result);
 800d14a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d14c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d14e:	b672      	cpsid	i
}
 800d150:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	43da      	mvns	r2, r3
 800d156:	4b08      	ldr	r3, [pc, #32]	; (800d178 <UTIL_SEQ_PauseTask+0x3c>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4013      	ands	r3, r2
 800d15c:	4a06      	ldr	r2, [pc, #24]	; (800d178 <UTIL_SEQ_PauseTask+0x3c>)
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	f383 8810 	msr	PRIMASK, r3
}
 800d16a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d16c:	bf00      	nop
}
 800d16e:	371c      	adds	r7, #28
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	20000038 	.word	0x20000038

0800d17c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d17c:	b480      	push	{r7}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d184:	f3ef 8310 	mrs	r3, PRIMASK
 800d188:	60fb      	str	r3, [r7, #12]
  return(result);
 800d18a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d18c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d18e:	b672      	cpsid	i
}
 800d190:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d192:	4b09      	ldr	r3, [pc, #36]	; (800d1b8 <UTIL_SEQ_ResumeTask+0x3c>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4313      	orrs	r3, r2
 800d19a:	4a07      	ldr	r2, [pc, #28]	; (800d1b8 <UTIL_SEQ_ResumeTask+0x3c>)
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	f383 8810 	msr	PRIMASK, r3
}
 800d1a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d1aa:	bf00      	nop
}
 800d1ac:	371c      	adds	r7, #28
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	20000038 	.word	0x20000038

0800d1bc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1c4:	f3ef 8310 	mrs	r3, PRIMASK
 800d1c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d1cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1ce:	b672      	cpsid	i
}
 800d1d0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d1d2:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <UTIL_SEQ_SetEvt+0x3c>)
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	4a07      	ldr	r2, [pc, #28]	; (800d1f8 <UTIL_SEQ_SetEvt+0x3c>)
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	f383 8810 	msr	PRIMASK, r3
}
 800d1e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d1ea:	bf00      	nop
}
 800d1ec:	371c      	adds	r7, #28
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	20000304 	.word	0x20000304

0800d1fc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d204:	4b21      	ldr	r3, [pc, #132]	; (800d28c <UTIL_SEQ_WaitEvt+0x90>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d20a:	4b20      	ldr	r3, [pc, #128]	; (800d28c <UTIL_SEQ_WaitEvt+0x90>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d212:	d102      	bne.n	800d21a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	61fb      	str	r3, [r7, #28]
 800d218:	e005      	b.n	800d226 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800d21a:	4b1c      	ldr	r3, [pc, #112]	; (800d28c <UTIL_SEQ_WaitEvt+0x90>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2201      	movs	r2, #1
 800d220:	fa02 f303 	lsl.w	r3, r2, r3
 800d224:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d226:	4b1a      	ldr	r3, [pc, #104]	; (800d290 <UTIL_SEQ_WaitEvt+0x94>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d22c:	4a18      	ldr	r2, [pc, #96]	; (800d290 <UTIL_SEQ_WaitEvt+0x94>)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800d232:	e005      	b.n	800d240 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800d234:	4b16      	ldr	r3, [pc, #88]	; (800d290 <UTIL_SEQ_WaitEvt+0x94>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4619      	mov	r1, r3
 800d23a:	69f8      	ldr	r0, [r7, #28]
 800d23c:	f7f3 fc18 	bl	8000a70 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800d240:	4b14      	ldr	r3, [pc, #80]	; (800d294 <UTIL_SEQ_WaitEvt+0x98>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	4b12      	ldr	r3, [pc, #72]	; (800d290 <UTIL_SEQ_WaitEvt+0x94>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4013      	ands	r3, r2
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0f2      	beq.n	800d234 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d24e:	4a0f      	ldr	r2, [pc, #60]	; (800d28c <UTIL_SEQ_WaitEvt+0x90>)
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d254:	f3ef 8310 	mrs	r3, PRIMASK
 800d258:	60bb      	str	r3, [r7, #8]
  return(result);
 800d25a:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d25c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d25e:	b672      	cpsid	i
}
 800d260:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800d262:	4b0b      	ldr	r3, [pc, #44]	; (800d290 <UTIL_SEQ_WaitEvt+0x94>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	43da      	mvns	r2, r3
 800d268:	4b0a      	ldr	r3, [pc, #40]	; (800d294 <UTIL_SEQ_WaitEvt+0x98>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4013      	ands	r3, r2
 800d26e:	4a09      	ldr	r2, [pc, #36]	; (800d294 <UTIL_SEQ_WaitEvt+0x98>)
 800d270:	6013      	str	r3, [r2, #0]
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f383 8810 	msr	PRIMASK, r3
}
 800d27c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d27e:	4a04      	ldr	r2, [pc, #16]	; (800d290 <UTIL_SEQ_WaitEvt+0x94>)
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	6013      	str	r3, [r2, #0]

  return;
 800d284:	bf00      	nop
}
 800d286:	3720      	adds	r7, #32
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	2000030c 	.word	0x2000030c
 800d290:	20000308 	.word	0x20000308
 800d294:	20000304 	.word	0x20000304

0800d298 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d298:	b480      	push	{r7}
 800d29a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d29c:	bf00      	nop
}
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d2a6:	b480      	push	{r7}
 800d2a8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d2aa:	bf00      	nop
}
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	0c1b      	lsrs	r3, r3, #16
 800d2c4:	041b      	lsls	r3, r3, #16
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d104      	bne.n	800d2d4 <SEQ_BitPosition+0x20>
 800d2ca:	2310      	movs	r3, #16
 800d2cc:	73fb      	strb	r3, [r7, #15]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	041b      	lsls	r3, r3, #16
 800d2d2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d105      	bne.n	800d2ea <SEQ_BitPosition+0x36>
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	73fb      	strb	r3, [r7, #15]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	021b      	lsls	r3, r3, #8
 800d2e8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d105      	bne.n	800d300 <SEQ_BitPosition+0x4c>
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	73fb      	strb	r3, [r7, #15]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	011b      	lsls	r3, r3, #4
 800d2fe:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	0f1b      	lsrs	r3, r3, #28
 800d304:	4a07      	ldr	r2, [pc, #28]	; (800d324 <SEQ_BitPosition+0x70>)
 800d306:	5cd2      	ldrb	r2, [r2, r3]
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	4413      	add	r3, r2
 800d30c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d30e:	7bfb      	ldrb	r3, [r7, #15]
 800d310:	f1c3 031f 	rsb	r3, r3, #31
 800d314:	b2db      	uxtb	r3, r3
}
 800d316:	4618      	mov	r0, r3
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	0801058c 	.word	0x0801058c

0800d328 <__errno>:
 800d328:	4b01      	ldr	r3, [pc, #4]	; (800d330 <__errno+0x8>)
 800d32a:	6818      	ldr	r0, [r3, #0]
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	20000040 	.word	0x20000040

0800d334 <__libc_init_array>:
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	4d0d      	ldr	r5, [pc, #52]	; (800d36c <__libc_init_array+0x38>)
 800d338:	4c0d      	ldr	r4, [pc, #52]	; (800d370 <__libc_init_array+0x3c>)
 800d33a:	1b64      	subs	r4, r4, r5
 800d33c:	10a4      	asrs	r4, r4, #2
 800d33e:	2600      	movs	r6, #0
 800d340:	42a6      	cmp	r6, r4
 800d342:	d109      	bne.n	800d358 <__libc_init_array+0x24>
 800d344:	4d0b      	ldr	r5, [pc, #44]	; (800d374 <__libc_init_array+0x40>)
 800d346:	4c0c      	ldr	r4, [pc, #48]	; (800d378 <__libc_init_array+0x44>)
 800d348:	f001 f81a 	bl	800e380 <_init>
 800d34c:	1b64      	subs	r4, r4, r5
 800d34e:	10a4      	asrs	r4, r4, #2
 800d350:	2600      	movs	r6, #0
 800d352:	42a6      	cmp	r6, r4
 800d354:	d105      	bne.n	800d362 <__libc_init_array+0x2e>
 800d356:	bd70      	pop	{r4, r5, r6, pc}
 800d358:	f855 3b04 	ldr.w	r3, [r5], #4
 800d35c:	4798      	blx	r3
 800d35e:	3601      	adds	r6, #1
 800d360:	e7ee      	b.n	800d340 <__libc_init_array+0xc>
 800d362:	f855 3b04 	ldr.w	r3, [r5], #4
 800d366:	4798      	blx	r3
 800d368:	3601      	adds	r6, #1
 800d36a:	e7f2      	b.n	800d352 <__libc_init_array+0x1e>
 800d36c:	0801063c 	.word	0x0801063c
 800d370:	0801063c 	.word	0x0801063c
 800d374:	0801063c 	.word	0x0801063c
 800d378:	08010640 	.word	0x08010640

0800d37c <memcpy>:
 800d37c:	440a      	add	r2, r1
 800d37e:	4291      	cmp	r1, r2
 800d380:	f100 33ff 	add.w	r3, r0, #4294967295
 800d384:	d100      	bne.n	800d388 <memcpy+0xc>
 800d386:	4770      	bx	lr
 800d388:	b510      	push	{r4, lr}
 800d38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d392:	4291      	cmp	r1, r2
 800d394:	d1f9      	bne.n	800d38a <memcpy+0xe>
 800d396:	bd10      	pop	{r4, pc}

0800d398 <memset>:
 800d398:	4402      	add	r2, r0
 800d39a:	4603      	mov	r3, r0
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d100      	bne.n	800d3a2 <memset+0xa>
 800d3a0:	4770      	bx	lr
 800d3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d3a6:	e7f9      	b.n	800d39c <memset+0x4>

0800d3a8 <iprintf>:
 800d3a8:	b40f      	push	{r0, r1, r2, r3}
 800d3aa:	4b0a      	ldr	r3, [pc, #40]	; (800d3d4 <iprintf+0x2c>)
 800d3ac:	b513      	push	{r0, r1, r4, lr}
 800d3ae:	681c      	ldr	r4, [r3, #0]
 800d3b0:	b124      	cbz	r4, 800d3bc <iprintf+0x14>
 800d3b2:	69a3      	ldr	r3, [r4, #24]
 800d3b4:	b913      	cbnz	r3, 800d3bc <iprintf+0x14>
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 fa72 	bl	800d8a0 <__sinit>
 800d3bc:	ab05      	add	r3, sp, #20
 800d3be:	9a04      	ldr	r2, [sp, #16]
 800d3c0:	68a1      	ldr	r1, [r4, #8]
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f000 fc43 	bl	800dc50 <_vfiprintf_r>
 800d3ca:	b002      	add	sp, #8
 800d3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d0:	b004      	add	sp, #16
 800d3d2:	4770      	bx	lr
 800d3d4:	20000040 	.word	0x20000040

0800d3d8 <_puts_r>:
 800d3d8:	b570      	push	{r4, r5, r6, lr}
 800d3da:	460e      	mov	r6, r1
 800d3dc:	4605      	mov	r5, r0
 800d3de:	b118      	cbz	r0, 800d3e8 <_puts_r+0x10>
 800d3e0:	6983      	ldr	r3, [r0, #24]
 800d3e2:	b90b      	cbnz	r3, 800d3e8 <_puts_r+0x10>
 800d3e4:	f000 fa5c 	bl	800d8a0 <__sinit>
 800d3e8:	69ab      	ldr	r3, [r5, #24]
 800d3ea:	68ac      	ldr	r4, [r5, #8]
 800d3ec:	b913      	cbnz	r3, 800d3f4 <_puts_r+0x1c>
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f000 fa56 	bl	800d8a0 <__sinit>
 800d3f4:	4b2c      	ldr	r3, [pc, #176]	; (800d4a8 <_puts_r+0xd0>)
 800d3f6:	429c      	cmp	r4, r3
 800d3f8:	d120      	bne.n	800d43c <_puts_r+0x64>
 800d3fa:	686c      	ldr	r4, [r5, #4]
 800d3fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3fe:	07db      	lsls	r3, r3, #31
 800d400:	d405      	bmi.n	800d40e <_puts_r+0x36>
 800d402:	89a3      	ldrh	r3, [r4, #12]
 800d404:	0598      	lsls	r0, r3, #22
 800d406:	d402      	bmi.n	800d40e <_puts_r+0x36>
 800d408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d40a:	f000 fae7 	bl	800d9dc <__retarget_lock_acquire_recursive>
 800d40e:	89a3      	ldrh	r3, [r4, #12]
 800d410:	0719      	lsls	r1, r3, #28
 800d412:	d51d      	bpl.n	800d450 <_puts_r+0x78>
 800d414:	6923      	ldr	r3, [r4, #16]
 800d416:	b1db      	cbz	r3, 800d450 <_puts_r+0x78>
 800d418:	3e01      	subs	r6, #1
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d420:	3b01      	subs	r3, #1
 800d422:	60a3      	str	r3, [r4, #8]
 800d424:	bb39      	cbnz	r1, 800d476 <_puts_r+0x9e>
 800d426:	2b00      	cmp	r3, #0
 800d428:	da38      	bge.n	800d49c <_puts_r+0xc4>
 800d42a:	4622      	mov	r2, r4
 800d42c:	210a      	movs	r1, #10
 800d42e:	4628      	mov	r0, r5
 800d430:	f000 f85c 	bl	800d4ec <__swbuf_r>
 800d434:	3001      	adds	r0, #1
 800d436:	d011      	beq.n	800d45c <_puts_r+0x84>
 800d438:	250a      	movs	r5, #10
 800d43a:	e011      	b.n	800d460 <_puts_r+0x88>
 800d43c:	4b1b      	ldr	r3, [pc, #108]	; (800d4ac <_puts_r+0xd4>)
 800d43e:	429c      	cmp	r4, r3
 800d440:	d101      	bne.n	800d446 <_puts_r+0x6e>
 800d442:	68ac      	ldr	r4, [r5, #8]
 800d444:	e7da      	b.n	800d3fc <_puts_r+0x24>
 800d446:	4b1a      	ldr	r3, [pc, #104]	; (800d4b0 <_puts_r+0xd8>)
 800d448:	429c      	cmp	r4, r3
 800d44a:	bf08      	it	eq
 800d44c:	68ec      	ldreq	r4, [r5, #12]
 800d44e:	e7d5      	b.n	800d3fc <_puts_r+0x24>
 800d450:	4621      	mov	r1, r4
 800d452:	4628      	mov	r0, r5
 800d454:	f000 f89c 	bl	800d590 <__swsetup_r>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d0dd      	beq.n	800d418 <_puts_r+0x40>
 800d45c:	f04f 35ff 	mov.w	r5, #4294967295
 800d460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d462:	07da      	lsls	r2, r3, #31
 800d464:	d405      	bmi.n	800d472 <_puts_r+0x9a>
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	059b      	lsls	r3, r3, #22
 800d46a:	d402      	bmi.n	800d472 <_puts_r+0x9a>
 800d46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d46e:	f000 fab6 	bl	800d9de <__retarget_lock_release_recursive>
 800d472:	4628      	mov	r0, r5
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	2b00      	cmp	r3, #0
 800d478:	da04      	bge.n	800d484 <_puts_r+0xac>
 800d47a:	69a2      	ldr	r2, [r4, #24]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	dc06      	bgt.n	800d48e <_puts_r+0xb6>
 800d480:	290a      	cmp	r1, #10
 800d482:	d004      	beq.n	800d48e <_puts_r+0xb6>
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	1c5a      	adds	r2, r3, #1
 800d488:	6022      	str	r2, [r4, #0]
 800d48a:	7019      	strb	r1, [r3, #0]
 800d48c:	e7c5      	b.n	800d41a <_puts_r+0x42>
 800d48e:	4622      	mov	r2, r4
 800d490:	4628      	mov	r0, r5
 800d492:	f000 f82b 	bl	800d4ec <__swbuf_r>
 800d496:	3001      	adds	r0, #1
 800d498:	d1bf      	bne.n	800d41a <_puts_r+0x42>
 800d49a:	e7df      	b.n	800d45c <_puts_r+0x84>
 800d49c:	6823      	ldr	r3, [r4, #0]
 800d49e:	250a      	movs	r5, #10
 800d4a0:	1c5a      	adds	r2, r3, #1
 800d4a2:	6022      	str	r2, [r4, #0]
 800d4a4:	701d      	strb	r5, [r3, #0]
 800d4a6:	e7db      	b.n	800d460 <_puts_r+0x88>
 800d4a8:	080105c0 	.word	0x080105c0
 800d4ac:	080105e0 	.word	0x080105e0
 800d4b0:	080105a0 	.word	0x080105a0

0800d4b4 <puts>:
 800d4b4:	4b02      	ldr	r3, [pc, #8]	; (800d4c0 <puts+0xc>)
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	6818      	ldr	r0, [r3, #0]
 800d4ba:	f7ff bf8d 	b.w	800d3d8 <_puts_r>
 800d4be:	bf00      	nop
 800d4c0:	20000040 	.word	0x20000040

0800d4c4 <strrchr>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	460c      	mov	r4, r1
 800d4ca:	b969      	cbnz	r1, 800d4e8 <strrchr+0x24>
 800d4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4d0:	f000 bed5 	b.w	800e27e <strchr>
 800d4d4:	1c43      	adds	r3, r0, #1
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	4621      	mov	r1, r4
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 fecf 	bl	800e27e <strchr>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d1f7      	bne.n	800d4d4 <strrchr+0x10>
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	2500      	movs	r5, #0
 800d4ea:	e7f5      	b.n	800d4d8 <strrchr+0x14>

0800d4ec <__swbuf_r>:
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	460e      	mov	r6, r1
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	b118      	cbz	r0, 800d4fe <__swbuf_r+0x12>
 800d4f6:	6983      	ldr	r3, [r0, #24]
 800d4f8:	b90b      	cbnz	r3, 800d4fe <__swbuf_r+0x12>
 800d4fa:	f000 f9d1 	bl	800d8a0 <__sinit>
 800d4fe:	4b21      	ldr	r3, [pc, #132]	; (800d584 <__swbuf_r+0x98>)
 800d500:	429c      	cmp	r4, r3
 800d502:	d12b      	bne.n	800d55c <__swbuf_r+0x70>
 800d504:	686c      	ldr	r4, [r5, #4]
 800d506:	69a3      	ldr	r3, [r4, #24]
 800d508:	60a3      	str	r3, [r4, #8]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	071a      	lsls	r2, r3, #28
 800d50e:	d52f      	bpl.n	800d570 <__swbuf_r+0x84>
 800d510:	6923      	ldr	r3, [r4, #16]
 800d512:	b36b      	cbz	r3, 800d570 <__swbuf_r+0x84>
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	1ac0      	subs	r0, r0, r3
 800d51a:	6963      	ldr	r3, [r4, #20]
 800d51c:	b2f6      	uxtb	r6, r6
 800d51e:	4283      	cmp	r3, r0
 800d520:	4637      	mov	r7, r6
 800d522:	dc04      	bgt.n	800d52e <__swbuf_r+0x42>
 800d524:	4621      	mov	r1, r4
 800d526:	4628      	mov	r0, r5
 800d528:	f000 f926 	bl	800d778 <_fflush_r>
 800d52c:	bb30      	cbnz	r0, 800d57c <__swbuf_r+0x90>
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	3b01      	subs	r3, #1
 800d532:	60a3      	str	r3, [r4, #8]
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	6022      	str	r2, [r4, #0]
 800d53a:	701e      	strb	r6, [r3, #0]
 800d53c:	6963      	ldr	r3, [r4, #20]
 800d53e:	3001      	adds	r0, #1
 800d540:	4283      	cmp	r3, r0
 800d542:	d004      	beq.n	800d54e <__swbuf_r+0x62>
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	07db      	lsls	r3, r3, #31
 800d548:	d506      	bpl.n	800d558 <__swbuf_r+0x6c>
 800d54a:	2e0a      	cmp	r6, #10
 800d54c:	d104      	bne.n	800d558 <__swbuf_r+0x6c>
 800d54e:	4621      	mov	r1, r4
 800d550:	4628      	mov	r0, r5
 800d552:	f000 f911 	bl	800d778 <_fflush_r>
 800d556:	b988      	cbnz	r0, 800d57c <__swbuf_r+0x90>
 800d558:	4638      	mov	r0, r7
 800d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <__swbuf_r+0x9c>)
 800d55e:	429c      	cmp	r4, r3
 800d560:	d101      	bne.n	800d566 <__swbuf_r+0x7a>
 800d562:	68ac      	ldr	r4, [r5, #8]
 800d564:	e7cf      	b.n	800d506 <__swbuf_r+0x1a>
 800d566:	4b09      	ldr	r3, [pc, #36]	; (800d58c <__swbuf_r+0xa0>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	bf08      	it	eq
 800d56c:	68ec      	ldreq	r4, [r5, #12]
 800d56e:	e7ca      	b.n	800d506 <__swbuf_r+0x1a>
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	f000 f80c 	bl	800d590 <__swsetup_r>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d0cb      	beq.n	800d514 <__swbuf_r+0x28>
 800d57c:	f04f 37ff 	mov.w	r7, #4294967295
 800d580:	e7ea      	b.n	800d558 <__swbuf_r+0x6c>
 800d582:	bf00      	nop
 800d584:	080105c0 	.word	0x080105c0
 800d588:	080105e0 	.word	0x080105e0
 800d58c:	080105a0 	.word	0x080105a0

0800d590 <__swsetup_r>:
 800d590:	4b32      	ldr	r3, [pc, #200]	; (800d65c <__swsetup_r+0xcc>)
 800d592:	b570      	push	{r4, r5, r6, lr}
 800d594:	681d      	ldr	r5, [r3, #0]
 800d596:	4606      	mov	r6, r0
 800d598:	460c      	mov	r4, r1
 800d59a:	b125      	cbz	r5, 800d5a6 <__swsetup_r+0x16>
 800d59c:	69ab      	ldr	r3, [r5, #24]
 800d59e:	b913      	cbnz	r3, 800d5a6 <__swsetup_r+0x16>
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f000 f97d 	bl	800d8a0 <__sinit>
 800d5a6:	4b2e      	ldr	r3, [pc, #184]	; (800d660 <__swsetup_r+0xd0>)
 800d5a8:	429c      	cmp	r4, r3
 800d5aa:	d10f      	bne.n	800d5cc <__swsetup_r+0x3c>
 800d5ac:	686c      	ldr	r4, [r5, #4]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5b4:	0719      	lsls	r1, r3, #28
 800d5b6:	d42c      	bmi.n	800d612 <__swsetup_r+0x82>
 800d5b8:	06dd      	lsls	r5, r3, #27
 800d5ba:	d411      	bmi.n	800d5e0 <__swsetup_r+0x50>
 800d5bc:	2309      	movs	r3, #9
 800d5be:	6033      	str	r3, [r6, #0]
 800d5c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5c4:	81a3      	strh	r3, [r4, #12]
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ca:	e03e      	b.n	800d64a <__swsetup_r+0xba>
 800d5cc:	4b25      	ldr	r3, [pc, #148]	; (800d664 <__swsetup_r+0xd4>)
 800d5ce:	429c      	cmp	r4, r3
 800d5d0:	d101      	bne.n	800d5d6 <__swsetup_r+0x46>
 800d5d2:	68ac      	ldr	r4, [r5, #8]
 800d5d4:	e7eb      	b.n	800d5ae <__swsetup_r+0x1e>
 800d5d6:	4b24      	ldr	r3, [pc, #144]	; (800d668 <__swsetup_r+0xd8>)
 800d5d8:	429c      	cmp	r4, r3
 800d5da:	bf08      	it	eq
 800d5dc:	68ec      	ldreq	r4, [r5, #12]
 800d5de:	e7e6      	b.n	800d5ae <__swsetup_r+0x1e>
 800d5e0:	0758      	lsls	r0, r3, #29
 800d5e2:	d512      	bpl.n	800d60a <__swsetup_r+0x7a>
 800d5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e6:	b141      	cbz	r1, 800d5fa <__swsetup_r+0x6a>
 800d5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	d002      	beq.n	800d5f6 <__swsetup_r+0x66>
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f000 fa59 	bl	800daa8 <_free_r>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	2300      	movs	r3, #0
 800d604:	6063      	str	r3, [r4, #4]
 800d606:	6923      	ldr	r3, [r4, #16]
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	89a3      	ldrh	r3, [r4, #12]
 800d60c:	f043 0308 	orr.w	r3, r3, #8
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	b94b      	cbnz	r3, 800d62a <__swsetup_r+0x9a>
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d620:	d003      	beq.n	800d62a <__swsetup_r+0x9a>
 800d622:	4621      	mov	r1, r4
 800d624:	4630      	mov	r0, r6
 800d626:	f000 f9ff 	bl	800da28 <__smakebuf_r>
 800d62a:	89a0      	ldrh	r0, [r4, #12]
 800d62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d630:	f010 0301 	ands.w	r3, r0, #1
 800d634:	d00a      	beq.n	800d64c <__swsetup_r+0xbc>
 800d636:	2300      	movs	r3, #0
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	6963      	ldr	r3, [r4, #20]
 800d63c:	425b      	negs	r3, r3
 800d63e:	61a3      	str	r3, [r4, #24]
 800d640:	6923      	ldr	r3, [r4, #16]
 800d642:	b943      	cbnz	r3, 800d656 <__swsetup_r+0xc6>
 800d644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d648:	d1ba      	bne.n	800d5c0 <__swsetup_r+0x30>
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	0781      	lsls	r1, r0, #30
 800d64e:	bf58      	it	pl
 800d650:	6963      	ldrpl	r3, [r4, #20]
 800d652:	60a3      	str	r3, [r4, #8]
 800d654:	e7f4      	b.n	800d640 <__swsetup_r+0xb0>
 800d656:	2000      	movs	r0, #0
 800d658:	e7f7      	b.n	800d64a <__swsetup_r+0xba>
 800d65a:	bf00      	nop
 800d65c:	20000040 	.word	0x20000040
 800d660:	080105c0 	.word	0x080105c0
 800d664:	080105e0 	.word	0x080105e0
 800d668:	080105a0 	.word	0x080105a0

0800d66c <__sflush_r>:
 800d66c:	898a      	ldrh	r2, [r1, #12]
 800d66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d672:	4605      	mov	r5, r0
 800d674:	0710      	lsls	r0, r2, #28
 800d676:	460c      	mov	r4, r1
 800d678:	d458      	bmi.n	800d72c <__sflush_r+0xc0>
 800d67a:	684b      	ldr	r3, [r1, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	dc05      	bgt.n	800d68c <__sflush_r+0x20>
 800d680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d682:	2b00      	cmp	r3, #0
 800d684:	dc02      	bgt.n	800d68c <__sflush_r+0x20>
 800d686:	2000      	movs	r0, #0
 800d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d68e:	2e00      	cmp	r6, #0
 800d690:	d0f9      	beq.n	800d686 <__sflush_r+0x1a>
 800d692:	2300      	movs	r3, #0
 800d694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d698:	682f      	ldr	r7, [r5, #0]
 800d69a:	602b      	str	r3, [r5, #0]
 800d69c:	d032      	beq.n	800d704 <__sflush_r+0x98>
 800d69e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	075a      	lsls	r2, r3, #29
 800d6a4:	d505      	bpl.n	800d6b2 <__sflush_r+0x46>
 800d6a6:	6863      	ldr	r3, [r4, #4]
 800d6a8:	1ac0      	subs	r0, r0, r3
 800d6aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6ac:	b10b      	cbz	r3, 800d6b2 <__sflush_r+0x46>
 800d6ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6b0:	1ac0      	subs	r0, r0, r3
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b8:	6a21      	ldr	r1, [r4, #32]
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	47b0      	blx	r6
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	d106      	bne.n	800d6d2 <__sflush_r+0x66>
 800d6c4:	6829      	ldr	r1, [r5, #0]
 800d6c6:	291d      	cmp	r1, #29
 800d6c8:	d82c      	bhi.n	800d724 <__sflush_r+0xb8>
 800d6ca:	4a2a      	ldr	r2, [pc, #168]	; (800d774 <__sflush_r+0x108>)
 800d6cc:	40ca      	lsrs	r2, r1
 800d6ce:	07d6      	lsls	r6, r2, #31
 800d6d0:	d528      	bpl.n	800d724 <__sflush_r+0xb8>
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	6062      	str	r2, [r4, #4]
 800d6d6:	04d9      	lsls	r1, r3, #19
 800d6d8:	6922      	ldr	r2, [r4, #16]
 800d6da:	6022      	str	r2, [r4, #0]
 800d6dc:	d504      	bpl.n	800d6e8 <__sflush_r+0x7c>
 800d6de:	1c42      	adds	r2, r0, #1
 800d6e0:	d101      	bne.n	800d6e6 <__sflush_r+0x7a>
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	b903      	cbnz	r3, 800d6e8 <__sflush_r+0x7c>
 800d6e6:	6560      	str	r0, [r4, #84]	; 0x54
 800d6e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ea:	602f      	str	r7, [r5, #0]
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	d0ca      	beq.n	800d686 <__sflush_r+0x1a>
 800d6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f4:	4299      	cmp	r1, r3
 800d6f6:	d002      	beq.n	800d6fe <__sflush_r+0x92>
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f000 f9d5 	bl	800daa8 <_free_r>
 800d6fe:	2000      	movs	r0, #0
 800d700:	6360      	str	r0, [r4, #52]	; 0x34
 800d702:	e7c1      	b.n	800d688 <__sflush_r+0x1c>
 800d704:	6a21      	ldr	r1, [r4, #32]
 800d706:	2301      	movs	r3, #1
 800d708:	4628      	mov	r0, r5
 800d70a:	47b0      	blx	r6
 800d70c:	1c41      	adds	r1, r0, #1
 800d70e:	d1c7      	bne.n	800d6a0 <__sflush_r+0x34>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0c4      	beq.n	800d6a0 <__sflush_r+0x34>
 800d716:	2b1d      	cmp	r3, #29
 800d718:	d001      	beq.n	800d71e <__sflush_r+0xb2>
 800d71a:	2b16      	cmp	r3, #22
 800d71c:	d101      	bne.n	800d722 <__sflush_r+0xb6>
 800d71e:	602f      	str	r7, [r5, #0]
 800d720:	e7b1      	b.n	800d686 <__sflush_r+0x1a>
 800d722:	89a3      	ldrh	r3, [r4, #12]
 800d724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d728:	81a3      	strh	r3, [r4, #12]
 800d72a:	e7ad      	b.n	800d688 <__sflush_r+0x1c>
 800d72c:	690f      	ldr	r7, [r1, #16]
 800d72e:	2f00      	cmp	r7, #0
 800d730:	d0a9      	beq.n	800d686 <__sflush_r+0x1a>
 800d732:	0793      	lsls	r3, r2, #30
 800d734:	680e      	ldr	r6, [r1, #0]
 800d736:	bf08      	it	eq
 800d738:	694b      	ldreq	r3, [r1, #20]
 800d73a:	600f      	str	r7, [r1, #0]
 800d73c:	bf18      	it	ne
 800d73e:	2300      	movne	r3, #0
 800d740:	eba6 0807 	sub.w	r8, r6, r7
 800d744:	608b      	str	r3, [r1, #8]
 800d746:	f1b8 0f00 	cmp.w	r8, #0
 800d74a:	dd9c      	ble.n	800d686 <__sflush_r+0x1a>
 800d74c:	6a21      	ldr	r1, [r4, #32]
 800d74e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d750:	4643      	mov	r3, r8
 800d752:	463a      	mov	r2, r7
 800d754:	4628      	mov	r0, r5
 800d756:	47b0      	blx	r6
 800d758:	2800      	cmp	r0, #0
 800d75a:	dc06      	bgt.n	800d76a <__sflush_r+0xfe>
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d762:	81a3      	strh	r3, [r4, #12]
 800d764:	f04f 30ff 	mov.w	r0, #4294967295
 800d768:	e78e      	b.n	800d688 <__sflush_r+0x1c>
 800d76a:	4407      	add	r7, r0
 800d76c:	eba8 0800 	sub.w	r8, r8, r0
 800d770:	e7e9      	b.n	800d746 <__sflush_r+0xda>
 800d772:	bf00      	nop
 800d774:	20400001 	.word	0x20400001

0800d778 <_fflush_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	690b      	ldr	r3, [r1, #16]
 800d77c:	4605      	mov	r5, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	b913      	cbnz	r3, 800d788 <_fflush_r+0x10>
 800d782:	2500      	movs	r5, #0
 800d784:	4628      	mov	r0, r5
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	b118      	cbz	r0, 800d792 <_fflush_r+0x1a>
 800d78a:	6983      	ldr	r3, [r0, #24]
 800d78c:	b90b      	cbnz	r3, 800d792 <_fflush_r+0x1a>
 800d78e:	f000 f887 	bl	800d8a0 <__sinit>
 800d792:	4b14      	ldr	r3, [pc, #80]	; (800d7e4 <_fflush_r+0x6c>)
 800d794:	429c      	cmp	r4, r3
 800d796:	d11b      	bne.n	800d7d0 <_fflush_r+0x58>
 800d798:	686c      	ldr	r4, [r5, #4]
 800d79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d0ef      	beq.n	800d782 <_fflush_r+0xa>
 800d7a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7a4:	07d0      	lsls	r0, r2, #31
 800d7a6:	d404      	bmi.n	800d7b2 <_fflush_r+0x3a>
 800d7a8:	0599      	lsls	r1, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_fflush_r+0x3a>
 800d7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ae:	f000 f915 	bl	800d9dc <__retarget_lock_acquire_recursive>
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	f7ff ff59 	bl	800d66c <__sflush_r>
 800d7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7bc:	07da      	lsls	r2, r3, #31
 800d7be:	4605      	mov	r5, r0
 800d7c0:	d4e0      	bmi.n	800d784 <_fflush_r+0xc>
 800d7c2:	89a3      	ldrh	r3, [r4, #12]
 800d7c4:	059b      	lsls	r3, r3, #22
 800d7c6:	d4dd      	bmi.n	800d784 <_fflush_r+0xc>
 800d7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ca:	f000 f908 	bl	800d9de <__retarget_lock_release_recursive>
 800d7ce:	e7d9      	b.n	800d784 <_fflush_r+0xc>
 800d7d0:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <_fflush_r+0x70>)
 800d7d2:	429c      	cmp	r4, r3
 800d7d4:	d101      	bne.n	800d7da <_fflush_r+0x62>
 800d7d6:	68ac      	ldr	r4, [r5, #8]
 800d7d8:	e7df      	b.n	800d79a <_fflush_r+0x22>
 800d7da:	4b04      	ldr	r3, [pc, #16]	; (800d7ec <_fflush_r+0x74>)
 800d7dc:	429c      	cmp	r4, r3
 800d7de:	bf08      	it	eq
 800d7e0:	68ec      	ldreq	r4, [r5, #12]
 800d7e2:	e7da      	b.n	800d79a <_fflush_r+0x22>
 800d7e4:	080105c0 	.word	0x080105c0
 800d7e8:	080105e0 	.word	0x080105e0
 800d7ec:	080105a0 	.word	0x080105a0

0800d7f0 <std>:
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	b510      	push	{r4, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	e9c0 3300 	strd	r3, r3, [r0]
 800d7fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7fe:	6083      	str	r3, [r0, #8]
 800d800:	8181      	strh	r1, [r0, #12]
 800d802:	6643      	str	r3, [r0, #100]	; 0x64
 800d804:	81c2      	strh	r2, [r0, #14]
 800d806:	6183      	str	r3, [r0, #24]
 800d808:	4619      	mov	r1, r3
 800d80a:	2208      	movs	r2, #8
 800d80c:	305c      	adds	r0, #92	; 0x5c
 800d80e:	f7ff fdc3 	bl	800d398 <memset>
 800d812:	4b05      	ldr	r3, [pc, #20]	; (800d828 <std+0x38>)
 800d814:	6263      	str	r3, [r4, #36]	; 0x24
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <std+0x3c>)
 800d818:	62a3      	str	r3, [r4, #40]	; 0x28
 800d81a:	4b05      	ldr	r3, [pc, #20]	; (800d830 <std+0x40>)
 800d81c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d81e:	4b05      	ldr	r3, [pc, #20]	; (800d834 <std+0x44>)
 800d820:	6224      	str	r4, [r4, #32]
 800d822:	6323      	str	r3, [r4, #48]	; 0x30
 800d824:	bd10      	pop	{r4, pc}
 800d826:	bf00      	nop
 800d828:	0800e1f9 	.word	0x0800e1f9
 800d82c:	0800e21b 	.word	0x0800e21b
 800d830:	0800e253 	.word	0x0800e253
 800d834:	0800e277 	.word	0x0800e277

0800d838 <_cleanup_r>:
 800d838:	4901      	ldr	r1, [pc, #4]	; (800d840 <_cleanup_r+0x8>)
 800d83a:	f000 b8af 	b.w	800d99c <_fwalk_reent>
 800d83e:	bf00      	nop
 800d840:	0800d779 	.word	0x0800d779

0800d844 <__sfmoreglue>:
 800d844:	b570      	push	{r4, r5, r6, lr}
 800d846:	1e4a      	subs	r2, r1, #1
 800d848:	2568      	movs	r5, #104	; 0x68
 800d84a:	4355      	muls	r5, r2
 800d84c:	460e      	mov	r6, r1
 800d84e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d852:	f000 f979 	bl	800db48 <_malloc_r>
 800d856:	4604      	mov	r4, r0
 800d858:	b140      	cbz	r0, 800d86c <__sfmoreglue+0x28>
 800d85a:	2100      	movs	r1, #0
 800d85c:	e9c0 1600 	strd	r1, r6, [r0]
 800d860:	300c      	adds	r0, #12
 800d862:	60a0      	str	r0, [r4, #8]
 800d864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d868:	f7ff fd96 	bl	800d398 <memset>
 800d86c:	4620      	mov	r0, r4
 800d86e:	bd70      	pop	{r4, r5, r6, pc}

0800d870 <__sfp_lock_acquire>:
 800d870:	4801      	ldr	r0, [pc, #4]	; (800d878 <__sfp_lock_acquire+0x8>)
 800d872:	f000 b8b3 	b.w	800d9dc <__retarget_lock_acquire_recursive>
 800d876:	bf00      	nop
 800d878:	20000710 	.word	0x20000710

0800d87c <__sfp_lock_release>:
 800d87c:	4801      	ldr	r0, [pc, #4]	; (800d884 <__sfp_lock_release+0x8>)
 800d87e:	f000 b8ae 	b.w	800d9de <__retarget_lock_release_recursive>
 800d882:	bf00      	nop
 800d884:	20000710 	.word	0x20000710

0800d888 <__sinit_lock_acquire>:
 800d888:	4801      	ldr	r0, [pc, #4]	; (800d890 <__sinit_lock_acquire+0x8>)
 800d88a:	f000 b8a7 	b.w	800d9dc <__retarget_lock_acquire_recursive>
 800d88e:	bf00      	nop
 800d890:	2000070b 	.word	0x2000070b

0800d894 <__sinit_lock_release>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__sinit_lock_release+0x8>)
 800d896:	f000 b8a2 	b.w	800d9de <__retarget_lock_release_recursive>
 800d89a:	bf00      	nop
 800d89c:	2000070b 	.word	0x2000070b

0800d8a0 <__sinit>:
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	f7ff fff0 	bl	800d888 <__sinit_lock_acquire>
 800d8a8:	69a3      	ldr	r3, [r4, #24]
 800d8aa:	b11b      	cbz	r3, 800d8b4 <__sinit+0x14>
 800d8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8b0:	f7ff bff0 	b.w	800d894 <__sinit_lock_release>
 800d8b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d8b8:	6523      	str	r3, [r4, #80]	; 0x50
 800d8ba:	4b13      	ldr	r3, [pc, #76]	; (800d908 <__sinit+0x68>)
 800d8bc:	4a13      	ldr	r2, [pc, #76]	; (800d90c <__sinit+0x6c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d8c2:	42a3      	cmp	r3, r4
 800d8c4:	bf04      	itt	eq
 800d8c6:	2301      	moveq	r3, #1
 800d8c8:	61a3      	streq	r3, [r4, #24]
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 f820 	bl	800d910 <__sfp>
 800d8d0:	6060      	str	r0, [r4, #4]
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 f81c 	bl	800d910 <__sfp>
 800d8d8:	60a0      	str	r0, [r4, #8]
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 f818 	bl	800d910 <__sfp>
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	60e0      	str	r0, [r4, #12]
 800d8e4:	2104      	movs	r1, #4
 800d8e6:	6860      	ldr	r0, [r4, #4]
 800d8e8:	f7ff ff82 	bl	800d7f0 <std>
 800d8ec:	68a0      	ldr	r0, [r4, #8]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	2109      	movs	r1, #9
 800d8f2:	f7ff ff7d 	bl	800d7f0 <std>
 800d8f6:	68e0      	ldr	r0, [r4, #12]
 800d8f8:	2202      	movs	r2, #2
 800d8fa:	2112      	movs	r1, #18
 800d8fc:	f7ff ff78 	bl	800d7f0 <std>
 800d900:	2301      	movs	r3, #1
 800d902:	61a3      	str	r3, [r4, #24]
 800d904:	e7d2      	b.n	800d8ac <__sinit+0xc>
 800d906:	bf00      	nop
 800d908:	0801059c 	.word	0x0801059c
 800d90c:	0800d839 	.word	0x0800d839

0800d910 <__sfp>:
 800d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d912:	4607      	mov	r7, r0
 800d914:	f7ff ffac 	bl	800d870 <__sfp_lock_acquire>
 800d918:	4b1e      	ldr	r3, [pc, #120]	; (800d994 <__sfp+0x84>)
 800d91a:	681e      	ldr	r6, [r3, #0]
 800d91c:	69b3      	ldr	r3, [r6, #24]
 800d91e:	b913      	cbnz	r3, 800d926 <__sfp+0x16>
 800d920:	4630      	mov	r0, r6
 800d922:	f7ff ffbd 	bl	800d8a0 <__sinit>
 800d926:	3648      	adds	r6, #72	; 0x48
 800d928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	d503      	bpl.n	800d938 <__sfp+0x28>
 800d930:	6833      	ldr	r3, [r6, #0]
 800d932:	b30b      	cbz	r3, 800d978 <__sfp+0x68>
 800d934:	6836      	ldr	r6, [r6, #0]
 800d936:	e7f7      	b.n	800d928 <__sfp+0x18>
 800d938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d93c:	b9d5      	cbnz	r5, 800d974 <__sfp+0x64>
 800d93e:	4b16      	ldr	r3, [pc, #88]	; (800d998 <__sfp+0x88>)
 800d940:	60e3      	str	r3, [r4, #12]
 800d942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d946:	6665      	str	r5, [r4, #100]	; 0x64
 800d948:	f000 f847 	bl	800d9da <__retarget_lock_init_recursive>
 800d94c:	f7ff ff96 	bl	800d87c <__sfp_lock_release>
 800d950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d958:	6025      	str	r5, [r4, #0]
 800d95a:	61a5      	str	r5, [r4, #24]
 800d95c:	2208      	movs	r2, #8
 800d95e:	4629      	mov	r1, r5
 800d960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d964:	f7ff fd18 	bl	800d398 <memset>
 800d968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d96c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d970:	4620      	mov	r0, r4
 800d972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d974:	3468      	adds	r4, #104	; 0x68
 800d976:	e7d9      	b.n	800d92c <__sfp+0x1c>
 800d978:	2104      	movs	r1, #4
 800d97a:	4638      	mov	r0, r7
 800d97c:	f7ff ff62 	bl	800d844 <__sfmoreglue>
 800d980:	4604      	mov	r4, r0
 800d982:	6030      	str	r0, [r6, #0]
 800d984:	2800      	cmp	r0, #0
 800d986:	d1d5      	bne.n	800d934 <__sfp+0x24>
 800d988:	f7ff ff78 	bl	800d87c <__sfp_lock_release>
 800d98c:	230c      	movs	r3, #12
 800d98e:	603b      	str	r3, [r7, #0]
 800d990:	e7ee      	b.n	800d970 <__sfp+0x60>
 800d992:	bf00      	nop
 800d994:	0801059c 	.word	0x0801059c
 800d998:	ffff0001 	.word	0xffff0001

0800d99c <_fwalk_reent>:
 800d99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a0:	4606      	mov	r6, r0
 800d9a2:	4688      	mov	r8, r1
 800d9a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9a8:	2700      	movs	r7, #0
 800d9aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9ae:	f1b9 0901 	subs.w	r9, r9, #1
 800d9b2:	d505      	bpl.n	800d9c0 <_fwalk_reent+0x24>
 800d9b4:	6824      	ldr	r4, [r4, #0]
 800d9b6:	2c00      	cmp	r4, #0
 800d9b8:	d1f7      	bne.n	800d9aa <_fwalk_reent+0xe>
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9c0:	89ab      	ldrh	r3, [r5, #12]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d907      	bls.n	800d9d6 <_fwalk_reent+0x3a>
 800d9c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	d003      	beq.n	800d9d6 <_fwalk_reent+0x3a>
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	47c0      	blx	r8
 800d9d4:	4307      	orrs	r7, r0
 800d9d6:	3568      	adds	r5, #104	; 0x68
 800d9d8:	e7e9      	b.n	800d9ae <_fwalk_reent+0x12>

0800d9da <__retarget_lock_init_recursive>:
 800d9da:	4770      	bx	lr

0800d9dc <__retarget_lock_acquire_recursive>:
 800d9dc:	4770      	bx	lr

0800d9de <__retarget_lock_release_recursive>:
 800d9de:	4770      	bx	lr

0800d9e0 <__swhatbuf_r>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	460e      	mov	r6, r1
 800d9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e8:	2900      	cmp	r1, #0
 800d9ea:	b096      	sub	sp, #88	; 0x58
 800d9ec:	4614      	mov	r4, r2
 800d9ee:	461d      	mov	r5, r3
 800d9f0:	da07      	bge.n	800da02 <__swhatbuf_r+0x22>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	602b      	str	r3, [r5, #0]
 800d9f6:	89b3      	ldrh	r3, [r6, #12]
 800d9f8:	061a      	lsls	r2, r3, #24
 800d9fa:	d410      	bmi.n	800da1e <__swhatbuf_r+0x3e>
 800d9fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da00:	e00e      	b.n	800da20 <__swhatbuf_r+0x40>
 800da02:	466a      	mov	r2, sp
 800da04:	f000 fc6a 	bl	800e2dc <_fstat_r>
 800da08:	2800      	cmp	r0, #0
 800da0a:	dbf2      	blt.n	800d9f2 <__swhatbuf_r+0x12>
 800da0c:	9a01      	ldr	r2, [sp, #4]
 800da0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da16:	425a      	negs	r2, r3
 800da18:	415a      	adcs	r2, r3
 800da1a:	602a      	str	r2, [r5, #0]
 800da1c:	e7ee      	b.n	800d9fc <__swhatbuf_r+0x1c>
 800da1e:	2340      	movs	r3, #64	; 0x40
 800da20:	2000      	movs	r0, #0
 800da22:	6023      	str	r3, [r4, #0]
 800da24:	b016      	add	sp, #88	; 0x58
 800da26:	bd70      	pop	{r4, r5, r6, pc}

0800da28 <__smakebuf_r>:
 800da28:	898b      	ldrh	r3, [r1, #12]
 800da2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da2c:	079d      	lsls	r5, r3, #30
 800da2e:	4606      	mov	r6, r0
 800da30:	460c      	mov	r4, r1
 800da32:	d507      	bpl.n	800da44 <__smakebuf_r+0x1c>
 800da34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da38:	6023      	str	r3, [r4, #0]
 800da3a:	6123      	str	r3, [r4, #16]
 800da3c:	2301      	movs	r3, #1
 800da3e:	6163      	str	r3, [r4, #20]
 800da40:	b002      	add	sp, #8
 800da42:	bd70      	pop	{r4, r5, r6, pc}
 800da44:	ab01      	add	r3, sp, #4
 800da46:	466a      	mov	r2, sp
 800da48:	f7ff ffca 	bl	800d9e0 <__swhatbuf_r>
 800da4c:	9900      	ldr	r1, [sp, #0]
 800da4e:	4605      	mov	r5, r0
 800da50:	4630      	mov	r0, r6
 800da52:	f000 f879 	bl	800db48 <_malloc_r>
 800da56:	b948      	cbnz	r0, 800da6c <__smakebuf_r+0x44>
 800da58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da5c:	059a      	lsls	r2, r3, #22
 800da5e:	d4ef      	bmi.n	800da40 <__smakebuf_r+0x18>
 800da60:	f023 0303 	bic.w	r3, r3, #3
 800da64:	f043 0302 	orr.w	r3, r3, #2
 800da68:	81a3      	strh	r3, [r4, #12]
 800da6a:	e7e3      	b.n	800da34 <__smakebuf_r+0xc>
 800da6c:	4b0d      	ldr	r3, [pc, #52]	; (800daa4 <__smakebuf_r+0x7c>)
 800da6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	6020      	str	r0, [r4, #0]
 800da74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	9b00      	ldr	r3, [sp, #0]
 800da7c:	6163      	str	r3, [r4, #20]
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	6120      	str	r0, [r4, #16]
 800da82:	b15b      	cbz	r3, 800da9c <__smakebuf_r+0x74>
 800da84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da88:	4630      	mov	r0, r6
 800da8a:	f000 fc39 	bl	800e300 <_isatty_r>
 800da8e:	b128      	cbz	r0, 800da9c <__smakebuf_r+0x74>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	f023 0303 	bic.w	r3, r3, #3
 800da96:	f043 0301 	orr.w	r3, r3, #1
 800da9a:	81a3      	strh	r3, [r4, #12]
 800da9c:	89a0      	ldrh	r0, [r4, #12]
 800da9e:	4305      	orrs	r5, r0
 800daa0:	81a5      	strh	r5, [r4, #12]
 800daa2:	e7cd      	b.n	800da40 <__smakebuf_r+0x18>
 800daa4:	0800d839 	.word	0x0800d839

0800daa8 <_free_r>:
 800daa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daaa:	2900      	cmp	r1, #0
 800daac:	d048      	beq.n	800db40 <_free_r+0x98>
 800daae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab2:	9001      	str	r0, [sp, #4]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f1a1 0404 	sub.w	r4, r1, #4
 800daba:	bfb8      	it	lt
 800dabc:	18e4      	addlt	r4, r4, r3
 800dabe:	f000 fc41 	bl	800e344 <__malloc_lock>
 800dac2:	4a20      	ldr	r2, [pc, #128]	; (800db44 <_free_r+0x9c>)
 800dac4:	9801      	ldr	r0, [sp, #4]
 800dac6:	6813      	ldr	r3, [r2, #0]
 800dac8:	4615      	mov	r5, r2
 800daca:	b933      	cbnz	r3, 800dada <_free_r+0x32>
 800dacc:	6063      	str	r3, [r4, #4]
 800dace:	6014      	str	r4, [r2, #0]
 800dad0:	b003      	add	sp, #12
 800dad2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dad6:	f000 bc3b 	b.w	800e350 <__malloc_unlock>
 800dada:	42a3      	cmp	r3, r4
 800dadc:	d90b      	bls.n	800daf6 <_free_r+0x4e>
 800dade:	6821      	ldr	r1, [r4, #0]
 800dae0:	1862      	adds	r2, r4, r1
 800dae2:	4293      	cmp	r3, r2
 800dae4:	bf04      	itt	eq
 800dae6:	681a      	ldreq	r2, [r3, #0]
 800dae8:	685b      	ldreq	r3, [r3, #4]
 800daea:	6063      	str	r3, [r4, #4]
 800daec:	bf04      	itt	eq
 800daee:	1852      	addeq	r2, r2, r1
 800daf0:	6022      	streq	r2, [r4, #0]
 800daf2:	602c      	str	r4, [r5, #0]
 800daf4:	e7ec      	b.n	800dad0 <_free_r+0x28>
 800daf6:	461a      	mov	r2, r3
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	b10b      	cbz	r3, 800db00 <_free_r+0x58>
 800dafc:	42a3      	cmp	r3, r4
 800dafe:	d9fa      	bls.n	800daf6 <_free_r+0x4e>
 800db00:	6811      	ldr	r1, [r2, #0]
 800db02:	1855      	adds	r5, r2, r1
 800db04:	42a5      	cmp	r5, r4
 800db06:	d10b      	bne.n	800db20 <_free_r+0x78>
 800db08:	6824      	ldr	r4, [r4, #0]
 800db0a:	4421      	add	r1, r4
 800db0c:	1854      	adds	r4, r2, r1
 800db0e:	42a3      	cmp	r3, r4
 800db10:	6011      	str	r1, [r2, #0]
 800db12:	d1dd      	bne.n	800dad0 <_free_r+0x28>
 800db14:	681c      	ldr	r4, [r3, #0]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	6053      	str	r3, [r2, #4]
 800db1a:	4421      	add	r1, r4
 800db1c:	6011      	str	r1, [r2, #0]
 800db1e:	e7d7      	b.n	800dad0 <_free_r+0x28>
 800db20:	d902      	bls.n	800db28 <_free_r+0x80>
 800db22:	230c      	movs	r3, #12
 800db24:	6003      	str	r3, [r0, #0]
 800db26:	e7d3      	b.n	800dad0 <_free_r+0x28>
 800db28:	6825      	ldr	r5, [r4, #0]
 800db2a:	1961      	adds	r1, r4, r5
 800db2c:	428b      	cmp	r3, r1
 800db2e:	bf04      	itt	eq
 800db30:	6819      	ldreq	r1, [r3, #0]
 800db32:	685b      	ldreq	r3, [r3, #4]
 800db34:	6063      	str	r3, [r4, #4]
 800db36:	bf04      	itt	eq
 800db38:	1949      	addeq	r1, r1, r5
 800db3a:	6021      	streq	r1, [r4, #0]
 800db3c:	6054      	str	r4, [r2, #4]
 800db3e:	e7c7      	b.n	800dad0 <_free_r+0x28>
 800db40:	b003      	add	sp, #12
 800db42:	bd30      	pop	{r4, r5, pc}
 800db44:	200003a0 	.word	0x200003a0

0800db48 <_malloc_r>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	1ccd      	adds	r5, r1, #3
 800db4c:	f025 0503 	bic.w	r5, r5, #3
 800db50:	3508      	adds	r5, #8
 800db52:	2d0c      	cmp	r5, #12
 800db54:	bf38      	it	cc
 800db56:	250c      	movcc	r5, #12
 800db58:	2d00      	cmp	r5, #0
 800db5a:	4606      	mov	r6, r0
 800db5c:	db01      	blt.n	800db62 <_malloc_r+0x1a>
 800db5e:	42a9      	cmp	r1, r5
 800db60:	d903      	bls.n	800db6a <_malloc_r+0x22>
 800db62:	230c      	movs	r3, #12
 800db64:	6033      	str	r3, [r6, #0]
 800db66:	2000      	movs	r0, #0
 800db68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db6a:	f000 fbeb 	bl	800e344 <__malloc_lock>
 800db6e:	4921      	ldr	r1, [pc, #132]	; (800dbf4 <_malloc_r+0xac>)
 800db70:	680a      	ldr	r2, [r1, #0]
 800db72:	4614      	mov	r4, r2
 800db74:	b99c      	cbnz	r4, 800db9e <_malloc_r+0x56>
 800db76:	4f20      	ldr	r7, [pc, #128]	; (800dbf8 <_malloc_r+0xb0>)
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	b923      	cbnz	r3, 800db86 <_malloc_r+0x3e>
 800db7c:	4621      	mov	r1, r4
 800db7e:	4630      	mov	r0, r6
 800db80:	f000 fb2a 	bl	800e1d8 <_sbrk_r>
 800db84:	6038      	str	r0, [r7, #0]
 800db86:	4629      	mov	r1, r5
 800db88:	4630      	mov	r0, r6
 800db8a:	f000 fb25 	bl	800e1d8 <_sbrk_r>
 800db8e:	1c43      	adds	r3, r0, #1
 800db90:	d123      	bne.n	800dbda <_malloc_r+0x92>
 800db92:	230c      	movs	r3, #12
 800db94:	6033      	str	r3, [r6, #0]
 800db96:	4630      	mov	r0, r6
 800db98:	f000 fbda 	bl	800e350 <__malloc_unlock>
 800db9c:	e7e3      	b.n	800db66 <_malloc_r+0x1e>
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	1b5b      	subs	r3, r3, r5
 800dba2:	d417      	bmi.n	800dbd4 <_malloc_r+0x8c>
 800dba4:	2b0b      	cmp	r3, #11
 800dba6:	d903      	bls.n	800dbb0 <_malloc_r+0x68>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	441c      	add	r4, r3
 800dbac:	6025      	str	r5, [r4, #0]
 800dbae:	e004      	b.n	800dbba <_malloc_r+0x72>
 800dbb0:	6863      	ldr	r3, [r4, #4]
 800dbb2:	42a2      	cmp	r2, r4
 800dbb4:	bf0c      	ite	eq
 800dbb6:	600b      	streq	r3, [r1, #0]
 800dbb8:	6053      	strne	r3, [r2, #4]
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f000 fbc8 	bl	800e350 <__malloc_unlock>
 800dbc0:	f104 000b 	add.w	r0, r4, #11
 800dbc4:	1d23      	adds	r3, r4, #4
 800dbc6:	f020 0007 	bic.w	r0, r0, #7
 800dbca:	1ac2      	subs	r2, r0, r3
 800dbcc:	d0cc      	beq.n	800db68 <_malloc_r+0x20>
 800dbce:	1a1b      	subs	r3, r3, r0
 800dbd0:	50a3      	str	r3, [r4, r2]
 800dbd2:	e7c9      	b.n	800db68 <_malloc_r+0x20>
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	6864      	ldr	r4, [r4, #4]
 800dbd8:	e7cc      	b.n	800db74 <_malloc_r+0x2c>
 800dbda:	1cc4      	adds	r4, r0, #3
 800dbdc:	f024 0403 	bic.w	r4, r4, #3
 800dbe0:	42a0      	cmp	r0, r4
 800dbe2:	d0e3      	beq.n	800dbac <_malloc_r+0x64>
 800dbe4:	1a21      	subs	r1, r4, r0
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	f000 faf6 	bl	800e1d8 <_sbrk_r>
 800dbec:	3001      	adds	r0, #1
 800dbee:	d1dd      	bne.n	800dbac <_malloc_r+0x64>
 800dbf0:	e7cf      	b.n	800db92 <_malloc_r+0x4a>
 800dbf2:	bf00      	nop
 800dbf4:	200003a0 	.word	0x200003a0
 800dbf8:	200003a4 	.word	0x200003a4

0800dbfc <__sfputc_r>:
 800dbfc:	6893      	ldr	r3, [r2, #8]
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	b410      	push	{r4}
 800dc04:	6093      	str	r3, [r2, #8]
 800dc06:	da08      	bge.n	800dc1a <__sfputc_r+0x1e>
 800dc08:	6994      	ldr	r4, [r2, #24]
 800dc0a:	42a3      	cmp	r3, r4
 800dc0c:	db01      	blt.n	800dc12 <__sfputc_r+0x16>
 800dc0e:	290a      	cmp	r1, #10
 800dc10:	d103      	bne.n	800dc1a <__sfputc_r+0x1e>
 800dc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc16:	f7ff bc69 	b.w	800d4ec <__swbuf_r>
 800dc1a:	6813      	ldr	r3, [r2, #0]
 800dc1c:	1c58      	adds	r0, r3, #1
 800dc1e:	6010      	str	r0, [r2, #0]
 800dc20:	7019      	strb	r1, [r3, #0]
 800dc22:	4608      	mov	r0, r1
 800dc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <__sfputs_r>:
 800dc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460f      	mov	r7, r1
 800dc30:	4614      	mov	r4, r2
 800dc32:	18d5      	adds	r5, r2, r3
 800dc34:	42ac      	cmp	r4, r5
 800dc36:	d101      	bne.n	800dc3c <__sfputs_r+0x12>
 800dc38:	2000      	movs	r0, #0
 800dc3a:	e007      	b.n	800dc4c <__sfputs_r+0x22>
 800dc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc40:	463a      	mov	r2, r7
 800dc42:	4630      	mov	r0, r6
 800dc44:	f7ff ffda 	bl	800dbfc <__sfputc_r>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d1f3      	bne.n	800dc34 <__sfputs_r+0xa>
 800dc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc50 <_vfiprintf_r>:
 800dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	460d      	mov	r5, r1
 800dc56:	b09d      	sub	sp, #116	; 0x74
 800dc58:	4614      	mov	r4, r2
 800dc5a:	4698      	mov	r8, r3
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	b118      	cbz	r0, 800dc68 <_vfiprintf_r+0x18>
 800dc60:	6983      	ldr	r3, [r0, #24]
 800dc62:	b90b      	cbnz	r3, 800dc68 <_vfiprintf_r+0x18>
 800dc64:	f7ff fe1c 	bl	800d8a0 <__sinit>
 800dc68:	4b89      	ldr	r3, [pc, #548]	; (800de90 <_vfiprintf_r+0x240>)
 800dc6a:	429d      	cmp	r5, r3
 800dc6c:	d11b      	bne.n	800dca6 <_vfiprintf_r+0x56>
 800dc6e:	6875      	ldr	r5, [r6, #4]
 800dc70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc72:	07d9      	lsls	r1, r3, #31
 800dc74:	d405      	bmi.n	800dc82 <_vfiprintf_r+0x32>
 800dc76:	89ab      	ldrh	r3, [r5, #12]
 800dc78:	059a      	lsls	r2, r3, #22
 800dc7a:	d402      	bmi.n	800dc82 <_vfiprintf_r+0x32>
 800dc7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc7e:	f7ff fead 	bl	800d9dc <__retarget_lock_acquire_recursive>
 800dc82:	89ab      	ldrh	r3, [r5, #12]
 800dc84:	071b      	lsls	r3, r3, #28
 800dc86:	d501      	bpl.n	800dc8c <_vfiprintf_r+0x3c>
 800dc88:	692b      	ldr	r3, [r5, #16]
 800dc8a:	b9eb      	cbnz	r3, 800dcc8 <_vfiprintf_r+0x78>
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f7ff fc7e 	bl	800d590 <__swsetup_r>
 800dc94:	b1c0      	cbz	r0, 800dcc8 <_vfiprintf_r+0x78>
 800dc96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc98:	07dc      	lsls	r4, r3, #31
 800dc9a:	d50e      	bpl.n	800dcba <_vfiprintf_r+0x6a>
 800dc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dca0:	b01d      	add	sp, #116	; 0x74
 800dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca6:	4b7b      	ldr	r3, [pc, #492]	; (800de94 <_vfiprintf_r+0x244>)
 800dca8:	429d      	cmp	r5, r3
 800dcaa:	d101      	bne.n	800dcb0 <_vfiprintf_r+0x60>
 800dcac:	68b5      	ldr	r5, [r6, #8]
 800dcae:	e7df      	b.n	800dc70 <_vfiprintf_r+0x20>
 800dcb0:	4b79      	ldr	r3, [pc, #484]	; (800de98 <_vfiprintf_r+0x248>)
 800dcb2:	429d      	cmp	r5, r3
 800dcb4:	bf08      	it	eq
 800dcb6:	68f5      	ldreq	r5, [r6, #12]
 800dcb8:	e7da      	b.n	800dc70 <_vfiprintf_r+0x20>
 800dcba:	89ab      	ldrh	r3, [r5, #12]
 800dcbc:	0598      	lsls	r0, r3, #22
 800dcbe:	d4ed      	bmi.n	800dc9c <_vfiprintf_r+0x4c>
 800dcc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcc2:	f7ff fe8c 	bl	800d9de <__retarget_lock_release_recursive>
 800dcc6:	e7e9      	b.n	800dc9c <_vfiprintf_r+0x4c>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	9309      	str	r3, [sp, #36]	; 0x24
 800dccc:	2320      	movs	r3, #32
 800dcce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcd6:	2330      	movs	r3, #48	; 0x30
 800dcd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800de9c <_vfiprintf_r+0x24c>
 800dcdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dce0:	f04f 0901 	mov.w	r9, #1
 800dce4:	4623      	mov	r3, r4
 800dce6:	469a      	mov	sl, r3
 800dce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcec:	b10a      	cbz	r2, 800dcf2 <_vfiprintf_r+0xa2>
 800dcee:	2a25      	cmp	r2, #37	; 0x25
 800dcf0:	d1f9      	bne.n	800dce6 <_vfiprintf_r+0x96>
 800dcf2:	ebba 0b04 	subs.w	fp, sl, r4
 800dcf6:	d00b      	beq.n	800dd10 <_vfiprintf_r+0xc0>
 800dcf8:	465b      	mov	r3, fp
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7ff ff93 	bl	800dc2a <__sfputs_r>
 800dd04:	3001      	adds	r0, #1
 800dd06:	f000 80aa 	beq.w	800de5e <_vfiprintf_r+0x20e>
 800dd0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd0c:	445a      	add	r2, fp
 800dd0e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd10:	f89a 3000 	ldrb.w	r3, [sl]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f000 80a2 	beq.w	800de5e <_vfiprintf_r+0x20e>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd24:	f10a 0a01 	add.w	sl, sl, #1
 800dd28:	9304      	str	r3, [sp, #16]
 800dd2a:	9307      	str	r3, [sp, #28]
 800dd2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd30:	931a      	str	r3, [sp, #104]	; 0x68
 800dd32:	4654      	mov	r4, sl
 800dd34:	2205      	movs	r2, #5
 800dd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd3a:	4858      	ldr	r0, [pc, #352]	; (800de9c <_vfiprintf_r+0x24c>)
 800dd3c:	f7f2 fa28 	bl	8000190 <memchr>
 800dd40:	9a04      	ldr	r2, [sp, #16]
 800dd42:	b9d8      	cbnz	r0, 800dd7c <_vfiprintf_r+0x12c>
 800dd44:	06d1      	lsls	r1, r2, #27
 800dd46:	bf44      	itt	mi
 800dd48:	2320      	movmi	r3, #32
 800dd4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd4e:	0713      	lsls	r3, r2, #28
 800dd50:	bf44      	itt	mi
 800dd52:	232b      	movmi	r3, #43	; 0x2b
 800dd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd58:	f89a 3000 	ldrb.w	r3, [sl]
 800dd5c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd5e:	d015      	beq.n	800dd8c <_vfiprintf_r+0x13c>
 800dd60:	9a07      	ldr	r2, [sp, #28]
 800dd62:	4654      	mov	r4, sl
 800dd64:	2000      	movs	r0, #0
 800dd66:	f04f 0c0a 	mov.w	ip, #10
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd70:	3b30      	subs	r3, #48	; 0x30
 800dd72:	2b09      	cmp	r3, #9
 800dd74:	d94e      	bls.n	800de14 <_vfiprintf_r+0x1c4>
 800dd76:	b1b0      	cbz	r0, 800dda6 <_vfiprintf_r+0x156>
 800dd78:	9207      	str	r2, [sp, #28]
 800dd7a:	e014      	b.n	800dda6 <_vfiprintf_r+0x156>
 800dd7c:	eba0 0308 	sub.w	r3, r0, r8
 800dd80:	fa09 f303 	lsl.w	r3, r9, r3
 800dd84:	4313      	orrs	r3, r2
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	46a2      	mov	sl, r4
 800dd8a:	e7d2      	b.n	800dd32 <_vfiprintf_r+0xe2>
 800dd8c:	9b03      	ldr	r3, [sp, #12]
 800dd8e:	1d19      	adds	r1, r3, #4
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	9103      	str	r1, [sp, #12]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	bfbb      	ittet	lt
 800dd98:	425b      	neglt	r3, r3
 800dd9a:	f042 0202 	orrlt.w	r2, r2, #2
 800dd9e:	9307      	strge	r3, [sp, #28]
 800dda0:	9307      	strlt	r3, [sp, #28]
 800dda2:	bfb8      	it	lt
 800dda4:	9204      	strlt	r2, [sp, #16]
 800dda6:	7823      	ldrb	r3, [r4, #0]
 800dda8:	2b2e      	cmp	r3, #46	; 0x2e
 800ddaa:	d10c      	bne.n	800ddc6 <_vfiprintf_r+0x176>
 800ddac:	7863      	ldrb	r3, [r4, #1]
 800ddae:	2b2a      	cmp	r3, #42	; 0x2a
 800ddb0:	d135      	bne.n	800de1e <_vfiprintf_r+0x1ce>
 800ddb2:	9b03      	ldr	r3, [sp, #12]
 800ddb4:	1d1a      	adds	r2, r3, #4
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	9203      	str	r2, [sp, #12]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bfb8      	it	lt
 800ddbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddc2:	3402      	adds	r4, #2
 800ddc4:	9305      	str	r3, [sp, #20]
 800ddc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800deac <_vfiprintf_r+0x25c>
 800ddca:	7821      	ldrb	r1, [r4, #0]
 800ddcc:	2203      	movs	r2, #3
 800ddce:	4650      	mov	r0, sl
 800ddd0:	f7f2 f9de 	bl	8000190 <memchr>
 800ddd4:	b140      	cbz	r0, 800dde8 <_vfiprintf_r+0x198>
 800ddd6:	2340      	movs	r3, #64	; 0x40
 800ddd8:	eba0 000a 	sub.w	r0, r0, sl
 800dddc:	fa03 f000 	lsl.w	r0, r3, r0
 800dde0:	9b04      	ldr	r3, [sp, #16]
 800dde2:	4303      	orrs	r3, r0
 800dde4:	3401      	adds	r4, #1
 800dde6:	9304      	str	r3, [sp, #16]
 800dde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddec:	482c      	ldr	r0, [pc, #176]	; (800dea0 <_vfiprintf_r+0x250>)
 800ddee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddf2:	2206      	movs	r2, #6
 800ddf4:	f7f2 f9cc 	bl	8000190 <memchr>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	d03f      	beq.n	800de7c <_vfiprintf_r+0x22c>
 800ddfc:	4b29      	ldr	r3, [pc, #164]	; (800dea4 <_vfiprintf_r+0x254>)
 800ddfe:	bb1b      	cbnz	r3, 800de48 <_vfiprintf_r+0x1f8>
 800de00:	9b03      	ldr	r3, [sp, #12]
 800de02:	3307      	adds	r3, #7
 800de04:	f023 0307 	bic.w	r3, r3, #7
 800de08:	3308      	adds	r3, #8
 800de0a:	9303      	str	r3, [sp, #12]
 800de0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de0e:	443b      	add	r3, r7
 800de10:	9309      	str	r3, [sp, #36]	; 0x24
 800de12:	e767      	b.n	800dce4 <_vfiprintf_r+0x94>
 800de14:	fb0c 3202 	mla	r2, ip, r2, r3
 800de18:	460c      	mov	r4, r1
 800de1a:	2001      	movs	r0, #1
 800de1c:	e7a5      	b.n	800dd6a <_vfiprintf_r+0x11a>
 800de1e:	2300      	movs	r3, #0
 800de20:	3401      	adds	r4, #1
 800de22:	9305      	str	r3, [sp, #20]
 800de24:	4619      	mov	r1, r3
 800de26:	f04f 0c0a 	mov.w	ip, #10
 800de2a:	4620      	mov	r0, r4
 800de2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de30:	3a30      	subs	r2, #48	; 0x30
 800de32:	2a09      	cmp	r2, #9
 800de34:	d903      	bls.n	800de3e <_vfiprintf_r+0x1ee>
 800de36:	2b00      	cmp	r3, #0
 800de38:	d0c5      	beq.n	800ddc6 <_vfiprintf_r+0x176>
 800de3a:	9105      	str	r1, [sp, #20]
 800de3c:	e7c3      	b.n	800ddc6 <_vfiprintf_r+0x176>
 800de3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800de42:	4604      	mov	r4, r0
 800de44:	2301      	movs	r3, #1
 800de46:	e7f0      	b.n	800de2a <_vfiprintf_r+0x1da>
 800de48:	ab03      	add	r3, sp, #12
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	462a      	mov	r2, r5
 800de4e:	4b16      	ldr	r3, [pc, #88]	; (800dea8 <_vfiprintf_r+0x258>)
 800de50:	a904      	add	r1, sp, #16
 800de52:	4630      	mov	r0, r6
 800de54:	f3af 8000 	nop.w
 800de58:	4607      	mov	r7, r0
 800de5a:	1c78      	adds	r0, r7, #1
 800de5c:	d1d6      	bne.n	800de0c <_vfiprintf_r+0x1bc>
 800de5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de60:	07d9      	lsls	r1, r3, #31
 800de62:	d405      	bmi.n	800de70 <_vfiprintf_r+0x220>
 800de64:	89ab      	ldrh	r3, [r5, #12]
 800de66:	059a      	lsls	r2, r3, #22
 800de68:	d402      	bmi.n	800de70 <_vfiprintf_r+0x220>
 800de6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de6c:	f7ff fdb7 	bl	800d9de <__retarget_lock_release_recursive>
 800de70:	89ab      	ldrh	r3, [r5, #12]
 800de72:	065b      	lsls	r3, r3, #25
 800de74:	f53f af12 	bmi.w	800dc9c <_vfiprintf_r+0x4c>
 800de78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de7a:	e711      	b.n	800dca0 <_vfiprintf_r+0x50>
 800de7c:	ab03      	add	r3, sp, #12
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	462a      	mov	r2, r5
 800de82:	4b09      	ldr	r3, [pc, #36]	; (800dea8 <_vfiprintf_r+0x258>)
 800de84:	a904      	add	r1, sp, #16
 800de86:	4630      	mov	r0, r6
 800de88:	f000 f880 	bl	800df8c <_printf_i>
 800de8c:	e7e4      	b.n	800de58 <_vfiprintf_r+0x208>
 800de8e:	bf00      	nop
 800de90:	080105c0 	.word	0x080105c0
 800de94:	080105e0 	.word	0x080105e0
 800de98:	080105a0 	.word	0x080105a0
 800de9c:	08010600 	.word	0x08010600
 800dea0:	0801060a 	.word	0x0801060a
 800dea4:	00000000 	.word	0x00000000
 800dea8:	0800dc2b 	.word	0x0800dc2b
 800deac:	08010606 	.word	0x08010606

0800deb0 <_printf_common>:
 800deb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb4:	4616      	mov	r6, r2
 800deb6:	4699      	mov	r9, r3
 800deb8:	688a      	ldr	r2, [r1, #8]
 800deba:	690b      	ldr	r3, [r1, #16]
 800debc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dec0:	4293      	cmp	r3, r2
 800dec2:	bfb8      	it	lt
 800dec4:	4613      	movlt	r3, r2
 800dec6:	6033      	str	r3, [r6, #0]
 800dec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800decc:	4607      	mov	r7, r0
 800dece:	460c      	mov	r4, r1
 800ded0:	b10a      	cbz	r2, 800ded6 <_printf_common+0x26>
 800ded2:	3301      	adds	r3, #1
 800ded4:	6033      	str	r3, [r6, #0]
 800ded6:	6823      	ldr	r3, [r4, #0]
 800ded8:	0699      	lsls	r1, r3, #26
 800deda:	bf42      	ittt	mi
 800dedc:	6833      	ldrmi	r3, [r6, #0]
 800dede:	3302      	addmi	r3, #2
 800dee0:	6033      	strmi	r3, [r6, #0]
 800dee2:	6825      	ldr	r5, [r4, #0]
 800dee4:	f015 0506 	ands.w	r5, r5, #6
 800dee8:	d106      	bne.n	800def8 <_printf_common+0x48>
 800deea:	f104 0a19 	add.w	sl, r4, #25
 800deee:	68e3      	ldr	r3, [r4, #12]
 800def0:	6832      	ldr	r2, [r6, #0]
 800def2:	1a9b      	subs	r3, r3, r2
 800def4:	42ab      	cmp	r3, r5
 800def6:	dc26      	bgt.n	800df46 <_printf_common+0x96>
 800def8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800defc:	1e13      	subs	r3, r2, #0
 800defe:	6822      	ldr	r2, [r4, #0]
 800df00:	bf18      	it	ne
 800df02:	2301      	movne	r3, #1
 800df04:	0692      	lsls	r2, r2, #26
 800df06:	d42b      	bmi.n	800df60 <_printf_common+0xb0>
 800df08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df0c:	4649      	mov	r1, r9
 800df0e:	4638      	mov	r0, r7
 800df10:	47c0      	blx	r8
 800df12:	3001      	adds	r0, #1
 800df14:	d01e      	beq.n	800df54 <_printf_common+0xa4>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	68e5      	ldr	r5, [r4, #12]
 800df1a:	6832      	ldr	r2, [r6, #0]
 800df1c:	f003 0306 	and.w	r3, r3, #6
 800df20:	2b04      	cmp	r3, #4
 800df22:	bf08      	it	eq
 800df24:	1aad      	subeq	r5, r5, r2
 800df26:	68a3      	ldr	r3, [r4, #8]
 800df28:	6922      	ldr	r2, [r4, #16]
 800df2a:	bf0c      	ite	eq
 800df2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df30:	2500      	movne	r5, #0
 800df32:	4293      	cmp	r3, r2
 800df34:	bfc4      	itt	gt
 800df36:	1a9b      	subgt	r3, r3, r2
 800df38:	18ed      	addgt	r5, r5, r3
 800df3a:	2600      	movs	r6, #0
 800df3c:	341a      	adds	r4, #26
 800df3e:	42b5      	cmp	r5, r6
 800df40:	d11a      	bne.n	800df78 <_printf_common+0xc8>
 800df42:	2000      	movs	r0, #0
 800df44:	e008      	b.n	800df58 <_printf_common+0xa8>
 800df46:	2301      	movs	r3, #1
 800df48:	4652      	mov	r2, sl
 800df4a:	4649      	mov	r1, r9
 800df4c:	4638      	mov	r0, r7
 800df4e:	47c0      	blx	r8
 800df50:	3001      	adds	r0, #1
 800df52:	d103      	bne.n	800df5c <_printf_common+0xac>
 800df54:	f04f 30ff 	mov.w	r0, #4294967295
 800df58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df5c:	3501      	adds	r5, #1
 800df5e:	e7c6      	b.n	800deee <_printf_common+0x3e>
 800df60:	18e1      	adds	r1, r4, r3
 800df62:	1c5a      	adds	r2, r3, #1
 800df64:	2030      	movs	r0, #48	; 0x30
 800df66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df6a:	4422      	add	r2, r4
 800df6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df74:	3302      	adds	r3, #2
 800df76:	e7c7      	b.n	800df08 <_printf_common+0x58>
 800df78:	2301      	movs	r3, #1
 800df7a:	4622      	mov	r2, r4
 800df7c:	4649      	mov	r1, r9
 800df7e:	4638      	mov	r0, r7
 800df80:	47c0      	blx	r8
 800df82:	3001      	adds	r0, #1
 800df84:	d0e6      	beq.n	800df54 <_printf_common+0xa4>
 800df86:	3601      	adds	r6, #1
 800df88:	e7d9      	b.n	800df3e <_printf_common+0x8e>
	...

0800df8c <_printf_i>:
 800df8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df90:	460c      	mov	r4, r1
 800df92:	4691      	mov	r9, r2
 800df94:	7e27      	ldrb	r7, [r4, #24]
 800df96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df98:	2f78      	cmp	r7, #120	; 0x78
 800df9a:	4680      	mov	r8, r0
 800df9c:	469a      	mov	sl, r3
 800df9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfa2:	d807      	bhi.n	800dfb4 <_printf_i+0x28>
 800dfa4:	2f62      	cmp	r7, #98	; 0x62
 800dfa6:	d80a      	bhi.n	800dfbe <_printf_i+0x32>
 800dfa8:	2f00      	cmp	r7, #0
 800dfaa:	f000 80d8 	beq.w	800e15e <_printf_i+0x1d2>
 800dfae:	2f58      	cmp	r7, #88	; 0x58
 800dfb0:	f000 80a3 	beq.w	800e0fa <_printf_i+0x16e>
 800dfb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dfb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfbc:	e03a      	b.n	800e034 <_printf_i+0xa8>
 800dfbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfc2:	2b15      	cmp	r3, #21
 800dfc4:	d8f6      	bhi.n	800dfb4 <_printf_i+0x28>
 800dfc6:	a001      	add	r0, pc, #4	; (adr r0, 800dfcc <_printf_i+0x40>)
 800dfc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dfcc:	0800e025 	.word	0x0800e025
 800dfd0:	0800e039 	.word	0x0800e039
 800dfd4:	0800dfb5 	.word	0x0800dfb5
 800dfd8:	0800dfb5 	.word	0x0800dfb5
 800dfdc:	0800dfb5 	.word	0x0800dfb5
 800dfe0:	0800dfb5 	.word	0x0800dfb5
 800dfe4:	0800e039 	.word	0x0800e039
 800dfe8:	0800dfb5 	.word	0x0800dfb5
 800dfec:	0800dfb5 	.word	0x0800dfb5
 800dff0:	0800dfb5 	.word	0x0800dfb5
 800dff4:	0800dfb5 	.word	0x0800dfb5
 800dff8:	0800e145 	.word	0x0800e145
 800dffc:	0800e069 	.word	0x0800e069
 800e000:	0800e127 	.word	0x0800e127
 800e004:	0800dfb5 	.word	0x0800dfb5
 800e008:	0800dfb5 	.word	0x0800dfb5
 800e00c:	0800e167 	.word	0x0800e167
 800e010:	0800dfb5 	.word	0x0800dfb5
 800e014:	0800e069 	.word	0x0800e069
 800e018:	0800dfb5 	.word	0x0800dfb5
 800e01c:	0800dfb5 	.word	0x0800dfb5
 800e020:	0800e12f 	.word	0x0800e12f
 800e024:	680b      	ldr	r3, [r1, #0]
 800e026:	1d1a      	adds	r2, r3, #4
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	600a      	str	r2, [r1, #0]
 800e02c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e034:	2301      	movs	r3, #1
 800e036:	e0a3      	b.n	800e180 <_printf_i+0x1f4>
 800e038:	6825      	ldr	r5, [r4, #0]
 800e03a:	6808      	ldr	r0, [r1, #0]
 800e03c:	062e      	lsls	r6, r5, #24
 800e03e:	f100 0304 	add.w	r3, r0, #4
 800e042:	d50a      	bpl.n	800e05a <_printf_i+0xce>
 800e044:	6805      	ldr	r5, [r0, #0]
 800e046:	600b      	str	r3, [r1, #0]
 800e048:	2d00      	cmp	r5, #0
 800e04a:	da03      	bge.n	800e054 <_printf_i+0xc8>
 800e04c:	232d      	movs	r3, #45	; 0x2d
 800e04e:	426d      	negs	r5, r5
 800e050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e054:	485e      	ldr	r0, [pc, #376]	; (800e1d0 <_printf_i+0x244>)
 800e056:	230a      	movs	r3, #10
 800e058:	e019      	b.n	800e08e <_printf_i+0x102>
 800e05a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e05e:	6805      	ldr	r5, [r0, #0]
 800e060:	600b      	str	r3, [r1, #0]
 800e062:	bf18      	it	ne
 800e064:	b22d      	sxthne	r5, r5
 800e066:	e7ef      	b.n	800e048 <_printf_i+0xbc>
 800e068:	680b      	ldr	r3, [r1, #0]
 800e06a:	6825      	ldr	r5, [r4, #0]
 800e06c:	1d18      	adds	r0, r3, #4
 800e06e:	6008      	str	r0, [r1, #0]
 800e070:	0628      	lsls	r0, r5, #24
 800e072:	d501      	bpl.n	800e078 <_printf_i+0xec>
 800e074:	681d      	ldr	r5, [r3, #0]
 800e076:	e002      	b.n	800e07e <_printf_i+0xf2>
 800e078:	0669      	lsls	r1, r5, #25
 800e07a:	d5fb      	bpl.n	800e074 <_printf_i+0xe8>
 800e07c:	881d      	ldrh	r5, [r3, #0]
 800e07e:	4854      	ldr	r0, [pc, #336]	; (800e1d0 <_printf_i+0x244>)
 800e080:	2f6f      	cmp	r7, #111	; 0x6f
 800e082:	bf0c      	ite	eq
 800e084:	2308      	moveq	r3, #8
 800e086:	230a      	movne	r3, #10
 800e088:	2100      	movs	r1, #0
 800e08a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e08e:	6866      	ldr	r6, [r4, #4]
 800e090:	60a6      	str	r6, [r4, #8]
 800e092:	2e00      	cmp	r6, #0
 800e094:	bfa2      	ittt	ge
 800e096:	6821      	ldrge	r1, [r4, #0]
 800e098:	f021 0104 	bicge.w	r1, r1, #4
 800e09c:	6021      	strge	r1, [r4, #0]
 800e09e:	b90d      	cbnz	r5, 800e0a4 <_printf_i+0x118>
 800e0a0:	2e00      	cmp	r6, #0
 800e0a2:	d04d      	beq.n	800e140 <_printf_i+0x1b4>
 800e0a4:	4616      	mov	r6, r2
 800e0a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0aa:	fb03 5711 	mls	r7, r3, r1, r5
 800e0ae:	5dc7      	ldrb	r7, [r0, r7]
 800e0b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0b4:	462f      	mov	r7, r5
 800e0b6:	42bb      	cmp	r3, r7
 800e0b8:	460d      	mov	r5, r1
 800e0ba:	d9f4      	bls.n	800e0a6 <_printf_i+0x11a>
 800e0bc:	2b08      	cmp	r3, #8
 800e0be:	d10b      	bne.n	800e0d8 <_printf_i+0x14c>
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	07df      	lsls	r7, r3, #31
 800e0c4:	d508      	bpl.n	800e0d8 <_printf_i+0x14c>
 800e0c6:	6923      	ldr	r3, [r4, #16]
 800e0c8:	6861      	ldr	r1, [r4, #4]
 800e0ca:	4299      	cmp	r1, r3
 800e0cc:	bfde      	ittt	le
 800e0ce:	2330      	movle	r3, #48	; 0x30
 800e0d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0d8:	1b92      	subs	r2, r2, r6
 800e0da:	6122      	str	r2, [r4, #16]
 800e0dc:	f8cd a000 	str.w	sl, [sp]
 800e0e0:	464b      	mov	r3, r9
 800e0e2:	aa03      	add	r2, sp, #12
 800e0e4:	4621      	mov	r1, r4
 800e0e6:	4640      	mov	r0, r8
 800e0e8:	f7ff fee2 	bl	800deb0 <_printf_common>
 800e0ec:	3001      	adds	r0, #1
 800e0ee:	d14c      	bne.n	800e18a <_printf_i+0x1fe>
 800e0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f4:	b004      	add	sp, #16
 800e0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0fa:	4835      	ldr	r0, [pc, #212]	; (800e1d0 <_printf_i+0x244>)
 800e0fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	680e      	ldr	r6, [r1, #0]
 800e104:	061f      	lsls	r7, r3, #24
 800e106:	f856 5b04 	ldr.w	r5, [r6], #4
 800e10a:	600e      	str	r6, [r1, #0]
 800e10c:	d514      	bpl.n	800e138 <_printf_i+0x1ac>
 800e10e:	07d9      	lsls	r1, r3, #31
 800e110:	bf44      	itt	mi
 800e112:	f043 0320 	orrmi.w	r3, r3, #32
 800e116:	6023      	strmi	r3, [r4, #0]
 800e118:	b91d      	cbnz	r5, 800e122 <_printf_i+0x196>
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	f023 0320 	bic.w	r3, r3, #32
 800e120:	6023      	str	r3, [r4, #0]
 800e122:	2310      	movs	r3, #16
 800e124:	e7b0      	b.n	800e088 <_printf_i+0xfc>
 800e126:	6823      	ldr	r3, [r4, #0]
 800e128:	f043 0320 	orr.w	r3, r3, #32
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	2378      	movs	r3, #120	; 0x78
 800e130:	4828      	ldr	r0, [pc, #160]	; (800e1d4 <_printf_i+0x248>)
 800e132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e136:	e7e3      	b.n	800e100 <_printf_i+0x174>
 800e138:	065e      	lsls	r6, r3, #25
 800e13a:	bf48      	it	mi
 800e13c:	b2ad      	uxthmi	r5, r5
 800e13e:	e7e6      	b.n	800e10e <_printf_i+0x182>
 800e140:	4616      	mov	r6, r2
 800e142:	e7bb      	b.n	800e0bc <_printf_i+0x130>
 800e144:	680b      	ldr	r3, [r1, #0]
 800e146:	6826      	ldr	r6, [r4, #0]
 800e148:	6960      	ldr	r0, [r4, #20]
 800e14a:	1d1d      	adds	r5, r3, #4
 800e14c:	600d      	str	r5, [r1, #0]
 800e14e:	0635      	lsls	r5, r6, #24
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	d501      	bpl.n	800e158 <_printf_i+0x1cc>
 800e154:	6018      	str	r0, [r3, #0]
 800e156:	e002      	b.n	800e15e <_printf_i+0x1d2>
 800e158:	0671      	lsls	r1, r6, #25
 800e15a:	d5fb      	bpl.n	800e154 <_printf_i+0x1c8>
 800e15c:	8018      	strh	r0, [r3, #0]
 800e15e:	2300      	movs	r3, #0
 800e160:	6123      	str	r3, [r4, #16]
 800e162:	4616      	mov	r6, r2
 800e164:	e7ba      	b.n	800e0dc <_printf_i+0x150>
 800e166:	680b      	ldr	r3, [r1, #0]
 800e168:	1d1a      	adds	r2, r3, #4
 800e16a:	600a      	str	r2, [r1, #0]
 800e16c:	681e      	ldr	r6, [r3, #0]
 800e16e:	6862      	ldr	r2, [r4, #4]
 800e170:	2100      	movs	r1, #0
 800e172:	4630      	mov	r0, r6
 800e174:	f7f2 f80c 	bl	8000190 <memchr>
 800e178:	b108      	cbz	r0, 800e17e <_printf_i+0x1f2>
 800e17a:	1b80      	subs	r0, r0, r6
 800e17c:	6060      	str	r0, [r4, #4]
 800e17e:	6863      	ldr	r3, [r4, #4]
 800e180:	6123      	str	r3, [r4, #16]
 800e182:	2300      	movs	r3, #0
 800e184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e188:	e7a8      	b.n	800e0dc <_printf_i+0x150>
 800e18a:	6923      	ldr	r3, [r4, #16]
 800e18c:	4632      	mov	r2, r6
 800e18e:	4649      	mov	r1, r9
 800e190:	4640      	mov	r0, r8
 800e192:	47d0      	blx	sl
 800e194:	3001      	adds	r0, #1
 800e196:	d0ab      	beq.n	800e0f0 <_printf_i+0x164>
 800e198:	6823      	ldr	r3, [r4, #0]
 800e19a:	079b      	lsls	r3, r3, #30
 800e19c:	d413      	bmi.n	800e1c6 <_printf_i+0x23a>
 800e19e:	68e0      	ldr	r0, [r4, #12]
 800e1a0:	9b03      	ldr	r3, [sp, #12]
 800e1a2:	4298      	cmp	r0, r3
 800e1a4:	bfb8      	it	lt
 800e1a6:	4618      	movlt	r0, r3
 800e1a8:	e7a4      	b.n	800e0f4 <_printf_i+0x168>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	4632      	mov	r2, r6
 800e1ae:	4649      	mov	r1, r9
 800e1b0:	4640      	mov	r0, r8
 800e1b2:	47d0      	blx	sl
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	d09b      	beq.n	800e0f0 <_printf_i+0x164>
 800e1b8:	3501      	adds	r5, #1
 800e1ba:	68e3      	ldr	r3, [r4, #12]
 800e1bc:	9903      	ldr	r1, [sp, #12]
 800e1be:	1a5b      	subs	r3, r3, r1
 800e1c0:	42ab      	cmp	r3, r5
 800e1c2:	dcf2      	bgt.n	800e1aa <_printf_i+0x21e>
 800e1c4:	e7eb      	b.n	800e19e <_printf_i+0x212>
 800e1c6:	2500      	movs	r5, #0
 800e1c8:	f104 0619 	add.w	r6, r4, #25
 800e1cc:	e7f5      	b.n	800e1ba <_printf_i+0x22e>
 800e1ce:	bf00      	nop
 800e1d0:	08010611 	.word	0x08010611
 800e1d4:	08010622 	.word	0x08010622

0800e1d8 <_sbrk_r>:
 800e1d8:	b538      	push	{r3, r4, r5, lr}
 800e1da:	4d06      	ldr	r5, [pc, #24]	; (800e1f4 <_sbrk_r+0x1c>)
 800e1dc:	2300      	movs	r3, #0
 800e1de:	4604      	mov	r4, r0
 800e1e0:	4608      	mov	r0, r1
 800e1e2:	602b      	str	r3, [r5, #0]
 800e1e4:	f7f4 fe4c 	bl	8002e80 <_sbrk>
 800e1e8:	1c43      	adds	r3, r0, #1
 800e1ea:	d102      	bne.n	800e1f2 <_sbrk_r+0x1a>
 800e1ec:	682b      	ldr	r3, [r5, #0]
 800e1ee:	b103      	cbz	r3, 800e1f2 <_sbrk_r+0x1a>
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	bd38      	pop	{r3, r4, r5, pc}
 800e1f4:	20000714 	.word	0x20000714

0800e1f8 <__sread>:
 800e1f8:	b510      	push	{r4, lr}
 800e1fa:	460c      	mov	r4, r1
 800e1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e200:	f000 f8ac 	bl	800e35c <_read_r>
 800e204:	2800      	cmp	r0, #0
 800e206:	bfab      	itete	ge
 800e208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e20a:	89a3      	ldrhlt	r3, [r4, #12]
 800e20c:	181b      	addge	r3, r3, r0
 800e20e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e212:	bfac      	ite	ge
 800e214:	6563      	strge	r3, [r4, #84]	; 0x54
 800e216:	81a3      	strhlt	r3, [r4, #12]
 800e218:	bd10      	pop	{r4, pc}

0800e21a <__swrite>:
 800e21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e21e:	461f      	mov	r7, r3
 800e220:	898b      	ldrh	r3, [r1, #12]
 800e222:	05db      	lsls	r3, r3, #23
 800e224:	4605      	mov	r5, r0
 800e226:	460c      	mov	r4, r1
 800e228:	4616      	mov	r6, r2
 800e22a:	d505      	bpl.n	800e238 <__swrite+0x1e>
 800e22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e230:	2302      	movs	r3, #2
 800e232:	2200      	movs	r2, #0
 800e234:	f000 f874 	bl	800e320 <_lseek_r>
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e23e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e242:	81a3      	strh	r3, [r4, #12]
 800e244:	4632      	mov	r2, r6
 800e246:	463b      	mov	r3, r7
 800e248:	4628      	mov	r0, r5
 800e24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e24e:	f000 b823 	b.w	800e298 <_write_r>

0800e252 <__sseek>:
 800e252:	b510      	push	{r4, lr}
 800e254:	460c      	mov	r4, r1
 800e256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e25a:	f000 f861 	bl	800e320 <_lseek_r>
 800e25e:	1c43      	adds	r3, r0, #1
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	bf15      	itete	ne
 800e264:	6560      	strne	r0, [r4, #84]	; 0x54
 800e266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e26a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e26e:	81a3      	strheq	r3, [r4, #12]
 800e270:	bf18      	it	ne
 800e272:	81a3      	strhne	r3, [r4, #12]
 800e274:	bd10      	pop	{r4, pc}

0800e276 <__sclose>:
 800e276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e27a:	f000 b81f 	b.w	800e2bc <_close_r>

0800e27e <strchr>:
 800e27e:	b2c9      	uxtb	r1, r1
 800e280:	4603      	mov	r3, r0
 800e282:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e286:	b11a      	cbz	r2, 800e290 <strchr+0x12>
 800e288:	428a      	cmp	r2, r1
 800e28a:	d1f9      	bne.n	800e280 <strchr+0x2>
 800e28c:	4618      	mov	r0, r3
 800e28e:	4770      	bx	lr
 800e290:	2900      	cmp	r1, #0
 800e292:	bf18      	it	ne
 800e294:	2300      	movne	r3, #0
 800e296:	e7f9      	b.n	800e28c <strchr+0xe>

0800e298 <_write_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	4d07      	ldr	r5, [pc, #28]	; (800e2b8 <_write_r+0x20>)
 800e29c:	4604      	mov	r4, r0
 800e29e:	4608      	mov	r0, r1
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	602a      	str	r2, [r5, #0]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	f7fb fcdc 	bl	8009c64 <_write>
 800e2ac:	1c43      	adds	r3, r0, #1
 800e2ae:	d102      	bne.n	800e2b6 <_write_r+0x1e>
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	b103      	cbz	r3, 800e2b6 <_write_r+0x1e>
 800e2b4:	6023      	str	r3, [r4, #0]
 800e2b6:	bd38      	pop	{r3, r4, r5, pc}
 800e2b8:	20000714 	.word	0x20000714

0800e2bc <_close_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4d06      	ldr	r5, [pc, #24]	; (800e2d8 <_close_r+0x1c>)
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	4608      	mov	r0, r1
 800e2c6:	602b      	str	r3, [r5, #0]
 800e2c8:	f7f4 fda5 	bl	8002e16 <_close>
 800e2cc:	1c43      	adds	r3, r0, #1
 800e2ce:	d102      	bne.n	800e2d6 <_close_r+0x1a>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	b103      	cbz	r3, 800e2d6 <_close_r+0x1a>
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	20000714 	.word	0x20000714

0800e2dc <_fstat_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4d07      	ldr	r5, [pc, #28]	; (800e2fc <_fstat_r+0x20>)
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	4608      	mov	r0, r1
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	602b      	str	r3, [r5, #0]
 800e2ea:	f7f4 fda0 	bl	8002e2e <_fstat>
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	d102      	bne.n	800e2f8 <_fstat_r+0x1c>
 800e2f2:	682b      	ldr	r3, [r5, #0]
 800e2f4:	b103      	cbz	r3, 800e2f8 <_fstat_r+0x1c>
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	bd38      	pop	{r3, r4, r5, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20000714 	.word	0x20000714

0800e300 <_isatty_r>:
 800e300:	b538      	push	{r3, r4, r5, lr}
 800e302:	4d06      	ldr	r5, [pc, #24]	; (800e31c <_isatty_r+0x1c>)
 800e304:	2300      	movs	r3, #0
 800e306:	4604      	mov	r4, r0
 800e308:	4608      	mov	r0, r1
 800e30a:	602b      	str	r3, [r5, #0]
 800e30c:	f7f4 fd9f 	bl	8002e4e <_isatty>
 800e310:	1c43      	adds	r3, r0, #1
 800e312:	d102      	bne.n	800e31a <_isatty_r+0x1a>
 800e314:	682b      	ldr	r3, [r5, #0]
 800e316:	b103      	cbz	r3, 800e31a <_isatty_r+0x1a>
 800e318:	6023      	str	r3, [r4, #0]
 800e31a:	bd38      	pop	{r3, r4, r5, pc}
 800e31c:	20000714 	.word	0x20000714

0800e320 <_lseek_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	4d07      	ldr	r5, [pc, #28]	; (800e340 <_lseek_r+0x20>)
 800e324:	4604      	mov	r4, r0
 800e326:	4608      	mov	r0, r1
 800e328:	4611      	mov	r1, r2
 800e32a:	2200      	movs	r2, #0
 800e32c:	602a      	str	r2, [r5, #0]
 800e32e:	461a      	mov	r2, r3
 800e330:	f7f4 fd98 	bl	8002e64 <_lseek>
 800e334:	1c43      	adds	r3, r0, #1
 800e336:	d102      	bne.n	800e33e <_lseek_r+0x1e>
 800e338:	682b      	ldr	r3, [r5, #0]
 800e33a:	b103      	cbz	r3, 800e33e <_lseek_r+0x1e>
 800e33c:	6023      	str	r3, [r4, #0]
 800e33e:	bd38      	pop	{r3, r4, r5, pc}
 800e340:	20000714 	.word	0x20000714

0800e344 <__malloc_lock>:
 800e344:	4801      	ldr	r0, [pc, #4]	; (800e34c <__malloc_lock+0x8>)
 800e346:	f7ff bb49 	b.w	800d9dc <__retarget_lock_acquire_recursive>
 800e34a:	bf00      	nop
 800e34c:	2000070c 	.word	0x2000070c

0800e350 <__malloc_unlock>:
 800e350:	4801      	ldr	r0, [pc, #4]	; (800e358 <__malloc_unlock+0x8>)
 800e352:	f7ff bb44 	b.w	800d9de <__retarget_lock_release_recursive>
 800e356:	bf00      	nop
 800e358:	2000070c 	.word	0x2000070c

0800e35c <_read_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d07      	ldr	r5, [pc, #28]	; (800e37c <_read_r+0x20>)
 800e360:	4604      	mov	r4, r0
 800e362:	4608      	mov	r0, r1
 800e364:	4611      	mov	r1, r2
 800e366:	2200      	movs	r2, #0
 800e368:	602a      	str	r2, [r5, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	f7f4 fd36 	bl	8002ddc <_read>
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d102      	bne.n	800e37a <_read_r+0x1e>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b103      	cbz	r3, 800e37a <_read_r+0x1e>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	bd38      	pop	{r3, r4, r5, pc}
 800e37c:	20000714 	.word	0x20000714

0800e380 <_init>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	bf00      	nop
 800e384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e386:	bc08      	pop	{r3}
 800e388:	469e      	mov	lr, r3
 800e38a:	4770      	bx	lr

0800e38c <_fini>:
 800e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38e:	bf00      	nop
 800e390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e392:	bc08      	pop	{r3}
 800e394:	469e      	mov	lr, r3
 800e396:	4770      	bx	lr
